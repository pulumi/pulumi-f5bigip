# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class Provision(pulumi.CustomResource):
    cpu_ratio: pulumi.Output[float]
    """
    cpu Ratio
    """
    disk_ratio: pulumi.Output[float]
    """
    disk Ratio
    """
    full_path: pulumi.Output[str]
    """
    path
    """
    level: pulumi.Output[str]
    """
    what level nominal or dedicated
    """
    memory_ratio: pulumi.Output[float]
    """
    memory Ratio
    """
    name: pulumi.Output[str]
    """
    Name of the module to be provisioned
    """
    def __init__(__self__, resource_name, opts=None, cpu_ratio=None, disk_ratio=None, full_path=None, level=None, memory_ratio=None, name=None, __props__=None, __name__=None, __opts__=None):
        """
        `sys.Provision` provides details bout how to enable "ilx", "asm" "apm" resource on BIG-IP
        ## Example Usage



        ```python
        import pulumi
        import pulumi_f5bigip as f5bigip

        test_provision = f5bigip.sys.Provision("test-provision",
            cpu_ratio=0,
            disk_ratio=0,
            full_path="asm",
            level="none",
            memory_ratio=0,
            name="TEST_ASM_PROVISION_NAME")
        ```


        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[float] cpu_ratio: cpu Ratio
        :param pulumi.Input[float] disk_ratio: disk Ratio
        :param pulumi.Input[str] full_path: path
        :param pulumi.Input[str] level: what level nominal or dedicated
        :param pulumi.Input[float] memory_ratio: memory Ratio
        :param pulumi.Input[str] name: Name of the module to be provisioned
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['cpu_ratio'] = cpu_ratio
            __props__['disk_ratio'] = disk_ratio
            __props__['full_path'] = full_path
            __props__['level'] = level
            __props__['memory_ratio'] = memory_ratio
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
        super(Provision, __self__).__init__(
            'f5bigip:sys/provision:Provision',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, cpu_ratio=None, disk_ratio=None, full_path=None, level=None, memory_ratio=None, name=None):
        """
        Get an existing Provision resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[float] cpu_ratio: cpu Ratio
        :param pulumi.Input[float] disk_ratio: disk Ratio
        :param pulumi.Input[str] full_path: path
        :param pulumi.Input[str] level: what level nominal or dedicated
        :param pulumi.Input[float] memory_ratio: memory Ratio
        :param pulumi.Input[str] name: Name of the module to be provisioned
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["cpu_ratio"] = cpu_ratio
        __props__["disk_ratio"] = disk_ratio
        __props__["full_path"] = full_path
        __props__["level"] = level
        __props__["memory_ratio"] = memory_ratio
        __props__["name"] = name
        return Provision(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

