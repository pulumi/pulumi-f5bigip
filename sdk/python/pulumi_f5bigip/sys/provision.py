# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from .. import utilities, tables

class Provision(pulumi.CustomResource):
    cpu_ratio: pulumi.Output[float]
    disk_ratio: pulumi.Output[float]
    full_path: pulumi.Output[str]
    level: pulumi.Output[str]
    memory_ratio: pulumi.Output[float]
    name: pulumi.Output[str]
    def __init__(__self__, resource_name, opts=None, cpu_ratio=None, disk_ratio=None, full_path=None, level=None, memory_ratio=None, name=None, __name__=None, __opts__=None):
        """
        `bigip_sys_provision` provides details bout how to enable "ilx", "asm" "apm" resource on BIG-IP
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['cpu_ratio'] = cpu_ratio

        __props__['disk_ratio'] = disk_ratio

        __props__['full_path'] = full_path

        __props__['level'] = level

        __props__['memory_ratio'] = memory_ratio

        if name is None:
            raise TypeError("Missing required property 'name'")
        __props__['name'] = name

        super(Provision, __self__).__init__(
            'f5bigip:sys/provision:Provision',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

