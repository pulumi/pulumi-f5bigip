# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables

__all__ = ['BigIpLicense']


class BigIpLicense(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 command: Optional[pulumi.Input[str]] = None,
                 registration_key: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a BigIpLicense resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] command: Tmsh command to execute tmsh commands like install
        :param pulumi.Input[str] registration_key: A unique Key F5 provides for Licensing BIG-IP
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if command is None and not opts.urn:
                raise TypeError("Missing required property 'command'")
            __props__['command'] = command
            if registration_key is None and not opts.urn:
                raise TypeError("Missing required property 'registration_key'")
            __props__['registration_key'] = registration_key
        super(BigIpLicense, __self__).__init__(
            'f5bigip:sys/bigIpLicense:BigIpLicense',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            command: Optional[pulumi.Input[str]] = None,
            registration_key: Optional[pulumi.Input[str]] = None) -> 'BigIpLicense':
        """
        Get an existing BigIpLicense resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] command: Tmsh command to execute tmsh commands like install
        :param pulumi.Input[str] registration_key: A unique Key F5 provides for Licensing BIG-IP
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["command"] = command
        __props__["registration_key"] = registration_key
        return BigIpLicense(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def command(self) -> pulumi.Output[str]:
        """
        Tmsh command to execute tmsh commands like install
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter(name="registrationKey")
    def registration_key(self) -> pulumi.Output[str]:
        """
        A unique Key F5 provides for Licensing BIG-IP
        """
        return pulumi.get(self, "registration_key")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

