# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class SnmpTraps(pulumi.CustomResource):
    auth_passwordencrypted: pulumi.Output[str]
    """
    Encrypted password
    """
    auth_protocol: pulumi.Output[str]
    """
    Specifies the protocol used to authenticate the user.
    """
    community: pulumi.Output[str]
    """
    Specifies the community string used for this trap.
    """
    description: pulumi.Output[str]
    """
    The port that the trap will be sent to.
    """
    engine_id: pulumi.Output[str]
    """
    Specifies the authoritative security engine for SNMPv3.
    """
    host: pulumi.Output[str]
    """
    The host the trap will be sent to.
    """
    name: pulumi.Output[str]
    """
    Name of the snmp trap.
    """
    port: pulumi.Output[float]
    """
    User defined description.
    """
    privacy_password: pulumi.Output[str]
    """
    Specifies the clear text password used to encrypt traffic. This field will not be displayed.
    """
    privacy_password_encrypted: pulumi.Output[str]
    """
    Specifies the encrypted password used to encrypt traffic.
    """
    privacy_protocol: pulumi.Output[str]
    """
    Specifies the protocol used to encrypt traffic.
    """
    security_level: pulumi.Output[str]
    """
    Specifies whether or not traffic is encrypted and whether or not authentication is required.
    """
    security_name: pulumi.Output[str]
    """
    Security name used in conjunction with SNMPv3.
    """
    version: pulumi.Output[str]
    """
    SNMP version used for sending the trap.
    """
    def __init__(__self__, resource_name, opts=None, auth_passwordencrypted=None, auth_protocol=None, community=None, description=None, engine_id=None, host=None, name=None, port=None, privacy_password=None, privacy_password_encrypted=None, privacy_protocol=None, security_level=None, security_name=None, version=None, __props__=None, __name__=None, __opts__=None):
        """
        `sys.SnmpTraps` provides details bout how to enable snmp_traps resource on BIG-IP
        ## Example Usage



        ```python
        import pulumi
        import pulumi_f5bigip as f5bigip

        snmp_traps = f5bigip.sys.SnmpTraps("snmpTraps",
            community="f5community",
            description="Setup snmp traps",
            host="195.10.10.1",
            name="snmptraps",
            port=111)
        ```


        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auth_passwordencrypted: Encrypted password
        :param pulumi.Input[str] auth_protocol: Specifies the protocol used to authenticate the user.
        :param pulumi.Input[str] community: Specifies the community string used for this trap.
        :param pulumi.Input[str] description: The port that the trap will be sent to.
        :param pulumi.Input[str] engine_id: Specifies the authoritative security engine for SNMPv3.
        :param pulumi.Input[str] host: The host the trap will be sent to.
        :param pulumi.Input[str] name: Name of the snmp trap.
        :param pulumi.Input[float] port: User defined description.
        :param pulumi.Input[str] privacy_password: Specifies the clear text password used to encrypt traffic. This field will not be displayed.
        :param pulumi.Input[str] privacy_password_encrypted: Specifies the encrypted password used to encrypt traffic.
        :param pulumi.Input[str] privacy_protocol: Specifies the protocol used to encrypt traffic.
        :param pulumi.Input[str] security_level: Specifies whether or not traffic is encrypted and whether or not authentication is required.
        :param pulumi.Input[str] security_name: Security name used in conjunction with SNMPv3.
        :param pulumi.Input[str] version: SNMP version used for sending the trap.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['auth_passwordencrypted'] = auth_passwordencrypted
            __props__['auth_protocol'] = auth_protocol
            __props__['community'] = community
            __props__['description'] = description
            __props__['engine_id'] = engine_id
            __props__['host'] = host
            __props__['name'] = name
            __props__['port'] = port
            __props__['privacy_password'] = privacy_password
            __props__['privacy_password_encrypted'] = privacy_password_encrypted
            __props__['privacy_protocol'] = privacy_protocol
            __props__['security_level'] = security_level
            __props__['security_name'] = security_name
            __props__['version'] = version
        super(SnmpTraps, __self__).__init__(
            'f5bigip:sys/snmpTraps:SnmpTraps',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, auth_passwordencrypted=None, auth_protocol=None, community=None, description=None, engine_id=None, host=None, name=None, port=None, privacy_password=None, privacy_password_encrypted=None, privacy_protocol=None, security_level=None, security_name=None, version=None):
        """
        Get an existing SnmpTraps resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auth_passwordencrypted: Encrypted password
        :param pulumi.Input[str] auth_protocol: Specifies the protocol used to authenticate the user.
        :param pulumi.Input[str] community: Specifies the community string used for this trap.
        :param pulumi.Input[str] description: The port that the trap will be sent to.
        :param pulumi.Input[str] engine_id: Specifies the authoritative security engine for SNMPv3.
        :param pulumi.Input[str] host: The host the trap will be sent to.
        :param pulumi.Input[str] name: Name of the snmp trap.
        :param pulumi.Input[float] port: User defined description.
        :param pulumi.Input[str] privacy_password: Specifies the clear text password used to encrypt traffic. This field will not be displayed.
        :param pulumi.Input[str] privacy_password_encrypted: Specifies the encrypted password used to encrypt traffic.
        :param pulumi.Input[str] privacy_protocol: Specifies the protocol used to encrypt traffic.
        :param pulumi.Input[str] security_level: Specifies whether or not traffic is encrypted and whether or not authentication is required.
        :param pulumi.Input[str] security_name: Security name used in conjunction with SNMPv3.
        :param pulumi.Input[str] version: SNMP version used for sending the trap.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["auth_passwordencrypted"] = auth_passwordencrypted
        __props__["auth_protocol"] = auth_protocol
        __props__["community"] = community
        __props__["description"] = description
        __props__["engine_id"] = engine_id
        __props__["host"] = host
        __props__["name"] = name
        __props__["port"] = port
        __props__["privacy_password"] = privacy_password
        __props__["privacy_password_encrypted"] = privacy_password_encrypted
        __props__["privacy_protocol"] = privacy_protocol
        __props__["security_level"] = security_level
        __props__["security_name"] = security_name
        __props__["version"] = version
        return SnmpTraps(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

