# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'IAppListArgs',
    'IAppMetadataArgs',
    'IAppTableArgs',
    'IAppTableRowArgs',
    'IAppVariableArgs',
]

@pulumi.input_type
class IAppListArgs:
    def __init__(__self__, *,
                 encrypted: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        IAppListArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            encrypted=encrypted,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             encrypted: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if encrypted is not None:
            _setter("encrypted", encrypted)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def encrypted(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encrypted")

    @encrypted.setter
    def encrypted(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encrypted", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IAppMetadataArgs:
    def __init__(__self__, *,
                 persists: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        IAppMetadataArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            persists=persists,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             persists: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if persists is not None:
            _setter("persists", persists)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def persists(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "persists")

    @persists.setter
    def persists(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "persists", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IAppTableArgs:
    def __init__(__self__, *,
                 column_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 encrypted_columns: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rows: Optional[pulumi.Input[Sequence[pulumi.Input['IAppTableRowArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the iApp.
        """
        IAppTableArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_names=column_names,
            encrypted_columns=encrypted_columns,
            name=name,
            rows=rows,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             encrypted_columns: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             rows: Optional[pulumi.Input[Sequence[pulumi.Input['IAppTableRowArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if column_names is not None:
            _setter("column_names", column_names)
        if encrypted_columns is not None:
            _setter("encrypted_columns", encrypted_columns)
        if name is not None:
            _setter("name", name)
        if rows is not None:
            _setter("rows", rows)

    @property
    @pulumi.getter(name="columnNames")
    def column_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "column_names")

    @column_names.setter
    def column_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "column_names", value)

    @property
    @pulumi.getter(name="encryptedColumns")
    def encrypted_columns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encrypted_columns")

    @encrypted_columns.setter
    def encrypted_columns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encrypted_columns", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the iApp.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def rows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IAppTableRowArgs']]]]:
        return pulumi.get(self, "rows")

    @rows.setter
    def rows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IAppTableRowArgs']]]]):
        pulumi.set(self, "rows", value)


@pulumi.input_type
class IAppTableRowArgs:
    def __init__(__self__, *,
                 rows: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        IAppTableRowArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rows=rows,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rows: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if rows is not None:
            _setter("rows", rows)

    @property
    @pulumi.getter
    def rows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "rows")

    @rows.setter
    def rows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "rows", value)


@pulumi.input_type
class IAppVariableArgs:
    def __init__(__self__, *,
                 encrypted: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the iApp.
        """
        IAppVariableArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            encrypted=encrypted,
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             encrypted: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if encrypted is not None:
            _setter("encrypted", encrypted)
        if name is not None:
            _setter("name", name)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def encrypted(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encrypted")

    @encrypted.setter
    def encrypted(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encrypted", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the iApp.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


