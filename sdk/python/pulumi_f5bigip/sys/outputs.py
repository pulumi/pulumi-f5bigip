# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'IAppList',
    'IAppMetadata',
    'IAppTable',
    'IAppTableRow',
    'IAppVariable',
]

@pulumi.output_type
class IAppList(dict):
    def __init__(__self__, *,
                 encrypted: Optional[str] = None,
                 value: Optional[str] = None):
        if encrypted is not None:
            pulumi.set(__self__, "encrypted", encrypted)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def encrypted(self) -> Optional[str]:
        return pulumi.get(self, "encrypted")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class IAppMetadata(dict):
    def __init__(__self__, *,
                 persists: Optional[str] = None,
                 value: Optional[str] = None):
        if persists is not None:
            pulumi.set(__self__, "persists", persists)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def persists(self) -> Optional[str]:
        return pulumi.get(self, "persists")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class IAppTable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnNames":
            suggest = "column_names"
        elif key == "encryptedColumns":
            suggest = "encrypted_columns"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IAppTable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IAppTable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IAppTable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_names: Optional[Sequence[str]] = None,
                 encrypted_columns: Optional[str] = None,
                 name: Optional[str] = None,
                 rows: Optional[Sequence['outputs.IAppTableRow']] = None):
        """
        :param str name: Name of the iApp.
        """
        if column_names is not None:
            pulumi.set(__self__, "column_names", column_names)
        if encrypted_columns is not None:
            pulumi.set(__self__, "encrypted_columns", encrypted_columns)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rows is not None:
            pulumi.set(__self__, "rows", rows)

    @property
    @pulumi.getter(name="columnNames")
    def column_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "column_names")

    @property
    @pulumi.getter(name="encryptedColumns")
    def encrypted_columns(self) -> Optional[str]:
        return pulumi.get(self, "encrypted_columns")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the iApp.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def rows(self) -> Optional[Sequence['outputs.IAppTableRow']]:
        return pulumi.get(self, "rows")


@pulumi.output_type
class IAppTableRow(dict):
    def __init__(__self__, *,
                 rows: Optional[Sequence[str]] = None):
        if rows is not None:
            pulumi.set(__self__, "rows", rows)

    @property
    @pulumi.getter
    def rows(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "rows")


@pulumi.output_type
class IAppVariable(dict):
    def __init__(__self__, *,
                 encrypted: Optional[str] = None,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Name of the iApp.
        """
        if encrypted is not None:
            pulumi.set(__self__, "encrypted", encrypted)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def encrypted(self) -> Optional[str]:
        return pulumi.get(self, "encrypted")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the iApp.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


