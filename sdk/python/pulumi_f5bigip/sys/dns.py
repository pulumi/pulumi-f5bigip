# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import pulumi
import pulumi.runtime
from .. import utilities, tables

class Dns(pulumi.CustomResource):
    description: pulumi.Output[str]
    name_servers: pulumi.Output[list]
    """
    Name or IP address of the DNS server
    """
    number_of_dots: pulumi.Output[int]
    """
    Configures the number of dots needed in a name before an initial absolute query will be made.
    """
    searches: pulumi.Output[list]
    """
    Specify what domains you want to search
    """
    def __init__(__self__, __name__, __opts__=None, description=None, name_servers=None, number_of_dots=None, searches=None):
        """
        `bigip_ltm_dns` Configures DNS server on F5 BIG-IP
        
        :param str __name__: The name of the resource.
        :param pulumi.ResourceOptions __opts__: Options for the resource.
        :param pulumi.Input[str] description
        :param pulumi.Input[list] name_servers: Name or IP address of the DNS server
        :param pulumi.Input[int] number_of_dots: Configures the number of dots needed in a name before an initial absolute query will be made.
        :param pulumi.Input[list] searches: Specify what domains you want to search
        """
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not description:
            raise TypeError('Missing required property description')
        __props__['description'] = description

        __props__['name_servers'] = name_servers

        __props__['number_of_dots'] = number_of_dots

        __props__['searches'] = searches

        super(Dns, __self__).__init__(
            'f5bigip:sys/dns:Dns',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

