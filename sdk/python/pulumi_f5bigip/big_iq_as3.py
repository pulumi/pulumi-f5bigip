# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class BigIqAs3(pulumi.CustomResource):
    as3_json: pulumi.Output[str]
    """
    Path/Filename of Declarative AS3 JSON which is a json file used with builtin ```file``` function
    """
    bigiq_address: pulumi.Output[str]
    """
    Address of the BIG-IQ to which your targer BIG-IP is attached
    """
    bigiq_login_ref: pulumi.Output[str]
    """
    Login reference for token authentication (see BIG-IQ REST docs for details)
    """
    bigiq_password: pulumi.Output[str]
    """
    Password of the BIG-IQ to which your targer BIG-IP is attached
    """
    bigiq_port: pulumi.Output[str]
    """
    The registration key pool to use
    """
    bigiq_token_auth: pulumi.Output[bool]
    """
    Enable to use an external authentication source (LDAP, TACACS, etc)
    """
    bigiq_user: pulumi.Output[str]
    """
    User name  of the BIG-IQ to which your targer BIG-IP is attached
    """
    tenant_list: pulumi.Output[str]
    """
    Name of Tenant
    """
    def __init__(__self__, resource_name, opts=None, as3_json=None, bigiq_address=None, bigiq_login_ref=None, bigiq_password=None, bigiq_port=None, bigiq_token_auth=None, bigiq_user=None, tenant_list=None, __props__=None, __name__=None, __opts__=None):
        """
        `BigIqAs3` provides details about bigiq as3 resource

        This resource is helpful to configure as3 declarative JSON on BIG-IP through BIG-IQ.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5bigip as f5bigip

        # Example Usage for json file
        exampletask = f5bigip.BigIqAs3("exampletask",
            as3_json=(lambda path: open(path).read())("bigiq_example.json"),
            bigiq_address="xx.xx.xxx.xx",
            bigiq_password="xxxxxxxxx",
            bigiq_user="xxxxx")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] as3_json: Path/Filename of Declarative AS3 JSON which is a json file used with builtin ```file``` function
        :param pulumi.Input[str] bigiq_address: Address of the BIG-IQ to which your targer BIG-IP is attached
        :param pulumi.Input[str] bigiq_login_ref: Login reference for token authentication (see BIG-IQ REST docs for details)
        :param pulumi.Input[str] bigiq_password: Password of the BIG-IQ to which your targer BIG-IP is attached
        :param pulumi.Input[str] bigiq_port: The registration key pool to use
        :param pulumi.Input[bool] bigiq_token_auth: Enable to use an external authentication source (LDAP, TACACS, etc)
        :param pulumi.Input[str] bigiq_user: User name  of the BIG-IQ to which your targer BIG-IP is attached
        :param pulumi.Input[str] tenant_list: Name of Tenant
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if as3_json is None:
                raise TypeError("Missing required property 'as3_json'")
            __props__['as3_json'] = as3_json
            if bigiq_address is None:
                raise TypeError("Missing required property 'bigiq_address'")
            __props__['bigiq_address'] = bigiq_address
            __props__['bigiq_login_ref'] = bigiq_login_ref
            if bigiq_password is None:
                raise TypeError("Missing required property 'bigiq_password'")
            __props__['bigiq_password'] = bigiq_password
            __props__['bigiq_port'] = bigiq_port
            __props__['bigiq_token_auth'] = bigiq_token_auth
            if bigiq_user is None:
                raise TypeError("Missing required property 'bigiq_user'")
            __props__['bigiq_user'] = bigiq_user
            __props__['tenant_list'] = tenant_list
        super(BigIqAs3, __self__).__init__(
            'f5bigip:index/bigIqAs3:BigIqAs3',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, as3_json=None, bigiq_address=None, bigiq_login_ref=None, bigiq_password=None, bigiq_port=None, bigiq_token_auth=None, bigiq_user=None, tenant_list=None):
        """
        Get an existing BigIqAs3 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] as3_json: Path/Filename of Declarative AS3 JSON which is a json file used with builtin ```file``` function
        :param pulumi.Input[str] bigiq_address: Address of the BIG-IQ to which your targer BIG-IP is attached
        :param pulumi.Input[str] bigiq_login_ref: Login reference for token authentication (see BIG-IQ REST docs for details)
        :param pulumi.Input[str] bigiq_password: Password of the BIG-IQ to which your targer BIG-IP is attached
        :param pulumi.Input[str] bigiq_port: The registration key pool to use
        :param pulumi.Input[bool] bigiq_token_auth: Enable to use an external authentication source (LDAP, TACACS, etc)
        :param pulumi.Input[str] bigiq_user: User name  of the BIG-IQ to which your targer BIG-IP is attached
        :param pulumi.Input[str] tenant_list: Name of Tenant
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["as3_json"] = as3_json
        __props__["bigiq_address"] = bigiq_address
        __props__["bigiq_login_ref"] = bigiq_login_ref
        __props__["bigiq_password"] = bigiq_password
        __props__["bigiq_port"] = bigiq_port
        __props__["bigiq_token_auth"] = bigiq_token_auth
        __props__["bigiq_user"] = bigiq_user
        __props__["tenant_list"] = tenant_list
        return BigIqAs3(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
