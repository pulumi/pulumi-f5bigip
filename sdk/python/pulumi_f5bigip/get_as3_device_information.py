# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetAs3DeviceInformationResult',
    'AwaitableGetAs3DeviceInformationResult',
    'get_as3_device_information',
    'get_as3_device_information_output',
]

@pulumi.output_type
class GetAs3DeviceInformationResult:
    """
    A collection of values returned by getAs3DeviceInformation.
    """
    def __init__(__self__, applications=None, as3_json=None, id=None, tenant=None):
        if applications and not isinstance(applications, list):
            raise TypeError("Expected argument 'applications' to be a list")
        pulumi.set(__self__, "applications", applications)
        if as3_json and not isinstance(as3_json, str):
            raise TypeError("Expected argument 'as3_json' to be a str")
        pulumi.set(__self__, "as3_json", as3_json)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if tenant and not isinstance(tenant, str):
            raise TypeError("Expected argument 'tenant' to be a str")
        pulumi.set(__self__, "tenant", tenant)

    @property
    @pulumi.getter
    def applications(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter(name="as3Json")
    def as3_json(self) -> builtins.str:
        return pulumi.get(self, "as3_json")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def tenant(self) -> builtins.str:
        return pulumi.get(self, "tenant")


class AwaitableGetAs3DeviceInformationResult(GetAs3DeviceInformationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAs3DeviceInformationResult(
            applications=self.applications,
            as3_json=self.as3_json,
            id=self.id,
            tenant=self.tenant)


def get_as3_device_information(applications: Optional[Sequence[builtins.str]] = None,
                               tenant: Optional[builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAs3DeviceInformationResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['applications'] = applications
    __args__['tenant'] = tenant
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('f5bigip:index/getAs3DeviceInformation:getAs3DeviceInformation', __args__, opts=opts, typ=GetAs3DeviceInformationResult).value

    return AwaitableGetAs3DeviceInformationResult(
        applications=pulumi.get(__ret__, 'applications'),
        as3_json=pulumi.get(__ret__, 'as3_json'),
        id=pulumi.get(__ret__, 'id'),
        tenant=pulumi.get(__ret__, 'tenant'))
def get_as3_device_information_output(applications: Optional[pulumi.Input[Optional[Sequence[builtins.str]]]] = None,
                                      tenant: Optional[pulumi.Input[builtins.str]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAs3DeviceInformationResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['applications'] = applications
    __args__['tenant'] = tenant
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('f5bigip:index/getAs3DeviceInformation:getAs3DeviceInformation', __args__, opts=opts, typ=GetAs3DeviceInformationResult)
    return __ret__.apply(lambda __response__: GetAs3DeviceInformationResult(
        applications=pulumi.get(__response__, 'applications'),
        as3_json=pulumi.get(__response__, 'as3_json'),
        id=pulumi.get(__response__, 'id'),
        tenant=pulumi.get(__response__, 'tenant')))
