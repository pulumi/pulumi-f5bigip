# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables

__all__ = ['Device']


class Device(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 configsync_ip: Optional[pulumi.Input[str]] = None,
                 mirror_ip: Optional[pulumi.Input[str]] = None,
                 mirror_secondary_ip: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        `cm.Device` provides details about a specific bigip

        This resource is helpful when configuring the BIG-IP device in cluster or in HA mode.
        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5bigip as f5bigip

        my_new_device = f5bigip.cm.Device("myNewDevice",
            configsync_ip="2.2.2.2",
            mirror_ip="10.10.10.10",
            mirror_secondary_ip="11.11.11.11",
            name="bigip300.f5.com")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] configsync_ip: IP address used for config sync
        :param pulumi.Input[str] mirror_ip: IP address used for state mirroring
        :param pulumi.Input[str] mirror_secondary_ip: Secondary IP address used for state mirroring
        :param pulumi.Input[str] name: Address of the Device which needs to be Deviceensed
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if configsync_ip is None and not opts.urn:
                raise TypeError("Missing required property 'configsync_ip'")
            __props__['configsync_ip'] = configsync_ip
            __props__['mirror_ip'] = mirror_ip
            __props__['mirror_secondary_ip'] = mirror_secondary_ip
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
        super(Device, __self__).__init__(
            'f5bigip:cm/device:Device',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            configsync_ip: Optional[pulumi.Input[str]] = None,
            mirror_ip: Optional[pulumi.Input[str]] = None,
            mirror_secondary_ip: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'Device':
        """
        Get an existing Device resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] configsync_ip: IP address used for config sync
        :param pulumi.Input[str] mirror_ip: IP address used for state mirroring
        :param pulumi.Input[str] mirror_secondary_ip: Secondary IP address used for state mirroring
        :param pulumi.Input[str] name: Address of the Device which needs to be Deviceensed
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["configsync_ip"] = configsync_ip
        __props__["mirror_ip"] = mirror_ip
        __props__["mirror_secondary_ip"] = mirror_secondary_ip
        __props__["name"] = name
        return Device(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="configsyncIp")
    def configsync_ip(self) -> pulumi.Output[str]:
        """
        IP address used for config sync
        """
        return pulumi.get(self, "configsync_ip")

    @property
    @pulumi.getter(name="mirrorIp")
    def mirror_ip(self) -> pulumi.Output[Optional[str]]:
        """
        IP address used for state mirroring
        """
        return pulumi.get(self, "mirror_ip")

    @property
    @pulumi.getter(name="mirrorSecondaryIp")
    def mirror_secondary_ip(self) -> pulumi.Output[Optional[str]]:
        """
        Secondary IP address used for state mirroring
        """
        return pulumi.get(self, "mirror_secondary_ip")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Address of the Device which needs to be Deviceensed
        """
        return pulumi.get(self, "name")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

