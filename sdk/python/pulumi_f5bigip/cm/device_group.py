# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['DeviceGroup']


class DeviceGroup(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_sync: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeviceGroupDeviceArgs']]]]] = None,
                 full_load_on_sync: Optional[pulumi.Input[str]] = None,
                 incremental_config: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_failover: Optional[pulumi.Input[str]] = None,
                 partition: Optional[pulumi.Input[str]] = None,
                 save_on_auto_sync: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        `cm.DeviceGroup` A device group is a collection of BIG-IP devices that are configured to securely synchronize their BIG-IP configuration data, and fail over when needed.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5bigip as f5bigip

        my_new_devicegroup = f5bigip.cm.DeviceGroup("myNewDevicegroup",
            auto_sync="enabled",
            devices=[
                f5bigip.cm.DeviceGroupDeviceArgs(
                    name="bigip1.cisco.com",
                ),
                f5bigip.cm.DeviceGroupDeviceArgs(
                    name="bigip200.f5.com",
                ),
            ],
            full_load_on_sync="true",
            name="sanjose_devicegroup",
            type="sync-only")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auto_sync: Specifies if the device-group will automatically sync configuration data to its members
        :param pulumi.Input[str] description: Description of Device group
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeviceGroupDeviceArgs']]]] devices: Name of the device to be included in device group, this need to be configured before using devicegroup resource
        :param pulumi.Input[str] full_load_on_sync: Specifies if the device-group will perform a full-load upon sync
        :param pulumi.Input[int] incremental_config: Specifies the maximum size (in KB) to devote to incremental config sync cached transactions. The default is 1024 KB.
        :param pulumi.Input[str] name: Is the name of the device Group
        :param pulumi.Input[str] network_failover: Specifies if the device-group will use a network connection for failover
        :param pulumi.Input[str] partition: Device administrative partition
        :param pulumi.Input[str] save_on_auto_sync: Specifies whether the configuration should be saved upon auto-sync.
        :param pulumi.Input[str] type: Specifies if the device-group will be used for failover or resource syncing
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['auto_sync'] = auto_sync
            __props__['description'] = description
            __props__['devices'] = devices
            __props__['full_load_on_sync'] = full_load_on_sync
            __props__['incremental_config'] = incremental_config
            __props__['name'] = name
            __props__['network_failover'] = network_failover
            __props__['partition'] = partition
            __props__['save_on_auto_sync'] = save_on_auto_sync
            __props__['type'] = type
        super(DeviceGroup, __self__).__init__(
            'f5bigip:cm/deviceGroup:DeviceGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_sync: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            devices: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeviceGroupDeviceArgs']]]]] = None,
            full_load_on_sync: Optional[pulumi.Input[str]] = None,
            incremental_config: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_failover: Optional[pulumi.Input[str]] = None,
            partition: Optional[pulumi.Input[str]] = None,
            save_on_auto_sync: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'DeviceGroup':
        """
        Get an existing DeviceGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auto_sync: Specifies if the device-group will automatically sync configuration data to its members
        :param pulumi.Input[str] description: Description of Device group
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeviceGroupDeviceArgs']]]] devices: Name of the device to be included in device group, this need to be configured before using devicegroup resource
        :param pulumi.Input[str] full_load_on_sync: Specifies if the device-group will perform a full-load upon sync
        :param pulumi.Input[int] incremental_config: Specifies the maximum size (in KB) to devote to incremental config sync cached transactions. The default is 1024 KB.
        :param pulumi.Input[str] name: Is the name of the device Group
        :param pulumi.Input[str] network_failover: Specifies if the device-group will use a network connection for failover
        :param pulumi.Input[str] partition: Device administrative partition
        :param pulumi.Input[str] save_on_auto_sync: Specifies whether the configuration should be saved upon auto-sync.
        :param pulumi.Input[str] type: Specifies if the device-group will be used for failover or resource syncing
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["auto_sync"] = auto_sync
        __props__["description"] = description
        __props__["devices"] = devices
        __props__["full_load_on_sync"] = full_load_on_sync
        __props__["incremental_config"] = incremental_config
        __props__["name"] = name
        __props__["network_failover"] = network_failover
        __props__["partition"] = partition
        __props__["save_on_auto_sync"] = save_on_auto_sync
        __props__["type"] = type
        return DeviceGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoSync")
    def auto_sync(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies if the device-group will automatically sync configuration data to its members
        """
        return pulumi.get(self, "auto_sync")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of Device group
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def devices(self) -> pulumi.Output[Optional[Sequence['outputs.DeviceGroupDevice']]]:
        """
        Name of the device to be included in device group, this need to be configured before using devicegroup resource
        """
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter(name="fullLoadOnSync")
    def full_load_on_sync(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies if the device-group will perform a full-load upon sync
        """
        return pulumi.get(self, "full_load_on_sync")

    @property
    @pulumi.getter(name="incrementalConfig")
    def incremental_config(self) -> pulumi.Output[Optional[int]]:
        """
        Specifies the maximum size (in KB) to devote to incremental config sync cached transactions. The default is 1024 KB.
        """
        return pulumi.get(self, "incremental_config")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[str]]:
        """
        Is the name of the device Group
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkFailover")
    def network_failover(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies if the device-group will use a network connection for failover
        """
        return pulumi.get(self, "network_failover")

    @property
    @pulumi.getter
    def partition(self) -> pulumi.Output[Optional[str]]:
        """
        Device administrative partition
        """
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="saveOnAutoSync")
    def save_on_auto_sync(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies whether the configuration should be saved upon auto-sync.
        """
        return pulumi.get(self, "save_on_auto_sync")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies if the device-group will be used for failover or resource syncing
        """
        return pulumi.get(self, "type")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

