# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class DeviceGroup(pulumi.CustomResource):
    auto_sync: pulumi.Output[str]
    """
    Specifies if the device-group will automatically sync configuration data to its members
    """
    description: pulumi.Output[str]
    """
    Description of Device group
    """
    devices: pulumi.Output[list]
    """
    Name of the device to be included in device group, this need to be configured before using devicegroup resource

      * `name` (`str`) - Is the name of the device Group
      * `setSyncLeader` (`bool`)
    """
    full_load_on_sync: pulumi.Output[str]
    """
    Specifies if the device-group will perform a full-load upon sync
    """
    incremental_config: pulumi.Output[float]
    """
    Specifies the maximum size (in KB) to devote to incremental config sync cached transactions. The default is 1024 KB.
    """
    name: pulumi.Output[str]
    """
    Is the name of the device Group
    """
    network_failover: pulumi.Output[str]
    """
    Specifies if the device-group will use a network connection for failover
    """
    partition: pulumi.Output[str]
    """
    Device administrative partition
    """
    save_on_auto_sync: pulumi.Output[str]
    """
    Specifies whether the configuration should be saved upon auto-sync.
    """
    type: pulumi.Output[str]
    """
    Specifies if the device-group will be used for failover or resource syncing
    """
    def __init__(__self__, resource_name, opts=None, auto_sync=None, description=None, devices=None, full_load_on_sync=None, incremental_config=None, name=None, network_failover=None, partition=None, save_on_auto_sync=None, type=None, __props__=None, __name__=None, __opts__=None):
        """
        `cm.DeviceGroup` A device group is a collection of BIG-IP devices that are configured to securely synchronize their BIG-IP configuration data, and fail over when needed.


        ## Example Usage



        ```python
        import pulumi
        import pulumi_f5bigip as f5bigip

        my_new_devicegroup = f5bigip.cm.DeviceGroup("myNewDevicegroup",
            auto_sync="enabled",
            devices=[
                {
                    "name": "bigip1.cisco.com",
                },
                {
                    "name": "bigip200.f5.com",
                },
            ],
            full_load_on_sync="true",
            name="sanjose_devicegroup",
            type="sync-only")
        ```


        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auto_sync: Specifies if the device-group will automatically sync configuration data to its members
        :param pulumi.Input[str] description: Description of Device group
        :param pulumi.Input[list] devices: Name of the device to be included in device group, this need to be configured before using devicegroup resource
        :param pulumi.Input[str] full_load_on_sync: Specifies if the device-group will perform a full-load upon sync
        :param pulumi.Input[float] incremental_config: Specifies the maximum size (in KB) to devote to incremental config sync cached transactions. The default is 1024 KB.
        :param pulumi.Input[str] name: Is the name of the device Group
        :param pulumi.Input[str] network_failover: Specifies if the device-group will use a network connection for failover
        :param pulumi.Input[str] partition: Device administrative partition
        :param pulumi.Input[str] save_on_auto_sync: Specifies whether the configuration should be saved upon auto-sync.
        :param pulumi.Input[str] type: Specifies if the device-group will be used for failover or resource syncing

        The **devices** object supports the following:

          * `name` (`pulumi.Input[str]`) - Is the name of the device Group
          * `setSyncLeader` (`pulumi.Input[bool]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['auto_sync'] = auto_sync
            __props__['description'] = description
            __props__['devices'] = devices
            __props__['full_load_on_sync'] = full_load_on_sync
            __props__['incremental_config'] = incremental_config
            __props__['name'] = name
            __props__['network_failover'] = network_failover
            __props__['partition'] = partition
            __props__['save_on_auto_sync'] = save_on_auto_sync
            __props__['type'] = type
        super(DeviceGroup, __self__).__init__(
            'f5bigip:cm/deviceGroup:DeviceGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, auto_sync=None, description=None, devices=None, full_load_on_sync=None, incremental_config=None, name=None, network_failover=None, partition=None, save_on_auto_sync=None, type=None):
        """
        Get an existing DeviceGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auto_sync: Specifies if the device-group will automatically sync configuration data to its members
        :param pulumi.Input[str] description: Description of Device group
        :param pulumi.Input[list] devices: Name of the device to be included in device group, this need to be configured before using devicegroup resource
        :param pulumi.Input[str] full_load_on_sync: Specifies if the device-group will perform a full-load upon sync
        :param pulumi.Input[float] incremental_config: Specifies the maximum size (in KB) to devote to incremental config sync cached transactions. The default is 1024 KB.
        :param pulumi.Input[str] name: Is the name of the device Group
        :param pulumi.Input[str] network_failover: Specifies if the device-group will use a network connection for failover
        :param pulumi.Input[str] partition: Device administrative partition
        :param pulumi.Input[str] save_on_auto_sync: Specifies whether the configuration should be saved upon auto-sync.
        :param pulumi.Input[str] type: Specifies if the device-group will be used for failover or resource syncing

        The **devices** object supports the following:

          * `name` (`pulumi.Input[str]`) - Is the name of the device Group
          * `setSyncLeader` (`pulumi.Input[bool]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["auto_sync"] = auto_sync
        __props__["description"] = description
        __props__["devices"] = devices
        __props__["full_load_on_sync"] = full_load_on_sync
        __props__["incremental_config"] = incremental_config
        __props__["name"] = name
        __props__["network_failover"] = network_failover
        __props__["partition"] = partition
        __props__["save_on_auto_sync"] = save_on_auto_sync
        __props__["type"] = type
        return DeviceGroup(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

