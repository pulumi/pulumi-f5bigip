# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class Do(pulumi.CustomResource):
    do_json: pulumi.Output[str]
    """
    Name of the of the Declarative DO JSON file
    """
    tenant_name: pulumi.Output[str]
    """
    unique identifier for DO resource
    """
    def __init__(__self__, resource_name, opts=None, do_json=None, tenant_name=None, __props__=None, __name__=None, __opts__=None):
        """
        `.Do` provides details about bigip do resource

        This resource is helpful to configure do declarative JSON on BIG-IP.
        ## Example Usage



        ```python
        import pulumi
        import pulumi_f5bigip as f5bigip

        do_example = f5bigip.Do("do-example",
            do_json=(lambda path: open(path).read())("example.json"),
            tenant_name="sample_test1")
        ```


        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] do_json: Name of the of the Declarative DO JSON file
        :param pulumi.Input[str] tenant_name: unique identifier for DO resource
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if do_json is None:
                raise TypeError("Missing required property 'do_json'")
            __props__['do_json'] = do_json
            if tenant_name is None:
                raise TypeError("Missing required property 'tenant_name'")
            __props__['tenant_name'] = tenant_name
        super(Do, __self__).__init__(
            'f5bigip:index/do:Do',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, do_json=None, tenant_name=None):
        """
        Get an existing Do resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] do_json: Name of the of the Declarative DO JSON file
        :param pulumi.Input[str] tenant_name: unique identifier for DO resource
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["do_json"] = do_json
        __props__["tenant_name"] = tenant_name
        return Do(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

