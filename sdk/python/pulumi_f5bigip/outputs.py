# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'EventServiceDiscoveryNode',
    'FastHttpAppMonitor',
    'FastHttpAppPoolMember',
    'FastHttpAppVirtualServer',
    'FastHttpAppWafSecurityPolicy',
    'FastHttpsAppMonitor',
    'FastHttpsAppPoolMember',
    'FastHttpsAppTlsClientProfile',
    'FastHttpsAppTlsServerProfile',
    'FastHttpsAppVirtualServer',
    'FastHttpsAppWafSecurityPolicy',
    'FastTcpAppMonitor',
    'FastTcpAppPoolMember',
    'FastTcpAppVirtualServer',
    'FastUdpAppMonitor',
    'FastUdpAppPoolMember',
    'FastUdpAppVirtualServer',
    'WafPolicyFileType',
    'WafPolicyGraphqlProfile',
    'WafPolicyGraphqlProfileDefenseAttribute',
    'WafPolicyHostName',
    'WafPolicyIpException',
    'WafPolicyPolicyBuilder',
    'WafPolicySignaturesSetting',
]

@pulumi.output_type
class EventServiceDiscoveryNode(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 ip: Optional[str] = None,
                 port: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class FastHttpAppMonitor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "monitorAuth":
            suggest = "monitor_auth"
        elif key == "sendString":
            suggest = "send_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FastHttpAppMonitor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FastHttpAppMonitor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FastHttpAppMonitor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interval: Optional[int] = None,
                 monitor_auth: Optional[bool] = None,
                 password: Optional[str] = None,
                 response: Optional[str] = None,
                 send_string: Optional[str] = None,
                 username: Optional[str] = None):
        """
        :param int interval: Set the time between health checks,in seconds for FAST-Generated Pool Monitor.
        :param bool monitor_auth: set `true` if the servers require login credentials for web access on FAST-Generated Pool Monitor. default is `false`.
        :param str password: password for web access on FAST-Generated Pool Monitor.
        :param str response: The presence of this string anywhere in the HTTP response implies availability.
        :param str send_string: Specify data to be sent during each health check for FAST-Generated Pool Monitor.
        :param str username: username for web access on FAST-Generated Pool Monitor.
        """
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if monitor_auth is not None:
            pulumi.set(__self__, "monitor_auth", monitor_auth)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if response is not None:
            pulumi.set(__self__, "response", response)
        if send_string is not None:
            pulumi.set(__self__, "send_string", send_string)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        """
        Set the time between health checks,in seconds for FAST-Generated Pool Monitor.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="monitorAuth")
    def monitor_auth(self) -> Optional[bool]:
        """
        set `true` if the servers require login credentials for web access on FAST-Generated Pool Monitor. default is `false`.
        """
        return pulumi.get(self, "monitor_auth")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        password for web access on FAST-Generated Pool Monitor.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def response(self) -> Optional[str]:
        """
        The presence of this string anywhere in the HTTP response implies availability.
        """
        return pulumi.get(self, "response")

    @property
    @pulumi.getter(name="sendString")
    def send_string(self) -> Optional[str]:
        """
        Specify data to be sent during each health check for FAST-Generated Pool Monitor.
        """
        return pulumi.get(self, "send_string")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        username for web access on FAST-Generated Pool Monitor.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class FastHttpAppPoolMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionLimit":
            suggest = "connection_limit"
        elif key == "priorityGroup":
            suggest = "priority_group"
        elif key == "shareNodes":
            suggest = "share_nodes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FastHttpAppPoolMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FastHttpAppPoolMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FastHttpAppPoolMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addresses: Sequence[str],
                 connection_limit: Optional[int] = None,
                 port: Optional[int] = None,
                 priority_group: Optional[int] = None,
                 share_nodes: Optional[bool] = None):
        """
        :param Sequence[str] addresses: List of server address to be used for FAST-Generated Pool.
        :param int connection_limit: connectionLimit value to be used for FAST-Generated Pool.
        :param int port: port number of serviceport to be used for FAST-Generated Pool.
        :param int priority_group: priorityGroup value to be used for FAST-Generated Pool.
        :param bool share_nodes: shareNodes value to be used for FAST-Generated Pool.
        """
        pulumi.set(__self__, "addresses", addresses)
        if connection_limit is not None:
            pulumi.set(__self__, "connection_limit", connection_limit)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if priority_group is not None:
            pulumi.set(__self__, "priority_group", priority_group)
        if share_nodes is not None:
            pulumi.set(__self__, "share_nodes", share_nodes)

    @property
    @pulumi.getter
    def addresses(self) -> Sequence[str]:
        """
        List of server address to be used for FAST-Generated Pool.
        """
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> Optional[int]:
        """
        connectionLimit value to be used for FAST-Generated Pool.
        """
        return pulumi.get(self, "connection_limit")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        port number of serviceport to be used for FAST-Generated Pool.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="priorityGroup")
    def priority_group(self) -> Optional[int]:
        """
        priorityGroup value to be used for FAST-Generated Pool.
        """
        return pulumi.get(self, "priority_group")

    @property
    @pulumi.getter(name="shareNodes")
    def share_nodes(self) -> Optional[bool]:
        """
        shareNodes value to be used for FAST-Generated Pool.
        """
        return pulumi.get(self, "share_nodes")


@pulumi.output_type
class FastHttpAppVirtualServer(dict):
    def __init__(__self__, *,
                 ip: str,
                 port: int):
        """
        :param str ip: IP4/IPv6 address to be used for virtual server ex: `10.1.1.1`
        :param int port: Port number to used for accessing virtual server/application
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        IP4/IPv6 address to be used for virtual server ex: `10.1.1.1`
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port number to used for accessing virtual server/application
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class FastHttpAppWafSecurityPolicy(dict):
    def __init__(__self__, *,
                 enable: bool):
        """
        :param bool enable: Setting `true` will enable FAST to create WAF Security Policy.
        """
        pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Setting `true` will enable FAST to create WAF Security Policy.
        """
        return pulumi.get(self, "enable")


@pulumi.output_type
class FastHttpsAppMonitor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "monitorAuth":
            suggest = "monitor_auth"
        elif key == "sendString":
            suggest = "send_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FastHttpsAppMonitor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FastHttpsAppMonitor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FastHttpsAppMonitor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interval: Optional[int] = None,
                 monitor_auth: Optional[bool] = None,
                 password: Optional[str] = None,
                 response: Optional[str] = None,
                 send_string: Optional[str] = None,
                 username: Optional[str] = None):
        """
        :param int interval: Set the time between health checks,in seconds for FAST-Generated Pool Monitor.
        :param bool monitor_auth: set `true` if the servers require login credentials for web access on FAST-Generated Pool Monitor. default is `false`.
        :param str password: password for web access on FAST-Generated Pool Monitor.
        :param str response: The presence of this string anywhere in the HTTP response implies availability.
        :param str send_string: Specify data to be sent during each health check for FAST-Generated Pool Monitor.
        :param str username: username for web access on FAST-Generated Pool Monitor.
        """
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if monitor_auth is not None:
            pulumi.set(__self__, "monitor_auth", monitor_auth)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if response is not None:
            pulumi.set(__self__, "response", response)
        if send_string is not None:
            pulumi.set(__self__, "send_string", send_string)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        """
        Set the time between health checks,in seconds for FAST-Generated Pool Monitor.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="monitorAuth")
    def monitor_auth(self) -> Optional[bool]:
        """
        set `true` if the servers require login credentials for web access on FAST-Generated Pool Monitor. default is `false`.
        """
        return pulumi.get(self, "monitor_auth")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        password for web access on FAST-Generated Pool Monitor.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def response(self) -> Optional[str]:
        """
        The presence of this string anywhere in the HTTP response implies availability.
        """
        return pulumi.get(self, "response")

    @property
    @pulumi.getter(name="sendString")
    def send_string(self) -> Optional[str]:
        """
        Specify data to be sent during each health check for FAST-Generated Pool Monitor.
        """
        return pulumi.get(self, "send_string")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        username for web access on FAST-Generated Pool Monitor.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class FastHttpsAppPoolMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionLimit":
            suggest = "connection_limit"
        elif key == "priorityGroup":
            suggest = "priority_group"
        elif key == "shareNodes":
            suggest = "share_nodes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FastHttpsAppPoolMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FastHttpsAppPoolMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FastHttpsAppPoolMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addresses: Sequence[str],
                 connection_limit: Optional[int] = None,
                 port: Optional[int] = None,
                 priority_group: Optional[int] = None,
                 share_nodes: Optional[bool] = None):
        """
        :param Sequence[str] addresses: List of server address to be used for FAST-Generated Pool.
        :param int connection_limit: connectionLimit value to be used for FAST-Generated Pool.
        :param int port: port number of serviceport to be used for FAST-Generated Pool.
        :param int priority_group: priorityGroup value to be used for FAST-Generated Pool.
        :param bool share_nodes: shareNodes value to be used for FAST-Generated Pool.
        """
        pulumi.set(__self__, "addresses", addresses)
        if connection_limit is not None:
            pulumi.set(__self__, "connection_limit", connection_limit)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if priority_group is not None:
            pulumi.set(__self__, "priority_group", priority_group)
        if share_nodes is not None:
            pulumi.set(__self__, "share_nodes", share_nodes)

    @property
    @pulumi.getter
    def addresses(self) -> Sequence[str]:
        """
        List of server address to be used for FAST-Generated Pool.
        """
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> Optional[int]:
        """
        connectionLimit value to be used for FAST-Generated Pool.
        """
        return pulumi.get(self, "connection_limit")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        port number of serviceport to be used for FAST-Generated Pool.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="priorityGroup")
    def priority_group(self) -> Optional[int]:
        """
        priorityGroup value to be used for FAST-Generated Pool.
        """
        return pulumi.get(self, "priority_group")

    @property
    @pulumi.getter(name="shareNodes")
    def share_nodes(self) -> Optional[bool]:
        """
        shareNodes value to be used for FAST-Generated Pool.
        """
        return pulumi.get(self, "share_nodes")


@pulumi.output_type
class FastHttpsAppTlsClientProfile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tlsCertName":
            suggest = "tls_cert_name"
        elif key == "tlsKeyName":
            suggest = "tls_key_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FastHttpsAppTlsClientProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FastHttpsAppTlsClientProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FastHttpsAppTlsClientProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tls_cert_name: str,
                 tls_key_name: str):
        """
        :param str tls_cert_name: Name of existing BIG-IP SSL certificate to be used for FAST-Generated TLS Server Profile.
        :param str tls_key_name: Name of existing BIG-IP SSL Key to be used for FAST-Generated TLS Server Profile.
        """
        pulumi.set(__self__, "tls_cert_name", tls_cert_name)
        pulumi.set(__self__, "tls_key_name", tls_key_name)

    @property
    @pulumi.getter(name="tlsCertName")
    def tls_cert_name(self) -> str:
        """
        Name of existing BIG-IP SSL certificate to be used for FAST-Generated TLS Server Profile.
        """
        return pulumi.get(self, "tls_cert_name")

    @property
    @pulumi.getter(name="tlsKeyName")
    def tls_key_name(self) -> str:
        """
        Name of existing BIG-IP SSL Key to be used for FAST-Generated TLS Server Profile.
        """
        return pulumi.get(self, "tls_key_name")


@pulumi.output_type
class FastHttpsAppTlsServerProfile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tlsCertName":
            suggest = "tls_cert_name"
        elif key == "tlsKeyName":
            suggest = "tls_key_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FastHttpsAppTlsServerProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FastHttpsAppTlsServerProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FastHttpsAppTlsServerProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tls_cert_name: str,
                 tls_key_name: str):
        """
        :param str tls_cert_name: Name of existing BIG-IP SSL certificate to be used for FAST-Generated TLS Server Profile.
        :param str tls_key_name: Name of existing BIG-IP SSL Key to be used for FAST-Generated TLS Server Profile.
        """
        pulumi.set(__self__, "tls_cert_name", tls_cert_name)
        pulumi.set(__self__, "tls_key_name", tls_key_name)

    @property
    @pulumi.getter(name="tlsCertName")
    def tls_cert_name(self) -> str:
        """
        Name of existing BIG-IP SSL certificate to be used for FAST-Generated TLS Server Profile.
        """
        return pulumi.get(self, "tls_cert_name")

    @property
    @pulumi.getter(name="tlsKeyName")
    def tls_key_name(self) -> str:
        """
        Name of existing BIG-IP SSL Key to be used for FAST-Generated TLS Server Profile.
        """
        return pulumi.get(self, "tls_key_name")


@pulumi.output_type
class FastHttpsAppVirtualServer(dict):
    def __init__(__self__, *,
                 ip: str,
                 port: int):
        """
        :param str ip: IP4/IPv6 address to be used for virtual server ex: `10.1.1.1`
        :param int port: Port number to used for accessing virtual server/application
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        IP4/IPv6 address to be used for virtual server ex: `10.1.1.1`
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port number to used for accessing virtual server/application
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class FastHttpsAppWafSecurityPolicy(dict):
    def __init__(__self__, *,
                 enable: bool):
        """
        :param bool enable: Setting `true` will enable FAST to create WAF Security Policy.
        """
        pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Setting `true` will enable FAST to create WAF Security Policy.
        """
        return pulumi.get(self, "enable")


@pulumi.output_type
class FastTcpAppMonitor(dict):
    def __init__(__self__, *,
                 interval: Optional[int] = None):
        """
        :param int interval: Set the time between health checks,in seconds for FAST-Generated Pool Monitor.
        """
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        """
        Set the time between health checks,in seconds for FAST-Generated Pool Monitor.
        """
        return pulumi.get(self, "interval")


@pulumi.output_type
class FastTcpAppPoolMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionLimit":
            suggest = "connection_limit"
        elif key == "priorityGroup":
            suggest = "priority_group"
        elif key == "shareNodes":
            suggest = "share_nodes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FastTcpAppPoolMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FastTcpAppPoolMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FastTcpAppPoolMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addresses: Sequence[str],
                 connection_limit: Optional[int] = None,
                 port: Optional[int] = None,
                 priority_group: Optional[int] = None,
                 share_nodes: Optional[bool] = None):
        """
        :param Sequence[str] addresses: List of server address to be used for FAST-Generated Pool.
        :param int connection_limit: connectionLimit value to be used for FAST-Generated Pool.
        :param int port: port number of serviceport to be used for FAST-Generated Pool.
        :param int priority_group: priorityGroup value to be used for FAST-Generated Pool.
        :param bool share_nodes: shareNodes value to be used for FAST-Generated Pool.
        """
        pulumi.set(__self__, "addresses", addresses)
        if connection_limit is not None:
            pulumi.set(__self__, "connection_limit", connection_limit)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if priority_group is not None:
            pulumi.set(__self__, "priority_group", priority_group)
        if share_nodes is not None:
            pulumi.set(__self__, "share_nodes", share_nodes)

    @property
    @pulumi.getter
    def addresses(self) -> Sequence[str]:
        """
        List of server address to be used for FAST-Generated Pool.
        """
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> Optional[int]:
        """
        connectionLimit value to be used for FAST-Generated Pool.
        """
        return pulumi.get(self, "connection_limit")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        port number of serviceport to be used for FAST-Generated Pool.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="priorityGroup")
    def priority_group(self) -> Optional[int]:
        """
        priorityGroup value to be used for FAST-Generated Pool.
        """
        return pulumi.get(self, "priority_group")

    @property
    @pulumi.getter(name="shareNodes")
    def share_nodes(self) -> Optional[bool]:
        """
        shareNodes value to be used for FAST-Generated Pool.
        """
        return pulumi.get(self, "share_nodes")


@pulumi.output_type
class FastTcpAppVirtualServer(dict):
    def __init__(__self__, *,
                 ip: str,
                 port: int):
        """
        :param str ip: IP4/IPv6 address to be used for virtual server ex: `10.1.1.1`
        :param int port: Port number to used for accessing virtual server/application
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        IP4/IPv6 address to be used for virtual server ex: `10.1.1.1`
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port number to used for accessing virtual server/application
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class FastUdpAppMonitor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expectedResponse":
            suggest = "expected_response"
        elif key == "sendString":
            suggest = "send_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FastUdpAppMonitor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FastUdpAppMonitor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FastUdpAppMonitor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expected_response: Optional[str] = None,
                 interval: Optional[int] = None,
                 send_string: Optional[str] = None):
        """
        :param str expected_response: The presence of this optional string is required in the response, if specified it confirms availability.
        :param int interval: Set the time between health checks,in seconds for FAST-Generated Pool Monitor.
        :param str send_string: Optional data to be sent during each health check.
        """
        if expected_response is not None:
            pulumi.set(__self__, "expected_response", expected_response)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if send_string is not None:
            pulumi.set(__self__, "send_string", send_string)

    @property
    @pulumi.getter(name="expectedResponse")
    def expected_response(self) -> Optional[str]:
        """
        The presence of this optional string is required in the response, if specified it confirms availability.
        """
        return pulumi.get(self, "expected_response")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        """
        Set the time between health checks,in seconds for FAST-Generated Pool Monitor.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="sendString")
    def send_string(self) -> Optional[str]:
        """
        Optional data to be sent during each health check.
        """
        return pulumi.get(self, "send_string")


@pulumi.output_type
class FastUdpAppPoolMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionLimit":
            suggest = "connection_limit"
        elif key == "priorityGroup":
            suggest = "priority_group"
        elif key == "shareNodes":
            suggest = "share_nodes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FastUdpAppPoolMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FastUdpAppPoolMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FastUdpAppPoolMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addresses: Sequence[str],
                 connection_limit: Optional[int] = None,
                 port: Optional[int] = None,
                 priority_group: Optional[int] = None,
                 share_nodes: Optional[bool] = None):
        """
        :param Sequence[str] addresses: List of server address to be used for FAST-Generated Pool.
        :param int connection_limit: connectionLimit value to be used for FAST-Generated Pool.
        :param int port: port number of serviceport to be used for FAST-Generated Pool.
        :param int priority_group: priorityGroup value to be used for FAST-Generated Pool.
        :param bool share_nodes: shareNodes value to be used for FAST-Generated Pool.
        """
        pulumi.set(__self__, "addresses", addresses)
        if connection_limit is not None:
            pulumi.set(__self__, "connection_limit", connection_limit)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if priority_group is not None:
            pulumi.set(__self__, "priority_group", priority_group)
        if share_nodes is not None:
            pulumi.set(__self__, "share_nodes", share_nodes)

    @property
    @pulumi.getter
    def addresses(self) -> Sequence[str]:
        """
        List of server address to be used for FAST-Generated Pool.
        """
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter(name="connectionLimit")
    def connection_limit(self) -> Optional[int]:
        """
        connectionLimit value to be used for FAST-Generated Pool.
        """
        return pulumi.get(self, "connection_limit")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        port number of serviceport to be used for FAST-Generated Pool.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="priorityGroup")
    def priority_group(self) -> Optional[int]:
        """
        priorityGroup value to be used for FAST-Generated Pool.
        """
        return pulumi.get(self, "priority_group")

    @property
    @pulumi.getter(name="shareNodes")
    def share_nodes(self) -> Optional[bool]:
        """
        shareNodes value to be used for FAST-Generated Pool.
        """
        return pulumi.get(self, "share_nodes")


@pulumi.output_type
class FastUdpAppVirtualServer(dict):
    def __init__(__self__, *,
                 ip: str,
                 port: int):
        """
        :param str ip: IP4/IPv6 address to be used for virtual server ex: `10.1.1.1`
        :param int port: Port number to used for accessing virtual server/application
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        IP4/IPv6 address to be used for virtual server ex: `10.1.1.1`
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port number to used for accessing virtual server/application
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class WafPolicyFileType(dict):
    def __init__(__self__, *,
                 allowed: Optional[bool] = None,
                 name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param bool allowed: Determines whether the file type is allowed or disallowed. In either of these cases the VIOL_FILETYPE violation is issued (if enabled) for an incoming request- 
               * No allowed file type matched the file type of the request.
               * The file type of the request matched a disallowed file type.
        :param str name: Specifies the file type name as appearing in the URL extension.
        :param str type: Determines the type of the name attribute. Only when setting the type to `wildcard` will the special wildcard characters in the name be interpreted as such
        """
        if allowed is not None:
            pulumi.set(__self__, "allowed", allowed)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def allowed(self) -> Optional[bool]:
        """
        Determines whether the file type is allowed or disallowed. In either of these cases the VIOL_FILETYPE violation is issued (if enabled) for an incoming request- 
        * No allowed file type matched the file type of the request.
        * The file type of the request matched a disallowed file type.
        """
        return pulumi.get(self, "allowed")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Specifies the file type name as appearing in the URL extension.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Determines the type of the name attribute. Only when setting the type to `wildcard` will the special wildcard characters in the name be interpreted as such
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class WafPolicyGraphqlProfile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attackSignaturesCheck":
            suggest = "attack_signatures_check"
        elif key == "defenseAttributes":
            suggest = "defense_attributes"
        elif key == "metacharElementcheck":
            suggest = "metachar_elementcheck"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WafPolicyGraphqlProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WafPolicyGraphqlProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WafPolicyGraphqlProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 attack_signatures_check: Optional[bool] = None,
                 defense_attributes: Optional[Sequence['outputs.WafPolicyGraphqlProfileDefenseAttribute']] = None,
                 metachar_elementcheck: Optional[bool] = None):
        """
        :param str name: The unique user-given name of the policy. Policy names cannot contain spaces or special characters. Allowed characters are a-z, A-Z, 0-9, dot, dash (-), colon (:) and underscore (_).
        :param bool attack_signatures_check: Specifies when checked (enabled) that you want attack signatures and threat campaigns to be detected on this GraphQL profile and possibly override the security policy settings of an attack signature or threat campaign specifically for this GraphQL profile. After you enable this setting, the system displays a list of attack signatures and and threat campaigns. The default is enabled.
        :param Sequence['WafPolicyGraphqlProfileDefenseAttributeArgs'] defense_attributes: `defense_attributes` block settings for GraphQl policy.See defense attributes below for more details.
        :param bool metachar_elementcheck: Specifies when checked (enabled) that the system enforces the security policy settings of a meta character for the GraphQL profile. After you enable this setting, the system displays a list of meta characters. The default is enabled.
        """
        pulumi.set(__self__, "name", name)
        if attack_signatures_check is not None:
            pulumi.set(__self__, "attack_signatures_check", attack_signatures_check)
        if defense_attributes is not None:
            pulumi.set(__self__, "defense_attributes", defense_attributes)
        if metachar_elementcheck is not None:
            pulumi.set(__self__, "metachar_elementcheck", metachar_elementcheck)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The unique user-given name of the policy. Policy names cannot contain spaces or special characters. Allowed characters are a-z, A-Z, 0-9, dot, dash (-), colon (:) and underscore (_).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="attackSignaturesCheck")
    def attack_signatures_check(self) -> Optional[bool]:
        """
        Specifies when checked (enabled) that you want attack signatures and threat campaigns to be detected on this GraphQL profile and possibly override the security policy settings of an attack signature or threat campaign specifically for this GraphQL profile. After you enable this setting, the system displays a list of attack signatures and and threat campaigns. The default is enabled.
        """
        return pulumi.get(self, "attack_signatures_check")

    @property
    @pulumi.getter(name="defenseAttributes")
    def defense_attributes(self) -> Optional[Sequence['outputs.WafPolicyGraphqlProfileDefenseAttribute']]:
        """
        `defense_attributes` block settings for GraphQl policy.See defense attributes below for more details.
        """
        return pulumi.get(self, "defense_attributes")

    @property
    @pulumi.getter(name="metacharElementcheck")
    def metachar_elementcheck(self) -> Optional[bool]:
        """
        Specifies when checked (enabled) that the system enforces the security policy settings of a meta character for the GraphQL profile. After you enable this setting, the system displays a list of meta characters. The default is enabled.
        """
        return pulumi.get(self, "metachar_elementcheck")


@pulumi.output_type
class WafPolicyGraphqlProfileDefenseAttribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowIntrospectionQueries":
            suggest = "allow_introspection_queries"
        elif key == "maximumBatchedQueries":
            suggest = "maximum_batched_queries"
        elif key == "maximumStructureDepth":
            suggest = "maximum_structure_depth"
        elif key == "maximumTotalLength":
            suggest = "maximum_total_length"
        elif key == "maximumValueLength":
            suggest = "maximum_value_length"
        elif key == "tolerateParsingWarnings":
            suggest = "tolerate_parsing_warnings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WafPolicyGraphqlProfileDefenseAttribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WafPolicyGraphqlProfileDefenseAttribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WafPolicyGraphqlProfileDefenseAttribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_introspection_queries: Optional[bool] = None,
                 maximum_batched_queries: Optional[str] = None,
                 maximum_structure_depth: Optional[str] = None,
                 maximum_total_length: Optional[str] = None,
                 maximum_value_length: Optional[str] = None,
                 tolerate_parsing_warnings: Optional[bool] = None):
        """
        :param bool allow_introspection_queries: Introspection queries can also be enforced to prevent attackers from using them to
               understand the API structure and potentially breach an application.
        :param str maximum_batched_queries: Specifies the highest number of batched queries allowed by the security policy.
        :param str maximum_structure_depth: Specifies the greatest nesting depth found in the GraphQL structure allowed by the security policy.
        :param str maximum_total_length: Specifies the longest length, in bytes, allowed by the security policy of the request payload, or parameter value, where the GraphQL data was found.
        :param str maximum_value_length: Specifies the longest length (in bytes) of the longest GraphQL element value in the document allowed by the security policy.
        :param bool tolerate_parsing_warnings: Specifies, when checked (enabled), that the system does not report when the security enforcer encounters warnings while parsing GraphQL content. Specifies when cleared (disabled), that the security policy reports when the security enforcer encounters warnings while parsing GraphQL content. The default setting is disabled.
        """
        if allow_introspection_queries is not None:
            pulumi.set(__self__, "allow_introspection_queries", allow_introspection_queries)
        if maximum_batched_queries is not None:
            pulumi.set(__self__, "maximum_batched_queries", maximum_batched_queries)
        if maximum_structure_depth is not None:
            pulumi.set(__self__, "maximum_structure_depth", maximum_structure_depth)
        if maximum_total_length is not None:
            pulumi.set(__self__, "maximum_total_length", maximum_total_length)
        if maximum_value_length is not None:
            pulumi.set(__self__, "maximum_value_length", maximum_value_length)
        if tolerate_parsing_warnings is not None:
            pulumi.set(__self__, "tolerate_parsing_warnings", tolerate_parsing_warnings)

    @property
    @pulumi.getter(name="allowIntrospectionQueries")
    def allow_introspection_queries(self) -> Optional[bool]:
        """
        Introspection queries can also be enforced to prevent attackers from using them to
        understand the API structure and potentially breach an application.
        """
        return pulumi.get(self, "allow_introspection_queries")

    @property
    @pulumi.getter(name="maximumBatchedQueries")
    def maximum_batched_queries(self) -> Optional[str]:
        """
        Specifies the highest number of batched queries allowed by the security policy.
        """
        return pulumi.get(self, "maximum_batched_queries")

    @property
    @pulumi.getter(name="maximumStructureDepth")
    def maximum_structure_depth(self) -> Optional[str]:
        """
        Specifies the greatest nesting depth found in the GraphQL structure allowed by the security policy.
        """
        return pulumi.get(self, "maximum_structure_depth")

    @property
    @pulumi.getter(name="maximumTotalLength")
    def maximum_total_length(self) -> Optional[str]:
        """
        Specifies the longest length, in bytes, allowed by the security policy of the request payload, or parameter value, where the GraphQL data was found.
        """
        return pulumi.get(self, "maximum_total_length")

    @property
    @pulumi.getter(name="maximumValueLength")
    def maximum_value_length(self) -> Optional[str]:
        """
        Specifies the longest length (in bytes) of the longest GraphQL element value in the document allowed by the security policy.
        """
        return pulumi.get(self, "maximum_value_length")

    @property
    @pulumi.getter(name="tolerateParsingWarnings")
    def tolerate_parsing_warnings(self) -> Optional[bool]:
        """
        Specifies, when checked (enabled), that the system does not report when the security enforcer encounters warnings while parsing GraphQL content. Specifies when cleared (disabled), that the security policy reports when the security enforcer encounters warnings while parsing GraphQL content. The default setting is disabled.
        """
        return pulumi.get(self, "tolerate_parsing_warnings")


@pulumi.output_type
class WafPolicyHostName(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        """
        :param str name: The unique user-given name of the policy. Policy names cannot contain spaces or special characters. Allowed characters are a-z, A-Z, 0-9, dot, dash (-), colon (:) and underscore (_).
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The unique user-given name of the policy. Policy names cannot contain spaces or special characters. Allowed characters are a-z, A-Z, 0-9, dot, dash (-), colon (:) and underscore (_).
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class WafPolicyIpException(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipMask":
            suggest = "ip_mask"
        elif key == "blockRequests":
            suggest = "block_requests"
        elif key == "ignoreAnomalies":
            suggest = "ignore_anomalies"
        elif key == "ignoreIpreputation":
            suggest = "ignore_ipreputation"
        elif key == "trustedbyPolicybuilder":
            suggest = "trustedby_policybuilder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WafPolicyIpException. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WafPolicyIpException.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WafPolicyIpException.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: str,
                 ip_mask: str,
                 block_requests: Optional[str] = None,
                 description: Optional[str] = None,
                 ignore_anomalies: Optional[bool] = None,
                 ignore_ipreputation: Optional[bool] = None,
                 trustedby_policybuilder: Optional[bool] = None):
        """
        :param str ip_address: Specifies the IP address that you want the system to trust.
        :param str ip_mask: Specifies the netmask of the exceptional IP address. This is an optional field.
        :param str block_requests: Specifies how the system responds to blocking requests sent from this IP address. Possible options [`always`, `never`, `policy-default`].
        :param str description: Specifies the description of the policy.
        :param bool ignore_anomalies: Specifies when enabled that the system considers this IP address legitimate and does not take it into account when performing brute force prevention.
        :param bool ignore_ipreputation: Specifies when enabled that the system considers this IP address legitimate even if it is found in the IP Intelligence database (a database of questionable IP addresses).
        :param bool trustedby_policybuilder: Specifies when enabled the Policy Builder considers traffic from this IP address as being safe.
        """
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ip_mask", ip_mask)
        if block_requests is not None:
            pulumi.set(__self__, "block_requests", block_requests)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ignore_anomalies is not None:
            pulumi.set(__self__, "ignore_anomalies", ignore_anomalies)
        if ignore_ipreputation is not None:
            pulumi.set(__self__, "ignore_ipreputation", ignore_ipreputation)
        if trustedby_policybuilder is not None:
            pulumi.set(__self__, "trustedby_policybuilder", trustedby_policybuilder)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        Specifies the IP address that you want the system to trust.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="ipMask")
    def ip_mask(self) -> str:
        """
        Specifies the netmask of the exceptional IP address. This is an optional field.
        """
        return pulumi.get(self, "ip_mask")

    @property
    @pulumi.getter(name="blockRequests")
    def block_requests(self) -> Optional[str]:
        """
        Specifies how the system responds to blocking requests sent from this IP address. Possible options [`always`, `never`, `policy-default`].
        """
        return pulumi.get(self, "block_requests")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Specifies the description of the policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="ignoreAnomalies")
    def ignore_anomalies(self) -> Optional[bool]:
        """
        Specifies when enabled that the system considers this IP address legitimate and does not take it into account when performing brute force prevention.
        """
        return pulumi.get(self, "ignore_anomalies")

    @property
    @pulumi.getter(name="ignoreIpreputation")
    def ignore_ipreputation(self) -> Optional[bool]:
        """
        Specifies when enabled that the system considers this IP address legitimate even if it is found in the IP Intelligence database (a database of questionable IP addresses).
        """
        return pulumi.get(self, "ignore_ipreputation")

    @property
    @pulumi.getter(name="trustedbyPolicybuilder")
    def trustedby_policybuilder(self) -> Optional[bool]:
        """
        Specifies when enabled the Policy Builder considers traffic from this IP address as being safe.
        """
        return pulumi.get(self, "trustedby_policybuilder")


@pulumi.output_type
class WafPolicyPolicyBuilder(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "learningMode":
            suggest = "learning_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WafPolicyPolicyBuilder. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WafPolicyPolicyBuilder.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WafPolicyPolicyBuilder.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 learning_mode: Optional[str] = None):
        """
        :param str learning_mode: learning mode setting for policy-builder, possible options: [`automatic`,`disabled`, `manual`]
        """
        if learning_mode is not None:
            pulumi.set(__self__, "learning_mode", learning_mode)

    @property
    @pulumi.getter(name="learningMode")
    def learning_mode(self) -> Optional[str]:
        """
        learning mode setting for policy-builder, possible options: [`automatic`,`disabled`, `manual`]
        """
        return pulumi.get(self, "learning_mode")


@pulumi.output_type
class WafPolicySignaturesSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "placesignaturesInStaging":
            suggest = "placesignatures_in_staging"
        elif key == "signatureStaging":
            suggest = "signature_staging"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WafPolicySignaturesSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WafPolicySignaturesSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WafPolicySignaturesSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 placesignatures_in_staging: Optional[bool] = None,
                 signature_staging: Optional[bool] = None):
        if placesignatures_in_staging is not None:
            pulumi.set(__self__, "placesignatures_in_staging", placesignatures_in_staging)
        if signature_staging is not None:
            pulumi.set(__self__, "signature_staging", signature_staging)

    @property
    @pulumi.getter(name="placesignaturesInStaging")
    def placesignatures_in_staging(self) -> Optional[bool]:
        return pulumi.get(self, "placesignatures_in_staging")

    @property
    @pulumi.getter(name="signatureStaging")
    def signature_staging(self) -> Optional[bool]:
        return pulumi.get(self, "signature_staging")


