# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['CommonLicenseManageBigIqArgs', 'CommonLicenseManageBigIq']

@pulumi.input_type
class CommonLicenseManageBigIqArgs:
    def __init__(__self__, *,
                 assignment_type: pulumi.Input[str],
                 bigiq_address: pulumi.Input[str],
                 bigiq_password: pulumi.Input[str],
                 bigiq_user: pulumi.Input[str],
                 license_poolname: pulumi.Input[str],
                 bigiq_login_ref: Optional[pulumi.Input[str]] = None,
                 bigiq_port: Optional[pulumi.Input[str]] = None,
                 bigiq_token_auth: Optional[pulumi.Input[bool]] = None,
                 device_license_status: Optional[pulumi.Input[str]] = None,
                 hypervisor: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 mac_address: Optional[pulumi.Input[str]] = None,
                 skukeyword1: Optional[pulumi.Input[str]] = None,
                 skukeyword2: Optional[pulumi.Input[str]] = None,
                 tenant: Optional[pulumi.Input[str]] = None,
                 unit_of_measure: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CommonLicenseManageBigIq resource.
        :param pulumi.Input[str] assignment_type: The type of assignment, which is determined by whether the BIG-IP is unreachable, unmanaged, or managed by BIG-IQ. Possible values: “UNREACHABLE”, “UNMANAGED”, or “MANAGED”.
        :param pulumi.Input[str] bigiq_address: BIGIQ License Manager IP Address, variable type `string`
        :param pulumi.Input[str] bigiq_password: BIGIQ License Manager password.  variable type `string`
        :param pulumi.Input[str] bigiq_user: BIGIQ License Manager username, variable type `string`
        :param pulumi.Input[str] license_poolname: A name given to the license pool. type `string`
        :param pulumi.Input[str] bigiq_login_ref: BIGIQ Login reference for token authentication
        :param pulumi.Input[str] bigiq_port: type `int`, BIGIQ License Manager Port number, specify if port is other than `443`
        :param pulumi.Input[bool] bigiq_token_auth: type `bool`, if set to `true` enables Token based Authentication,default is `false`
        :param pulumi.Input[str] device_license_status: Status of Licence Assignment
        :param pulumi.Input[str] hypervisor: Identifies the platform running the BIG-IP VE. Possible values: “aws”, “azure”, “gce”, “vmware”, “hyperv”, “kvm”, or “xen”. type `string`
        :param pulumi.Input[str] key: License Assignment is done with specified `key`, supported only with RegKeypool type License assignement. type `string`
        :param pulumi.Input[str] mac_address: MAC address of the BIG-IP. type `string`
        :param pulumi.Input[str] skukeyword1: An optional offering name. type `string`
        :param pulumi.Input[str] skukeyword2: An optional offering name. type `string`
        :param pulumi.Input[str] tenant: For an unreachable BIG-IP, you can provide an optional description for the assignment in this field.
        :param pulumi.Input[str] unit_of_measure: The units used to measure billing. For example, “hourly” or “daily”. Type `string`
        """
        CommonLicenseManageBigIqArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            assignment_type=assignment_type,
            bigiq_address=bigiq_address,
            bigiq_password=bigiq_password,
            bigiq_user=bigiq_user,
            license_poolname=license_poolname,
            bigiq_login_ref=bigiq_login_ref,
            bigiq_port=bigiq_port,
            bigiq_token_auth=bigiq_token_auth,
            device_license_status=device_license_status,
            hypervisor=hypervisor,
            key=key,
            mac_address=mac_address,
            skukeyword1=skukeyword1,
            skukeyword2=skukeyword2,
            tenant=tenant,
            unit_of_measure=unit_of_measure,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             assignment_type: pulumi.Input[str],
             bigiq_address: pulumi.Input[str],
             bigiq_password: pulumi.Input[str],
             bigiq_user: pulumi.Input[str],
             license_poolname: pulumi.Input[str],
             bigiq_login_ref: Optional[pulumi.Input[str]] = None,
             bigiq_port: Optional[pulumi.Input[str]] = None,
             bigiq_token_auth: Optional[pulumi.Input[bool]] = None,
             device_license_status: Optional[pulumi.Input[str]] = None,
             hypervisor: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             mac_address: Optional[pulumi.Input[str]] = None,
             skukeyword1: Optional[pulumi.Input[str]] = None,
             skukeyword2: Optional[pulumi.Input[str]] = None,
             tenant: Optional[pulumi.Input[str]] = None,
             unit_of_measure: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("assignment_type", assignment_type)
        _setter("bigiq_address", bigiq_address)
        _setter("bigiq_password", bigiq_password)
        _setter("bigiq_user", bigiq_user)
        _setter("license_poolname", license_poolname)
        if bigiq_login_ref is not None:
            _setter("bigiq_login_ref", bigiq_login_ref)
        if bigiq_port is not None:
            _setter("bigiq_port", bigiq_port)
        if bigiq_token_auth is not None:
            _setter("bigiq_token_auth", bigiq_token_auth)
        if device_license_status is not None:
            _setter("device_license_status", device_license_status)
        if hypervisor is not None:
            _setter("hypervisor", hypervisor)
        if key is not None:
            _setter("key", key)
        if mac_address is not None:
            _setter("mac_address", mac_address)
        if skukeyword1 is not None:
            _setter("skukeyword1", skukeyword1)
        if skukeyword2 is not None:
            _setter("skukeyword2", skukeyword2)
        if tenant is not None:
            _setter("tenant", tenant)
        if unit_of_measure is not None:
            _setter("unit_of_measure", unit_of_measure)

    @property
    @pulumi.getter(name="assignmentType")
    def assignment_type(self) -> pulumi.Input[str]:
        """
        The type of assignment, which is determined by whether the BIG-IP is unreachable, unmanaged, or managed by BIG-IQ. Possible values: “UNREACHABLE”, “UNMANAGED”, or “MANAGED”.
        """
        return pulumi.get(self, "assignment_type")

    @assignment_type.setter
    def assignment_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "assignment_type", value)

    @property
    @pulumi.getter(name="bigiqAddress")
    def bigiq_address(self) -> pulumi.Input[str]:
        """
        BIGIQ License Manager IP Address, variable type `string`
        """
        return pulumi.get(self, "bigiq_address")

    @bigiq_address.setter
    def bigiq_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "bigiq_address", value)

    @property
    @pulumi.getter(name="bigiqPassword")
    def bigiq_password(self) -> pulumi.Input[str]:
        """
        BIGIQ License Manager password.  variable type `string`
        """
        return pulumi.get(self, "bigiq_password")

    @bigiq_password.setter
    def bigiq_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "bigiq_password", value)

    @property
    @pulumi.getter(name="bigiqUser")
    def bigiq_user(self) -> pulumi.Input[str]:
        """
        BIGIQ License Manager username, variable type `string`
        """
        return pulumi.get(self, "bigiq_user")

    @bigiq_user.setter
    def bigiq_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "bigiq_user", value)

    @property
    @pulumi.getter(name="licensePoolname")
    def license_poolname(self) -> pulumi.Input[str]:
        """
        A name given to the license pool. type `string`
        """
        return pulumi.get(self, "license_poolname")

    @license_poolname.setter
    def license_poolname(self, value: pulumi.Input[str]):
        pulumi.set(self, "license_poolname", value)

    @property
    @pulumi.getter(name="bigiqLoginRef")
    def bigiq_login_ref(self) -> Optional[pulumi.Input[str]]:
        """
        BIGIQ Login reference for token authentication
        """
        return pulumi.get(self, "bigiq_login_ref")

    @bigiq_login_ref.setter
    def bigiq_login_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bigiq_login_ref", value)

    @property
    @pulumi.getter(name="bigiqPort")
    def bigiq_port(self) -> Optional[pulumi.Input[str]]:
        """
        type `int`, BIGIQ License Manager Port number, specify if port is other than `443`
        """
        return pulumi.get(self, "bigiq_port")

    @bigiq_port.setter
    def bigiq_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bigiq_port", value)

    @property
    @pulumi.getter(name="bigiqTokenAuth")
    def bigiq_token_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        type `bool`, if set to `true` enables Token based Authentication,default is `false`
        """
        return pulumi.get(self, "bigiq_token_auth")

    @bigiq_token_auth.setter
    def bigiq_token_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bigiq_token_auth", value)

    @property
    @pulumi.getter(name="deviceLicenseStatus")
    def device_license_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of Licence Assignment
        """
        return pulumi.get(self, "device_license_status")

    @device_license_status.setter
    def device_license_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_license_status", value)

    @property
    @pulumi.getter
    def hypervisor(self) -> Optional[pulumi.Input[str]]:
        """
        Identifies the platform running the BIG-IP VE. Possible values: “aws”, “azure”, “gce”, “vmware”, “hyperv”, “kvm”, or “xen”. type `string`
        """
        return pulumi.get(self, "hypervisor")

    @hypervisor.setter
    def hypervisor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hypervisor", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        License Assignment is done with specified `key`, supported only with RegKeypool type License assignement. type `string`
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[str]]:
        """
        MAC address of the BIG-IP. type `string`
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_address", value)

    @property
    @pulumi.getter
    def skukeyword1(self) -> Optional[pulumi.Input[str]]:
        """
        An optional offering name. type `string`
        """
        return pulumi.get(self, "skukeyword1")

    @skukeyword1.setter
    def skukeyword1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skukeyword1", value)

    @property
    @pulumi.getter
    def skukeyword2(self) -> Optional[pulumi.Input[str]]:
        """
        An optional offering name. type `string`
        """
        return pulumi.get(self, "skukeyword2")

    @skukeyword2.setter
    def skukeyword2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skukeyword2", value)

    @property
    @pulumi.getter
    def tenant(self) -> Optional[pulumi.Input[str]]:
        """
        For an unreachable BIG-IP, you can provide an optional description for the assignment in this field.
        """
        return pulumi.get(self, "tenant")

    @tenant.setter
    def tenant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant", value)

    @property
    @pulumi.getter(name="unitOfMeasure")
    def unit_of_measure(self) -> Optional[pulumi.Input[str]]:
        """
        The units used to measure billing. For example, “hourly” or “daily”. Type `string`
        """
        return pulumi.get(self, "unit_of_measure")

    @unit_of_measure.setter
    def unit_of_measure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit_of_measure", value)


@pulumi.input_type
class _CommonLicenseManageBigIqState:
    def __init__(__self__, *,
                 assignment_type: Optional[pulumi.Input[str]] = None,
                 bigiq_address: Optional[pulumi.Input[str]] = None,
                 bigiq_login_ref: Optional[pulumi.Input[str]] = None,
                 bigiq_password: Optional[pulumi.Input[str]] = None,
                 bigiq_port: Optional[pulumi.Input[str]] = None,
                 bigiq_token_auth: Optional[pulumi.Input[bool]] = None,
                 bigiq_user: Optional[pulumi.Input[str]] = None,
                 device_license_status: Optional[pulumi.Input[str]] = None,
                 hypervisor: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 license_poolname: Optional[pulumi.Input[str]] = None,
                 mac_address: Optional[pulumi.Input[str]] = None,
                 skukeyword1: Optional[pulumi.Input[str]] = None,
                 skukeyword2: Optional[pulumi.Input[str]] = None,
                 tenant: Optional[pulumi.Input[str]] = None,
                 unit_of_measure: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CommonLicenseManageBigIq resources.
        :param pulumi.Input[str] assignment_type: The type of assignment, which is determined by whether the BIG-IP is unreachable, unmanaged, or managed by BIG-IQ. Possible values: “UNREACHABLE”, “UNMANAGED”, or “MANAGED”.
        :param pulumi.Input[str] bigiq_address: BIGIQ License Manager IP Address, variable type `string`
        :param pulumi.Input[str] bigiq_login_ref: BIGIQ Login reference for token authentication
        :param pulumi.Input[str] bigiq_password: BIGIQ License Manager password.  variable type `string`
        :param pulumi.Input[str] bigiq_port: type `int`, BIGIQ License Manager Port number, specify if port is other than `443`
        :param pulumi.Input[bool] bigiq_token_auth: type `bool`, if set to `true` enables Token based Authentication,default is `false`
        :param pulumi.Input[str] bigiq_user: BIGIQ License Manager username, variable type `string`
        :param pulumi.Input[str] device_license_status: Status of Licence Assignment
        :param pulumi.Input[str] hypervisor: Identifies the platform running the BIG-IP VE. Possible values: “aws”, “azure”, “gce”, “vmware”, “hyperv”, “kvm”, or “xen”. type `string`
        :param pulumi.Input[str] key: License Assignment is done with specified `key`, supported only with RegKeypool type License assignement. type `string`
        :param pulumi.Input[str] license_poolname: A name given to the license pool. type `string`
        :param pulumi.Input[str] mac_address: MAC address of the BIG-IP. type `string`
        :param pulumi.Input[str] skukeyword1: An optional offering name. type `string`
        :param pulumi.Input[str] skukeyword2: An optional offering name. type `string`
        :param pulumi.Input[str] tenant: For an unreachable BIG-IP, you can provide an optional description for the assignment in this field.
        :param pulumi.Input[str] unit_of_measure: The units used to measure billing. For example, “hourly” or “daily”. Type `string`
        """
        _CommonLicenseManageBigIqState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            assignment_type=assignment_type,
            bigiq_address=bigiq_address,
            bigiq_login_ref=bigiq_login_ref,
            bigiq_password=bigiq_password,
            bigiq_port=bigiq_port,
            bigiq_token_auth=bigiq_token_auth,
            bigiq_user=bigiq_user,
            device_license_status=device_license_status,
            hypervisor=hypervisor,
            key=key,
            license_poolname=license_poolname,
            mac_address=mac_address,
            skukeyword1=skukeyword1,
            skukeyword2=skukeyword2,
            tenant=tenant,
            unit_of_measure=unit_of_measure,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             assignment_type: Optional[pulumi.Input[str]] = None,
             bigiq_address: Optional[pulumi.Input[str]] = None,
             bigiq_login_ref: Optional[pulumi.Input[str]] = None,
             bigiq_password: Optional[pulumi.Input[str]] = None,
             bigiq_port: Optional[pulumi.Input[str]] = None,
             bigiq_token_auth: Optional[pulumi.Input[bool]] = None,
             bigiq_user: Optional[pulumi.Input[str]] = None,
             device_license_status: Optional[pulumi.Input[str]] = None,
             hypervisor: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             license_poolname: Optional[pulumi.Input[str]] = None,
             mac_address: Optional[pulumi.Input[str]] = None,
             skukeyword1: Optional[pulumi.Input[str]] = None,
             skukeyword2: Optional[pulumi.Input[str]] = None,
             tenant: Optional[pulumi.Input[str]] = None,
             unit_of_measure: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if assignment_type is not None:
            _setter("assignment_type", assignment_type)
        if bigiq_address is not None:
            _setter("bigiq_address", bigiq_address)
        if bigiq_login_ref is not None:
            _setter("bigiq_login_ref", bigiq_login_ref)
        if bigiq_password is not None:
            _setter("bigiq_password", bigiq_password)
        if bigiq_port is not None:
            _setter("bigiq_port", bigiq_port)
        if bigiq_token_auth is not None:
            _setter("bigiq_token_auth", bigiq_token_auth)
        if bigiq_user is not None:
            _setter("bigiq_user", bigiq_user)
        if device_license_status is not None:
            _setter("device_license_status", device_license_status)
        if hypervisor is not None:
            _setter("hypervisor", hypervisor)
        if key is not None:
            _setter("key", key)
        if license_poolname is not None:
            _setter("license_poolname", license_poolname)
        if mac_address is not None:
            _setter("mac_address", mac_address)
        if skukeyword1 is not None:
            _setter("skukeyword1", skukeyword1)
        if skukeyword2 is not None:
            _setter("skukeyword2", skukeyword2)
        if tenant is not None:
            _setter("tenant", tenant)
        if unit_of_measure is not None:
            _setter("unit_of_measure", unit_of_measure)

    @property
    @pulumi.getter(name="assignmentType")
    def assignment_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of assignment, which is determined by whether the BIG-IP is unreachable, unmanaged, or managed by BIG-IQ. Possible values: “UNREACHABLE”, “UNMANAGED”, or “MANAGED”.
        """
        return pulumi.get(self, "assignment_type")

    @assignment_type.setter
    def assignment_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assignment_type", value)

    @property
    @pulumi.getter(name="bigiqAddress")
    def bigiq_address(self) -> Optional[pulumi.Input[str]]:
        """
        BIGIQ License Manager IP Address, variable type `string`
        """
        return pulumi.get(self, "bigiq_address")

    @bigiq_address.setter
    def bigiq_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bigiq_address", value)

    @property
    @pulumi.getter(name="bigiqLoginRef")
    def bigiq_login_ref(self) -> Optional[pulumi.Input[str]]:
        """
        BIGIQ Login reference for token authentication
        """
        return pulumi.get(self, "bigiq_login_ref")

    @bigiq_login_ref.setter
    def bigiq_login_ref(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bigiq_login_ref", value)

    @property
    @pulumi.getter(name="bigiqPassword")
    def bigiq_password(self) -> Optional[pulumi.Input[str]]:
        """
        BIGIQ License Manager password.  variable type `string`
        """
        return pulumi.get(self, "bigiq_password")

    @bigiq_password.setter
    def bigiq_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bigiq_password", value)

    @property
    @pulumi.getter(name="bigiqPort")
    def bigiq_port(self) -> Optional[pulumi.Input[str]]:
        """
        type `int`, BIGIQ License Manager Port number, specify if port is other than `443`
        """
        return pulumi.get(self, "bigiq_port")

    @bigiq_port.setter
    def bigiq_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bigiq_port", value)

    @property
    @pulumi.getter(name="bigiqTokenAuth")
    def bigiq_token_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        type `bool`, if set to `true` enables Token based Authentication,default is `false`
        """
        return pulumi.get(self, "bigiq_token_auth")

    @bigiq_token_auth.setter
    def bigiq_token_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bigiq_token_auth", value)

    @property
    @pulumi.getter(name="bigiqUser")
    def bigiq_user(self) -> Optional[pulumi.Input[str]]:
        """
        BIGIQ License Manager username, variable type `string`
        """
        return pulumi.get(self, "bigiq_user")

    @bigiq_user.setter
    def bigiq_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bigiq_user", value)

    @property
    @pulumi.getter(name="deviceLicenseStatus")
    def device_license_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of Licence Assignment
        """
        return pulumi.get(self, "device_license_status")

    @device_license_status.setter
    def device_license_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_license_status", value)

    @property
    @pulumi.getter
    def hypervisor(self) -> Optional[pulumi.Input[str]]:
        """
        Identifies the platform running the BIG-IP VE. Possible values: “aws”, “azure”, “gce”, “vmware”, “hyperv”, “kvm”, or “xen”. type `string`
        """
        return pulumi.get(self, "hypervisor")

    @hypervisor.setter
    def hypervisor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hypervisor", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        License Assignment is done with specified `key`, supported only with RegKeypool type License assignement. type `string`
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="licensePoolname")
    def license_poolname(self) -> Optional[pulumi.Input[str]]:
        """
        A name given to the license pool. type `string`
        """
        return pulumi.get(self, "license_poolname")

    @license_poolname.setter
    def license_poolname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license_poolname", value)

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[str]]:
        """
        MAC address of the BIG-IP. type `string`
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_address", value)

    @property
    @pulumi.getter
    def skukeyword1(self) -> Optional[pulumi.Input[str]]:
        """
        An optional offering name. type `string`
        """
        return pulumi.get(self, "skukeyword1")

    @skukeyword1.setter
    def skukeyword1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skukeyword1", value)

    @property
    @pulumi.getter
    def skukeyword2(self) -> Optional[pulumi.Input[str]]:
        """
        An optional offering name. type `string`
        """
        return pulumi.get(self, "skukeyword2")

    @skukeyword2.setter
    def skukeyword2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skukeyword2", value)

    @property
    @pulumi.getter
    def tenant(self) -> Optional[pulumi.Input[str]]:
        """
        For an unreachable BIG-IP, you can provide an optional description for the assignment in this field.
        """
        return pulumi.get(self, "tenant")

    @tenant.setter
    def tenant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant", value)

    @property
    @pulumi.getter(name="unitOfMeasure")
    def unit_of_measure(self) -> Optional[pulumi.Input[str]]:
        """
        The units used to measure billing. For example, “hourly” or “daily”. Type `string`
        """
        return pulumi.get(self, "unit_of_measure")

    @unit_of_measure.setter
    def unit_of_measure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit_of_measure", value)


class CommonLicenseManageBigIq(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assignment_type: Optional[pulumi.Input[str]] = None,
                 bigiq_address: Optional[pulumi.Input[str]] = None,
                 bigiq_login_ref: Optional[pulumi.Input[str]] = None,
                 bigiq_password: Optional[pulumi.Input[str]] = None,
                 bigiq_port: Optional[pulumi.Input[str]] = None,
                 bigiq_token_auth: Optional[pulumi.Input[bool]] = None,
                 bigiq_user: Optional[pulumi.Input[str]] = None,
                 device_license_status: Optional[pulumi.Input[str]] = None,
                 hypervisor: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 license_poolname: Optional[pulumi.Input[str]] = None,
                 mac_address: Optional[pulumi.Input[str]] = None,
                 skukeyword1: Optional[pulumi.Input[str]] = None,
                 skukeyword2: Optional[pulumi.Input[str]] = None,
                 tenant: Optional[pulumi.Input[str]] = None,
                 unit_of_measure: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        `CommonLicenseManageBigIq` This Resource is used for BIGIP/Provider License Management from BIGIQ

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5bigip as f5bigip

        # MANAGED Regkey Pool
        test_example_common_license_manage_big_iq = f5bigip.CommonLicenseManageBigIq("testExampleCommonLicenseManageBigIq",
            bigiq_address=var["bigiq"],
            bigiq_user=var["bigiq_un"],
            bigiq_password=var["bigiq_pw"],
            license_poolname="regkeypool_name",
            assignment_type="MANAGED")
        # UNMANAGED Regkey Pool
        test_example_index_common_license_manage_big_iq_common_license_manage_big_iq = f5bigip.CommonLicenseManageBigIq("testExampleIndex/commonLicenseManageBigIqCommonLicenseManageBigIq",
            bigiq_address=var["bigiq"],
            bigiq_user=var["bigiq_un"],
            bigiq_password=var["bigiq_pw"],
            license_poolname="regkeypool_name",
            assignment_type="UNMANAGED")
        # UNMANAGED Utility Pool
        test_example_f5bigip_index_common_license_manage_big_iq_common_license_manage_big_iq = f5bigip.CommonLicenseManageBigIq("testExampleF5bigipIndex/commonLicenseManageBigIqCommonLicenseManageBigIq",
            bigiq_address=var["bigiq"],
            bigiq_user=var["bigiq_un"],
            bigiq_password=var["bigiq_pw"],
            license_poolname="utilitypool_name",
            assignment_type="UNMANAGED",
            unit_of_measure="yearly",
            skukeyword1="BTHSM200M")
        # UNREACHABLE Regkey Pool
        test_example_f5bigip_index_common_license_manage_big_iq_common_license_manage_big_iq1 = f5bigip.CommonLicenseManageBigIq("testExampleF5bigipIndex/commonLicenseManageBigIqCommonLicenseManageBigIq1",
            bigiq_address="xxx.xxx.xxx.xxx",
            bigiq_user="xxxx",
            bigiq_password="xxxxx",
            license_poolname="regkey_pool_name",
            assignment_type="UNREACHABLE",
            mac_address="FA:16:3E:1B:6D:32",
            hypervisor="azure")
        # MANAGED Purchased Pool
        test_example_f5bigip_index_common_license_manage_big_iq_common_license_manage_big_iq2 = f5bigip.CommonLicenseManageBigIq("testExampleF5bigipIndex/commonLicenseManageBigIqCommonLicenseManageBigIq2",
            bigiq_address=var["bigiq"],
            bigiq_user=var["bigiq_un"],
            bigiq_password=var["bigiq_pw"],
            license_poolname="purchased_pool_name",
            assignment_type="MANAGED")
        # UNMANAGED Purchased Pool
        test_example_f5bigip_index_common_license_manage_big_iq_common_license_manage_big_iq3 = f5bigip.CommonLicenseManageBigIq("testExampleF5bigipIndex/commonLicenseManageBigIqCommonLicenseManageBigIq3",
            bigiq_address=var["bigiq"],
            bigiq_user=var["bigiq_un"],
            bigiq_password=var["bigiq_pw"],
            license_poolname="purchased_pool_name",
            assignment_type="UNMANAGED")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] assignment_type: The type of assignment, which is determined by whether the BIG-IP is unreachable, unmanaged, or managed by BIG-IQ. Possible values: “UNREACHABLE”, “UNMANAGED”, or “MANAGED”.
        :param pulumi.Input[str] bigiq_address: BIGIQ License Manager IP Address, variable type `string`
        :param pulumi.Input[str] bigiq_login_ref: BIGIQ Login reference for token authentication
        :param pulumi.Input[str] bigiq_password: BIGIQ License Manager password.  variable type `string`
        :param pulumi.Input[str] bigiq_port: type `int`, BIGIQ License Manager Port number, specify if port is other than `443`
        :param pulumi.Input[bool] bigiq_token_auth: type `bool`, if set to `true` enables Token based Authentication,default is `false`
        :param pulumi.Input[str] bigiq_user: BIGIQ License Manager username, variable type `string`
        :param pulumi.Input[str] device_license_status: Status of Licence Assignment
        :param pulumi.Input[str] hypervisor: Identifies the platform running the BIG-IP VE. Possible values: “aws”, “azure”, “gce”, “vmware”, “hyperv”, “kvm”, or “xen”. type `string`
        :param pulumi.Input[str] key: License Assignment is done with specified `key`, supported only with RegKeypool type License assignement. type `string`
        :param pulumi.Input[str] license_poolname: A name given to the license pool. type `string`
        :param pulumi.Input[str] mac_address: MAC address of the BIG-IP. type `string`
        :param pulumi.Input[str] skukeyword1: An optional offering name. type `string`
        :param pulumi.Input[str] skukeyword2: An optional offering name. type `string`
        :param pulumi.Input[str] tenant: For an unreachable BIG-IP, you can provide an optional description for the assignment in this field.
        :param pulumi.Input[str] unit_of_measure: The units used to measure billing. For example, “hourly” or “daily”. Type `string`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CommonLicenseManageBigIqArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        `CommonLicenseManageBigIq` This Resource is used for BIGIP/Provider License Management from BIGIQ

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5bigip as f5bigip

        # MANAGED Regkey Pool
        test_example_common_license_manage_big_iq = f5bigip.CommonLicenseManageBigIq("testExampleCommonLicenseManageBigIq",
            bigiq_address=var["bigiq"],
            bigiq_user=var["bigiq_un"],
            bigiq_password=var["bigiq_pw"],
            license_poolname="regkeypool_name",
            assignment_type="MANAGED")
        # UNMANAGED Regkey Pool
        test_example_index_common_license_manage_big_iq_common_license_manage_big_iq = f5bigip.CommonLicenseManageBigIq("testExampleIndex/commonLicenseManageBigIqCommonLicenseManageBigIq",
            bigiq_address=var["bigiq"],
            bigiq_user=var["bigiq_un"],
            bigiq_password=var["bigiq_pw"],
            license_poolname="regkeypool_name",
            assignment_type="UNMANAGED")
        # UNMANAGED Utility Pool
        test_example_f5bigip_index_common_license_manage_big_iq_common_license_manage_big_iq = f5bigip.CommonLicenseManageBigIq("testExampleF5bigipIndex/commonLicenseManageBigIqCommonLicenseManageBigIq",
            bigiq_address=var["bigiq"],
            bigiq_user=var["bigiq_un"],
            bigiq_password=var["bigiq_pw"],
            license_poolname="utilitypool_name",
            assignment_type="UNMANAGED",
            unit_of_measure="yearly",
            skukeyword1="BTHSM200M")
        # UNREACHABLE Regkey Pool
        test_example_f5bigip_index_common_license_manage_big_iq_common_license_manage_big_iq1 = f5bigip.CommonLicenseManageBigIq("testExampleF5bigipIndex/commonLicenseManageBigIqCommonLicenseManageBigIq1",
            bigiq_address="xxx.xxx.xxx.xxx",
            bigiq_user="xxxx",
            bigiq_password="xxxxx",
            license_poolname="regkey_pool_name",
            assignment_type="UNREACHABLE",
            mac_address="FA:16:3E:1B:6D:32",
            hypervisor="azure")
        # MANAGED Purchased Pool
        test_example_f5bigip_index_common_license_manage_big_iq_common_license_manage_big_iq2 = f5bigip.CommonLicenseManageBigIq("testExampleF5bigipIndex/commonLicenseManageBigIqCommonLicenseManageBigIq2",
            bigiq_address=var["bigiq"],
            bigiq_user=var["bigiq_un"],
            bigiq_password=var["bigiq_pw"],
            license_poolname="purchased_pool_name",
            assignment_type="MANAGED")
        # UNMANAGED Purchased Pool
        test_example_f5bigip_index_common_license_manage_big_iq_common_license_manage_big_iq3 = f5bigip.CommonLicenseManageBigIq("testExampleF5bigipIndex/commonLicenseManageBigIqCommonLicenseManageBigIq3",
            bigiq_address=var["bigiq"],
            bigiq_user=var["bigiq_un"],
            bigiq_password=var["bigiq_pw"],
            license_poolname="purchased_pool_name",
            assignment_type="UNMANAGED")
        ```

        :param str resource_name: The name of the resource.
        :param CommonLicenseManageBigIqArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CommonLicenseManageBigIqArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            CommonLicenseManageBigIqArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assignment_type: Optional[pulumi.Input[str]] = None,
                 bigiq_address: Optional[pulumi.Input[str]] = None,
                 bigiq_login_ref: Optional[pulumi.Input[str]] = None,
                 bigiq_password: Optional[pulumi.Input[str]] = None,
                 bigiq_port: Optional[pulumi.Input[str]] = None,
                 bigiq_token_auth: Optional[pulumi.Input[bool]] = None,
                 bigiq_user: Optional[pulumi.Input[str]] = None,
                 device_license_status: Optional[pulumi.Input[str]] = None,
                 hypervisor: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 license_poolname: Optional[pulumi.Input[str]] = None,
                 mac_address: Optional[pulumi.Input[str]] = None,
                 skukeyword1: Optional[pulumi.Input[str]] = None,
                 skukeyword2: Optional[pulumi.Input[str]] = None,
                 tenant: Optional[pulumi.Input[str]] = None,
                 unit_of_measure: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CommonLicenseManageBigIqArgs.__new__(CommonLicenseManageBigIqArgs)

            if assignment_type is None and not opts.urn:
                raise TypeError("Missing required property 'assignment_type'")
            __props__.__dict__["assignment_type"] = assignment_type
            if bigiq_address is None and not opts.urn:
                raise TypeError("Missing required property 'bigiq_address'")
            __props__.__dict__["bigiq_address"] = bigiq_address
            __props__.__dict__["bigiq_login_ref"] = None if bigiq_login_ref is None else pulumi.Output.secret(bigiq_login_ref)
            if bigiq_password is None and not opts.urn:
                raise TypeError("Missing required property 'bigiq_password'")
            __props__.__dict__["bigiq_password"] = None if bigiq_password is None else pulumi.Output.secret(bigiq_password)
            __props__.__dict__["bigiq_port"] = None if bigiq_port is None else pulumi.Output.secret(bigiq_port)
            __props__.__dict__["bigiq_token_auth"] = None if bigiq_token_auth is None else pulumi.Output.secret(bigiq_token_auth)
            if bigiq_user is None and not opts.urn:
                raise TypeError("Missing required property 'bigiq_user'")
            __props__.__dict__["bigiq_user"] = None if bigiq_user is None else pulumi.Output.secret(bigiq_user)
            __props__.__dict__["device_license_status"] = device_license_status
            __props__.__dict__["hypervisor"] = hypervisor
            __props__.__dict__["key"] = key
            if license_poolname is None and not opts.urn:
                raise TypeError("Missing required property 'license_poolname'")
            __props__.__dict__["license_poolname"] = license_poolname
            __props__.__dict__["mac_address"] = mac_address
            __props__.__dict__["skukeyword1"] = skukeyword1
            __props__.__dict__["skukeyword2"] = skukeyword2
            __props__.__dict__["tenant"] = tenant
            __props__.__dict__["unit_of_measure"] = unit_of_measure
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["bigiqLoginRef", "bigiqPassword", "bigiqPort", "bigiqTokenAuth", "bigiqUser"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(CommonLicenseManageBigIq, __self__).__init__(
            'f5bigip:index/commonLicenseManageBigIq:CommonLicenseManageBigIq',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            assignment_type: Optional[pulumi.Input[str]] = None,
            bigiq_address: Optional[pulumi.Input[str]] = None,
            bigiq_login_ref: Optional[pulumi.Input[str]] = None,
            bigiq_password: Optional[pulumi.Input[str]] = None,
            bigiq_port: Optional[pulumi.Input[str]] = None,
            bigiq_token_auth: Optional[pulumi.Input[bool]] = None,
            bigiq_user: Optional[pulumi.Input[str]] = None,
            device_license_status: Optional[pulumi.Input[str]] = None,
            hypervisor: Optional[pulumi.Input[str]] = None,
            key: Optional[pulumi.Input[str]] = None,
            license_poolname: Optional[pulumi.Input[str]] = None,
            mac_address: Optional[pulumi.Input[str]] = None,
            skukeyword1: Optional[pulumi.Input[str]] = None,
            skukeyword2: Optional[pulumi.Input[str]] = None,
            tenant: Optional[pulumi.Input[str]] = None,
            unit_of_measure: Optional[pulumi.Input[str]] = None) -> 'CommonLicenseManageBigIq':
        """
        Get an existing CommonLicenseManageBigIq resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] assignment_type: The type of assignment, which is determined by whether the BIG-IP is unreachable, unmanaged, or managed by BIG-IQ. Possible values: “UNREACHABLE”, “UNMANAGED”, or “MANAGED”.
        :param pulumi.Input[str] bigiq_address: BIGIQ License Manager IP Address, variable type `string`
        :param pulumi.Input[str] bigiq_login_ref: BIGIQ Login reference for token authentication
        :param pulumi.Input[str] bigiq_password: BIGIQ License Manager password.  variable type `string`
        :param pulumi.Input[str] bigiq_port: type `int`, BIGIQ License Manager Port number, specify if port is other than `443`
        :param pulumi.Input[bool] bigiq_token_auth: type `bool`, if set to `true` enables Token based Authentication,default is `false`
        :param pulumi.Input[str] bigiq_user: BIGIQ License Manager username, variable type `string`
        :param pulumi.Input[str] device_license_status: Status of Licence Assignment
        :param pulumi.Input[str] hypervisor: Identifies the platform running the BIG-IP VE. Possible values: “aws”, “azure”, “gce”, “vmware”, “hyperv”, “kvm”, or “xen”. type `string`
        :param pulumi.Input[str] key: License Assignment is done with specified `key`, supported only with RegKeypool type License assignement. type `string`
        :param pulumi.Input[str] license_poolname: A name given to the license pool. type `string`
        :param pulumi.Input[str] mac_address: MAC address of the BIG-IP. type `string`
        :param pulumi.Input[str] skukeyword1: An optional offering name. type `string`
        :param pulumi.Input[str] skukeyword2: An optional offering name. type `string`
        :param pulumi.Input[str] tenant: For an unreachable BIG-IP, you can provide an optional description for the assignment in this field.
        :param pulumi.Input[str] unit_of_measure: The units used to measure billing. For example, “hourly” or “daily”. Type `string`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CommonLicenseManageBigIqState.__new__(_CommonLicenseManageBigIqState)

        __props__.__dict__["assignment_type"] = assignment_type
        __props__.__dict__["bigiq_address"] = bigiq_address
        __props__.__dict__["bigiq_login_ref"] = bigiq_login_ref
        __props__.__dict__["bigiq_password"] = bigiq_password
        __props__.__dict__["bigiq_port"] = bigiq_port
        __props__.__dict__["bigiq_token_auth"] = bigiq_token_auth
        __props__.__dict__["bigiq_user"] = bigiq_user
        __props__.__dict__["device_license_status"] = device_license_status
        __props__.__dict__["hypervisor"] = hypervisor
        __props__.__dict__["key"] = key
        __props__.__dict__["license_poolname"] = license_poolname
        __props__.__dict__["mac_address"] = mac_address
        __props__.__dict__["skukeyword1"] = skukeyword1
        __props__.__dict__["skukeyword2"] = skukeyword2
        __props__.__dict__["tenant"] = tenant
        __props__.__dict__["unit_of_measure"] = unit_of_measure
        return CommonLicenseManageBigIq(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="assignmentType")
    def assignment_type(self) -> pulumi.Output[str]:
        """
        The type of assignment, which is determined by whether the BIG-IP is unreachable, unmanaged, or managed by BIG-IQ. Possible values: “UNREACHABLE”, “UNMANAGED”, or “MANAGED”.
        """
        return pulumi.get(self, "assignment_type")

    @property
    @pulumi.getter(name="bigiqAddress")
    def bigiq_address(self) -> pulumi.Output[str]:
        """
        BIGIQ License Manager IP Address, variable type `string`
        """
        return pulumi.get(self, "bigiq_address")

    @property
    @pulumi.getter(name="bigiqLoginRef")
    def bigiq_login_ref(self) -> pulumi.Output[Optional[str]]:
        """
        BIGIQ Login reference for token authentication
        """
        return pulumi.get(self, "bigiq_login_ref")

    @property
    @pulumi.getter(name="bigiqPassword")
    def bigiq_password(self) -> pulumi.Output[str]:
        """
        BIGIQ License Manager password.  variable type `string`
        """
        return pulumi.get(self, "bigiq_password")

    @property
    @pulumi.getter(name="bigiqPort")
    def bigiq_port(self) -> pulumi.Output[Optional[str]]:
        """
        type `int`, BIGIQ License Manager Port number, specify if port is other than `443`
        """
        return pulumi.get(self, "bigiq_port")

    @property
    @pulumi.getter(name="bigiqTokenAuth")
    def bigiq_token_auth(self) -> pulumi.Output[Optional[bool]]:
        """
        type `bool`, if set to `true` enables Token based Authentication,default is `false`
        """
        return pulumi.get(self, "bigiq_token_auth")

    @property
    @pulumi.getter(name="bigiqUser")
    def bigiq_user(self) -> pulumi.Output[str]:
        """
        BIGIQ License Manager username, variable type `string`
        """
        return pulumi.get(self, "bigiq_user")

    @property
    @pulumi.getter(name="deviceLicenseStatus")
    def device_license_status(self) -> pulumi.Output[str]:
        """
        Status of Licence Assignment
        """
        return pulumi.get(self, "device_license_status")

    @property
    @pulumi.getter
    def hypervisor(self) -> pulumi.Output[Optional[str]]:
        """
        Identifies the platform running the BIG-IP VE. Possible values: “aws”, “azure”, “gce”, “vmware”, “hyperv”, “kvm”, or “xen”. type `string`
        """
        return pulumi.get(self, "hypervisor")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[Optional[str]]:
        """
        License Assignment is done with specified `key`, supported only with RegKeypool type License assignement. type `string`
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="licensePoolname")
    def license_poolname(self) -> pulumi.Output[str]:
        """
        A name given to the license pool. type `string`
        """
        return pulumi.get(self, "license_poolname")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> pulumi.Output[Optional[str]]:
        """
        MAC address of the BIG-IP. type `string`
        """
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def skukeyword1(self) -> pulumi.Output[Optional[str]]:
        """
        An optional offering name. type `string`
        """
        return pulumi.get(self, "skukeyword1")

    @property
    @pulumi.getter
    def skukeyword2(self) -> pulumi.Output[Optional[str]]:
        """
        An optional offering name. type `string`
        """
        return pulumi.get(self, "skukeyword2")

    @property
    @pulumi.getter
    def tenant(self) -> pulumi.Output[Optional[str]]:
        """
        For an unreachable BIG-IP, you can provide an optional description for the assignment in this field.
        """
        return pulumi.get(self, "tenant")

    @property
    @pulumi.getter(name="unitOfMeasure")
    def unit_of_measure(self) -> pulumi.Output[Optional[str]]:
        """
        The units used to measure billing. For example, “hourly” or “daily”. Type `string`
        """
        return pulumi.get(self, "unit_of_measure")

