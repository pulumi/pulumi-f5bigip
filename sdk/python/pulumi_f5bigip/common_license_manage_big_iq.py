# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = ['CommonLicenseManageBigIq']


class CommonLicenseManageBigIq(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assignment_type: Optional[pulumi.Input[str]] = None,
                 bigiq_address: Optional[pulumi.Input[str]] = None,
                 bigiq_login_ref: Optional[pulumi.Input[str]] = None,
                 bigiq_password: Optional[pulumi.Input[str]] = None,
                 bigiq_port: Optional[pulumi.Input[str]] = None,
                 bigiq_token_auth: Optional[pulumi.Input[bool]] = None,
                 bigiq_user: Optional[pulumi.Input[str]] = None,
                 device_license_status: Optional[pulumi.Input[str]] = None,
                 hypervisor: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 license_poolname: Optional[pulumi.Input[str]] = None,
                 mac_address: Optional[pulumi.Input[str]] = None,
                 skukeyword1: Optional[pulumi.Input[str]] = None,
                 skukeyword2: Optional[pulumi.Input[str]] = None,
                 tenant: Optional[pulumi.Input[str]] = None,
                 unit_of_measure: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        `CommonLicenseManageBigIq` This Resource is used for BIGIP/Provider License Management from BIGIQ

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5bigip as f5bigip

        # MANAGED Regkey Pool
        test_example_common_license_manage_big_iq = f5bigip.CommonLicenseManageBigIq("testExampleCommonLicenseManageBigIq",
            bigiq_address=var["bigiq"],
            bigiq_user=var["bigiq_un"],
            bigiq_password=var["bigiq_pw"],
            license_poolname="regkeypool_name",
            assignment_type="MANAGED")
        # UNMANAGED Regkey Pool
        test_example_index_common_license_manage_big_iq_common_license_manage_big_iq = f5bigip.CommonLicenseManageBigIq("testExampleIndex/commonLicenseManageBigIqCommonLicenseManageBigIq",
            bigiq_address=var["bigiq"],
            bigiq_user=var["bigiq_un"],
            bigiq_password=var["bigiq_pw"],
            license_poolname="regkeypool_name",
            assignment_type="UNMANAGED")
        # UNMANAGED Utility Pool
        test_example_f5bigip_index_common_license_manage_big_iq_common_license_manage_big_iq = f5bigip.CommonLicenseManageBigIq("testExampleF5bigipIndex/commonLicenseManageBigIqCommonLicenseManageBigIq",
            bigiq_address=var["bigiq"],
            bigiq_user=var["bigiq_un"],
            bigiq_password=var["bigiq_pw"],
            license_poolname="utilitypool_name",
            assignment_type="UNMANAGED",
            unit_of_measure="yearly",
            skukeyword1="BTHSM200M")
        # UNREACHABLE Regkey Pool
        test_example_f5bigip_index_common_license_manage_big_iq_common_license_manage_big_iq1 = f5bigip.CommonLicenseManageBigIq("testExampleF5bigipIndex/commonLicenseManageBigIqCommonLicenseManageBigIq1",
            bigiq_address="xxx.xxx.xxx.xxx",
            bigiq_user="xxxx",
            bigiq_password="xxxxx",
            license_poolname="regkey_pool_name",
            assignment_type="UNREACHABLE",
            mac_address="FA:16:3E:1B:6D:32",
            hypervisor="azure")
        # MANAGED Purchased Pool
        test_example_f5bigip_index_common_license_manage_big_iq_common_license_manage_big_iq2 = f5bigip.CommonLicenseManageBigIq("testExampleF5bigipIndex/commonLicenseManageBigIqCommonLicenseManageBigIq2",
            bigiq_address=var["bigiq"],
            bigiq_user=var["bigiq_un"],
            bigiq_password=var["bigiq_pw"],
            license_poolname="purchased_pool_name",
            assignment_type="MANAGED")
        # UNMANAGED Purchased Pool
        test_example_f5bigip_index_common_license_manage_big_iq_common_license_manage_big_iq3 = f5bigip.CommonLicenseManageBigIq("testExampleF5bigipIndex/commonLicenseManageBigIqCommonLicenseManageBigIq3",
            bigiq_address=var["bigiq"],
            bigiq_user=var["bigiq_un"],
            bigiq_password=var["bigiq_pw"],
            license_poolname="purchased_pool_name",
            assignment_type="UNMANAGED")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] assignment_type: The type of assignment, which is determined by whether the BIG-IP is unreachable, unmanaged, or managed by BIG-IQ. Possible values: “UNREACHABLE”, “UNMANAGED”, or “MANAGED”.
        :param pulumi.Input[str] bigiq_address: BIGIQ License Manager IP Address, variable type `string`
        :param pulumi.Input[str] bigiq_login_ref: BIGIQ Login reference for token authentication
        :param pulumi.Input[str] bigiq_password: BIGIQ License Manager password.  variable type `string`
        :param pulumi.Input[str] bigiq_port: type `int`, BIGIQ License Manager Port number, specify if port is other than `443`
        :param pulumi.Input[bool] bigiq_token_auth: type `bool`, if set to `true` enables Token based Authentication,default is `false`
        :param pulumi.Input[str] bigiq_user: BIGIQ License Manager username, variable type `string`
        :param pulumi.Input[str] device_license_status: Status of Licence Assignment
        :param pulumi.Input[str] hypervisor: Identifies the platform running the BIG-IP VE. Possible values: “aws”, “azure”, “gce”, “vmware”, “hyperv”, “kvm”, or “xen”. type `string`
        :param pulumi.Input[str] key: License Assignment is done with specified `key`, supported only with RegKeypool type License assignement. type `string`
        :param pulumi.Input[str] license_poolname: A name given to the license pool. type `string`
        :param pulumi.Input[str] mac_address: MAC address of the BIG-IP. type `string`
        :param pulumi.Input[str] skukeyword1: An optional offering name. type `string`
        :param pulumi.Input[str] skukeyword2: An optional offering name. type `string`
        :param pulumi.Input[str] tenant: For an unreachable BIG-IP, you can provide an optional description for the assignment in this field.
        :param pulumi.Input[str] unit_of_measure: The units used to measure billing. For example, “hourly” or “daily”. Type `string`
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if assignment_type is None and not opts.urn:
                raise TypeError("Missing required property 'assignment_type'")
            __props__['assignment_type'] = assignment_type
            if bigiq_address is None and not opts.urn:
                raise TypeError("Missing required property 'bigiq_address'")
            __props__['bigiq_address'] = bigiq_address
            __props__['bigiq_login_ref'] = bigiq_login_ref
            if bigiq_password is None and not opts.urn:
                raise TypeError("Missing required property 'bigiq_password'")
            __props__['bigiq_password'] = bigiq_password
            __props__['bigiq_port'] = bigiq_port
            __props__['bigiq_token_auth'] = bigiq_token_auth
            if bigiq_user is None and not opts.urn:
                raise TypeError("Missing required property 'bigiq_user'")
            __props__['bigiq_user'] = bigiq_user
            __props__['device_license_status'] = device_license_status
            __props__['hypervisor'] = hypervisor
            __props__['key'] = key
            if license_poolname is None and not opts.urn:
                raise TypeError("Missing required property 'license_poolname'")
            __props__['license_poolname'] = license_poolname
            __props__['mac_address'] = mac_address
            __props__['skukeyword1'] = skukeyword1
            __props__['skukeyword2'] = skukeyword2
            __props__['tenant'] = tenant
            __props__['unit_of_measure'] = unit_of_measure
        super(CommonLicenseManageBigIq, __self__).__init__(
            'f5bigip:index/commonLicenseManageBigIq:CommonLicenseManageBigIq',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            assignment_type: Optional[pulumi.Input[str]] = None,
            bigiq_address: Optional[pulumi.Input[str]] = None,
            bigiq_login_ref: Optional[pulumi.Input[str]] = None,
            bigiq_password: Optional[pulumi.Input[str]] = None,
            bigiq_port: Optional[pulumi.Input[str]] = None,
            bigiq_token_auth: Optional[pulumi.Input[bool]] = None,
            bigiq_user: Optional[pulumi.Input[str]] = None,
            device_license_status: Optional[pulumi.Input[str]] = None,
            hypervisor: Optional[pulumi.Input[str]] = None,
            key: Optional[pulumi.Input[str]] = None,
            license_poolname: Optional[pulumi.Input[str]] = None,
            mac_address: Optional[pulumi.Input[str]] = None,
            skukeyword1: Optional[pulumi.Input[str]] = None,
            skukeyword2: Optional[pulumi.Input[str]] = None,
            tenant: Optional[pulumi.Input[str]] = None,
            unit_of_measure: Optional[pulumi.Input[str]] = None) -> 'CommonLicenseManageBigIq':
        """
        Get an existing CommonLicenseManageBigIq resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] assignment_type: The type of assignment, which is determined by whether the BIG-IP is unreachable, unmanaged, or managed by BIG-IQ. Possible values: “UNREACHABLE”, “UNMANAGED”, or “MANAGED”.
        :param pulumi.Input[str] bigiq_address: BIGIQ License Manager IP Address, variable type `string`
        :param pulumi.Input[str] bigiq_login_ref: BIGIQ Login reference for token authentication
        :param pulumi.Input[str] bigiq_password: BIGIQ License Manager password.  variable type `string`
        :param pulumi.Input[str] bigiq_port: type `int`, BIGIQ License Manager Port number, specify if port is other than `443`
        :param pulumi.Input[bool] bigiq_token_auth: type `bool`, if set to `true` enables Token based Authentication,default is `false`
        :param pulumi.Input[str] bigiq_user: BIGIQ License Manager username, variable type `string`
        :param pulumi.Input[str] device_license_status: Status of Licence Assignment
        :param pulumi.Input[str] hypervisor: Identifies the platform running the BIG-IP VE. Possible values: “aws”, “azure”, “gce”, “vmware”, “hyperv”, “kvm”, or “xen”. type `string`
        :param pulumi.Input[str] key: License Assignment is done with specified `key`, supported only with RegKeypool type License assignement. type `string`
        :param pulumi.Input[str] license_poolname: A name given to the license pool. type `string`
        :param pulumi.Input[str] mac_address: MAC address of the BIG-IP. type `string`
        :param pulumi.Input[str] skukeyword1: An optional offering name. type `string`
        :param pulumi.Input[str] skukeyword2: An optional offering name. type `string`
        :param pulumi.Input[str] tenant: For an unreachable BIG-IP, you can provide an optional description for the assignment in this field.
        :param pulumi.Input[str] unit_of_measure: The units used to measure billing. For example, “hourly” or “daily”. Type `string`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["assignment_type"] = assignment_type
        __props__["bigiq_address"] = bigiq_address
        __props__["bigiq_login_ref"] = bigiq_login_ref
        __props__["bigiq_password"] = bigiq_password
        __props__["bigiq_port"] = bigiq_port
        __props__["bigiq_token_auth"] = bigiq_token_auth
        __props__["bigiq_user"] = bigiq_user
        __props__["device_license_status"] = device_license_status
        __props__["hypervisor"] = hypervisor
        __props__["key"] = key
        __props__["license_poolname"] = license_poolname
        __props__["mac_address"] = mac_address
        __props__["skukeyword1"] = skukeyword1
        __props__["skukeyword2"] = skukeyword2
        __props__["tenant"] = tenant
        __props__["unit_of_measure"] = unit_of_measure
        return CommonLicenseManageBigIq(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="assignmentType")
    def assignment_type(self) -> pulumi.Output[str]:
        """
        The type of assignment, which is determined by whether the BIG-IP is unreachable, unmanaged, or managed by BIG-IQ. Possible values: “UNREACHABLE”, “UNMANAGED”, or “MANAGED”.
        """
        return pulumi.get(self, "assignment_type")

    @property
    @pulumi.getter(name="bigiqAddress")
    def bigiq_address(self) -> pulumi.Output[str]:
        """
        BIGIQ License Manager IP Address, variable type `string`
        """
        return pulumi.get(self, "bigiq_address")

    @property
    @pulumi.getter(name="bigiqLoginRef")
    def bigiq_login_ref(self) -> pulumi.Output[Optional[str]]:
        """
        BIGIQ Login reference for token authentication
        """
        return pulumi.get(self, "bigiq_login_ref")

    @property
    @pulumi.getter(name="bigiqPassword")
    def bigiq_password(self) -> pulumi.Output[str]:
        """
        BIGIQ License Manager password.  variable type `string`
        """
        return pulumi.get(self, "bigiq_password")

    @property
    @pulumi.getter(name="bigiqPort")
    def bigiq_port(self) -> pulumi.Output[Optional[str]]:
        """
        type `int`, BIGIQ License Manager Port number, specify if port is other than `443`
        """
        return pulumi.get(self, "bigiq_port")

    @property
    @pulumi.getter(name="bigiqTokenAuth")
    def bigiq_token_auth(self) -> pulumi.Output[Optional[bool]]:
        """
        type `bool`, if set to `true` enables Token based Authentication,default is `false`
        """
        return pulumi.get(self, "bigiq_token_auth")

    @property
    @pulumi.getter(name="bigiqUser")
    def bigiq_user(self) -> pulumi.Output[str]:
        """
        BIGIQ License Manager username, variable type `string`
        """
        return pulumi.get(self, "bigiq_user")

    @property
    @pulumi.getter(name="deviceLicenseStatus")
    def device_license_status(self) -> pulumi.Output[str]:
        """
        Status of Licence Assignment
        """
        return pulumi.get(self, "device_license_status")

    @property
    @pulumi.getter
    def hypervisor(self) -> pulumi.Output[Optional[str]]:
        """
        Identifies the platform running the BIG-IP VE. Possible values: “aws”, “azure”, “gce”, “vmware”, “hyperv”, “kvm”, or “xen”. type `string`
        """
        return pulumi.get(self, "hypervisor")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[Optional[str]]:
        """
        License Assignment is done with specified `key`, supported only with RegKeypool type License assignement. type `string`
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="licensePoolname")
    def license_poolname(self) -> pulumi.Output[str]:
        """
        A name given to the license pool. type `string`
        """
        return pulumi.get(self, "license_poolname")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> pulumi.Output[Optional[str]]:
        """
        MAC address of the BIG-IP. type `string`
        """
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def skukeyword1(self) -> pulumi.Output[Optional[str]]:
        """
        An optional offering name. type `string`
        """
        return pulumi.get(self, "skukeyword1")

    @property
    @pulumi.getter
    def skukeyword2(self) -> pulumi.Output[Optional[str]]:
        """
        An optional offering name. type `string`
        """
        return pulumi.get(self, "skukeyword2")

    @property
    @pulumi.getter
    def tenant(self) -> pulumi.Output[Optional[str]]:
        """
        For an unreachable BIG-IP, you can provide an optional description for the assignment in this field.
        """
        return pulumi.get(self, "tenant")

    @property
    @pulumi.getter(name="unitOfMeasure")
    def unit_of_measure(self) -> pulumi.Output[Optional[str]]:
        """
        The units used to measure billing. For example, “hourly” or “daily”. Type `string`
        """
        return pulumi.get(self, "unit_of_measure")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

