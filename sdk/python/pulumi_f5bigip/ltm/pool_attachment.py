# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables


class PoolAttachment(pulumi.CustomResource):
    node: pulumi.Output[str]
    """
    Name of the Node with service port. (Name of Node should be referenced from `ltm.Node` resource)
    """
    pool: pulumi.Output[str]
    """
    Name of the pool, which should be referenced from `ltm.Pool` resource
    """
    def __init__(__self__, resource_name, opts=None, node=None, pool=None, __props__=None, __name__=None, __opts__=None):
        """
        `ltm.PoolAttachment` Manages nodes membership in pools

        Resources should be named with their "full path". The full path is the combination of the partition + name of the resource.
        For example /Common/my-pool.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5bigip as f5bigip

        monitor = f5bigip.ltm.Monitor("monitor",
            name="/Common/terraform_monitor",
            parent="/Common/http",
            send="GET /some/path\n",
            timeout="999",
            interval="998")
        pool = f5bigip.ltm.Pool("pool",
            name="/Common/terraform-pool",
            load_balancing_mode="round-robin",
            monitors=[monitor.name],
            allow_snat="yes",
            allow_nat="yes")
        node = f5bigip.ltm.Node("node",
            name="/Common/terraform_node",
            address="192.168.30.2")
        attach_node = f5bigip.ltm.PoolAttachment("attachNode",
            pool=pool.name,
            node=node.name.apply(lambda name: f"{name}:80"))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] node: Name of the Node with service port. (Name of Node should be referenced from `ltm.Node` resource)
        :param pulumi.Input[str] pool: Name of the pool, which should be referenced from `ltm.Pool` resource
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if node is None:
                raise TypeError("Missing required property 'node'")
            __props__['node'] = node
            if pool is None:
                raise TypeError("Missing required property 'pool'")
            __props__['pool'] = pool
        super(PoolAttachment, __self__).__init__(
            'f5bigip:ltm/poolAttachment:PoolAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, node=None, pool=None):
        """
        Get an existing PoolAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] node: Name of the Node with service port. (Name of Node should be referenced from `ltm.Node` resource)
        :param pulumi.Input[str] pool: Name of the pool, which should be referenced from `ltm.Pool` resource
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["node"] = node
        __props__["pool"] = pool
        return PoolAttachment(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
