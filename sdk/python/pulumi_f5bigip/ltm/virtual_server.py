# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables

__all__ = ['VirtualServer']


class VirtualServer(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 default_persistence_profile: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 destination: Optional[pulumi.Input[str]] = None,
                 fallback_persistence_profile: Optional[pulumi.Input[str]] = None,
                 ip_protocol: Optional[pulumi.Input[str]] = None,
                 irules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 mask: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 persistence_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 pool: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 server_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 snatpool: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_address_translation: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 translate_address: Optional[pulumi.Input[str]] = None,
                 translate_port: Optional[pulumi.Input[str]] = None,
                 vlans: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vlans_enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        `ltm.VirtualServer` Configures Virtual Server

        For resources should be named with their "full path". The full path is the combination of the partition + name of the resource. For example /Common/my-pool.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5bigip as f5bigip

        http = f5bigip.ltm.VirtualServer("http",
            name="/Common/terraform_vs_http",
            destination="10.12.12.12",
            port=80,
            pool="/Common/the-default-pool")
        # A Virtual server with SSL enabled
        https_virtual_server = f5bigip.ltm.VirtualServer("httpsVirtualServer",
            name="/Common/terraform_vs_https",
            destination=var["vip_ip"],
            description="VirtualServer-test",
            port=443,
            pool=var["pool"],
            profiles=[
                "/Common/tcp",
                "/Common/my-awesome-ssl-cert",
                "/Common/http",
            ],
            source_address_translation="automap",
            translate_address="enabled",
            translate_port="enabled")
        # A Virtual server with separate client and server profiles
        https_ltm_virtual_server_virtual_server = f5bigip.ltm.VirtualServer("httpsLtm/virtualServerVirtualServer",
            name="/Common/terraform_vs_https",
            destination="10.255.255.254",
            description="VirtualServer-test",
            port=443,
            client_profiles=["/Common/clientssl"],
            server_profiles=["/Common/serverssl"],
            source_address_translation="automap")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] client_profiles: List of client context profiles associated on the virtual server. Not mutually exclusive with profiles and server_profiles
        :param pulumi.Input[str] description: Description of Virtual server
        :param pulumi.Input[str] destination: Destination IP
        :param pulumi.Input[str] fallback_persistence_profile: Specifies a fallback persistence profile for the Virtual Server to use when the default persistence profile is not available.
        :param pulumi.Input[str] ip_protocol: Specify the IP protocol to use with the the virtual server (all, tcp, or udp are valid)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] irules: The iRules list you want run on this virtual server. iRules help automate the intercepting, processing, and routing of application traffic.
        :param pulumi.Input[str] mask: Mask can either be in CIDR notation or decimal, i.e.: 24 or 255.255.255.0. A CIDR mask of 0 is the same as 0.0.0.0
        :param pulumi.Input[str] name: Name of the virtual server
        :param pulumi.Input[Sequence[pulumi.Input[str]]] persistence_profiles: List of persistence profiles associated with the Virtual Server.
        :param pulumi.Input[str] pool: Default pool name
        :param pulumi.Input[int] port: Listen port for the virtual server
        :param pulumi.Input[Sequence[pulumi.Input[str]]] profiles: List of profiles associated both client and server contexts on the virtual server. This includes protocol, ssl, http, etc.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] server_profiles: List of server context profiles associated on the virtual server. Not mutually exclusive with profiles and client_profiles
        :param pulumi.Input[str] snatpool: Specifies the name of an existing SNAT pool that you want the virtual server to use to implement selective and intelligent SNATs. DEPRECATED - see Virtual Server Property Groups source-address-translation
        :param pulumi.Input[str] source: Specifies an IP address or network from which the virtual server will accept traffic.
        :param pulumi.Input[str] source_address_translation: Can be either omitted for none or the values automap or snat
        :param pulumi.Input[str] state: Specifies whether the virtual server and its resources are available for load balancing. The default is Enabled
        :param pulumi.Input[str] translate_address: Enables or disables address translation for the virtual server. Turn address translation off for a virtual server if you want to use the virtual server to load balance connections to any address. This option is useful when the system is load balancing devices that have the same IP address.
        :param pulumi.Input[str] translate_port: Enables or disables port translation. Turn port translation off for a virtual server if you want to use the virtual server to load balance connections to any service
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vlans: The virtual server is enabled/disabled on this set of VLANs. See vlans-disabled and vlans-enabled.
        :param pulumi.Input[bool] vlans_enabled: Enables the virtual server on the VLANs specified by the VLANs option.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['client_profiles'] = client_profiles
            __props__['default_persistence_profile'] = default_persistence_profile
            __props__['description'] = description
            if destination is None and not opts.urn:
                raise TypeError("Missing required property 'destination'")
            __props__['destination'] = destination
            __props__['fallback_persistence_profile'] = fallback_persistence_profile
            __props__['ip_protocol'] = ip_protocol
            __props__['irules'] = irules
            __props__['mask'] = mask
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['persistence_profiles'] = persistence_profiles
            __props__['policies'] = policies
            __props__['pool'] = pool
            if port is None and not opts.urn:
                raise TypeError("Missing required property 'port'")
            __props__['port'] = port
            __props__['profiles'] = profiles
            __props__['server_profiles'] = server_profiles
            __props__['snatpool'] = snatpool
            __props__['source'] = source
            __props__['source_address_translation'] = source_address_translation
            __props__['state'] = state
            __props__['translate_address'] = translate_address
            __props__['translate_port'] = translate_port
            __props__['vlans'] = vlans
            __props__['vlans_enabled'] = vlans_enabled
        super(VirtualServer, __self__).__init__(
            'f5bigip:ltm/virtualServer:VirtualServer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            client_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            default_persistence_profile: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            destination: Optional[pulumi.Input[str]] = None,
            fallback_persistence_profile: Optional[pulumi.Input[str]] = None,
            ip_protocol: Optional[pulumi.Input[str]] = None,
            irules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            mask: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            persistence_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            policies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            pool: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[int]] = None,
            profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            server_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            snatpool: Optional[pulumi.Input[str]] = None,
            source: Optional[pulumi.Input[str]] = None,
            source_address_translation: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            translate_address: Optional[pulumi.Input[str]] = None,
            translate_port: Optional[pulumi.Input[str]] = None,
            vlans: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            vlans_enabled: Optional[pulumi.Input[bool]] = None) -> 'VirtualServer':
        """
        Get an existing VirtualServer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] client_profiles: List of client context profiles associated on the virtual server. Not mutually exclusive with profiles and server_profiles
        :param pulumi.Input[str] description: Description of Virtual server
        :param pulumi.Input[str] destination: Destination IP
        :param pulumi.Input[str] fallback_persistence_profile: Specifies a fallback persistence profile for the Virtual Server to use when the default persistence profile is not available.
        :param pulumi.Input[str] ip_protocol: Specify the IP protocol to use with the the virtual server (all, tcp, or udp are valid)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] irules: The iRules list you want run on this virtual server. iRules help automate the intercepting, processing, and routing of application traffic.
        :param pulumi.Input[str] mask: Mask can either be in CIDR notation or decimal, i.e.: 24 or 255.255.255.0. A CIDR mask of 0 is the same as 0.0.0.0
        :param pulumi.Input[str] name: Name of the virtual server
        :param pulumi.Input[Sequence[pulumi.Input[str]]] persistence_profiles: List of persistence profiles associated with the Virtual Server.
        :param pulumi.Input[str] pool: Default pool name
        :param pulumi.Input[int] port: Listen port for the virtual server
        :param pulumi.Input[Sequence[pulumi.Input[str]]] profiles: List of profiles associated both client and server contexts on the virtual server. This includes protocol, ssl, http, etc.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] server_profiles: List of server context profiles associated on the virtual server. Not mutually exclusive with profiles and client_profiles
        :param pulumi.Input[str] snatpool: Specifies the name of an existing SNAT pool that you want the virtual server to use to implement selective and intelligent SNATs. DEPRECATED - see Virtual Server Property Groups source-address-translation
        :param pulumi.Input[str] source: Specifies an IP address or network from which the virtual server will accept traffic.
        :param pulumi.Input[str] source_address_translation: Can be either omitted for none or the values automap or snat
        :param pulumi.Input[str] state: Specifies whether the virtual server and its resources are available for load balancing. The default is Enabled
        :param pulumi.Input[str] translate_address: Enables or disables address translation for the virtual server. Turn address translation off for a virtual server if you want to use the virtual server to load balance connections to any address. This option is useful when the system is load balancing devices that have the same IP address.
        :param pulumi.Input[str] translate_port: Enables or disables port translation. Turn port translation off for a virtual server if you want to use the virtual server to load balance connections to any service
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vlans: The virtual server is enabled/disabled on this set of VLANs. See vlans-disabled and vlans-enabled.
        :param pulumi.Input[bool] vlans_enabled: Enables the virtual server on the VLANs specified by the VLANs option.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["client_profiles"] = client_profiles
        __props__["default_persistence_profile"] = default_persistence_profile
        __props__["description"] = description
        __props__["destination"] = destination
        __props__["fallback_persistence_profile"] = fallback_persistence_profile
        __props__["ip_protocol"] = ip_protocol
        __props__["irules"] = irules
        __props__["mask"] = mask
        __props__["name"] = name
        __props__["persistence_profiles"] = persistence_profiles
        __props__["policies"] = policies
        __props__["pool"] = pool
        __props__["port"] = port
        __props__["profiles"] = profiles
        __props__["server_profiles"] = server_profiles
        __props__["snatpool"] = snatpool
        __props__["source"] = source
        __props__["source_address_translation"] = source_address_translation
        __props__["state"] = state
        __props__["translate_address"] = translate_address
        __props__["translate_port"] = translate_port
        __props__["vlans"] = vlans
        __props__["vlans_enabled"] = vlans_enabled
        return VirtualServer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clientProfiles")
    def client_profiles(self) -> pulumi.Output[Sequence[str]]:
        """
        List of client context profiles associated on the virtual server. Not mutually exclusive with profiles and server_profiles
        """
        return pulumi.get(self, "client_profiles")

    @property
    @pulumi.getter(name="defaultPersistenceProfile")
    def default_persistence_profile(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "default_persistence_profile")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of Virtual server
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Output[str]:
        """
        Destination IP
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="fallbackPersistenceProfile")
    def fallback_persistence_profile(self) -> pulumi.Output[str]:
        """
        Specifies a fallback persistence profile for the Virtual Server to use when the default persistence profile is not available.
        """
        return pulumi.get(self, "fallback_persistence_profile")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> pulumi.Output[str]:
        """
        Specify the IP protocol to use with the the virtual server (all, tcp, or udp are valid)
        """
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter
    def irules(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The iRules list you want run on this virtual server. iRules help automate the intercepting, processing, and routing of application traffic.
        """
        return pulumi.get(self, "irules")

    @property
    @pulumi.getter
    def mask(self) -> pulumi.Output[str]:
        """
        Mask can either be in CIDR notation or decimal, i.e.: 24 or 255.255.255.0. A CIDR mask of 0 is the same as 0.0.0.0
        """
        return pulumi.get(self, "mask")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the virtual server
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="persistenceProfiles")
    def persistence_profiles(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of persistence profiles associated with the Virtual Server.
        """
        return pulumi.get(self, "persistence_profiles")

    @property
    @pulumi.getter
    def policies(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter
    def pool(self) -> pulumi.Output[Optional[str]]:
        """
        Default pool name
        """
        return pulumi.get(self, "pool")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[int]:
        """
        Listen port for the virtual server
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def profiles(self) -> pulumi.Output[Sequence[str]]:
        """
        List of profiles associated both client and server contexts on the virtual server. This includes protocol, ssl, http, etc.
        """
        return pulumi.get(self, "profiles")

    @property
    @pulumi.getter(name="serverProfiles")
    def server_profiles(self) -> pulumi.Output[Sequence[str]]:
        """
        List of server context profiles associated on the virtual server. Not mutually exclusive with profiles and client_profiles
        """
        return pulumi.get(self, "server_profiles")

    @property
    @pulumi.getter
    def snatpool(self) -> pulumi.Output[str]:
        """
        Specifies the name of an existing SNAT pool that you want the virtual server to use to implement selective and intelligent SNATs. DEPRECATED - see Virtual Server Property Groups source-address-translation
        """
        return pulumi.get(self, "snatpool")

    @property
    @pulumi.getter
    def source(self) -> pulumi.Output[str]:
        """
        Specifies an IP address or network from which the virtual server will accept traffic.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sourceAddressTranslation")
    def source_address_translation(self) -> pulumi.Output[str]:
        """
        Can be either omitted for none or the values automap or snat
        """
        return pulumi.get(self, "source_address_translation")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies whether the virtual server and its resources are available for load balancing. The default is Enabled
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="translateAddress")
    def translate_address(self) -> pulumi.Output[str]:
        """
        Enables or disables address translation for the virtual server. Turn address translation off for a virtual server if you want to use the virtual server to load balance connections to any address. This option is useful when the system is load balancing devices that have the same IP address.
        """
        return pulumi.get(self, "translate_address")

    @property
    @pulumi.getter(name="translatePort")
    def translate_port(self) -> pulumi.Output[str]:
        """
        Enables or disables port translation. Turn port translation off for a virtual server if you want to use the virtual server to load balance connections to any service
        """
        return pulumi.get(self, "translate_port")

    @property
    @pulumi.getter
    def vlans(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The virtual server is enabled/disabled on this set of VLANs. See vlans-disabled and vlans-enabled.
        """
        return pulumi.get(self, "vlans")

    @property
    @pulumi.getter(name="vlansEnabled")
    def vlans_enabled(self) -> pulumi.Output[bool]:
        """
        Enables the virtual server on the VLANs specified by the VLANs option.
        """
        return pulumi.get(self, "vlans_enabled")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

