# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities, tables

class VirtualServer(pulumi.CustomResource):
    def __init__(__self__, __name__, __opts__=None, client_profiles=None, destination=None, fallback_persistence_profile=None, ip_protocol=None, irules=None, mask=None, name=None, persistence_profiles=None, policies=None, pool=None, port=None, profiles=None, server_profiles=None, snatpool=None, source=None, source_address_translation=None, translate_address=None, translate_port=None, vlans=None, vlans_enabled=None):
        """Create a VirtualServer resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['client_profiles'] = client_profiles

        if not destination:
            raise TypeError('Missing required property destination')
        __props__['destination'] = destination

        __props__['fallback_persistence_profile'] = fallback_persistence_profile

        __props__['ip_protocol'] = ip_protocol

        __props__['irules'] = irules

        __props__['mask'] = mask

        if not name:
            raise TypeError('Missing required property name')
        __props__['name'] = name

        __props__['persistence_profiles'] = persistence_profiles

        __props__['policies'] = policies

        __props__['pool'] = pool

        if not port:
            raise TypeError('Missing required property port')
        __props__['port'] = port

        __props__['profiles'] = profiles

        __props__['server_profiles'] = server_profiles

        __props__['snatpool'] = snatpool

        __props__['source'] = source

        __props__['source_address_translation'] = source_address_translation

        __props__['translate_address'] = translate_address

        __props__['translate_port'] = translate_port

        __props__['vlans'] = vlans

        __props__['vlans_enabled'] = vlans_enabled

        super(VirtualServer, __self__).__init__(
            'f5bigip:ltm/virtualServer:VirtualServer',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

