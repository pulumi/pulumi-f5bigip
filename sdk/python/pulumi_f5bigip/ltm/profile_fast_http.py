# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import pulumi
import pulumi.runtime
from .. import utilities, tables

class ProfileFastHttp(pulumi.CustomResource):
    connpool_maxreuse: pulumi.Output[int]
    """
    Specifies the maximum number of times that the system can re-use a current connection. The default value is 0 (zero).
    """
    connpool_maxsize: pulumi.Output[int]
    """
    Specifies the maximum number of connections to a load balancing pool. A setting of 0 specifies that a pool can accept an unlimited number of connections. The default value is 2048.
    """
    connpool_minsize: pulumi.Output[int]
    """
    Specifies the minimum number of connections to a load balancing pool. A setting of 0 specifies that there is no minimum. The default value is 10.
    """
    connpool_replenish: pulumi.Output[str]
    """
    The default value is enabled. When this option is enabled, the system replenishes the number of connections to a load balancing pool to the number of connections that existed when the server closed the connection to the pool. When disabled, the system replenishes the connection that was closed by the server, only when there are fewer connections to the pool than the number of connections set in the connpool-min-size connections option. Also see the connpool-min-size option..
    """
    connpool_step: pulumi.Output[int]
    """
    Specifies the increment in which the system makes additional connections available, when all available connections are in use. The default value is 4.
    """
    connpoolidle_timeoutoverride: pulumi.Output[int]
    """
    Specifies the number of seconds after which a server-side connection in a OneConnect pool is eligible for deletion, when the connection has no traffic.The value of this option overrides the idle-timeout value that you specify. The default value is 0 (zero) seconds, which disables the override setting.
    """
    defaults_from: pulumi.Output[str]
    """
    Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
    """
    forcehttp10response: pulumi.Output[str]
    """
    Specifies whether to rewrite the HTTP version in the status line of the server to HTTP 1.0 to discourage the client from pipelining or chunking data. The default value is disabled.
    """
    idle_timeout: pulumi.Output[int]
    """
    Specifies an idle timeout in seconds. This setting specifies the number of seconds that a connection is idle before the connection is eligible for deletion.When you specify an idle timeout for the Fast L4 profile, the value must be greater than the bigdb database variable Pva.Scrub time in msec for it to work properly.The default value is 300 seconds.
    """
    maxheader_size: pulumi.Output[int]
    """
    Specifies the maximum amount of HTTP header data that the system buffers before making a load balancing decision. The default setting is 32768.
    """
    name: pulumi.Output[str]
    """
    Name of the profile_fasthttp
    """
    def __init__(__self__, __name__, __opts__=None, connpool_maxreuse=None, connpool_maxsize=None, connpool_minsize=None, connpool_replenish=None, connpool_step=None, connpoolidle_timeoutoverride=None, defaults_from=None, forcehttp10response=None, idle_timeout=None, maxheader_size=None, name=None):
        """
        `bigip_ltm_profile_fasthttp` Configures a custom profile_fasthttp for use by health checks.
        
        For resources should be named with their "full path". The full path is the combination of the partition + name of the resource. For example /Common/my-pool.
        
        :param str __name__: The name of the resource.
        :param pulumi.ResourceOptions __opts__: Options for the resource.
        :param pulumi.Input[int] connpool_maxreuse: Specifies the maximum number of times that the system can re-use a current connection. The default value is 0 (zero).
        :param pulumi.Input[int] connpool_maxsize: Specifies the maximum number of connections to a load balancing pool. A setting of 0 specifies that a pool can accept an unlimited number of connections. The default value is 2048.
        :param pulumi.Input[int] connpool_minsize: Specifies the minimum number of connections to a load balancing pool. A setting of 0 specifies that there is no minimum. The default value is 10.
        :param pulumi.Input[str] connpool_replenish: The default value is enabled. When this option is enabled, the system replenishes the number of connections to a load balancing pool to the number of connections that existed when the server closed the connection to the pool. When disabled, the system replenishes the connection that was closed by the server, only when there are fewer connections to the pool than the number of connections set in the connpool-min-size connections option. Also see the connpool-min-size option..
        :param pulumi.Input[int] connpool_step: Specifies the increment in which the system makes additional connections available, when all available connections are in use. The default value is 4.
        :param pulumi.Input[int] connpoolidle_timeoutoverride: Specifies the number of seconds after which a server-side connection in a OneConnect pool is eligible for deletion, when the connection has no traffic.The value of this option overrides the idle-timeout value that you specify. The default value is 0 (zero) seconds, which disables the override setting.
        :param pulumi.Input[str] defaults_from: Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
        :param pulumi.Input[str] forcehttp10response: Specifies whether to rewrite the HTTP version in the status line of the server to HTTP 1.0 to discourage the client from pipelining or chunking data. The default value is disabled.
        :param pulumi.Input[int] idle_timeout: Specifies an idle timeout in seconds. This setting specifies the number of seconds that a connection is idle before the connection is eligible for deletion.When you specify an idle timeout for the Fast L4 profile, the value must be greater than the bigdb database variable Pva.Scrub time in msec for it to work properly.The default value is 300 seconds.
        :param pulumi.Input[int] maxheader_size: Specifies the maximum amount of HTTP header data that the system buffers before making a load balancing decision. The default setting is 32768.
        :param pulumi.Input[str] name: Name of the profile_fasthttp
        """
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['connpool_maxreuse'] = connpool_maxreuse

        __props__['connpool_maxsize'] = connpool_maxsize

        __props__['connpool_minsize'] = connpool_minsize

        __props__['connpool_replenish'] = connpool_replenish

        __props__['connpool_step'] = connpool_step

        __props__['connpoolidle_timeoutoverride'] = connpoolidle_timeoutoverride

        __props__['defaults_from'] = defaults_from

        __props__['forcehttp10response'] = forcehttp10response

        __props__['idle_timeout'] = idle_timeout

        __props__['maxheader_size'] = maxheader_size

        if not name:
            raise TypeError('Missing required property name')
        __props__['name'] = name

        super(ProfileFastHttp, __self__).__init__(
            'f5bigip:ltm/profileFastHttp:ProfileFastHttp',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

