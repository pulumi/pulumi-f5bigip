# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import pulumi
import pulumi.runtime
from .. import utilities, tables

class PersistenceProfileCookie(pulumi.CustomResource):
    always_send: pulumi.Output[str]
    app_service: pulumi.Output[str]
    cookie_encryption: pulumi.Output[str]
    cookie_encryption_passphrase: pulumi.Output[str]
    cookie_name: pulumi.Output[str]
    defaults_from: pulumi.Output[str]
    expiration: pulumi.Output[str]
    hash_length: pulumi.Output[int]
    hash_offset: pulumi.Output[int]
    httponly: pulumi.Output[str]
    match_across_pools: pulumi.Output[str]
    match_across_services: pulumi.Output[str]
    match_across_virtuals: pulumi.Output[str]
    mirror: pulumi.Output[str]
    name: pulumi.Output[str]
    override_conn_limit: pulumi.Output[str]
    timeout: pulumi.Output[int]
    def __init__(__self__, __name__, __opts__=None, always_send=None, app_service=None, cookie_encryption=None, cookie_encryption_passphrase=None, cookie_name=None, defaults_from=None, expiration=None, hash_length=None, hash_offset=None, httponly=None, match_across_pools=None, match_across_services=None, match_across_virtuals=None, mirror=None, name=None, override_conn_limit=None, timeout=None):
        """
        Configures a cookie persistence profile
        
        ## Reference
        
        `name` - (Required) Name of the virtual address
        
        `defaults_from` - (Required) Parent cookie persistence profile
        
        `match_across_pools` (Optional) (enabled or disabled) match across pools with given persistence record
        
        `match_across_services` (Optional) (enabled or disabled) match across services with given persistence record
        
        `match_across_virtuals` (Optional) (enabled or disabled) match across virtual servers with given persistence record
        
        `mirror` (Optional) (enabled or disabled) mirror persistence record
        
        `timeout` (Optional) (enabled or disabled) Timeout for persistence of the session in seconds
        
        `override_conn_limit` (Optional) (enabled or disabled) Enable or dissable pool member connection limits are overridden for persisted clients. Per-virtual connection limits remain hard limits and are not overridden.
        
        `always_send` (Optional) (enabled or disabled) always send cookies
        
        `cookie_encryption` (Optional) (required, preferred, or disabled) To required, preferred, or disabled policy for cookie encryption
        
        `cookie_encryption_passphrase` (Optional) (required, preferred, or disabled) Passphrase for encrypted cookies. The field is encrypted on the server and will always return differently then set.
        If this is configured specify `ignore_changes` under the `lifecycle` block to ignore returned encrypted value.
        
        `cookie_name` (Optional) Name of the cookie to track persistence
        
        `expiration` (Optional) Expiration TTL for cookie specified in DAY:HOUR:MIN:SECONDS (Examples: 1:0:0:0 one day, 1:0:0 one hour, 30:0 thirty minutes)
        
        `hash_length` (Optional) (Integer) Length of hash to apply to cookie
        
        `hash_offset` (Optional) (Integer) Number of characters to skip in the cookie for the hash
        
        `httponly` (Optional) (enabled or disabled) Sending only over http
        
        :param str __name__: The name of the resource.
        :param pulumi.ResourceOptions __opts__: Options for the resource.
        :param pulumi.Input[str] always_send
        :param pulumi.Input[str] app_service
        :param pulumi.Input[str] cookie_encryption
        :param pulumi.Input[str] cookie_encryption_passphrase
        :param pulumi.Input[str] cookie_name
        :param pulumi.Input[str] defaults_from
        :param pulumi.Input[str] expiration
        :param pulumi.Input[int] hash_length
        :param pulumi.Input[int] hash_offset
        :param pulumi.Input[str] httponly
        :param pulumi.Input[str] match_across_pools
        :param pulumi.Input[str] match_across_services
        :param pulumi.Input[str] match_across_virtuals
        :param pulumi.Input[str] mirror
        :param pulumi.Input[str] name
        :param pulumi.Input[str] override_conn_limit
        :param pulumi.Input[int] timeout
        """
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['always_send'] = always_send

        __props__['app_service'] = app_service

        __props__['cookie_encryption'] = cookie_encryption

        __props__['cookie_encryption_passphrase'] = cookie_encryption_passphrase

        __props__['cookie_name'] = cookie_name

        if not defaults_from:
            raise TypeError('Missing required property defaults_from')
        __props__['defaults_from'] = defaults_from

        __props__['expiration'] = expiration

        __props__['hash_length'] = hash_length

        __props__['hash_offset'] = hash_offset

        __props__['httponly'] = httponly

        __props__['match_across_pools'] = match_across_pools

        __props__['match_across_services'] = match_across_services

        __props__['match_across_virtuals'] = match_across_virtuals

        __props__['mirror'] = mirror

        if not name:
            raise TypeError('Missing required property name')
        __props__['name'] = name

        __props__['override_conn_limit'] = override_conn_limit

        __props__['timeout'] = timeout

        super(PersistenceProfileCookie, __self__).__init__(
            'f5bigip:ltm/persistenceProfileCookie:PersistenceProfileCookie',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

