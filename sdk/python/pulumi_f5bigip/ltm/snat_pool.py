# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import pulumi
import pulumi.runtime
from .. import utilities, tables

class SnatPool(pulumi.CustomResource):
    members: pulumi.Output[list]
    """
    Specifies a translation address to add to or delete from a SNAT pool (at least one address is required)
    """
    name: pulumi.Output[str]
    """
    Name of the snatpool
    """
    def __init__(__self__, __name__, __opts__=None, members=None, name=None):
        """
        `bigip_ltm_snatpool` Collections of SNAT translation addresses
        
        Resource should be named with their "full path". The full path is the combination of the partition + name of the resource, for example /Common/my-snatpool. 
        
        :param str __name__: The name of the resource.
        :param pulumi.ResourceOptions __opts__: Options for the resource.
        :param pulumi.Input[list] members: Specifies a translation address to add to or delete from a SNAT pool (at least one address is required)
        :param pulumi.Input[str] name: Name of the snatpool
        """
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not members:
            raise TypeError('Missing required property members')
        __props__['members'] = members

        if not name:
            raise TypeError('Missing required property name')
        __props__['name'] = name

        super(SnatPool, __self__).__init__(
            'f5bigip:ltm/snatPool:SnatPool',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

