# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import pulumi
import pulumi.runtime
from .. import utilities, tables

class Node(pulumi.CustomResource):
    address: pulumi.Output[str]
    """
    IP or hostname of the node
    """
    connection_limit: pulumi.Output[int]
    dynamic_ratio: pulumi.Output[int]
    fqdns: pulumi.Output[list]
    monitor: pulumi.Output[str]
    name: pulumi.Output[str]
    """
    Name of the node
    """
    rate_limit: pulumi.Output[str]
    state: pulumi.Output[str]
    """
    Default is "user-up" you can set to "user-down" if you want to disable
    """
    def __init__(__self__, __name__, __opts__=None, address=None, connection_limit=None, dynamic_ratio=None, fqdns=None, monitor=None, name=None, rate_limit=None, state=None):
        """
        `bigip_ltm_node` Manages a node configuration
        
        For resources should be named with their "full path". The full path is the combination of the partition + name of the resource. For example /Common/my-pool.
        
        :param str __name__: The name of the resource.
        :param pulumi.ResourceOptions __opts__: Options for the resource.
        :param pulumi.Input[str] address: IP or hostname of the node
        :param pulumi.Input[int] connection_limit
        :param pulumi.Input[int] dynamic_ratio
        :param pulumi.Input[list] fqdns
        :param pulumi.Input[str] monitor
        :param pulumi.Input[str] name: Name of the node
        :param pulumi.Input[str] rate_limit
        :param pulumi.Input[str] state: Default is "user-up" you can set to "user-down" if you want to disable
        """
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not address:
            raise TypeError('Missing required property address')
        __props__['address'] = address

        __props__['connection_limit'] = connection_limit

        __props__['dynamic_ratio'] = dynamic_ratio

        __props__['fqdns'] = fqdns

        __props__['monitor'] = monitor

        if not name:
            raise TypeError('Missing required property name')
        __props__['name'] = name

        __props__['rate_limit'] = rate_limit

        __props__['state'] = state

        super(Node, __self__).__init__(
            'f5bigip:ltm/node:Node',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

