# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class Pool(pulumi.CustomResource):
    allow_nat: pulumi.Output[str]
    """
    Allow NAT
    """
    allow_snat: pulumi.Output[str]
    """
    Allow SNAT
    """
    description: pulumi.Output[str]
    """
    Userdefined value to describe the pool 
    """
    load_balancing_mode: pulumi.Output[str]
    """
    Possible values: round-robin, ...
    """
    monitors: pulumi.Output[list]
    """
    List of monitor names to associate with the pool
    """
    name: pulumi.Output[str]
    """
    Name of the pool
    """
    reselect_tries: pulumi.Output[float]
    """
    Number of times the system tries to select a new pool member after a failure.
    """
    service_down_action: pulumi.Output[str]
    """
    Possible values: none, reset, reselect, drop
    """
    slow_ramp_time: pulumi.Output[float]
    """
    Slow ramp time for pool members
    """
    def __init__(__self__, resource_name, opts=None, allow_nat=None, allow_snat=None, description=None, load_balancing_mode=None, monitors=None, name=None, reselect_tries=None, service_down_action=None, slow_ramp_time=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a Pool resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] allow_nat: Allow NAT
        :param pulumi.Input[str] allow_snat: Allow SNAT
        :param pulumi.Input[str] description: Userdefined value to describe the pool 
        :param pulumi.Input[str] load_balancing_mode: Possible values: round-robin, ...
        :param pulumi.Input[list] monitors: List of monitor names to associate with the pool
        :param pulumi.Input[str] name: Name of the pool
        :param pulumi.Input[float] reselect_tries: Number of times the system tries to select a new pool member after a failure.
        :param pulumi.Input[str] service_down_action: Possible values: none, reset, reselect, drop
        :param pulumi.Input[float] slow_ramp_time: Slow ramp time for pool members
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['allow_nat'] = allow_nat
            __props__['allow_snat'] = allow_snat
            __props__['description'] = description
            __props__['load_balancing_mode'] = load_balancing_mode
            __props__['monitors'] = monitors
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['reselect_tries'] = reselect_tries
            __props__['service_down_action'] = service_down_action
            __props__['slow_ramp_time'] = slow_ramp_time
        super(Pool, __self__).__init__(
            'f5bigip:ltm/pool:Pool',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, allow_nat=None, allow_snat=None, description=None, load_balancing_mode=None, monitors=None, name=None, reselect_tries=None, service_down_action=None, slow_ramp_time=None):
        """
        Get an existing Pool resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] allow_nat: Allow NAT
        :param pulumi.Input[str] allow_snat: Allow SNAT
        :param pulumi.Input[str] description: Userdefined value to describe the pool 
        :param pulumi.Input[str] load_balancing_mode: Possible values: round-robin, ...
        :param pulumi.Input[list] monitors: List of monitor names to associate with the pool
        :param pulumi.Input[str] name: Name of the pool
        :param pulumi.Input[float] reselect_tries: Number of times the system tries to select a new pool member after a failure.
        :param pulumi.Input[str] service_down_action: Possible values: none, reset, reselect, drop
        :param pulumi.Input[float] slow_ramp_time: Slow ramp time for pool members
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["allow_nat"] = allow_nat
        __props__["allow_snat"] = allow_snat
        __props__["description"] = description
        __props__["load_balancing_mode"] = load_balancing_mode
        __props__["monitors"] = monitors
        __props__["name"] = name
        __props__["reselect_tries"] = reselect_tries
        __props__["service_down_action"] = service_down_action
        __props__["slow_ramp_time"] = slow_ramp_time
        return Pool(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

