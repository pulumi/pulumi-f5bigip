# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['MonitorArgs', 'Monitor']

@pulumi.input_type
class MonitorArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parent: pulumi.Input[str],
                 adaptive: Optional[pulumi.Input[str]] = None,
                 adaptive_limit: Optional[pulumi.Input[int]] = None,
                 compatibility: Optional[pulumi.Input[str]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 destination: Optional[pulumi.Input[str]] = None,
                 filename: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 ip_dscp: Optional[pulumi.Input[int]] = None,
                 manual_resume: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 receive: Optional[pulumi.Input[str]] = None,
                 receive_disable: Optional[pulumi.Input[str]] = None,
                 reverse: Optional[pulumi.Input[str]] = None,
                 send: Optional[pulumi.Input[str]] = None,
                 time_until_up: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 transparent: Optional[pulumi.Input[str]] = None,
                 up_interval: Optional[pulumi.Input[int]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Monitor resource.
        :param pulumi.Input[str] name: Specifies the Name of the LTM Monitor.Name of Monitor should be full path,full path is the combination of the `partition + monitor name`,For ex:`/Common/test-ltm-monitor`.
        :param pulumi.Input[str] parent: Parent monitor for the system to use for setting initial values for the new monitor.
        :param pulumi.Input[str] adaptive: Specifies whether adaptive response time monitoring is enabled for this monitor. The default is `disabled`.
        :param pulumi.Input[int] adaptive_limit: Specifies the absolute number of milliseconds that may not be exceeded by a monitor probe, regardless of Allowed Divergence.
        :param pulumi.Input[str] compatibility: Specifies, when enabled, that the SSL options setting (in OpenSSL) is set to ALL. Accepts 'enabled' or 'disabled' values, the default value is 'enabled'.
        :param pulumi.Input[str] database: Specifies the database in which the user is created
        :param pulumi.Input[str] destination: Specify an alias address for monitoring
        :param pulumi.Input[str] filename: Specifies the full path and file name of the file that the system attempts to download. The health check is successful if the system can download the file.
        :param pulumi.Input[int] interval: Specifies, in seconds, the frequency at which the system issues the monitor check when either the resource is down or the status of the resource is unknown. The default is `5`
        :param pulumi.Input[int] ip_dscp: Displays the differentiated services code point (DSCP).The default is `0 (zero)`.
        :param pulumi.Input[str] manual_resume: Specifies whether the system automatically changes the status of a resource to Enabled at the next successful monitor check.
        :param pulumi.Input[str] mode: Specifies the data transfer process (DTP) mode. The default value is passive. The options are passive (Specifies that the monitor sends a data transfer request to the FTP server. When the FTP server receives the request, the FTP server then initiates and establishes the data connection.) and active (Specifies that the monitor initiates and establishes the data connection with the FTP server.).
        :param pulumi.Input[str] password: Specifies the password if the monitored target requires authentication
        :param pulumi.Input[str] receive: Specifies the regular expression representing the text string that the monitor looks for in the returned resource.
        :param pulumi.Input[str] receive_disable: The system marks the node or pool member disabled when its response matches Receive Disable String but not Receive String.
        :param pulumi.Input[str] reverse: Instructs the system to mark the target resource down when the test is successful.
        :param pulumi.Input[str] send: Specifies the text string that the monitor sends to the target object.
        :param pulumi.Input[int] time_until_up: Specifies the number of seconds to wait after a resource first responds correctly to the monitor before setting the resource to up.
        :param pulumi.Input[int] timeout: Specifies the number of seconds the target has in which to respond to the monitor request. The default is `16` seconds
        :param pulumi.Input[str] transparent: Specifies whether the monitor operates in transparent mode.
        :param pulumi.Input[int] up_interval: Specifies the interval for the system to use to perform the health check when a resource is up. The default is `0(Disabled)`
        :param pulumi.Input[str] username: Specifies the user name if the monitored target requires authentication
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parent", parent)
        if adaptive is not None:
            pulumi.set(__self__, "adaptive", adaptive)
        if adaptive_limit is not None:
            pulumi.set(__self__, "adaptive_limit", adaptive_limit)
        if compatibility is not None:
            pulumi.set(__self__, "compatibility", compatibility)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if ip_dscp is not None:
            pulumi.set(__self__, "ip_dscp", ip_dscp)
        if manual_resume is not None:
            pulumi.set(__self__, "manual_resume", manual_resume)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if receive is not None:
            pulumi.set(__self__, "receive", receive)
        if receive_disable is not None:
            pulumi.set(__self__, "receive_disable", receive_disable)
        if reverse is not None:
            pulumi.set(__self__, "reverse", reverse)
        if send is not None:
            pulumi.set(__self__, "send", send)
        if time_until_up is not None:
            pulumi.set(__self__, "time_until_up", time_until_up)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if transparent is not None:
            pulumi.set(__self__, "transparent", transparent)
        if up_interval is not None:
            pulumi.set(__self__, "up_interval", up_interval)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Specifies the Name of the LTM Monitor.Name of Monitor should be full path,full path is the combination of the `partition + monitor name`,For ex:`/Common/test-ltm-monitor`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parent(self) -> pulumi.Input[str]:
        """
        Parent monitor for the system to use for setting initial values for the new monitor.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: pulumi.Input[str]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter
    def adaptive(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether adaptive response time monitoring is enabled for this monitor. The default is `disabled`.
        """
        return pulumi.get(self, "adaptive")

    @adaptive.setter
    def adaptive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adaptive", value)

    @property
    @pulumi.getter(name="adaptiveLimit")
    def adaptive_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the absolute number of milliseconds that may not be exceeded by a monitor probe, regardless of Allowed Divergence.
        """
        return pulumi.get(self, "adaptive_limit")

    @adaptive_limit.setter
    def adaptive_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adaptive_limit", value)

    @property
    @pulumi.getter
    def compatibility(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies, when enabled, that the SSL options setting (in OpenSSL) is set to ALL. Accepts 'enabled' or 'disabled' values, the default value is 'enabled'.
        """
        return pulumi.get(self, "compatibility")

    @compatibility.setter
    def compatibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compatibility", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the database in which the user is created
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input[str]]:
        """
        Specify an alias address for monitoring
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter
    def filename(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the full path and file name of the file that the system attempts to download. The health check is successful if the system can download the file.
        """
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filename", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies, in seconds, the frequency at which the system issues the monitor check when either the resource is down or the status of the resource is unknown. The default is `5`
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="ipDscp")
    def ip_dscp(self) -> Optional[pulumi.Input[int]]:
        """
        Displays the differentiated services code point (DSCP).The default is `0 (zero)`.
        """
        return pulumi.get(self, "ip_dscp")

    @ip_dscp.setter
    def ip_dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip_dscp", value)

    @property
    @pulumi.getter(name="manualResume")
    def manual_resume(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether the system automatically changes the status of a resource to Enabled at the next successful monitor check.
        """
        return pulumi.get(self, "manual_resume")

    @manual_resume.setter
    def manual_resume(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "manual_resume", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the data transfer process (DTP) mode. The default value is passive. The options are passive (Specifies that the monitor sends a data transfer request to the FTP server. When the FTP server receives the request, the FTP server then initiates and establishes the data connection.) and active (Specifies that the monitor initiates and establishes the data connection with the FTP server.).
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the password if the monitored target requires authentication
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def receive(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the regular expression representing the text string that the monitor looks for in the returned resource.
        """
        return pulumi.get(self, "receive")

    @receive.setter
    def receive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "receive", value)

    @property
    @pulumi.getter(name="receiveDisable")
    def receive_disable(self) -> Optional[pulumi.Input[str]]:
        """
        The system marks the node or pool member disabled when its response matches Receive Disable String but not Receive String.
        """
        return pulumi.get(self, "receive_disable")

    @receive_disable.setter
    def receive_disable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "receive_disable", value)

    @property
    @pulumi.getter
    def reverse(self) -> Optional[pulumi.Input[str]]:
        """
        Instructs the system to mark the target resource down when the test is successful.
        """
        return pulumi.get(self, "reverse")

    @reverse.setter
    def reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reverse", value)

    @property
    @pulumi.getter
    def send(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the text string that the monitor sends to the target object.
        """
        return pulumi.get(self, "send")

    @send.setter
    def send(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send", value)

    @property
    @pulumi.getter(name="timeUntilUp")
    def time_until_up(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the number of seconds to wait after a resource first responds correctly to the monitor before setting the resource to up.
        """
        return pulumi.get(self, "time_until_up")

    @time_until_up.setter
    def time_until_up(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "time_until_up", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the number of seconds the target has in which to respond to the monitor request. The default is `16` seconds
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def transparent(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether the monitor operates in transparent mode.
        """
        return pulumi.get(self, "transparent")

    @transparent.setter
    def transparent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transparent", value)

    @property
    @pulumi.getter(name="upInterval")
    def up_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the interval for the system to use to perform the health check when a resource is up. The default is `0(Disabled)`
        """
        return pulumi.get(self, "up_interval")

    @up_interval.setter
    def up_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "up_interval", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the user name if the monitored target requires authentication
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class _MonitorState:
    def __init__(__self__, *,
                 adaptive: Optional[pulumi.Input[str]] = None,
                 adaptive_limit: Optional[pulumi.Input[int]] = None,
                 compatibility: Optional[pulumi.Input[str]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 destination: Optional[pulumi.Input[str]] = None,
                 filename: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 ip_dscp: Optional[pulumi.Input[int]] = None,
                 manual_resume: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 receive: Optional[pulumi.Input[str]] = None,
                 receive_disable: Optional[pulumi.Input[str]] = None,
                 reverse: Optional[pulumi.Input[str]] = None,
                 send: Optional[pulumi.Input[str]] = None,
                 time_until_up: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 transparent: Optional[pulumi.Input[str]] = None,
                 up_interval: Optional[pulumi.Input[int]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Monitor resources.
        :param pulumi.Input[str] adaptive: Specifies whether adaptive response time monitoring is enabled for this monitor. The default is `disabled`.
        :param pulumi.Input[int] adaptive_limit: Specifies the absolute number of milliseconds that may not be exceeded by a monitor probe, regardless of Allowed Divergence.
        :param pulumi.Input[str] compatibility: Specifies, when enabled, that the SSL options setting (in OpenSSL) is set to ALL. Accepts 'enabled' or 'disabled' values, the default value is 'enabled'.
        :param pulumi.Input[str] database: Specifies the database in which the user is created
        :param pulumi.Input[str] destination: Specify an alias address for monitoring
        :param pulumi.Input[str] filename: Specifies the full path and file name of the file that the system attempts to download. The health check is successful if the system can download the file.
        :param pulumi.Input[int] interval: Specifies, in seconds, the frequency at which the system issues the monitor check when either the resource is down or the status of the resource is unknown. The default is `5`
        :param pulumi.Input[int] ip_dscp: Displays the differentiated services code point (DSCP).The default is `0 (zero)`.
        :param pulumi.Input[str] manual_resume: Specifies whether the system automatically changes the status of a resource to Enabled at the next successful monitor check.
        :param pulumi.Input[str] mode: Specifies the data transfer process (DTP) mode. The default value is passive. The options are passive (Specifies that the monitor sends a data transfer request to the FTP server. When the FTP server receives the request, the FTP server then initiates and establishes the data connection.) and active (Specifies that the monitor initiates and establishes the data connection with the FTP server.).
        :param pulumi.Input[str] name: Specifies the Name of the LTM Monitor.Name of Monitor should be full path,full path is the combination of the `partition + monitor name`,For ex:`/Common/test-ltm-monitor`.
        :param pulumi.Input[str] parent: Parent monitor for the system to use for setting initial values for the new monitor.
        :param pulumi.Input[str] password: Specifies the password if the monitored target requires authentication
        :param pulumi.Input[str] receive: Specifies the regular expression representing the text string that the monitor looks for in the returned resource.
        :param pulumi.Input[str] receive_disable: The system marks the node or pool member disabled when its response matches Receive Disable String but not Receive String.
        :param pulumi.Input[str] reverse: Instructs the system to mark the target resource down when the test is successful.
        :param pulumi.Input[str] send: Specifies the text string that the monitor sends to the target object.
        :param pulumi.Input[int] time_until_up: Specifies the number of seconds to wait after a resource first responds correctly to the monitor before setting the resource to up.
        :param pulumi.Input[int] timeout: Specifies the number of seconds the target has in which to respond to the monitor request. The default is `16` seconds
        :param pulumi.Input[str] transparent: Specifies whether the monitor operates in transparent mode.
        :param pulumi.Input[int] up_interval: Specifies the interval for the system to use to perform the health check when a resource is up. The default is `0(Disabled)`
        :param pulumi.Input[str] username: Specifies the user name if the monitored target requires authentication
        """
        if adaptive is not None:
            pulumi.set(__self__, "adaptive", adaptive)
        if adaptive_limit is not None:
            pulumi.set(__self__, "adaptive_limit", adaptive_limit)
        if compatibility is not None:
            pulumi.set(__self__, "compatibility", compatibility)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if ip_dscp is not None:
            pulumi.set(__self__, "ip_dscp", ip_dscp)
        if manual_resume is not None:
            pulumi.set(__self__, "manual_resume", manual_resume)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if receive is not None:
            pulumi.set(__self__, "receive", receive)
        if receive_disable is not None:
            pulumi.set(__self__, "receive_disable", receive_disable)
        if reverse is not None:
            pulumi.set(__self__, "reverse", reverse)
        if send is not None:
            pulumi.set(__self__, "send", send)
        if time_until_up is not None:
            pulumi.set(__self__, "time_until_up", time_until_up)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if transparent is not None:
            pulumi.set(__self__, "transparent", transparent)
        if up_interval is not None:
            pulumi.set(__self__, "up_interval", up_interval)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def adaptive(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether adaptive response time monitoring is enabled for this monitor. The default is `disabled`.
        """
        return pulumi.get(self, "adaptive")

    @adaptive.setter
    def adaptive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adaptive", value)

    @property
    @pulumi.getter(name="adaptiveLimit")
    def adaptive_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the absolute number of milliseconds that may not be exceeded by a monitor probe, regardless of Allowed Divergence.
        """
        return pulumi.get(self, "adaptive_limit")

    @adaptive_limit.setter
    def adaptive_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adaptive_limit", value)

    @property
    @pulumi.getter
    def compatibility(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies, when enabled, that the SSL options setting (in OpenSSL) is set to ALL. Accepts 'enabled' or 'disabled' values, the default value is 'enabled'.
        """
        return pulumi.get(self, "compatibility")

    @compatibility.setter
    def compatibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compatibility", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the database in which the user is created
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input[str]]:
        """
        Specify an alias address for monitoring
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter
    def filename(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the full path and file name of the file that the system attempts to download. The health check is successful if the system can download the file.
        """
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filename", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies, in seconds, the frequency at which the system issues the monitor check when either the resource is down or the status of the resource is unknown. The default is `5`
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="ipDscp")
    def ip_dscp(self) -> Optional[pulumi.Input[int]]:
        """
        Displays the differentiated services code point (DSCP).The default is `0 (zero)`.
        """
        return pulumi.get(self, "ip_dscp")

    @ip_dscp.setter
    def ip_dscp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip_dscp", value)

    @property
    @pulumi.getter(name="manualResume")
    def manual_resume(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether the system automatically changes the status of a resource to Enabled at the next successful monitor check.
        """
        return pulumi.get(self, "manual_resume")

    @manual_resume.setter
    def manual_resume(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "manual_resume", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the data transfer process (DTP) mode. The default value is passive. The options are passive (Specifies that the monitor sends a data transfer request to the FTP server. When the FTP server receives the request, the FTP server then initiates and establishes the data connection.) and active (Specifies that the monitor initiates and establishes the data connection with the FTP server.).
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the Name of the LTM Monitor.Name of Monitor should be full path,full path is the combination of the `partition + monitor name`,For ex:`/Common/test-ltm-monitor`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        Parent monitor for the system to use for setting initial values for the new monitor.
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the password if the monitored target requires authentication
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def receive(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the regular expression representing the text string that the monitor looks for in the returned resource.
        """
        return pulumi.get(self, "receive")

    @receive.setter
    def receive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "receive", value)

    @property
    @pulumi.getter(name="receiveDisable")
    def receive_disable(self) -> Optional[pulumi.Input[str]]:
        """
        The system marks the node or pool member disabled when its response matches Receive Disable String but not Receive String.
        """
        return pulumi.get(self, "receive_disable")

    @receive_disable.setter
    def receive_disable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "receive_disable", value)

    @property
    @pulumi.getter
    def reverse(self) -> Optional[pulumi.Input[str]]:
        """
        Instructs the system to mark the target resource down when the test is successful.
        """
        return pulumi.get(self, "reverse")

    @reverse.setter
    def reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reverse", value)

    @property
    @pulumi.getter
    def send(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the text string that the monitor sends to the target object.
        """
        return pulumi.get(self, "send")

    @send.setter
    def send(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "send", value)

    @property
    @pulumi.getter(name="timeUntilUp")
    def time_until_up(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the number of seconds to wait after a resource first responds correctly to the monitor before setting the resource to up.
        """
        return pulumi.get(self, "time_until_up")

    @time_until_up.setter
    def time_until_up(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "time_until_up", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the number of seconds the target has in which to respond to the monitor request. The default is `16` seconds
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def transparent(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether the monitor operates in transparent mode.
        """
        return pulumi.get(self, "transparent")

    @transparent.setter
    def transparent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transparent", value)

    @property
    @pulumi.getter(name="upInterval")
    def up_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the interval for the system to use to perform the health check when a resource is up. The default is `0(Disabled)`
        """
        return pulumi.get(self, "up_interval")

    @up_interval.setter
    def up_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "up_interval", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the user name if the monitored target requires authentication
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


class Monitor(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 adaptive: Optional[pulumi.Input[str]] = None,
                 adaptive_limit: Optional[pulumi.Input[int]] = None,
                 compatibility: Optional[pulumi.Input[str]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 destination: Optional[pulumi.Input[str]] = None,
                 filename: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 ip_dscp: Optional[pulumi.Input[int]] = None,
                 manual_resume: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 receive: Optional[pulumi.Input[str]] = None,
                 receive_disable: Optional[pulumi.Input[str]] = None,
                 reverse: Optional[pulumi.Input[str]] = None,
                 send: Optional[pulumi.Input[str]] = None,
                 time_until_up: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 transparent: Optional[pulumi.Input[str]] = None,
                 up_interval: Optional[pulumi.Input[int]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        `ltm.Monitor` Configures a custom monitor for use by health checks.

        For resources should be named with their "full path". The full path is the combination of the partition + name of the resource. For example /Common/my-pool.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5bigip as f5bigip

        monitor = f5bigip.ltm.Monitor("monitor",
            destination="1.2.3.4:1234",
            interval=999,
            name="/Common/terraform_monitor",
            parent="/Common/http",
            send=\"\"\"GET /some/path

        \"\"\",
            timeout=999)
        test_ftp_monitor = f5bigip.ltm.Monitor("test-ftp-monitor",
            destination="*:8008",
            filename="somefile",
            interval=5,
            name="/Common/ftp-test",
            parent="/Common/ftp",
            time_until_up=0,
            timeout=16)
        test_postgresql_monitor = f5bigip.ltm.Monitor("test-postgresql-monitor",
            interval=5,
            name="/Common/test-postgresql-monitor",
            parent="/Common/postgresql",
            password="abcd1234",
            receive="Test",
            send="SELECT 'Test';",
            timeout=16,
            username="abcd")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] adaptive: Specifies whether adaptive response time monitoring is enabled for this monitor. The default is `disabled`.
        :param pulumi.Input[int] adaptive_limit: Specifies the absolute number of milliseconds that may not be exceeded by a monitor probe, regardless of Allowed Divergence.
        :param pulumi.Input[str] compatibility: Specifies, when enabled, that the SSL options setting (in OpenSSL) is set to ALL. Accepts 'enabled' or 'disabled' values, the default value is 'enabled'.
        :param pulumi.Input[str] database: Specifies the database in which the user is created
        :param pulumi.Input[str] destination: Specify an alias address for monitoring
        :param pulumi.Input[str] filename: Specifies the full path and file name of the file that the system attempts to download. The health check is successful if the system can download the file.
        :param pulumi.Input[int] interval: Specifies, in seconds, the frequency at which the system issues the monitor check when either the resource is down or the status of the resource is unknown. The default is `5`
        :param pulumi.Input[int] ip_dscp: Displays the differentiated services code point (DSCP).The default is `0 (zero)`.
        :param pulumi.Input[str] manual_resume: Specifies whether the system automatically changes the status of a resource to Enabled at the next successful monitor check.
        :param pulumi.Input[str] mode: Specifies the data transfer process (DTP) mode. The default value is passive. The options are passive (Specifies that the monitor sends a data transfer request to the FTP server. When the FTP server receives the request, the FTP server then initiates and establishes the data connection.) and active (Specifies that the monitor initiates and establishes the data connection with the FTP server.).
        :param pulumi.Input[str] name: Specifies the Name of the LTM Monitor.Name of Monitor should be full path,full path is the combination of the `partition + monitor name`,For ex:`/Common/test-ltm-monitor`.
        :param pulumi.Input[str] parent: Parent monitor for the system to use for setting initial values for the new monitor.
        :param pulumi.Input[str] password: Specifies the password if the monitored target requires authentication
        :param pulumi.Input[str] receive: Specifies the regular expression representing the text string that the monitor looks for in the returned resource.
        :param pulumi.Input[str] receive_disable: The system marks the node or pool member disabled when its response matches Receive Disable String but not Receive String.
        :param pulumi.Input[str] reverse: Instructs the system to mark the target resource down when the test is successful.
        :param pulumi.Input[str] send: Specifies the text string that the monitor sends to the target object.
        :param pulumi.Input[int] time_until_up: Specifies the number of seconds to wait after a resource first responds correctly to the monitor before setting the resource to up.
        :param pulumi.Input[int] timeout: Specifies the number of seconds the target has in which to respond to the monitor request. The default is `16` seconds
        :param pulumi.Input[str] transparent: Specifies whether the monitor operates in transparent mode.
        :param pulumi.Input[int] up_interval: Specifies the interval for the system to use to perform the health check when a resource is up. The default is `0(Disabled)`
        :param pulumi.Input[str] username: Specifies the user name if the monitored target requires authentication
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MonitorArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        `ltm.Monitor` Configures a custom monitor for use by health checks.

        For resources should be named with their "full path". The full path is the combination of the partition + name of the resource. For example /Common/my-pool.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5bigip as f5bigip

        monitor = f5bigip.ltm.Monitor("monitor",
            destination="1.2.3.4:1234",
            interval=999,
            name="/Common/terraform_monitor",
            parent="/Common/http",
            send=\"\"\"GET /some/path

        \"\"\",
            timeout=999)
        test_ftp_monitor = f5bigip.ltm.Monitor("test-ftp-monitor",
            destination="*:8008",
            filename="somefile",
            interval=5,
            name="/Common/ftp-test",
            parent="/Common/ftp",
            time_until_up=0,
            timeout=16)
        test_postgresql_monitor = f5bigip.ltm.Monitor("test-postgresql-monitor",
            interval=5,
            name="/Common/test-postgresql-monitor",
            parent="/Common/postgresql",
            password="abcd1234",
            receive="Test",
            send="SELECT 'Test';",
            timeout=16,
            username="abcd")
        ```

        :param str resource_name: The name of the resource.
        :param MonitorArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MonitorArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 adaptive: Optional[pulumi.Input[str]] = None,
                 adaptive_limit: Optional[pulumi.Input[int]] = None,
                 compatibility: Optional[pulumi.Input[str]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 destination: Optional[pulumi.Input[str]] = None,
                 filename: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 ip_dscp: Optional[pulumi.Input[int]] = None,
                 manual_resume: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 receive: Optional[pulumi.Input[str]] = None,
                 receive_disable: Optional[pulumi.Input[str]] = None,
                 reverse: Optional[pulumi.Input[str]] = None,
                 send: Optional[pulumi.Input[str]] = None,
                 time_until_up: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 transparent: Optional[pulumi.Input[str]] = None,
                 up_interval: Optional[pulumi.Input[int]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MonitorArgs.__new__(MonitorArgs)

            __props__.__dict__["adaptive"] = adaptive
            __props__.__dict__["adaptive_limit"] = adaptive_limit
            __props__.__dict__["compatibility"] = compatibility
            __props__.__dict__["database"] = database
            __props__.__dict__["destination"] = destination
            __props__.__dict__["filename"] = filename
            __props__.__dict__["interval"] = interval
            __props__.__dict__["ip_dscp"] = ip_dscp
            __props__.__dict__["manual_resume"] = manual_resume
            __props__.__dict__["mode"] = mode
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            if parent is None and not opts.urn:
                raise TypeError("Missing required property 'parent'")
            __props__.__dict__["parent"] = parent
            __props__.__dict__["password"] = password
            __props__.__dict__["receive"] = receive
            __props__.__dict__["receive_disable"] = receive_disable
            __props__.__dict__["reverse"] = reverse
            __props__.__dict__["send"] = send
            __props__.__dict__["time_until_up"] = time_until_up
            __props__.__dict__["timeout"] = timeout
            __props__.__dict__["transparent"] = transparent
            __props__.__dict__["up_interval"] = up_interval
            __props__.__dict__["username"] = username
        super(Monitor, __self__).__init__(
            'f5bigip:ltm/monitor:Monitor',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            adaptive: Optional[pulumi.Input[str]] = None,
            adaptive_limit: Optional[pulumi.Input[int]] = None,
            compatibility: Optional[pulumi.Input[str]] = None,
            database: Optional[pulumi.Input[str]] = None,
            destination: Optional[pulumi.Input[str]] = None,
            filename: Optional[pulumi.Input[str]] = None,
            interval: Optional[pulumi.Input[int]] = None,
            ip_dscp: Optional[pulumi.Input[int]] = None,
            manual_resume: Optional[pulumi.Input[str]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            parent: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            receive: Optional[pulumi.Input[str]] = None,
            receive_disable: Optional[pulumi.Input[str]] = None,
            reverse: Optional[pulumi.Input[str]] = None,
            send: Optional[pulumi.Input[str]] = None,
            time_until_up: Optional[pulumi.Input[int]] = None,
            timeout: Optional[pulumi.Input[int]] = None,
            transparent: Optional[pulumi.Input[str]] = None,
            up_interval: Optional[pulumi.Input[int]] = None,
            username: Optional[pulumi.Input[str]] = None) -> 'Monitor':
        """
        Get an existing Monitor resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] adaptive: Specifies whether adaptive response time monitoring is enabled for this monitor. The default is `disabled`.
        :param pulumi.Input[int] adaptive_limit: Specifies the absolute number of milliseconds that may not be exceeded by a monitor probe, regardless of Allowed Divergence.
        :param pulumi.Input[str] compatibility: Specifies, when enabled, that the SSL options setting (in OpenSSL) is set to ALL. Accepts 'enabled' or 'disabled' values, the default value is 'enabled'.
        :param pulumi.Input[str] database: Specifies the database in which the user is created
        :param pulumi.Input[str] destination: Specify an alias address for monitoring
        :param pulumi.Input[str] filename: Specifies the full path and file name of the file that the system attempts to download. The health check is successful if the system can download the file.
        :param pulumi.Input[int] interval: Specifies, in seconds, the frequency at which the system issues the monitor check when either the resource is down or the status of the resource is unknown. The default is `5`
        :param pulumi.Input[int] ip_dscp: Displays the differentiated services code point (DSCP).The default is `0 (zero)`.
        :param pulumi.Input[str] manual_resume: Specifies whether the system automatically changes the status of a resource to Enabled at the next successful monitor check.
        :param pulumi.Input[str] mode: Specifies the data transfer process (DTP) mode. The default value is passive. The options are passive (Specifies that the monitor sends a data transfer request to the FTP server. When the FTP server receives the request, the FTP server then initiates and establishes the data connection.) and active (Specifies that the monitor initiates and establishes the data connection with the FTP server.).
        :param pulumi.Input[str] name: Specifies the Name of the LTM Monitor.Name of Monitor should be full path,full path is the combination of the `partition + monitor name`,For ex:`/Common/test-ltm-monitor`.
        :param pulumi.Input[str] parent: Parent monitor for the system to use for setting initial values for the new monitor.
        :param pulumi.Input[str] password: Specifies the password if the monitored target requires authentication
        :param pulumi.Input[str] receive: Specifies the regular expression representing the text string that the monitor looks for in the returned resource.
        :param pulumi.Input[str] receive_disable: The system marks the node or pool member disabled when its response matches Receive Disable String but not Receive String.
        :param pulumi.Input[str] reverse: Instructs the system to mark the target resource down when the test is successful.
        :param pulumi.Input[str] send: Specifies the text string that the monitor sends to the target object.
        :param pulumi.Input[int] time_until_up: Specifies the number of seconds to wait after a resource first responds correctly to the monitor before setting the resource to up.
        :param pulumi.Input[int] timeout: Specifies the number of seconds the target has in which to respond to the monitor request. The default is `16` seconds
        :param pulumi.Input[str] transparent: Specifies whether the monitor operates in transparent mode.
        :param pulumi.Input[int] up_interval: Specifies the interval for the system to use to perform the health check when a resource is up. The default is `0(Disabled)`
        :param pulumi.Input[str] username: Specifies the user name if the monitored target requires authentication
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MonitorState.__new__(_MonitorState)

        __props__.__dict__["adaptive"] = adaptive
        __props__.__dict__["adaptive_limit"] = adaptive_limit
        __props__.__dict__["compatibility"] = compatibility
        __props__.__dict__["database"] = database
        __props__.__dict__["destination"] = destination
        __props__.__dict__["filename"] = filename
        __props__.__dict__["interval"] = interval
        __props__.__dict__["ip_dscp"] = ip_dscp
        __props__.__dict__["manual_resume"] = manual_resume
        __props__.__dict__["mode"] = mode
        __props__.__dict__["name"] = name
        __props__.__dict__["parent"] = parent
        __props__.__dict__["password"] = password
        __props__.__dict__["receive"] = receive
        __props__.__dict__["receive_disable"] = receive_disable
        __props__.__dict__["reverse"] = reverse
        __props__.__dict__["send"] = send
        __props__.__dict__["time_until_up"] = time_until_up
        __props__.__dict__["timeout"] = timeout
        __props__.__dict__["transparent"] = transparent
        __props__.__dict__["up_interval"] = up_interval
        __props__.__dict__["username"] = username
        return Monitor(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def adaptive(self) -> pulumi.Output[str]:
        """
        Specifies whether adaptive response time monitoring is enabled for this monitor. The default is `disabled`.
        """
        return pulumi.get(self, "adaptive")

    @property
    @pulumi.getter(name="adaptiveLimit")
    def adaptive_limit(self) -> pulumi.Output[int]:
        """
        Specifies the absolute number of milliseconds that may not be exceeded by a monitor probe, regardless of Allowed Divergence.
        """
        return pulumi.get(self, "adaptive_limit")

    @property
    @pulumi.getter
    def compatibility(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies, when enabled, that the SSL options setting (in OpenSSL) is set to ALL. Accepts 'enabled' or 'disabled' values, the default value is 'enabled'.
        """
        return pulumi.get(self, "compatibility")

    @property
    @pulumi.getter
    def database(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the database in which the user is created
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Output[str]:
        """
        Specify an alias address for monitoring
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def filename(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the full path and file name of the file that the system attempts to download. The health check is successful if the system can download the file.
        """
        return pulumi.get(self, "filename")

    @property
    @pulumi.getter
    def interval(self) -> pulumi.Output[int]:
        """
        Specifies, in seconds, the frequency at which the system issues the monitor check when either the resource is down or the status of the resource is unknown. The default is `5`
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="ipDscp")
    def ip_dscp(self) -> pulumi.Output[int]:
        """
        Displays the differentiated services code point (DSCP).The default is `0 (zero)`.
        """
        return pulumi.get(self, "ip_dscp")

    @property
    @pulumi.getter(name="manualResume")
    def manual_resume(self) -> pulumi.Output[str]:
        """
        Specifies whether the system automatically changes the status of a resource to Enabled at the next successful monitor check.
        """
        return pulumi.get(self, "manual_resume")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[str]:
        """
        Specifies the data transfer process (DTP) mode. The default value is passive. The options are passive (Specifies that the monitor sends a data transfer request to the FTP server. When the FTP server receives the request, the FTP server then initiates and establishes the data connection.) and active (Specifies that the monitor initiates and establishes the data connection with the FTP server.).
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Specifies the Name of the LTM Monitor.Name of Monitor should be full path,full path is the combination of the `partition + monitor name`,For ex:`/Common/test-ltm-monitor`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parent(self) -> pulumi.Output[str]:
        """
        Parent monitor for the system to use for setting initial values for the new monitor.
        """
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the password if the monitored target requires authentication
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def receive(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the regular expression representing the text string that the monitor looks for in the returned resource.
        """
        return pulumi.get(self, "receive")

    @property
    @pulumi.getter(name="receiveDisable")
    def receive_disable(self) -> pulumi.Output[Optional[str]]:
        """
        The system marks the node or pool member disabled when its response matches Receive Disable String but not Receive String.
        """
        return pulumi.get(self, "receive_disable")

    @property
    @pulumi.getter
    def reverse(self) -> pulumi.Output[str]:
        """
        Instructs the system to mark the target resource down when the test is successful.
        """
        return pulumi.get(self, "reverse")

    @property
    @pulumi.getter
    def send(self) -> pulumi.Output[str]:
        """
        Specifies the text string that the monitor sends to the target object.
        """
        return pulumi.get(self, "send")

    @property
    @pulumi.getter(name="timeUntilUp")
    def time_until_up(self) -> pulumi.Output[int]:
        """
        Specifies the number of seconds to wait after a resource first responds correctly to the monitor before setting the resource to up.
        """
        return pulumi.get(self, "time_until_up")

    @property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[int]:
        """
        Specifies the number of seconds the target has in which to respond to the monitor request. The default is `16` seconds
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def transparent(self) -> pulumi.Output[str]:
        """
        Specifies whether the monitor operates in transparent mode.
        """
        return pulumi.get(self, "transparent")

    @property
    @pulumi.getter(name="upInterval")
    def up_interval(self) -> pulumi.Output[int]:
        """
        Specifies the interval for the system to use to perform the health check when a resource is up. The default is `0(Disabled)`
        """
        return pulumi.get(self, "up_interval")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the user name if the monitored target requires authentication
        """
        return pulumi.get(self, "username")

