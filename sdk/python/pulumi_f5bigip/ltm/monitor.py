# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from .. import _utilities, _tables

__all__ = ['Monitor']


class Monitor(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 adaptive: Optional[pulumi.Input[str]] = None,
                 adaptive_limit: Optional[pulumi.Input[int]] = None,
                 compatibility: Optional[pulumi.Input[str]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 defaults_from: Optional[pulumi.Input[str]] = None,
                 destination: Optional[pulumi.Input[str]] = None,
                 filename: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 ip_dscp: Optional[pulumi.Input[int]] = None,
                 manual_resume: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 receive: Optional[pulumi.Input[str]] = None,
                 receive_disable: Optional[pulumi.Input[str]] = None,
                 reverse: Optional[pulumi.Input[str]] = None,
                 send: Optional[pulumi.Input[str]] = None,
                 time_until_up: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 transparent: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        `ltm.Monitor` Configures a custom monitor for use by health checks.

        For resources should be named with their "full path". The full path is the combination of the partition + name of the resource. For example /Common/my-pool.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5bigip as f5bigip

        monitor = f5bigip.ltm.Monitor("monitor",
            destination="1.2.3.4:1234",
            interval=999,
            name="/Common/terraform_monitor",
            parent="/Common/http",
            send=\"\"\"GET /some/path

        \"\"\",
            timeout=999)
        test_ftp_monitor = f5bigip.ltm.Monitor("test-ftp-monitor",
            destination="*:8008",
            filename="somefile",
            interval=5,
            name="/Common/ftp-test",
            parent="/Common/ftp",
            time_until_up=0,
            timeout=16)
        test_postgresql_monitor = f5bigip.ltm.Monitor("test-postgresql-monitor",
            interval=5,
            name="/Common/test-postgresql-monitor",
            parent="/Common/postgresql",
            password="abcd1234",
            receive="Test",
            send="SELECT 'Test';",
            timeout=16,
            username="abcd")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] adaptive: ftp adaptive
        :param pulumi.Input[int] adaptive_limit: Integer value
        :param pulumi.Input[str] compatibility: Specifies, when enabled, that the SSL options setting (in OpenSSL) is set to ALL. Accepts 'enabled' or 'disabled' values, the default value is 'enabled'.
        :param pulumi.Input[str] database: Specifies the database in which the user is created
        :param pulumi.Input[str] defaults_from: Existing monitor to inherit from. Must be one of /Common/http, /Common/https, /Common/icmp or /Common/gateway-icmp.
        :param pulumi.Input[str] destination: Specify an alias address for monitoring
        :param pulumi.Input[str] filename: Specifies the full path and file name of the file that the system attempts to download. The health check is successful if the system can download the file.
        :param pulumi.Input[int] interval: Check interval in seconds
        :param pulumi.Input[str] mode: Specifies the data transfer process (DTP) mode. The default value is passive. The options are passive (Specifies that the monitor sends a data transfer request to the FTP server. When the FTP server receives the request, the FTP server then initiates and establishes the data connection.) and active (Specifies that the monitor initiates and establishes the data connection with the FTP server.).
        :param pulumi.Input[str] name: Name of the monitor
        :param pulumi.Input[str] parent: Existing LTM monitor to inherit from
        :param pulumi.Input[str] password: Specifies the password if the monitored target requires authentication
        :param pulumi.Input[str] receive: Expected response string
        :param pulumi.Input[str] receive_disable: Expected response string.
        :param pulumi.Input[str] send: Request string to send
        :param pulumi.Input[int] time_until_up: Time in seconds
        :param pulumi.Input[int] timeout: Timeout in seconds
        :param pulumi.Input[str] username: Specifies the user name if the monitored target requires authentication
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['adaptive'] = adaptive
            __props__['adaptive_limit'] = adaptive_limit
            __props__['compatibility'] = compatibility
            __props__['database'] = database
            __props__['defaults_from'] = defaults_from
            __props__['destination'] = destination
            __props__['filename'] = filename
            __props__['interval'] = interval
            __props__['ip_dscp'] = ip_dscp
            __props__['manual_resume'] = manual_resume
            __props__['mode'] = mode
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if parent is None and not opts.urn:
                raise TypeError("Missing required property 'parent'")
            __props__['parent'] = parent
            __props__['password'] = password
            __props__['receive'] = receive
            __props__['receive_disable'] = receive_disable
            __props__['reverse'] = reverse
            __props__['send'] = send
            __props__['time_until_up'] = time_until_up
            __props__['timeout'] = timeout
            __props__['transparent'] = transparent
            __props__['username'] = username
        super(Monitor, __self__).__init__(
            'f5bigip:ltm/monitor:Monitor',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            adaptive: Optional[pulumi.Input[str]] = None,
            adaptive_limit: Optional[pulumi.Input[int]] = None,
            compatibility: Optional[pulumi.Input[str]] = None,
            database: Optional[pulumi.Input[str]] = None,
            defaults_from: Optional[pulumi.Input[str]] = None,
            destination: Optional[pulumi.Input[str]] = None,
            filename: Optional[pulumi.Input[str]] = None,
            interval: Optional[pulumi.Input[int]] = None,
            ip_dscp: Optional[pulumi.Input[int]] = None,
            manual_resume: Optional[pulumi.Input[str]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            parent: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            receive: Optional[pulumi.Input[str]] = None,
            receive_disable: Optional[pulumi.Input[str]] = None,
            reverse: Optional[pulumi.Input[str]] = None,
            send: Optional[pulumi.Input[str]] = None,
            time_until_up: Optional[pulumi.Input[int]] = None,
            timeout: Optional[pulumi.Input[int]] = None,
            transparent: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[str]] = None) -> 'Monitor':
        """
        Get an existing Monitor resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] adaptive: ftp adaptive
        :param pulumi.Input[int] adaptive_limit: Integer value
        :param pulumi.Input[str] compatibility: Specifies, when enabled, that the SSL options setting (in OpenSSL) is set to ALL. Accepts 'enabled' or 'disabled' values, the default value is 'enabled'.
        :param pulumi.Input[str] database: Specifies the database in which the user is created
        :param pulumi.Input[str] defaults_from: Existing monitor to inherit from. Must be one of /Common/http, /Common/https, /Common/icmp or /Common/gateway-icmp.
        :param pulumi.Input[str] destination: Specify an alias address for monitoring
        :param pulumi.Input[str] filename: Specifies the full path and file name of the file that the system attempts to download. The health check is successful if the system can download the file.
        :param pulumi.Input[int] interval: Check interval in seconds
        :param pulumi.Input[str] mode: Specifies the data transfer process (DTP) mode. The default value is passive. The options are passive (Specifies that the monitor sends a data transfer request to the FTP server. When the FTP server receives the request, the FTP server then initiates and establishes the data connection.) and active (Specifies that the monitor initiates and establishes the data connection with the FTP server.).
        :param pulumi.Input[str] name: Name of the monitor
        :param pulumi.Input[str] parent: Existing LTM monitor to inherit from
        :param pulumi.Input[str] password: Specifies the password if the monitored target requires authentication
        :param pulumi.Input[str] receive: Expected response string
        :param pulumi.Input[str] receive_disable: Expected response string.
        :param pulumi.Input[str] send: Request string to send
        :param pulumi.Input[int] time_until_up: Time in seconds
        :param pulumi.Input[int] timeout: Timeout in seconds
        :param pulumi.Input[str] username: Specifies the user name if the monitored target requires authentication
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["adaptive"] = adaptive
        __props__["adaptive_limit"] = adaptive_limit
        __props__["compatibility"] = compatibility
        __props__["database"] = database
        __props__["defaults_from"] = defaults_from
        __props__["destination"] = destination
        __props__["filename"] = filename
        __props__["interval"] = interval
        __props__["ip_dscp"] = ip_dscp
        __props__["manual_resume"] = manual_resume
        __props__["mode"] = mode
        __props__["name"] = name
        __props__["parent"] = parent
        __props__["password"] = password
        __props__["receive"] = receive
        __props__["receive_disable"] = receive_disable
        __props__["reverse"] = reverse
        __props__["send"] = send
        __props__["time_until_up"] = time_until_up
        __props__["timeout"] = timeout
        __props__["transparent"] = transparent
        __props__["username"] = username
        return Monitor(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def adaptive(self) -> pulumi.Output[str]:
        """
        ftp adaptive
        """
        return pulumi.get(self, "adaptive")

    @property
    @pulumi.getter(name="adaptiveLimit")
    def adaptive_limit(self) -> pulumi.Output[int]:
        """
        Integer value
        """
        return pulumi.get(self, "adaptive_limit")

    @property
    @pulumi.getter
    def compatibility(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies, when enabled, that the SSL options setting (in OpenSSL) is set to ALL. Accepts 'enabled' or 'disabled' values, the default value is 'enabled'.
        """
        return pulumi.get(self, "compatibility")

    @property
    @pulumi.getter
    def database(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the database in which the user is created
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="defaultsFrom")
    def defaults_from(self) -> pulumi.Output[Optional[str]]:
        """
        Existing monitor to inherit from. Must be one of /Common/http, /Common/https, /Common/icmp or /Common/gateway-icmp.
        """
        return pulumi.get(self, "defaults_from")

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Output[str]:
        """
        Specify an alias address for monitoring
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def filename(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the full path and file name of the file that the system attempts to download. The health check is successful if the system can download the file.
        """
        return pulumi.get(self, "filename")

    @property
    @pulumi.getter
    def interval(self) -> pulumi.Output[int]:
        """
        Check interval in seconds
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="ipDscp")
    def ip_dscp(self) -> pulumi.Output[int]:
        return pulumi.get(self, "ip_dscp")

    @property
    @pulumi.getter(name="manualResume")
    def manual_resume(self) -> pulumi.Output[str]:
        return pulumi.get(self, "manual_resume")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[str]:
        """
        Specifies the data transfer process (DTP) mode. The default value is passive. The options are passive (Specifies that the monitor sends a data transfer request to the FTP server. When the FTP server receives the request, the FTP server then initiates and establishes the data connection.) and active (Specifies that the monitor initiates and establishes the data connection with the FTP server.).
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the monitor
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parent(self) -> pulumi.Output[str]:
        """
        Existing LTM monitor to inherit from
        """
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the password if the monitored target requires authentication
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def receive(self) -> pulumi.Output[Optional[str]]:
        """
        Expected response string
        """
        return pulumi.get(self, "receive")

    @property
    @pulumi.getter(name="receiveDisable")
    def receive_disable(self) -> pulumi.Output[Optional[str]]:
        """
        Expected response string.
        """
        return pulumi.get(self, "receive_disable")

    @property
    @pulumi.getter
    def reverse(self) -> pulumi.Output[str]:
        return pulumi.get(self, "reverse")

    @property
    @pulumi.getter
    def send(self) -> pulumi.Output[str]:
        """
        Request string to send
        """
        return pulumi.get(self, "send")

    @property
    @pulumi.getter(name="timeUntilUp")
    def time_until_up(self) -> pulumi.Output[int]:
        """
        Time in seconds
        """
        return pulumi.get(self, "time_until_up")

    @property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[int]:
        """
        Timeout in seconds
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def transparent(self) -> pulumi.Output[str]:
        return pulumi.get(self, "transparent")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the user name if the monitored target requires authentication
        """
        return pulumi.get(self, "username")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

