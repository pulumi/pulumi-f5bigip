# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from .. import utilities, tables

class Policy(pulumi.CustomResource):
    controls: pulumi.Output[list]
    """
    Specifies the controls
    """
    name: pulumi.Output[str]
    published_copy: pulumi.Output[str]
    """
    If you want to publish the policy else it will be deployed in Drafts mode.
    """
    requires: pulumi.Output[list]
    """
    Specifies the protocol
    """
    rules: pulumi.Output[list]
    """
    Rules can be applied using the policy
    """
    strategy: pulumi.Output[str]
    """
    Specifies the match strategy
    """
    def __init__(__self__, resource_name, opts=None, controls=None, name=None, published_copy=None, requires=None, rules=None, strategy=None, __name__=None, __opts__=None):
        """
        `bigip_ltm_policy` Configures Virtual Server
        
        For resources should be named with their "full path". The full path is the combination of the partition + name of the resource. For example /Common/my-pool.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] controls: Specifies the controls
        :param pulumi.Input[str] published_copy: If you want to publish the policy else it will be deployed in Drafts mode.
        :param pulumi.Input[list] requires: Specifies the protocol
        :param pulumi.Input[list] rules: Rules can be applied using the policy
        :param pulumi.Input[str] strategy: Specifies the match strategy
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if controls is None:
            raise TypeError("Missing required property 'controls'")
        __props__['controls'] = controls

        if name is None:
            raise TypeError("Missing required property 'name'")
        __props__['name'] = name

        __props__['published_copy'] = published_copy

        if requires is None:
            raise TypeError("Missing required property 'requires'")
        __props__['requires'] = requires

        if rules is None:
            raise TypeError("Missing required property 'rules'")
        __props__['rules'] = rules

        __props__['strategy'] = strategy

        super(Policy, __self__).__init__(
            'f5bigip:ltm/policy:Policy',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

