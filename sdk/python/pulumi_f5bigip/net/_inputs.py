# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'VlanInterfaceArgs',
]

@pulumi.input_type
class VlanInterfaceArgs:
    def __init__(__self__, *,
                 tagged: Optional[pulumi.Input[bool]] = None,
                 vlanport: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] tagged: Specifies a list of tagged interfaces or trunks associated with this VLAN. Note that you can associate tagged interfaces or trunks with any number of VLANs.
        :param pulumi.Input[str] vlanport: Physical or virtual port used for traffic
        """
        VlanInterfaceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            tagged=tagged,
            vlanport=vlanport,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             tagged: Optional[pulumi.Input[bool]] = None,
             vlanport: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if tagged is not None:
            _setter("tagged", tagged)
        if vlanport is not None:
            _setter("vlanport", vlanport)

    @property
    @pulumi.getter
    def tagged(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies a list of tagged interfaces or trunks associated with this VLAN. Note that you can associate tagged interfaces or trunks with any number of VLANs.
        """
        return pulumi.get(self, "tagged")

    @tagged.setter
    def tagged(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tagged", value)

    @property
    @pulumi.getter
    def vlanport(self) -> Optional[pulumi.Input[str]]:
        """
        Physical or virtual port used for traffic
        """
        return pulumi.get(self, "vlanport")

    @vlanport.setter
    def vlanport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlanport", value)


