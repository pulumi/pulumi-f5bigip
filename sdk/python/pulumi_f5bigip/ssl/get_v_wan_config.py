# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetVWanConfigResult',
    'AwaitableGetVWanConfigResult',
    'get_v_wan_config',
]

@pulumi.output_type
class GetVWanConfigResult:
    """
    A collection of values returned by getVWanConfig.
    """
    def __init__(__self__, azure_vwan_name=None, azure_vwan_resourcegroup=None, azure_vwan_vpnsite=None, bigip_gw_ip=None, hub_address_space=None, hub_connected_subnets=None, id=None, preshared_key=None, vwan_gw_addresses=None):
        if azure_vwan_name and not isinstance(azure_vwan_name, str):
            raise TypeError("Expected argument 'azure_vwan_name' to be a str")
        pulumi.set(__self__, "azure_vwan_name", azure_vwan_name)
        if azure_vwan_resourcegroup and not isinstance(azure_vwan_resourcegroup, str):
            raise TypeError("Expected argument 'azure_vwan_resourcegroup' to be a str")
        pulumi.set(__self__, "azure_vwan_resourcegroup", azure_vwan_resourcegroup)
        if azure_vwan_vpnsite and not isinstance(azure_vwan_vpnsite, str):
            raise TypeError("Expected argument 'azure_vwan_vpnsite' to be a str")
        pulumi.set(__self__, "azure_vwan_vpnsite", azure_vwan_vpnsite)
        if bigip_gw_ip and not isinstance(bigip_gw_ip, str):
            raise TypeError("Expected argument 'bigip_gw_ip' to be a str")
        pulumi.set(__self__, "bigip_gw_ip", bigip_gw_ip)
        if hub_address_space and not isinstance(hub_address_space, str):
            raise TypeError("Expected argument 'hub_address_space' to be a str")
        pulumi.set(__self__, "hub_address_space", hub_address_space)
        if hub_connected_subnets and not isinstance(hub_connected_subnets, list):
            raise TypeError("Expected argument 'hub_connected_subnets' to be a list")
        pulumi.set(__self__, "hub_connected_subnets", hub_connected_subnets)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if preshared_key and not isinstance(preshared_key, str):
            raise TypeError("Expected argument 'preshared_key' to be a str")
        pulumi.set(__self__, "preshared_key", preshared_key)
        if vwan_gw_addresses and not isinstance(vwan_gw_addresses, list):
            raise TypeError("Expected argument 'vwan_gw_addresses' to be a list")
        pulumi.set(__self__, "vwan_gw_addresses", vwan_gw_addresses)

    @property
    @pulumi.getter(name="azureVwanName")
    def azure_vwan_name(self) -> str:
        return pulumi.get(self, "azure_vwan_name")

    @property
    @pulumi.getter(name="azureVwanResourcegroup")
    def azure_vwan_resourcegroup(self) -> str:
        return pulumi.get(self, "azure_vwan_resourcegroup")

    @property
    @pulumi.getter(name="azureVwanVpnsite")
    def azure_vwan_vpnsite(self) -> str:
        return pulumi.get(self, "azure_vwan_vpnsite")

    @property
    @pulumi.getter(name="bigipGwIp")
    def bigip_gw_ip(self) -> str:
        return pulumi.get(self, "bigip_gw_ip")

    @property
    @pulumi.getter(name="hubAddressSpace")
    def hub_address_space(self) -> str:
        return pulumi.get(self, "hub_address_space")

    @property
    @pulumi.getter(name="hubConnectedSubnets")
    def hub_connected_subnets(self) -> Sequence[str]:
        return pulumi.get(self, "hub_connected_subnets")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="presharedKey")
    def preshared_key(self) -> str:
        return pulumi.get(self, "preshared_key")

    @property
    @pulumi.getter(name="vwanGwAddresses")
    def vwan_gw_addresses(self) -> Sequence[str]:
        return pulumi.get(self, "vwan_gw_addresses")


class AwaitableGetVWanConfigResult(GetVWanConfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVWanConfigResult(
            azure_vwan_name=self.azure_vwan_name,
            azure_vwan_resourcegroup=self.azure_vwan_resourcegroup,
            azure_vwan_vpnsite=self.azure_vwan_vpnsite,
            bigip_gw_ip=self.bigip_gw_ip,
            hub_address_space=self.hub_address_space,
            hub_connected_subnets=self.hub_connected_subnets,
            id=self.id,
            preshared_key=self.preshared_key,
            vwan_gw_addresses=self.vwan_gw_addresses)


def get_v_wan_config(azure_vwan_name: Optional[str] = None,
                     azure_vwan_resourcegroup: Optional[str] = None,
                     azure_vwan_vpnsite: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVWanConfigResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['azureVwanName'] = azure_vwan_name
    __args__['azureVwanResourcegroup'] = azure_vwan_resourcegroup
    __args__['azureVwanVpnsite'] = azure_vwan_vpnsite
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('f5bigip:ssl/getVWanConfig:getVWanConfig', __args__, opts=opts, typ=GetVWanConfigResult).value

    return AwaitableGetVWanConfigResult(
        azure_vwan_name=__ret__.azure_vwan_name,
        azure_vwan_resourcegroup=__ret__.azure_vwan_resourcegroup,
        azure_vwan_vpnsite=__ret__.azure_vwan_vpnsite,
        bigip_gw_ip=__ret__.bigip_gw_ip,
        hub_address_space=__ret__.hub_address_space,
        hub_connected_subnets=__ret__.hub_connected_subnets,
        id=__ret__.id,
        preshared_key=__ret__.preshared_key,
        vwan_gw_addresses=__ret__.vwan_gw_addresses)
