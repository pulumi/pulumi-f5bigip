# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class Certificate(pulumi.CustomResource):
    content: pulumi.Output[str]
    """
    Content of certificate on Disk
    """
    name: pulumi.Output[str]
    """
    Name of the SSL Certificate to be Imported on to BIGIP
    """
    partition: pulumi.Output[str]
    """
    Partition on to SSL Certificate to be imported
    """
    def __init__(__self__, resource_name, opts=None, content=None, name=None, partition=None, __props__=None, __name__=None, __opts__=None):
        """
        `ssl.Certificate` This resource will import SSL certificates on BIG-IP LTM. 
        Certificates can be imported from certificate files on the local disk, in PEM format


        ## Example Usage



        ```python
        import pulumi
        import pulumi_f5bigip as f5bigip

        test_cert = f5bigip.ssl.Certificate("test-cert",
            name="servercert.crt",
            content=(lambda path: open(path).read())("servercert.crt"),
            partition="Common")
        ```


        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] content: Content of certificate on Disk
        :param pulumi.Input[str] name: Name of the SSL Certificate to be Imported on to BIGIP
        :param pulumi.Input[str] partition: Partition on to SSL Certificate to be imported
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if content is None:
                raise TypeError("Missing required property 'content'")
            __props__['content'] = content
            if name is None:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['partition'] = partition
        super(Certificate, __self__).__init__(
            'f5bigip:ssl/certificate:Certificate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, content=None, name=None, partition=None):
        """
        Get an existing Certificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] content: Content of certificate on Disk
        :param pulumi.Input[str] name: Name of the SSL Certificate to be Imported on to BIGIP
        :param pulumi.Input[str] partition: Partition on to SSL Certificate to be imported
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["content"] = content
        __props__["name"] = name
        __props__["partition"] = partition
        return Certificate(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

