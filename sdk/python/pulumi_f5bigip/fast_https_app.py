# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FastHttpsAppArgs', 'FastHttpsApp']

@pulumi.input_type
class FastHttpsAppArgs:
    def __init__(__self__, *,
                 application: pulumi.Input[str],
                 tenant: pulumi.Input[str],
                 create_tls_server_profile: Optional[pulumi.Input['FastHttpsAppCreateTlsServerProfileArgs']] = None,
                 exist_pool_name: Optional[pulumi.Input[str]] = None,
                 existing_monitor: Optional[pulumi.Input[str]] = None,
                 existing_snat_pool: Optional[pulumi.Input[str]] = None,
                 fast_create_monitor: Optional[pulumi.Input['FastHttpsAppFastCreateMonitorArgs']] = None,
                 fast_create_pool_members: Optional[pulumi.Input[Sequence[pulumi.Input['FastHttpsAppFastCreatePoolMemberArgs']]]] = None,
                 fast_create_snat_pool_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 load_balancing_mode: Optional[pulumi.Input[str]] = None,
                 slow_ramp_time: Optional[pulumi.Input[int]] = None,
                 tls_server_profile_name: Optional[pulumi.Input[str]] = None,
                 virtual_server: Optional[pulumi.Input['FastHttpsAppVirtualServerArgs']] = None):
        """
        The set of arguments for constructing a FastHttpsApp resource.
        :param pulumi.Input[str] application: Name of the FAST HTTPS application.
        :param pulumi.Input[str] tenant: Name of the FAST HTTPS application tenant.
        :param pulumi.Input['FastHttpsAppCreateTlsServerProfileArgs'] create_tls_server_profile: `create_tls_server_profile` block takes input for FAST-Generated TLS Server Profile.
               See TLS Server Profile below for more details.
        :param pulumi.Input[str] exist_pool_name: Name of an existing BIG-IP pool.
        :param pulumi.Input[str] existing_monitor: Name of an existing BIG-IP HTTPS pool monitor. Monitors are used to determine the health of the application on each server.
        :param pulumi.Input[str] existing_snat_pool: Name of an existing BIG-IP SNAT pool.
        :param pulumi.Input['FastHttpsAppFastCreateMonitorArgs'] fast_create_monitor: `fast_create_monitor` block takes input for FAST-Generated Pool Monitor.
               See Pool Monitor below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['FastHttpsAppFastCreatePoolMemberArgs']]] fast_create_pool_members: `fast_create_pool_members` block takes input for FAST-Generated Pool.
               See Pool Members below for more details.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] fast_create_snat_pool_addresses: List of address to be used for FAST-Generated SNAT Pool.
        :param pulumi.Input[str] load_balancing_mode: A `load balancing method` is an algorithm that the BIG-IP system uses to select a pool member for processing a request. F5 recommends the Least Connections load balancing method
        :param pulumi.Input[int] slow_ramp_time: Slow ramp temporarily throttles the number of connections to a new pool member. The recommended value is 300 seconds
        :param pulumi.Input[str] tls_server_profile_name: Name of an existing TLS server profile.
        :param pulumi.Input['FastHttpsAppVirtualServerArgs'] virtual_server: `virtual_server` block will provide `ip` and `port` options to be used for virtual server.
               See virtual server below for more details.
        """
        pulumi.set(__self__, "application", application)
        pulumi.set(__self__, "tenant", tenant)
        if create_tls_server_profile is not None:
            pulumi.set(__self__, "create_tls_server_profile", create_tls_server_profile)
        if exist_pool_name is not None:
            pulumi.set(__self__, "exist_pool_name", exist_pool_name)
        if existing_monitor is not None:
            pulumi.set(__self__, "existing_monitor", existing_monitor)
        if existing_snat_pool is not None:
            pulumi.set(__self__, "existing_snat_pool", existing_snat_pool)
        if fast_create_monitor is not None:
            pulumi.set(__self__, "fast_create_monitor", fast_create_monitor)
        if fast_create_pool_members is not None:
            pulumi.set(__self__, "fast_create_pool_members", fast_create_pool_members)
        if fast_create_snat_pool_addresses is not None:
            pulumi.set(__self__, "fast_create_snat_pool_addresses", fast_create_snat_pool_addresses)
        if load_balancing_mode is not None:
            pulumi.set(__self__, "load_balancing_mode", load_balancing_mode)
        if slow_ramp_time is not None:
            pulumi.set(__self__, "slow_ramp_time", slow_ramp_time)
        if tls_server_profile_name is not None:
            pulumi.set(__self__, "tls_server_profile_name", tls_server_profile_name)
        if virtual_server is not None:
            pulumi.set(__self__, "virtual_server", virtual_server)

    @property
    @pulumi.getter
    def application(self) -> pulumi.Input[str]:
        """
        Name of the FAST HTTPS application.
        """
        return pulumi.get(self, "application")

    @application.setter
    def application(self, value: pulumi.Input[str]):
        pulumi.set(self, "application", value)

    @property
    @pulumi.getter
    def tenant(self) -> pulumi.Input[str]:
        """
        Name of the FAST HTTPS application tenant.
        """
        return pulumi.get(self, "tenant")

    @tenant.setter
    def tenant(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant", value)

    @property
    @pulumi.getter(name="createTlsServerProfile")
    def create_tls_server_profile(self) -> Optional[pulumi.Input['FastHttpsAppCreateTlsServerProfileArgs']]:
        """
        `create_tls_server_profile` block takes input for FAST-Generated TLS Server Profile.
        See TLS Server Profile below for more details.
        """
        return pulumi.get(self, "create_tls_server_profile")

    @create_tls_server_profile.setter
    def create_tls_server_profile(self, value: Optional[pulumi.Input['FastHttpsAppCreateTlsServerProfileArgs']]):
        pulumi.set(self, "create_tls_server_profile", value)

    @property
    @pulumi.getter(name="existPoolName")
    def exist_pool_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing BIG-IP pool.
        """
        return pulumi.get(self, "exist_pool_name")

    @exist_pool_name.setter
    def exist_pool_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exist_pool_name", value)

    @property
    @pulumi.getter(name="existingMonitor")
    def existing_monitor(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing BIG-IP HTTPS pool monitor. Monitors are used to determine the health of the application on each server.
        """
        return pulumi.get(self, "existing_monitor")

    @existing_monitor.setter
    def existing_monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "existing_monitor", value)

    @property
    @pulumi.getter(name="existingSnatPool")
    def existing_snat_pool(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing BIG-IP SNAT pool.
        """
        return pulumi.get(self, "existing_snat_pool")

    @existing_snat_pool.setter
    def existing_snat_pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "existing_snat_pool", value)

    @property
    @pulumi.getter(name="fastCreateMonitor")
    def fast_create_monitor(self) -> Optional[pulumi.Input['FastHttpsAppFastCreateMonitorArgs']]:
        """
        `fast_create_monitor` block takes input for FAST-Generated Pool Monitor.
        See Pool Monitor below for more details.
        """
        return pulumi.get(self, "fast_create_monitor")

    @fast_create_monitor.setter
    def fast_create_monitor(self, value: Optional[pulumi.Input['FastHttpsAppFastCreateMonitorArgs']]):
        pulumi.set(self, "fast_create_monitor", value)

    @property
    @pulumi.getter(name="fastCreatePoolMembers")
    def fast_create_pool_members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FastHttpsAppFastCreatePoolMemberArgs']]]]:
        """
        `fast_create_pool_members` block takes input for FAST-Generated Pool.
        See Pool Members below for more details.
        """
        return pulumi.get(self, "fast_create_pool_members")

    @fast_create_pool_members.setter
    def fast_create_pool_members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FastHttpsAppFastCreatePoolMemberArgs']]]]):
        pulumi.set(self, "fast_create_pool_members", value)

    @property
    @pulumi.getter(name="fastCreateSnatPoolAddresses")
    def fast_create_snat_pool_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of address to be used for FAST-Generated SNAT Pool.
        """
        return pulumi.get(self, "fast_create_snat_pool_addresses")

    @fast_create_snat_pool_addresses.setter
    def fast_create_snat_pool_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "fast_create_snat_pool_addresses", value)

    @property
    @pulumi.getter(name="loadBalancingMode")
    def load_balancing_mode(self) -> Optional[pulumi.Input[str]]:
        """
        A `load balancing method` is an algorithm that the BIG-IP system uses to select a pool member for processing a request. F5 recommends the Least Connections load balancing method
        """
        return pulumi.get(self, "load_balancing_mode")

    @load_balancing_mode.setter
    def load_balancing_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancing_mode", value)

    @property
    @pulumi.getter(name="slowRampTime")
    def slow_ramp_time(self) -> Optional[pulumi.Input[int]]:
        """
        Slow ramp temporarily throttles the number of connections to a new pool member. The recommended value is 300 seconds
        """
        return pulumi.get(self, "slow_ramp_time")

    @slow_ramp_time.setter
    def slow_ramp_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "slow_ramp_time", value)

    @property
    @pulumi.getter(name="tlsServerProfileName")
    def tls_server_profile_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing TLS server profile.
        """
        return pulumi.get(self, "tls_server_profile_name")

    @tls_server_profile_name.setter
    def tls_server_profile_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_server_profile_name", value)

    @property
    @pulumi.getter(name="virtualServer")
    def virtual_server(self) -> Optional[pulumi.Input['FastHttpsAppVirtualServerArgs']]:
        """
        `virtual_server` block will provide `ip` and `port` options to be used for virtual server.
        See virtual server below for more details.
        """
        return pulumi.get(self, "virtual_server")

    @virtual_server.setter
    def virtual_server(self, value: Optional[pulumi.Input['FastHttpsAppVirtualServerArgs']]):
        pulumi.set(self, "virtual_server", value)


@pulumi.input_type
class _FastHttpsAppState:
    def __init__(__self__, *,
                 application: Optional[pulumi.Input[str]] = None,
                 create_tls_server_profile: Optional[pulumi.Input['FastHttpsAppCreateTlsServerProfileArgs']] = None,
                 exist_pool_name: Optional[pulumi.Input[str]] = None,
                 existing_monitor: Optional[pulumi.Input[str]] = None,
                 existing_snat_pool: Optional[pulumi.Input[str]] = None,
                 fast_create_monitor: Optional[pulumi.Input['FastHttpsAppFastCreateMonitorArgs']] = None,
                 fast_create_pool_members: Optional[pulumi.Input[Sequence[pulumi.Input['FastHttpsAppFastCreatePoolMemberArgs']]]] = None,
                 fast_create_snat_pool_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 load_balancing_mode: Optional[pulumi.Input[str]] = None,
                 slow_ramp_time: Optional[pulumi.Input[int]] = None,
                 tenant: Optional[pulumi.Input[str]] = None,
                 tls_server_profile_name: Optional[pulumi.Input[str]] = None,
                 virtual_server: Optional[pulumi.Input['FastHttpsAppVirtualServerArgs']] = None):
        """
        Input properties used for looking up and filtering FastHttpsApp resources.
        :param pulumi.Input[str] application: Name of the FAST HTTPS application.
        :param pulumi.Input['FastHttpsAppCreateTlsServerProfileArgs'] create_tls_server_profile: `create_tls_server_profile` block takes input for FAST-Generated TLS Server Profile.
               See TLS Server Profile below for more details.
        :param pulumi.Input[str] exist_pool_name: Name of an existing BIG-IP pool.
        :param pulumi.Input[str] existing_monitor: Name of an existing BIG-IP HTTPS pool monitor. Monitors are used to determine the health of the application on each server.
        :param pulumi.Input[str] existing_snat_pool: Name of an existing BIG-IP SNAT pool.
        :param pulumi.Input['FastHttpsAppFastCreateMonitorArgs'] fast_create_monitor: `fast_create_monitor` block takes input for FAST-Generated Pool Monitor.
               See Pool Monitor below for more details.
        :param pulumi.Input[Sequence[pulumi.Input['FastHttpsAppFastCreatePoolMemberArgs']]] fast_create_pool_members: `fast_create_pool_members` block takes input for FAST-Generated Pool.
               See Pool Members below for more details.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] fast_create_snat_pool_addresses: List of address to be used for FAST-Generated SNAT Pool.
        :param pulumi.Input[str] load_balancing_mode: A `load balancing method` is an algorithm that the BIG-IP system uses to select a pool member for processing a request. F5 recommends the Least Connections load balancing method
        :param pulumi.Input[int] slow_ramp_time: Slow ramp temporarily throttles the number of connections to a new pool member. The recommended value is 300 seconds
        :param pulumi.Input[str] tenant: Name of the FAST HTTPS application tenant.
        :param pulumi.Input[str] tls_server_profile_name: Name of an existing TLS server profile.
        :param pulumi.Input['FastHttpsAppVirtualServerArgs'] virtual_server: `virtual_server` block will provide `ip` and `port` options to be used for virtual server.
               See virtual server below for more details.
        """
        if application is not None:
            pulumi.set(__self__, "application", application)
        if create_tls_server_profile is not None:
            pulumi.set(__self__, "create_tls_server_profile", create_tls_server_profile)
        if exist_pool_name is not None:
            pulumi.set(__self__, "exist_pool_name", exist_pool_name)
        if existing_monitor is not None:
            pulumi.set(__self__, "existing_monitor", existing_monitor)
        if existing_snat_pool is not None:
            pulumi.set(__self__, "existing_snat_pool", existing_snat_pool)
        if fast_create_monitor is not None:
            pulumi.set(__self__, "fast_create_monitor", fast_create_monitor)
        if fast_create_pool_members is not None:
            pulumi.set(__self__, "fast_create_pool_members", fast_create_pool_members)
        if fast_create_snat_pool_addresses is not None:
            pulumi.set(__self__, "fast_create_snat_pool_addresses", fast_create_snat_pool_addresses)
        if load_balancing_mode is not None:
            pulumi.set(__self__, "load_balancing_mode", load_balancing_mode)
        if slow_ramp_time is not None:
            pulumi.set(__self__, "slow_ramp_time", slow_ramp_time)
        if tenant is not None:
            pulumi.set(__self__, "tenant", tenant)
        if tls_server_profile_name is not None:
            pulumi.set(__self__, "tls_server_profile_name", tls_server_profile_name)
        if virtual_server is not None:
            pulumi.set(__self__, "virtual_server", virtual_server)

    @property
    @pulumi.getter
    def application(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the FAST HTTPS application.
        """
        return pulumi.get(self, "application")

    @application.setter
    def application(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application", value)

    @property
    @pulumi.getter(name="createTlsServerProfile")
    def create_tls_server_profile(self) -> Optional[pulumi.Input['FastHttpsAppCreateTlsServerProfileArgs']]:
        """
        `create_tls_server_profile` block takes input for FAST-Generated TLS Server Profile.
        See TLS Server Profile below for more details.
        """
        return pulumi.get(self, "create_tls_server_profile")

    @create_tls_server_profile.setter
    def create_tls_server_profile(self, value: Optional[pulumi.Input['FastHttpsAppCreateTlsServerProfileArgs']]):
        pulumi.set(self, "create_tls_server_profile", value)

    @property
    @pulumi.getter(name="existPoolName")
    def exist_pool_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing BIG-IP pool.
        """
        return pulumi.get(self, "exist_pool_name")

    @exist_pool_name.setter
    def exist_pool_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exist_pool_name", value)

    @property
    @pulumi.getter(name="existingMonitor")
    def existing_monitor(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing BIG-IP HTTPS pool monitor. Monitors are used to determine the health of the application on each server.
        """
        return pulumi.get(self, "existing_monitor")

    @existing_monitor.setter
    def existing_monitor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "existing_monitor", value)

    @property
    @pulumi.getter(name="existingSnatPool")
    def existing_snat_pool(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing BIG-IP SNAT pool.
        """
        return pulumi.get(self, "existing_snat_pool")

    @existing_snat_pool.setter
    def existing_snat_pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "existing_snat_pool", value)

    @property
    @pulumi.getter(name="fastCreateMonitor")
    def fast_create_monitor(self) -> Optional[pulumi.Input['FastHttpsAppFastCreateMonitorArgs']]:
        """
        `fast_create_monitor` block takes input for FAST-Generated Pool Monitor.
        See Pool Monitor below for more details.
        """
        return pulumi.get(self, "fast_create_monitor")

    @fast_create_monitor.setter
    def fast_create_monitor(self, value: Optional[pulumi.Input['FastHttpsAppFastCreateMonitorArgs']]):
        pulumi.set(self, "fast_create_monitor", value)

    @property
    @pulumi.getter(name="fastCreatePoolMembers")
    def fast_create_pool_members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FastHttpsAppFastCreatePoolMemberArgs']]]]:
        """
        `fast_create_pool_members` block takes input for FAST-Generated Pool.
        See Pool Members below for more details.
        """
        return pulumi.get(self, "fast_create_pool_members")

    @fast_create_pool_members.setter
    def fast_create_pool_members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FastHttpsAppFastCreatePoolMemberArgs']]]]):
        pulumi.set(self, "fast_create_pool_members", value)

    @property
    @pulumi.getter(name="fastCreateSnatPoolAddresses")
    def fast_create_snat_pool_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of address to be used for FAST-Generated SNAT Pool.
        """
        return pulumi.get(self, "fast_create_snat_pool_addresses")

    @fast_create_snat_pool_addresses.setter
    def fast_create_snat_pool_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "fast_create_snat_pool_addresses", value)

    @property
    @pulumi.getter(name="loadBalancingMode")
    def load_balancing_mode(self) -> Optional[pulumi.Input[str]]:
        """
        A `load balancing method` is an algorithm that the BIG-IP system uses to select a pool member for processing a request. F5 recommends the Least Connections load balancing method
        """
        return pulumi.get(self, "load_balancing_mode")

    @load_balancing_mode.setter
    def load_balancing_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancing_mode", value)

    @property
    @pulumi.getter(name="slowRampTime")
    def slow_ramp_time(self) -> Optional[pulumi.Input[int]]:
        """
        Slow ramp temporarily throttles the number of connections to a new pool member. The recommended value is 300 seconds
        """
        return pulumi.get(self, "slow_ramp_time")

    @slow_ramp_time.setter
    def slow_ramp_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "slow_ramp_time", value)

    @property
    @pulumi.getter
    def tenant(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the FAST HTTPS application tenant.
        """
        return pulumi.get(self, "tenant")

    @tenant.setter
    def tenant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant", value)

    @property
    @pulumi.getter(name="tlsServerProfileName")
    def tls_server_profile_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of an existing TLS server profile.
        """
        return pulumi.get(self, "tls_server_profile_name")

    @tls_server_profile_name.setter
    def tls_server_profile_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_server_profile_name", value)

    @property
    @pulumi.getter(name="virtualServer")
    def virtual_server(self) -> Optional[pulumi.Input['FastHttpsAppVirtualServerArgs']]:
        """
        `virtual_server` block will provide `ip` and `port` options to be used for virtual server.
        See virtual server below for more details.
        """
        return pulumi.get(self, "virtual_server")

    @virtual_server.setter
    def virtual_server(self, value: Optional[pulumi.Input['FastHttpsAppVirtualServerArgs']]):
        pulumi.set(self, "virtual_server", value)


class FastHttpsApp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application: Optional[pulumi.Input[str]] = None,
                 create_tls_server_profile: Optional[pulumi.Input[pulumi.InputType['FastHttpsAppCreateTlsServerProfileArgs']]] = None,
                 exist_pool_name: Optional[pulumi.Input[str]] = None,
                 existing_monitor: Optional[pulumi.Input[str]] = None,
                 existing_snat_pool: Optional[pulumi.Input[str]] = None,
                 fast_create_monitor: Optional[pulumi.Input[pulumi.InputType['FastHttpsAppFastCreateMonitorArgs']]] = None,
                 fast_create_pool_members: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FastHttpsAppFastCreatePoolMemberArgs']]]]] = None,
                 fast_create_snat_pool_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 load_balancing_mode: Optional[pulumi.Input[str]] = None,
                 slow_ramp_time: Optional[pulumi.Input[int]] = None,
                 tenant: Optional[pulumi.Input[str]] = None,
                 tls_server_profile_name: Optional[pulumi.Input[str]] = None,
                 virtual_server: Optional[pulumi.Input[pulumi.InputType['FastHttpsAppVirtualServerArgs']]] = None,
                 __props__=None):
        """
        `FastHttpsApp` This resource will create and manage FAST HTTPS applications on BIG-IP

        [FAST documentation](https://clouddocs.f5.com/products/extensions/f5-appsvcs-templates/latest/)

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5bigip as f5bigip

        fast_https_app = f5bigip.FastHttpsApp("fastHttpsApp",
            application="fasthttpsapp",
            tenant="fasthttpstenant",
            virtual_server=f5bigip.FastHttpsAppVirtualServerArgs(
                ip="10.30.40.44",
                port=443,
            ))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application: Name of the FAST HTTPS application.
        :param pulumi.Input[pulumi.InputType['FastHttpsAppCreateTlsServerProfileArgs']] create_tls_server_profile: `create_tls_server_profile` block takes input for FAST-Generated TLS Server Profile.
               See TLS Server Profile below for more details.
        :param pulumi.Input[str] exist_pool_name: Name of an existing BIG-IP pool.
        :param pulumi.Input[str] existing_monitor: Name of an existing BIG-IP HTTPS pool monitor. Monitors are used to determine the health of the application on each server.
        :param pulumi.Input[str] existing_snat_pool: Name of an existing BIG-IP SNAT pool.
        :param pulumi.Input[pulumi.InputType['FastHttpsAppFastCreateMonitorArgs']] fast_create_monitor: `fast_create_monitor` block takes input for FAST-Generated Pool Monitor.
               See Pool Monitor below for more details.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FastHttpsAppFastCreatePoolMemberArgs']]]] fast_create_pool_members: `fast_create_pool_members` block takes input for FAST-Generated Pool.
               See Pool Members below for more details.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] fast_create_snat_pool_addresses: List of address to be used for FAST-Generated SNAT Pool.
        :param pulumi.Input[str] load_balancing_mode: A `load balancing method` is an algorithm that the BIG-IP system uses to select a pool member for processing a request. F5 recommends the Least Connections load balancing method
        :param pulumi.Input[int] slow_ramp_time: Slow ramp temporarily throttles the number of connections to a new pool member. The recommended value is 300 seconds
        :param pulumi.Input[str] tenant: Name of the FAST HTTPS application tenant.
        :param pulumi.Input[str] tls_server_profile_name: Name of an existing TLS server profile.
        :param pulumi.Input[pulumi.InputType['FastHttpsAppVirtualServerArgs']] virtual_server: `virtual_server` block will provide `ip` and `port` options to be used for virtual server.
               See virtual server below for more details.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FastHttpsAppArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        `FastHttpsApp` This resource will create and manage FAST HTTPS applications on BIG-IP

        [FAST documentation](https://clouddocs.f5.com/products/extensions/f5-appsvcs-templates/latest/)

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5bigip as f5bigip

        fast_https_app = f5bigip.FastHttpsApp("fastHttpsApp",
            application="fasthttpsapp",
            tenant="fasthttpstenant",
            virtual_server=f5bigip.FastHttpsAppVirtualServerArgs(
                ip="10.30.40.44",
                port=443,
            ))
        ```

        :param str resource_name: The name of the resource.
        :param FastHttpsAppArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FastHttpsAppArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application: Optional[pulumi.Input[str]] = None,
                 create_tls_server_profile: Optional[pulumi.Input[pulumi.InputType['FastHttpsAppCreateTlsServerProfileArgs']]] = None,
                 exist_pool_name: Optional[pulumi.Input[str]] = None,
                 existing_monitor: Optional[pulumi.Input[str]] = None,
                 existing_snat_pool: Optional[pulumi.Input[str]] = None,
                 fast_create_monitor: Optional[pulumi.Input[pulumi.InputType['FastHttpsAppFastCreateMonitorArgs']]] = None,
                 fast_create_pool_members: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FastHttpsAppFastCreatePoolMemberArgs']]]]] = None,
                 fast_create_snat_pool_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 load_balancing_mode: Optional[pulumi.Input[str]] = None,
                 slow_ramp_time: Optional[pulumi.Input[int]] = None,
                 tenant: Optional[pulumi.Input[str]] = None,
                 tls_server_profile_name: Optional[pulumi.Input[str]] = None,
                 virtual_server: Optional[pulumi.Input[pulumi.InputType['FastHttpsAppVirtualServerArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FastHttpsAppArgs.__new__(FastHttpsAppArgs)

            if application is None and not opts.urn:
                raise TypeError("Missing required property 'application'")
            __props__.__dict__["application"] = application
            __props__.__dict__["create_tls_server_profile"] = create_tls_server_profile
            __props__.__dict__["exist_pool_name"] = exist_pool_name
            __props__.__dict__["existing_monitor"] = existing_monitor
            __props__.__dict__["existing_snat_pool"] = existing_snat_pool
            __props__.__dict__["fast_create_monitor"] = fast_create_monitor
            __props__.__dict__["fast_create_pool_members"] = fast_create_pool_members
            __props__.__dict__["fast_create_snat_pool_addresses"] = fast_create_snat_pool_addresses
            __props__.__dict__["load_balancing_mode"] = load_balancing_mode
            __props__.__dict__["slow_ramp_time"] = slow_ramp_time
            if tenant is None and not opts.urn:
                raise TypeError("Missing required property 'tenant'")
            __props__.__dict__["tenant"] = tenant
            __props__.__dict__["tls_server_profile_name"] = tls_server_profile_name
            __props__.__dict__["virtual_server"] = virtual_server
        super(FastHttpsApp, __self__).__init__(
            'f5bigip:index/fastHttpsApp:FastHttpsApp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application: Optional[pulumi.Input[str]] = None,
            create_tls_server_profile: Optional[pulumi.Input[pulumi.InputType['FastHttpsAppCreateTlsServerProfileArgs']]] = None,
            exist_pool_name: Optional[pulumi.Input[str]] = None,
            existing_monitor: Optional[pulumi.Input[str]] = None,
            existing_snat_pool: Optional[pulumi.Input[str]] = None,
            fast_create_monitor: Optional[pulumi.Input[pulumi.InputType['FastHttpsAppFastCreateMonitorArgs']]] = None,
            fast_create_pool_members: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FastHttpsAppFastCreatePoolMemberArgs']]]]] = None,
            fast_create_snat_pool_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            load_balancing_mode: Optional[pulumi.Input[str]] = None,
            slow_ramp_time: Optional[pulumi.Input[int]] = None,
            tenant: Optional[pulumi.Input[str]] = None,
            tls_server_profile_name: Optional[pulumi.Input[str]] = None,
            virtual_server: Optional[pulumi.Input[pulumi.InputType['FastHttpsAppVirtualServerArgs']]] = None) -> 'FastHttpsApp':
        """
        Get an existing FastHttpsApp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application: Name of the FAST HTTPS application.
        :param pulumi.Input[pulumi.InputType['FastHttpsAppCreateTlsServerProfileArgs']] create_tls_server_profile: `create_tls_server_profile` block takes input for FAST-Generated TLS Server Profile.
               See TLS Server Profile below for more details.
        :param pulumi.Input[str] exist_pool_name: Name of an existing BIG-IP pool.
        :param pulumi.Input[str] existing_monitor: Name of an existing BIG-IP HTTPS pool monitor. Monitors are used to determine the health of the application on each server.
        :param pulumi.Input[str] existing_snat_pool: Name of an existing BIG-IP SNAT pool.
        :param pulumi.Input[pulumi.InputType['FastHttpsAppFastCreateMonitorArgs']] fast_create_monitor: `fast_create_monitor` block takes input for FAST-Generated Pool Monitor.
               See Pool Monitor below for more details.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FastHttpsAppFastCreatePoolMemberArgs']]]] fast_create_pool_members: `fast_create_pool_members` block takes input for FAST-Generated Pool.
               See Pool Members below for more details.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] fast_create_snat_pool_addresses: List of address to be used for FAST-Generated SNAT Pool.
        :param pulumi.Input[str] load_balancing_mode: A `load balancing method` is an algorithm that the BIG-IP system uses to select a pool member for processing a request. F5 recommends the Least Connections load balancing method
        :param pulumi.Input[int] slow_ramp_time: Slow ramp temporarily throttles the number of connections to a new pool member. The recommended value is 300 seconds
        :param pulumi.Input[str] tenant: Name of the FAST HTTPS application tenant.
        :param pulumi.Input[str] tls_server_profile_name: Name of an existing TLS server profile.
        :param pulumi.Input[pulumi.InputType['FastHttpsAppVirtualServerArgs']] virtual_server: `virtual_server` block will provide `ip` and `port` options to be used for virtual server.
               See virtual server below for more details.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FastHttpsAppState.__new__(_FastHttpsAppState)

        __props__.__dict__["application"] = application
        __props__.__dict__["create_tls_server_profile"] = create_tls_server_profile
        __props__.__dict__["exist_pool_name"] = exist_pool_name
        __props__.__dict__["existing_monitor"] = existing_monitor
        __props__.__dict__["existing_snat_pool"] = existing_snat_pool
        __props__.__dict__["fast_create_monitor"] = fast_create_monitor
        __props__.__dict__["fast_create_pool_members"] = fast_create_pool_members
        __props__.__dict__["fast_create_snat_pool_addresses"] = fast_create_snat_pool_addresses
        __props__.__dict__["load_balancing_mode"] = load_balancing_mode
        __props__.__dict__["slow_ramp_time"] = slow_ramp_time
        __props__.__dict__["tenant"] = tenant
        __props__.__dict__["tls_server_profile_name"] = tls_server_profile_name
        __props__.__dict__["virtual_server"] = virtual_server
        return FastHttpsApp(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def application(self) -> pulumi.Output[str]:
        """
        Name of the FAST HTTPS application.
        """
        return pulumi.get(self, "application")

    @property
    @pulumi.getter(name="createTlsServerProfile")
    def create_tls_server_profile(self) -> pulumi.Output[Optional['outputs.FastHttpsAppCreateTlsServerProfile']]:
        """
        `create_tls_server_profile` block takes input for FAST-Generated TLS Server Profile.
        See TLS Server Profile below for more details.
        """
        return pulumi.get(self, "create_tls_server_profile")

    @property
    @pulumi.getter(name="existPoolName")
    def exist_pool_name(self) -> pulumi.Output[Optional[str]]:
        """
        Name of an existing BIG-IP pool.
        """
        return pulumi.get(self, "exist_pool_name")

    @property
    @pulumi.getter(name="existingMonitor")
    def existing_monitor(self) -> pulumi.Output[Optional[str]]:
        """
        Name of an existing BIG-IP HTTPS pool monitor. Monitors are used to determine the health of the application on each server.
        """
        return pulumi.get(self, "existing_monitor")

    @property
    @pulumi.getter(name="existingSnatPool")
    def existing_snat_pool(self) -> pulumi.Output[Optional[str]]:
        """
        Name of an existing BIG-IP SNAT pool.
        """
        return pulumi.get(self, "existing_snat_pool")

    @property
    @pulumi.getter(name="fastCreateMonitor")
    def fast_create_monitor(self) -> pulumi.Output[Optional['outputs.FastHttpsAppFastCreateMonitor']]:
        """
        `fast_create_monitor` block takes input for FAST-Generated Pool Monitor.
        See Pool Monitor below for more details.
        """
        return pulumi.get(self, "fast_create_monitor")

    @property
    @pulumi.getter(name="fastCreatePoolMembers")
    def fast_create_pool_members(self) -> pulumi.Output[Optional[Sequence['outputs.FastHttpsAppFastCreatePoolMember']]]:
        """
        `fast_create_pool_members` block takes input for FAST-Generated Pool.
        See Pool Members below for more details.
        """
        return pulumi.get(self, "fast_create_pool_members")

    @property
    @pulumi.getter(name="fastCreateSnatPoolAddresses")
    def fast_create_snat_pool_addresses(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of address to be used for FAST-Generated SNAT Pool.
        """
        return pulumi.get(self, "fast_create_snat_pool_addresses")

    @property
    @pulumi.getter(name="loadBalancingMode")
    def load_balancing_mode(self) -> pulumi.Output[Optional[str]]:
        """
        A `load balancing method` is an algorithm that the BIG-IP system uses to select a pool member for processing a request. F5 recommends the Least Connections load balancing method
        """
        return pulumi.get(self, "load_balancing_mode")

    @property
    @pulumi.getter(name="slowRampTime")
    def slow_ramp_time(self) -> pulumi.Output[Optional[int]]:
        """
        Slow ramp temporarily throttles the number of connections to a new pool member. The recommended value is 300 seconds
        """
        return pulumi.get(self, "slow_ramp_time")

    @property
    @pulumi.getter
    def tenant(self) -> pulumi.Output[str]:
        """
        Name of the FAST HTTPS application tenant.
        """
        return pulumi.get(self, "tenant")

    @property
    @pulumi.getter(name="tlsServerProfileName")
    def tls_server_profile_name(self) -> pulumi.Output[Optional[str]]:
        """
        Name of an existing TLS server profile.
        """
        return pulumi.get(self, "tls_server_profile_name")

    @property
    @pulumi.getter(name="virtualServer")
    def virtual_server(self) -> pulumi.Output[Optional['outputs.FastHttpsAppVirtualServer']]:
        """
        `virtual_server` block will provide `ip` and `port` options to be used for virtual server.
        See virtual server below for more details.
        """
        return pulumi.get(self, "virtual_server")

