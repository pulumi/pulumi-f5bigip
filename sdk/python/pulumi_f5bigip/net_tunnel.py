# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = ['NetTunnel']


class NetTunnel(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_service: Optional[pulumi.Input[str]] = None,
                 auto_last_hop: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 idle_timeout: Optional[pulumi.Input[int]] = None,
                 key: Optional[pulumi.Input[int]] = None,
                 local_address: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 partition: Optional[pulumi.Input[str]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 remote_address: Optional[pulumi.Input[str]] = None,
                 secondary_address: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[str]] = None,
                 traffic_group: Optional[pulumi.Input[str]] = None,
                 transparent: Optional[pulumi.Input[str]] = None,
                 use_pmtu: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        `NetTunnel` Manages a tunnel configuration

        ## Example Usage

        ```python
        import pulumi
        import pulumi_f5bigip as f5bigip

        example1 = f5bigip.NetTunnel("example1",
            local_address="192.16.81.240",
            name="example1",
            profile="/Common/dslite")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_service: The application service that the object belongs to
        :param pulumi.Input[str] auto_last_hop: Specifies whether auto lasthop is enabled or not
        :param pulumi.Input[str] description: User defined description
        :param pulumi.Input[int] idle_timeout: Specifies an idle timeout for wildcard tunnels in seconds
        :param pulumi.Input[int] key: The key field may represent different values depending on the type of the tunnel
        :param pulumi.Input[str] local_address: Specifies a local IP address. This option is required
        :param pulumi.Input[str] mode: Specifies how the tunnel carries traffic
        :param pulumi.Input[int] mtu: Specifies the maximum transmission unit (MTU) of the tunnel
        :param pulumi.Input[str] name: Name of the tunnel
        :param pulumi.Input[str] partition: Displays the admin-partition within which this component resides
        :param pulumi.Input[str] profile: Specifies the profile that you want to associate with the tunnel
        :param pulumi.Input[str] remote_address: Specifies a remote IP address
        :param pulumi.Input[str] secondary_address: Specifies a secondary non-floating IP address when the local-address is set to a floating address
        :param pulumi.Input[str] tos: Specifies a value for insertion into the Type of Service (ToS) octet within the IP header of the encapsulating header of transmitted packets
        :param pulumi.Input[str] traffic_group: Specifies a traffic-group for use with the tunnel
        :param pulumi.Input[str] transparent: Enables or disables the tunnel to be transparent
        :param pulumi.Input[str] use_pmtu: Enables or disables the tunnel to use the PMTU (Path MTU) information provided by ICMP NeedFrag error messages
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['app_service'] = app_service
            __props__['auto_last_hop'] = auto_last_hop
            __props__['description'] = description
            __props__['idle_timeout'] = idle_timeout
            __props__['key'] = key
            if local_address is None and not opts.urn:
                raise TypeError("Missing required property 'local_address'")
            __props__['local_address'] = local_address
            __props__['mode'] = mode
            __props__['mtu'] = mtu
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            __props__['partition'] = partition
            if profile is None and not opts.urn:
                raise TypeError("Missing required property 'profile'")
            __props__['profile'] = profile
            __props__['remote_address'] = remote_address
            __props__['secondary_address'] = secondary_address
            __props__['tos'] = tos
            __props__['traffic_group'] = traffic_group
            __props__['transparent'] = transparent
            __props__['use_pmtu'] = use_pmtu
        super(NetTunnel, __self__).__init__(
            'f5bigip:index/netTunnel:NetTunnel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_service: Optional[pulumi.Input[str]] = None,
            auto_last_hop: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            idle_timeout: Optional[pulumi.Input[int]] = None,
            key: Optional[pulumi.Input[int]] = None,
            local_address: Optional[pulumi.Input[str]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            mtu: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            partition: Optional[pulumi.Input[str]] = None,
            profile: Optional[pulumi.Input[str]] = None,
            remote_address: Optional[pulumi.Input[str]] = None,
            secondary_address: Optional[pulumi.Input[str]] = None,
            tos: Optional[pulumi.Input[str]] = None,
            traffic_group: Optional[pulumi.Input[str]] = None,
            transparent: Optional[pulumi.Input[str]] = None,
            use_pmtu: Optional[pulumi.Input[str]] = None) -> 'NetTunnel':
        """
        Get an existing NetTunnel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_service: The application service that the object belongs to
        :param pulumi.Input[str] auto_last_hop: Specifies whether auto lasthop is enabled or not
        :param pulumi.Input[str] description: User defined description
        :param pulumi.Input[int] idle_timeout: Specifies an idle timeout for wildcard tunnels in seconds
        :param pulumi.Input[int] key: The key field may represent different values depending on the type of the tunnel
        :param pulumi.Input[str] local_address: Specifies a local IP address. This option is required
        :param pulumi.Input[str] mode: Specifies how the tunnel carries traffic
        :param pulumi.Input[int] mtu: Specifies the maximum transmission unit (MTU) of the tunnel
        :param pulumi.Input[str] name: Name of the tunnel
        :param pulumi.Input[str] partition: Displays the admin-partition within which this component resides
        :param pulumi.Input[str] profile: Specifies the profile that you want to associate with the tunnel
        :param pulumi.Input[str] remote_address: Specifies a remote IP address
        :param pulumi.Input[str] secondary_address: Specifies a secondary non-floating IP address when the local-address is set to a floating address
        :param pulumi.Input[str] tos: Specifies a value for insertion into the Type of Service (ToS) octet within the IP header of the encapsulating header of transmitted packets
        :param pulumi.Input[str] traffic_group: Specifies a traffic-group for use with the tunnel
        :param pulumi.Input[str] transparent: Enables or disables the tunnel to be transparent
        :param pulumi.Input[str] use_pmtu: Enables or disables the tunnel to use the PMTU (Path MTU) information provided by ICMP NeedFrag error messages
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["app_service"] = app_service
        __props__["auto_last_hop"] = auto_last_hop
        __props__["description"] = description
        __props__["idle_timeout"] = idle_timeout
        __props__["key"] = key
        __props__["local_address"] = local_address
        __props__["mode"] = mode
        __props__["mtu"] = mtu
        __props__["name"] = name
        __props__["partition"] = partition
        __props__["profile"] = profile
        __props__["remote_address"] = remote_address
        __props__["secondary_address"] = secondary_address
        __props__["tos"] = tos
        __props__["traffic_group"] = traffic_group
        __props__["transparent"] = transparent
        __props__["use_pmtu"] = use_pmtu
        return NetTunnel(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appService")
    def app_service(self) -> pulumi.Output[Optional[str]]:
        """
        The application service that the object belongs to
        """
        return pulumi.get(self, "app_service")

    @property
    @pulumi.getter(name="autoLastHop")
    def auto_last_hop(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies whether auto lasthop is enabled or not
        """
        return pulumi.get(self, "auto_last_hop")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        User defined description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> pulumi.Output[Optional[int]]:
        """
        Specifies an idle timeout for wildcard tunnels in seconds
        """
        return pulumi.get(self, "idle_timeout")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[Optional[int]]:
        """
        The key field may represent different values depending on the type of the tunnel
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="localAddress")
    def local_address(self) -> pulumi.Output[str]:
        """
        Specifies a local IP address. This option is required
        """
        return pulumi.get(self, "local_address")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies how the tunnel carries traffic
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def mtu(self) -> pulumi.Output[Optional[int]]:
        """
        Specifies the maximum transmission unit (MTU) of the tunnel
        """
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the tunnel
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def partition(self) -> pulumi.Output[Optional[str]]:
        """
        Displays the admin-partition within which this component resides
        """
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter
    def profile(self) -> pulumi.Output[str]:
        """
        Specifies the profile that you want to associate with the tunnel
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter(name="remoteAddress")
    def remote_address(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies a remote IP address
        """
        return pulumi.get(self, "remote_address")

    @property
    @pulumi.getter(name="secondaryAddress")
    def secondary_address(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies a secondary non-floating IP address when the local-address is set to a floating address
        """
        return pulumi.get(self, "secondary_address")

    @property
    @pulumi.getter
    def tos(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies a value for insertion into the Type of Service (ToS) octet within the IP header of the encapsulating header of transmitted packets
        """
        return pulumi.get(self, "tos")

    @property
    @pulumi.getter(name="trafficGroup")
    def traffic_group(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies a traffic-group for use with the tunnel
        """
        return pulumi.get(self, "traffic_group")

    @property
    @pulumi.getter
    def transparent(self) -> pulumi.Output[Optional[str]]:
        """
        Enables or disables the tunnel to be transparent
        """
        return pulumi.get(self, "transparent")

    @property
    @pulumi.getter(name="usePmtu")
    def use_pmtu(self) -> pulumi.Output[Optional[str]]:
        """
        Enables or disables the tunnel to use the PMTU (Path MTU) information provided by ICMP NeedFrag error messages
        """
        return pulumi.get(self, "use_pmtu")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

