// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace Pulumi.F5BigIP
{
    public static class Config
    {
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly global::Pulumi.Config __config = new global::Pulumi.Config("f5bigip");

        private static readonly __Value<string?> _address = new __Value<string?>(() => __config.Get("address"));
        /// <summary>
        /// Domain name/IP of the BigIP
        /// </summary>
        public static string? Address
        {
            get => _address.Get();
            set => _address.Set(value);
        }

        private static readonly __Value<int?> _apiRetries = new __Value<int?>(() => __config.GetInt32("apiRetries"));
        /// <summary>
        /// Amount of times to retry AS3 API requests. Default: 10.
        /// </summary>
        public static int? ApiRetries
        {
            get => _apiRetries.Get();
            set => _apiRetries.Set(value);
        }

        private static readonly __Value<int?> _apiTimeout = new __Value<int?>(() => __config.GetInt32("apiTimeout"));
        /// <summary>
        /// A timeout for AS3 requests, represented as a number of seconds. Default: 60
        /// </summary>
        public static int? ApiTimeout
        {
            get => _apiTimeout.Get();
            set => _apiTimeout.Set(value);
        }

        private static readonly __Value<string?> _loginRef = new __Value<string?>(() => __config.Get("loginRef"));
        /// <summary>
        /// Login reference for token authentication (see BIG-IP REST docs for details)
        /// </summary>
        public static string? LoginRef
        {
            get => _loginRef.Get();
            set => _loginRef.Set(value);
        }

        private static readonly __Value<string?> _password = new __Value<string?>(() => __config.Get("password"));
        /// <summary>
        /// The user's password. Leave empty if using token_value
        /// </summary>
        public static string? Password
        {
            get => _password.Get();
            set => _password.Set(value);
        }

        private static readonly __Value<string?> _port = new __Value<string?>(() => __config.Get("port"));
        /// <summary>
        /// Management Port to connect to Bigip
        /// </summary>
        public static string? Port
        {
            get => _port.Get();
            set => _port.Set(value);
        }

        private static readonly __Value<bool?> _teemDisable = new __Value<bool?>(() => __config.GetBoolean("teemDisable"));
        /// <summary>
        /// If this flag set to true,sending telemetry data to TEEM will be disabled
        /// </summary>
        public static bool? TeemDisable
        {
            get => _teemDisable.Get();
            set => _teemDisable.Set(value);
        }

        private static readonly __Value<bool?> _tokenAuth = new __Value<bool?>(() => __config.GetBoolean("tokenAuth"));
        /// <summary>
        /// Enable to use an external authentication source (LDAP, TACACS, etc)
        /// </summary>
        public static bool? TokenAuth
        {
            get => _tokenAuth.Get();
            set => _tokenAuth.Set(value);
        }

        private static readonly __Value<int?> _tokenTimeout = new __Value<int?>(() => __config.GetInt32("tokenTimeout"));
        /// <summary>
        /// A lifespan to request for the AS3 auth token, represented as a number of seconds. Default: 1200
        /// </summary>
        public static int? TokenTimeout
        {
            get => _tokenTimeout.Get();
            set => _tokenTimeout.Set(value);
        }

        private static readonly __Value<string?> _tokenValue = new __Value<string?>(() => __config.Get("tokenValue"));
        /// <summary>
        /// A token generated outside the provider, in place of password
        /// </summary>
        public static string? TokenValue
        {
            get => _tokenValue.Get();
            set => _tokenValue.Set(value);
        }

        private static readonly __Value<string?> _trustedCertPath = new __Value<string?>(() => __config.Get("trustedCertPath"));
        /// <summary>
        /// Valid Trusted Certificate path
        /// </summary>
        public static string? TrustedCertPath
        {
            get => _trustedCertPath.Get();
            set => _trustedCertPath.Set(value);
        }

        private static readonly __Value<string?> _username = new __Value<string?>(() => __config.Get("username"));
        /// <summary>
        /// Username with API access to the BigIP
        /// </summary>
        public static string? Username
        {
            get => _username.Get();
            set => _username.Set(value);
        }

        private static readonly __Value<bool?> _validateCertsDisable = new __Value<bool?>(() => __config.GetBoolean("validateCertsDisable"));
        /// <summary>
        /// If set to true, Disables TLS certificate check on BIG-IP. Default : True
        /// </summary>
        public static bool? ValidateCertsDisable
        {
            get => _validateCertsDisable.Get();
            set => _validateCertsDisable.Set(value);
        }

    }
}
