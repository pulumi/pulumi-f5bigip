// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.F5BigIP
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using F5BigIP = Pulumi.F5BigIP;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var test = new F5BigIP.EventServiceDiscovery("test", new F5BigIP.EventServiceDiscoveryArgs
    ///         {
    ///             Nodes = 
    ///             {
    ///                 new F5BigIP.Inputs.EventServiceDiscoveryNodeArgs
    ///                 {
    ///                     Id = "newNode1",
    ///                     Ip = "192.168.2.3",
    ///                     Port = 8080,
    ///                 },
    ///                 new F5BigIP.Inputs.EventServiceDiscoveryNodeArgs
    ///                 {
    ///                     Id = "newNode2",
    ///                     Ip = "192.168.2.4",
    ///                     Port = 8080,
    ///                 },
    ///             },
    ///             Taskid = "~Sample_event_sd~My_app~My_pool",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [F5BigIPResourceType("f5bigip:index/eventServiceDiscovery:EventServiceDiscovery")]
    public partial class EventServiceDiscovery : Pulumi.CustomResource
    {
        /// <summary>
        /// Map of node which will be added to pool which will be having node name(id),node address(ip) and node port(port)
        /// </summary>
        [Output("nodes")]
        public Output<ImmutableArray<Outputs.EventServiceDiscoveryNode>> Nodes { get; private set; } = null!;

        /// <summary>
        /// servicediscovery endpoint ( Below example shows how to create endpoing using AS3 )
        /// </summary>
        [Output("taskid")]
        public Output<string> Taskid { get; private set; } = null!;


        /// <summary>
        /// Create a EventServiceDiscovery resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EventServiceDiscovery(string name, EventServiceDiscoveryArgs args, CustomResourceOptions? options = null)
            : base("f5bigip:index/eventServiceDiscovery:EventServiceDiscovery", name, args ?? new EventServiceDiscoveryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EventServiceDiscovery(string name, Input<string> id, EventServiceDiscoveryState? state = null, CustomResourceOptions? options = null)
            : base("f5bigip:index/eventServiceDiscovery:EventServiceDiscovery", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EventServiceDiscovery resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EventServiceDiscovery Get(string name, Input<string> id, EventServiceDiscoveryState? state = null, CustomResourceOptions? options = null)
        {
            return new EventServiceDiscovery(name, id, state, options);
        }
    }

    public sealed class EventServiceDiscoveryArgs : Pulumi.ResourceArgs
    {
        [Input("nodes")]
        private InputList<Inputs.EventServiceDiscoveryNodeArgs>? _nodes;

        /// <summary>
        /// Map of node which will be added to pool which will be having node name(id),node address(ip) and node port(port)
        /// </summary>
        public InputList<Inputs.EventServiceDiscoveryNodeArgs> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<Inputs.EventServiceDiscoveryNodeArgs>());
            set => _nodes = value;
        }

        /// <summary>
        /// servicediscovery endpoint ( Below example shows how to create endpoing using AS3 )
        /// </summary>
        [Input("taskid", required: true)]
        public Input<string> Taskid { get; set; } = null!;

        public EventServiceDiscoveryArgs()
        {
        }
    }

    public sealed class EventServiceDiscoveryState : Pulumi.ResourceArgs
    {
        [Input("nodes")]
        private InputList<Inputs.EventServiceDiscoveryNodeGetArgs>? _nodes;

        /// <summary>
        /// Map of node which will be added to pool which will be having node name(id),node address(ip) and node port(port)
        /// </summary>
        public InputList<Inputs.EventServiceDiscoveryNodeGetArgs> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<Inputs.EventServiceDiscoveryNodeGetArgs>());
            set => _nodes = value;
        }

        /// <summary>
        /// servicediscovery endpoint ( Below example shows how to create endpoing using AS3 )
        /// </summary>
        [Input("taskid")]
        public Input<string>? Taskid { get; set; }

        public EventServiceDiscoveryState()
        {
        }
    }
}
