// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.F5BigIP.Ltm
{
    /// <summary>
    /// `bigip_ltm_rewrite_profile` Configures ltm policies to manage traffic assigned to a virtual server
    /// 
    /// For resources should be named with their `full path`. The full path is the combination of the `partition + name` of the resource. For example `/Common/test-profile`.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using F5BigIP = Pulumi.F5BigIP;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test_profile = new F5BigIP.Ltm.ProfileRewrite("test-profile", new()
    ///     {
    ///         Name = "/Common/tf_profile",
    ///         DefaultsFrom = "/Common/rewrite",
    ///         BypassLists = new[]
    ///         {
    ///             "http://notouch.com",
    ///         },
    ///         RewriteLists = new[]
    ///         {
    ///             "http://some.com",
    ///         },
    ///         RewriteMode = "portal",
    ///         CacheType = "cache-img-css-js",
    ///         CaFile = "/Common/ca-bundle.crt",
    ///         CrlFile = "none",
    ///         SigningCert = "/Common/default.crt",
    ///         SigningKey = "/Common/default.key",
    ///         SplitTunneling = "true",
    ///     });
    /// 
    ///     var test_profile2 = new F5BigIP.Ltm.ProfileRewrite("test-profile2", new()
    ///     {
    ///         Name = "/Common/tf_profile_translate",
    ///         DefaultsFrom = "/Common/rewrite",
    ///         RewriteMode = "uri-translation",
    ///         Requests = new[]
    ///         {
    ///             new F5BigIP.Ltm.Inputs.ProfileRewriteRequestArgs
    ///             {
    ///                 InsertXfwdFor = "enabled",
    ///                 InsertXfwdHost = "disabled",
    ///                 InsertXfwdProtocol = "enabled",
    ///                 RewriteHeaders = "disabled",
    ///             },
    ///         },
    ///         Responses = new[]
    ///         {
    ///             new F5BigIP.Ltm.Inputs.ProfileRewriteResponseArgs
    ///             {
    ///                 RewriteContent = "enabled",
    ///                 RewriteHeaders = "disabled",
    ///             },
    ///         },
    ///         CookieRules = new[]
    ///         {
    ///             new F5BigIP.Ltm.Inputs.ProfileRewriteCookieRuleArgs
    ///             {
    ///                 RuleName = "cookie1",
    ///                 ClientDomain = "wrong.com",
    ///                 ClientPath = "/this/",
    ///                 ServerDomain = "wrong.com",
    ///                 ServerPath = "/this/",
    ///             },
    ///             new F5BigIP.Ltm.Inputs.ProfileRewriteCookieRuleArgs
    ///             {
    ///                 RuleName = "cookie2",
    ///                 ClientDomain = "incorrect.com",
    ///                 ClientPath = "/this/",
    ///                 ServerDomain = "absolute.com",
    ///                 ServerPath = "/this/",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [F5BigIPResourceType("f5bigip:ltm/profileRewrite:ProfileRewrite")]
    public partial class ProfileRewrite : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies a list of URIs to bypass inside a web page when the page is accessed using Portal Access.
        /// </summary>
        [Output("bypassLists")]
        public Output<ImmutableArray<string>> BypassLists { get; private set; } = null!;

        /// <summary>
        /// Specifies a CA against which to verify signed Java applets signatures. (name should be in full path which is combination of partition and CA file name )
        /// </summary>
        [Output("caFile")]
        public Output<string> CaFile { get; private set; } = null!;

        /// <summary>
        /// Specifies the type of Client caching. Valid choices are: `cache-css-js, cache-all, no-cache, cache-img-css-js`. Default value: `cache-img-css-js`
        /// </summary>
        [Output("cacheType")]
        public Output<string?> CacheType { get; private set; } = null!;

        /// <summary>
        /// Specifies the cookie rewrite rules. Block type. Each request is block type with following arguments.
        /// </summary>
        [Output("cookieRules")]
        public Output<ImmutableArray<Outputs.ProfileRewriteCookieRule>> CookieRules { get; private set; } = null!;

        /// <summary>
        /// Specifies a CRL against which to verify signed Java applets signature certificates. The default option is `none`.
        /// </summary>
        [Output("crlFile")]
        public Output<string?> CrlFile { get; private set; } = null!;

        /// <summary>
        /// Specifies the profile from which this profile inherits settings. The default is the system-supplied `rewrite` profile.
        /// </summary>
        [Output("defaultsFrom")]
        public Output<string?> DefaultsFrom { get; private set; } = null!;

        /// <summary>
        /// Name of the rewrite profile. ( profile name should be in full path which is combination of partition and profile name )
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Block type. Each request is block type with following arguments.
        /// </summary>
        [Output("requests")]
        public Output<ImmutableArray<Outputs.ProfileRewriteRequest>> Requests { get; private set; } = null!;

        /// <summary>
        /// Block type. Each request is block type with following arguments.
        /// </summary>
        [Output("responses")]
        public Output<ImmutableArray<Outputs.ProfileRewriteResponse>> Responses { get; private set; } = null!;

        /// <summary>
        /// Specifies a list of URIs to rewrite inside a web page when the page is accessed using Portal Access.
        /// </summary>
        [Output("rewriteLists")]
        public Output<ImmutableArray<string>> RewriteLists { get; private set; } = null!;

        /// <summary>
        /// Specifies the type of Client caching. Valid choices are: `portal, uri-translation`
        /// </summary>
        [Output("rewriteMode")]
        public Output<string> RewriteMode { get; private set; } = null!;

        /// <summary>
        /// Specifies a certificate to use for re-signing of signed Java applets after patching. (name should be in full path which is combination of partition and certificate name )
        /// </summary>
        [Output("signingCert")]
        public Output<string> SigningCert { get; private set; } = null!;

        /// <summary>
        /// Specifies a certificate to use for re-signing of signed Java applets after patching. (name should be in full path which is combination of partition and key name )
        /// </summary>
        [Output("signingKey")]
        public Output<string> SigningKey { get; private set; } = null!;

        /// <summary>
        /// Specifies a pass phrase to use for encrypting the private signing key. Since it's a sensitive entity idempotency will fail in the update call.
        /// </summary>
        [Output("signingKeyPassword")]
        public Output<string> SigningKeyPassword { get; private set; } = null!;

        /// <summary>
        /// Specifies the type of Client caching. Valid choices are: `true, false`
        /// </summary>
        [Output("splitTunneling")]
        public Output<string> SplitTunneling { get; private set; } = null!;


        /// <summary>
        /// Create a ProfileRewrite resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProfileRewrite(string name, ProfileRewriteArgs args, CustomResourceOptions? options = null)
            : base("f5bigip:ltm/profileRewrite:ProfileRewrite", name, args ?? new ProfileRewriteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProfileRewrite(string name, Input<string> id, ProfileRewriteState? state = null, CustomResourceOptions? options = null)
            : base("f5bigip:ltm/profileRewrite:ProfileRewrite", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "signingKeyPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProfileRewrite resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProfileRewrite Get(string name, Input<string> id, ProfileRewriteState? state = null, CustomResourceOptions? options = null)
        {
            return new ProfileRewrite(name, id, state, options);
        }
    }

    public sealed class ProfileRewriteArgs : global::Pulumi.ResourceArgs
    {
        [Input("bypassLists")]
        private InputList<string>? _bypassLists;

        /// <summary>
        /// Specifies a list of URIs to bypass inside a web page when the page is accessed using Portal Access.
        /// </summary>
        public InputList<string> BypassLists
        {
            get => _bypassLists ?? (_bypassLists = new InputList<string>());
            set => _bypassLists = value;
        }

        /// <summary>
        /// Specifies a CA against which to verify signed Java applets signatures. (name should be in full path which is combination of partition and CA file name )
        /// </summary>
        [Input("caFile")]
        public Input<string>? CaFile { get; set; }

        /// <summary>
        /// Specifies the type of Client caching. Valid choices are: `cache-css-js, cache-all, no-cache, cache-img-css-js`. Default value: `cache-img-css-js`
        /// </summary>
        [Input("cacheType")]
        public Input<string>? CacheType { get; set; }

        [Input("cookieRules")]
        private InputList<Inputs.ProfileRewriteCookieRuleArgs>? _cookieRules;

        /// <summary>
        /// Specifies the cookie rewrite rules. Block type. Each request is block type with following arguments.
        /// </summary>
        public InputList<Inputs.ProfileRewriteCookieRuleArgs> CookieRules
        {
            get => _cookieRules ?? (_cookieRules = new InputList<Inputs.ProfileRewriteCookieRuleArgs>());
            set => _cookieRules = value;
        }

        /// <summary>
        /// Specifies a CRL against which to verify signed Java applets signature certificates. The default option is `none`.
        /// </summary>
        [Input("crlFile")]
        public Input<string>? CrlFile { get; set; }

        /// <summary>
        /// Specifies the profile from which this profile inherits settings. The default is the system-supplied `rewrite` profile.
        /// </summary>
        [Input("defaultsFrom")]
        public Input<string>? DefaultsFrom { get; set; }

        /// <summary>
        /// Name of the rewrite profile. ( profile name should be in full path which is combination of partition and profile name )
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("requests")]
        private InputList<Inputs.ProfileRewriteRequestArgs>? _requests;

        /// <summary>
        /// Block type. Each request is block type with following arguments.
        /// </summary>
        public InputList<Inputs.ProfileRewriteRequestArgs> Requests
        {
            get => _requests ?? (_requests = new InputList<Inputs.ProfileRewriteRequestArgs>());
            set => _requests = value;
        }

        [Input("responses")]
        private InputList<Inputs.ProfileRewriteResponseArgs>? _responses;

        /// <summary>
        /// Block type. Each request is block type with following arguments.
        /// </summary>
        public InputList<Inputs.ProfileRewriteResponseArgs> Responses
        {
            get => _responses ?? (_responses = new InputList<Inputs.ProfileRewriteResponseArgs>());
            set => _responses = value;
        }

        [Input("rewriteLists")]
        private InputList<string>? _rewriteLists;

        /// <summary>
        /// Specifies a list of URIs to rewrite inside a web page when the page is accessed using Portal Access.
        /// </summary>
        public InputList<string> RewriteLists
        {
            get => _rewriteLists ?? (_rewriteLists = new InputList<string>());
            set => _rewriteLists = value;
        }

        /// <summary>
        /// Specifies the type of Client caching. Valid choices are: `portal, uri-translation`
        /// </summary>
        [Input("rewriteMode", required: true)]
        public Input<string> RewriteMode { get; set; } = null!;

        /// <summary>
        /// Specifies a certificate to use for re-signing of signed Java applets after patching. (name should be in full path which is combination of partition and certificate name )
        /// </summary>
        [Input("signingCert")]
        public Input<string>? SigningCert { get; set; }

        /// <summary>
        /// Specifies a certificate to use for re-signing of signed Java applets after patching. (name should be in full path which is combination of partition and key name )
        /// </summary>
        [Input("signingKey")]
        public Input<string>? SigningKey { get; set; }

        [Input("signingKeyPassword")]
        private Input<string>? _signingKeyPassword;

        /// <summary>
        /// Specifies a pass phrase to use for encrypting the private signing key. Since it's a sensitive entity idempotency will fail in the update call.
        /// </summary>
        public Input<string>? SigningKeyPassword
        {
            get => _signingKeyPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _signingKeyPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies the type of Client caching. Valid choices are: `true, false`
        /// </summary>
        [Input("splitTunneling")]
        public Input<string>? SplitTunneling { get; set; }

        public ProfileRewriteArgs()
        {
        }
        public static new ProfileRewriteArgs Empty => new ProfileRewriteArgs();
    }

    public sealed class ProfileRewriteState : global::Pulumi.ResourceArgs
    {
        [Input("bypassLists")]
        private InputList<string>? _bypassLists;

        /// <summary>
        /// Specifies a list of URIs to bypass inside a web page when the page is accessed using Portal Access.
        /// </summary>
        public InputList<string> BypassLists
        {
            get => _bypassLists ?? (_bypassLists = new InputList<string>());
            set => _bypassLists = value;
        }

        /// <summary>
        /// Specifies a CA against which to verify signed Java applets signatures. (name should be in full path which is combination of partition and CA file name )
        /// </summary>
        [Input("caFile")]
        public Input<string>? CaFile { get; set; }

        /// <summary>
        /// Specifies the type of Client caching. Valid choices are: `cache-css-js, cache-all, no-cache, cache-img-css-js`. Default value: `cache-img-css-js`
        /// </summary>
        [Input("cacheType")]
        public Input<string>? CacheType { get; set; }

        [Input("cookieRules")]
        private InputList<Inputs.ProfileRewriteCookieRuleGetArgs>? _cookieRules;

        /// <summary>
        /// Specifies the cookie rewrite rules. Block type. Each request is block type with following arguments.
        /// </summary>
        public InputList<Inputs.ProfileRewriteCookieRuleGetArgs> CookieRules
        {
            get => _cookieRules ?? (_cookieRules = new InputList<Inputs.ProfileRewriteCookieRuleGetArgs>());
            set => _cookieRules = value;
        }

        /// <summary>
        /// Specifies a CRL against which to verify signed Java applets signature certificates. The default option is `none`.
        /// </summary>
        [Input("crlFile")]
        public Input<string>? CrlFile { get; set; }

        /// <summary>
        /// Specifies the profile from which this profile inherits settings. The default is the system-supplied `rewrite` profile.
        /// </summary>
        [Input("defaultsFrom")]
        public Input<string>? DefaultsFrom { get; set; }

        /// <summary>
        /// Name of the rewrite profile. ( profile name should be in full path which is combination of partition and profile name )
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("requests")]
        private InputList<Inputs.ProfileRewriteRequestGetArgs>? _requests;

        /// <summary>
        /// Block type. Each request is block type with following arguments.
        /// </summary>
        public InputList<Inputs.ProfileRewriteRequestGetArgs> Requests
        {
            get => _requests ?? (_requests = new InputList<Inputs.ProfileRewriteRequestGetArgs>());
            set => _requests = value;
        }

        [Input("responses")]
        private InputList<Inputs.ProfileRewriteResponseGetArgs>? _responses;

        /// <summary>
        /// Block type. Each request is block type with following arguments.
        /// </summary>
        public InputList<Inputs.ProfileRewriteResponseGetArgs> Responses
        {
            get => _responses ?? (_responses = new InputList<Inputs.ProfileRewriteResponseGetArgs>());
            set => _responses = value;
        }

        [Input("rewriteLists")]
        private InputList<string>? _rewriteLists;

        /// <summary>
        /// Specifies a list of URIs to rewrite inside a web page when the page is accessed using Portal Access.
        /// </summary>
        public InputList<string> RewriteLists
        {
            get => _rewriteLists ?? (_rewriteLists = new InputList<string>());
            set => _rewriteLists = value;
        }

        /// <summary>
        /// Specifies the type of Client caching. Valid choices are: `portal, uri-translation`
        /// </summary>
        [Input("rewriteMode")]
        public Input<string>? RewriteMode { get; set; }

        /// <summary>
        /// Specifies a certificate to use for re-signing of signed Java applets after patching. (name should be in full path which is combination of partition and certificate name )
        /// </summary>
        [Input("signingCert")]
        public Input<string>? SigningCert { get; set; }

        /// <summary>
        /// Specifies a certificate to use for re-signing of signed Java applets after patching. (name should be in full path which is combination of partition and key name )
        /// </summary>
        [Input("signingKey")]
        public Input<string>? SigningKey { get; set; }

        [Input("signingKeyPassword")]
        private Input<string>? _signingKeyPassword;

        /// <summary>
        /// Specifies a pass phrase to use for encrypting the private signing key. Since it's a sensitive entity idempotency will fail in the update call.
        /// </summary>
        public Input<string>? SigningKeyPassword
        {
            get => _signingKeyPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _signingKeyPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies the type of Client caching. Valid choices are: `true, false`
        /// </summary>
        [Input("splitTunneling")]
        public Input<string>? SplitTunneling { get; set; }

        public ProfileRewriteState()
        {
        }
        public static new ProfileRewriteState Empty => new ProfileRewriteState();
    }
}
