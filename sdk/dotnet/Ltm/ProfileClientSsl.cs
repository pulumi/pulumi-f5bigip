// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.F5BigIP.Ltm
{
    /// <summary>
    /// `f5bigip.ltm.ProfileClientSsl` Manages client SSL profiles on a BIG-IP
    /// 
    /// Resources should be named with their "full path". The full path is the combination of the partition + name (example: /Common/my-pool ) or  partition + directory + name of the resource  (example: /Common/test/my-pool )
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using F5BigIP = Pulumi.F5BigIP;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test_ClientSsl = new F5BigIP.Ltm.ProfileClientSsl("test-ClientSsl", new()
    ///     {
    ///         Authenticate = "always",
    ///         Ciphers = "DEFAULT",
    ///         DefaultsFrom = "/Common/clientssl",
    ///         Name = "/Common/test-ClientSsl",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [F5BigIPResourceType("f5bigip:ltm/profileClientSsl:ProfileClientSsl")]
    public partial class ProfileClientSsl : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Alert time out
        /// </summary>
        [Output("alertTimeout")]
        public Output<string> AlertTimeout { get; private set; } = null!;

        /// <summary>
        /// Enables or disables acceptance of non-SSL connections, When creating a new profile, the setting is provided by the parent profile
        /// </summary>
        [Output("allowNonSsl")]
        public Output<string> AllowNonSsl { get; private set; } = null!;

        /// <summary>
        /// Specifies the frequency of client authentication for an SSL session.When `once`,specifies that the system authenticates the client once for an SSL session.
        /// When `always`, specifies that the system authenticates the client once for an SSL session and also upon reuse of that session.
        /// </summary>
        [Output("authenticate")]
        public Output<string> Authenticate { get; private set; } = null!;

        /// <summary>
        /// Specifies the maximum number of certificates to be traversed in a client certificate chain
        /// </summary>
        [Output("authenticateDepth")]
        public Output<int> AuthenticateDepth { get; private set; } = null!;

        /// <summary>
        /// Specifies the client certificate to use in SSL client certificate constrained delegation. This certificate will be used if client does not provide a cert during the SSL handshake. The default value is none.
        /// </summary>
        [Output("c3dClientFallbackCert")]
        public Output<string> C3dClientFallbackCert { get; private set; } = null!;

        /// <summary>
        /// Specifies the BIG-IP action when the OCSP responder returns unknown status. The default value is drop, which causes the onnection to be dropped. Conversely, you can specify ignore, which causes the connection to ignore the unknown status and continue.
        /// </summary>
        [Output("c3dDropUnknownOcspStatus")]
        public Output<string> C3dDropUnknownOcspStatus { get; private set; } = null!;

        /// <summary>
        /// Specifies the SSL client certificate constrained delegation OCSP object that the BIG-IP SSL should use to connect to the OCSP responder and check the client certificate status.
        /// </summary>
        [Output("c3dOcsp")]
        public Output<string> C3dOcsp { get; private set; } = null!;

        /// <summary>
        /// Client certificate file path. Default None.
        /// </summary>
        [Output("caFile")]
        public Output<string> CaFile { get; private set; } = null!;

        /// <summary>
        /// Cache size (sessions).
        /// </summary>
        [Output("cacheSize")]
        public Output<int> CacheSize { get; private set; } = null!;

        /// <summary>
        /// Cache time out
        /// </summary>
        [Output("cacheTimeout")]
        public Output<int> CacheTimeout { get; private set; } = null!;

        /// <summary>
        /// Specifies a cert name for use.
        /// </summary>
        [Output("cert")]
        public Output<string?> Cert { get; private set; } = null!;

        /// <summary>
        /// Cert extension includes for ssl forward proxy
        /// </summary>
        [Output("certExtensionIncludes")]
        public Output<ImmutableArray<string>> CertExtensionIncludes { get; private set; } = null!;

        [Output("certKeyChain")]
        public Output<Outputs.ProfileClientSslCertKeyChain?> CertKeyChain { get; private set; } = null!;

        /// <summary>
        /// Life span of the certificate in days for ssl forward proxy
        /// </summary>
        [Output("certLifeSpan")]
        public Output<int> CertLifeSpan { get; private set; } = null!;

        /// <summary>
        /// Cert lookup by ip address and port enabled / disabled
        /// </summary>
        [Output("certLookupByIpaddrPort")]
        public Output<string> CertLookupByIpaddrPort { get; private set; } = null!;

        /// <summary>
        /// Contains a certificate chain that is relevant to the certificate and key mentioned earlier.This key is optional
        /// </summary>
        [Output("chain")]
        public Output<string?> Chain { get; private set; } = null!;

        /// <summary>
        /// Specifies the cipher group for the SSL server profile. It is mutually exclusive with the argument, `ciphers`. The default value is `none`.
        /// </summary>
        [Output("cipherGroup")]
        public Output<string?> CipherGroup { get; private set; } = null!;

        /// <summary>
        /// Specifies the list of ciphers that the system supports. When creating a new profile, the default cipher list is provided by the parent profile.
        /// </summary>
        [Output("ciphers")]
        public Output<string> Ciphers { get; private set; } = null!;

        /// <summary>
        /// client certificate name
        /// </summary>
        [Output("clientCertCa")]
        public Output<string> ClientCertCa { get; private set; } = null!;

        /// <summary>
        /// Certificate revocation file name
        /// </summary>
        [Output("crlFile")]
        public Output<string> CrlFile { get; private set; } = null!;

        /// <summary>
        /// Parent profile for this clientssl profile.Once this value has been set, it cannot be changed. Default value is `/Common/clientssl`. It Should Full path `/partition/profile_name`
        /// </summary>
        [Output("defaultsFrom")]
        public Output<string?> DefaultsFrom { get; private set; } = null!;

        /// <summary>
        /// Forward proxy bypass default action. (enabled / disabled)
        /// </summary>
        [Output("forwardProxyBypassDefaultAction")]
        public Output<string> ForwardProxyBypassDefaultAction { get; private set; } = null!;

        /// <summary>
        /// full path of the profile
        /// </summary>
        [Output("fullPath")]
        public Output<string> FullPath { get; private set; } = null!;

        /// <summary>
        /// generation
        /// </summary>
        [Output("generation")]
        public Output<int> Generation { get; private set; } = null!;

        /// <summary>
        /// Generic alerts enabled / disabled.
        /// </summary>
        [Output("genericAlert")]
        public Output<string> GenericAlert { get; private set; } = null!;

        /// <summary>
        /// Handshake time out (seconds)
        /// </summary>
        [Output("handshakeTimeout")]
        public Output<string> HandshakeTimeout { get; private set; } = null!;

        /// <summary>
        /// Inherit cert key chain
        /// </summary>
        [Output("inheritCertKeychain")]
        public Output<string> InheritCertKeychain { get; private set; } = null!;

        /// <summary>
        /// Contains a key name
        /// </summary>
        [Output("key")]
        public Output<string?> Key { get; private set; } = null!;

        /// <summary>
        /// ModSSL Methods enabled / disabled. Default is disabled.
        /// </summary>
        [Output("modSslMethods")]
        public Output<string> ModSslMethods { get; private set; } = null!;

        /// <summary>
        /// ModSSL Methods enabled / disabled. Default is disabled.
        /// </summary>
        [Output("mode")]
        public Output<string> Mode { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the profile.Name of Profile should be full path.The full path is the combination of the `partition + profile name`,For example `/Common/test-clientssl-profile`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// name of partition
        /// </summary>
        [Output("partition")]
        public Output<string> Partition { get; private set; } = null!;

        /// <summary>
        /// Client Certificate Constrained Delegation CA passphrase
        /// </summary>
        [Output("passphrase")]
        public Output<string> Passphrase { get; private set; } = null!;

        /// <summary>
        /// Specifies the way the system handles client certificates.When ignore, specifies that the system ignores certificates from client systems.When require, specifies that the system requires a client to present a valid certificate.When request, specifies that the system requests a valid certificate from a client but always authenticate the client.
        /// </summary>
        [Output("peerCertMode")]
        public Output<string> PeerCertMode { get; private set; } = null!;

        /// <summary>
        /// Proxy CA Cert
        /// </summary>
        [Output("proxyCaCert")]
        public Output<string> ProxyCaCert { get; private set; } = null!;

        /// <summary>
        /// Proxy CA Key
        /// </summary>
        [Output("proxyCaKey")]
        public Output<string> ProxyCaKey { get; private set; } = null!;

        /// <summary>
        /// Proxy CA Passphrase
        /// </summary>
        [Output("proxyCaPassphrase")]
        public Output<string> ProxyCaPassphrase { get; private set; } = null!;

        /// <summary>
        /// Proxy SSL enabled / disabled. Default is disabled.
        /// </summary>
        [Output("proxySsl")]
        public Output<string> ProxySsl { get; private set; } = null!;

        /// <summary>
        /// Proxy SSL passthrough enabled / disabled. Default is disabled.
        /// </summary>
        [Output("proxySslPassthrough")]
        public Output<string> ProxySslPassthrough { get; private set; } = null!;

        /// <summary>
        /// Renogotiate Period (seconds)
        /// </summary>
        [Output("renegotiatePeriod")]
        public Output<string> RenegotiatePeriod { get; private set; } = null!;

        /// <summary>
        /// Renogotiate Size
        /// </summary>
        [Output("renegotiateSize")]
        public Output<string> RenegotiateSize { get; private set; } = null!;

        /// <summary>
        /// Enables or disables SSL renegotiation.When creating a new profile, the setting is provided by the parent profile
        /// </summary>
        [Output("renegotiation")]
        public Output<string> Renegotiation { get; private set; } = null!;

        /// <summary>
        /// When `true`, client certificate is retained in SSL session.
        /// </summary>
        [Output("retainCertificate")]
        public Output<string> RetainCertificate { get; private set; } = null!;

        /// <summary>
        /// Specifies the method of secure renegotiations for SSL connections. When creating a new profile, the setting is provided by the parent profile.
        /// When `request` is set the system request secure renegotation of SSL connections.
        /// `require` is a default setting and when set the system permits initial SSL handshakes from clients but terminates renegotiations from unpatched clients.
        /// The `require-strict` setting the system requires strict renegotiation of SSL connections. In this mode the system refuses connections to insecure servers, and terminates existing SSL connections to insecure servers
        /// </summary>
        [Output("secureRenegotiation")]
        public Output<string> SecureRenegotiation { get; private set; } = null!;

        /// <summary>
        /// Specifies the fully qualified DNS hostname of the server used in Server Name Indication communications. When creating a new profile, the setting is provided by the parent profile.The server name can also be a wildcard string containing the asterisk `*` character.
        /// </summary>
        [Output("serverName")]
        public Output<string> ServerName { get; private set; } = null!;

        /// <summary>
        /// Session Mirroring (enabled / disabled)
        /// </summary>
        [Output("sessionMirroring")]
        public Output<string> SessionMirroring { get; private set; } = null!;

        /// <summary>
        /// Session Ticket (enabled / disabled)
        /// </summary>
        [Output("sessionTicket")]
        public Output<string> SessionTicket { get; private set; } = null!;

        /// <summary>
        /// Indicates that the system uses this profile as the default SSL profile when there is no match to the server name, or when the client provides no SNI extension support.When creating a new profile, the setting is provided by the parent profile.
        /// There can be only one SSL profile with this setting enabled.
        /// </summary>
        [Output("sniDefault")]
        public Output<string> SniDefault { get; private set; } = null!;

        /// <summary>
        /// Requires that the network peers also provide SNI support, this setting only takes effect when `sni_default` is set to `true`.When creating a new profile, the setting is provided by the parent profile
        /// </summary>
        [Output("sniRequire")]
        public Output<string> SniRequire { get; private set; } = null!;

        /// <summary>
        /// Enables or disables SSL client certificate constrained delegation. The default option is disabled. Conversely, you can specify enabled to use the SSL client certificate constrained delegation.
        /// </summary>
        [Output("sslC3d")]
        public Output<string> SslC3d { get; private set; } = null!;

        /// <summary>
        /// Specifies whether SSL forward proxy feature is enabled or not. The default value is disabled.
        /// </summary>
        [Output("sslForwardProxy")]
        public Output<string> SslForwardProxy { get; private set; } = null!;

        /// <summary>
        /// Specifies whether SSL forward proxy bypass feature is enabled or not. The default value is disabled.
        /// </summary>
        [Output("sslForwardProxyBypass")]
        public Output<string> SslForwardProxyBypass { get; private set; } = null!;

        /// <summary>
        /// SSL sign hash (any, sha1, sha256, sha384)
        /// </summary>
        [Output("sslSignHash")]
        public Output<string> SslSignHash { get; private set; } = null!;

        /// <summary>
        /// Enables or disables the resumption of SSL sessions after an unclean shutdown.When creating a new profile, the setting is provided by the parent profile.
        /// </summary>
        [Output("strictResume")]
        public Output<string> StrictResume { get; private set; } = null!;

        /// <summary>
        /// List of Enabled selection from a set of industry standard options for handling SSL processing.By default,
        /// Don't insert empty fragments and No TLSv1.3 are listed as Enabled Options. `Usage` : tm_options    = ["dont-insert-empty-fragments","no-tlsv1.3"]
        /// </summary>
        [Output("tmOptions")]
        public Output<ImmutableArray<string>> TmOptions { get; private set; } = null!;

        /// <summary>
        /// Unclean Shutdown (enabled / disabled)
        /// </summary>
        [Output("uncleanShutdown")]
        public Output<string> UncleanShutdown { get; private set; } = null!;


        /// <summary>
        /// Create a ProfileClientSsl resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProfileClientSsl(string name, ProfileClientSslArgs args, CustomResourceOptions? options = null)
            : base("f5bigip:ltm/profileClientSsl:ProfileClientSsl", name, args ?? new ProfileClientSslArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProfileClientSsl(string name, Input<string> id, ProfileClientSslState? state = null, CustomResourceOptions? options = null)
            : base("f5bigip:ltm/profileClientSsl:ProfileClientSsl", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "passphrase",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProfileClientSsl resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProfileClientSsl Get(string name, Input<string> id, ProfileClientSslState? state = null, CustomResourceOptions? options = null)
        {
            return new ProfileClientSsl(name, id, state, options);
        }
    }

    public sealed class ProfileClientSslArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Alert time out
        /// </summary>
        [Input("alertTimeout")]
        public Input<string>? AlertTimeout { get; set; }

        /// <summary>
        /// Enables or disables acceptance of non-SSL connections, When creating a new profile, the setting is provided by the parent profile
        /// </summary>
        [Input("allowNonSsl")]
        public Input<string>? AllowNonSsl { get; set; }

        /// <summary>
        /// Specifies the frequency of client authentication for an SSL session.When `once`,specifies that the system authenticates the client once for an SSL session.
        /// When `always`, specifies that the system authenticates the client once for an SSL session and also upon reuse of that session.
        /// </summary>
        [Input("authenticate")]
        public Input<string>? Authenticate { get; set; }

        /// <summary>
        /// Specifies the maximum number of certificates to be traversed in a client certificate chain
        /// </summary>
        [Input("authenticateDepth")]
        public Input<int>? AuthenticateDepth { get; set; }

        /// <summary>
        /// Specifies the client certificate to use in SSL client certificate constrained delegation. This certificate will be used if client does not provide a cert during the SSL handshake. The default value is none.
        /// </summary>
        [Input("c3dClientFallbackCert")]
        public Input<string>? C3dClientFallbackCert { get; set; }

        /// <summary>
        /// Specifies the BIG-IP action when the OCSP responder returns unknown status. The default value is drop, which causes the onnection to be dropped. Conversely, you can specify ignore, which causes the connection to ignore the unknown status and continue.
        /// </summary>
        [Input("c3dDropUnknownOcspStatus")]
        public Input<string>? C3dDropUnknownOcspStatus { get; set; }

        /// <summary>
        /// Specifies the SSL client certificate constrained delegation OCSP object that the BIG-IP SSL should use to connect to the OCSP responder and check the client certificate status.
        /// </summary>
        [Input("c3dOcsp")]
        public Input<string>? C3dOcsp { get; set; }

        /// <summary>
        /// Client certificate file path. Default None.
        /// </summary>
        [Input("caFile")]
        public Input<string>? CaFile { get; set; }

        /// <summary>
        /// Cache size (sessions).
        /// </summary>
        [Input("cacheSize")]
        public Input<int>? CacheSize { get; set; }

        /// <summary>
        /// Cache time out
        /// </summary>
        [Input("cacheTimeout")]
        public Input<int>? CacheTimeout { get; set; }

        /// <summary>
        /// Specifies a cert name for use.
        /// </summary>
        [Input("cert")]
        public Input<string>? Cert { get; set; }

        [Input("certExtensionIncludes")]
        private InputList<string>? _certExtensionIncludes;

        /// <summary>
        /// Cert extension includes for ssl forward proxy
        /// </summary>
        public InputList<string> CertExtensionIncludes
        {
            get => _certExtensionIncludes ?? (_certExtensionIncludes = new InputList<string>());
            set => _certExtensionIncludes = value;
        }

        [Input("certKeyChain")]
        public Input<Inputs.ProfileClientSslCertKeyChainArgs>? CertKeyChain { get; set; }

        /// <summary>
        /// Life span of the certificate in days for ssl forward proxy
        /// </summary>
        [Input("certLifeSpan")]
        public Input<int>? CertLifeSpan { get; set; }

        /// <summary>
        /// Cert lookup by ip address and port enabled / disabled
        /// </summary>
        [Input("certLookupByIpaddrPort")]
        public Input<string>? CertLookupByIpaddrPort { get; set; }

        /// <summary>
        /// Contains a certificate chain that is relevant to the certificate and key mentioned earlier.This key is optional
        /// </summary>
        [Input("chain")]
        public Input<string>? Chain { get; set; }

        /// <summary>
        /// Specifies the cipher group for the SSL server profile. It is mutually exclusive with the argument, `ciphers`. The default value is `none`.
        /// </summary>
        [Input("cipherGroup")]
        public Input<string>? CipherGroup { get; set; }

        /// <summary>
        /// Specifies the list of ciphers that the system supports. When creating a new profile, the default cipher list is provided by the parent profile.
        /// </summary>
        [Input("ciphers")]
        public Input<string>? Ciphers { get; set; }

        /// <summary>
        /// client certificate name
        /// </summary>
        [Input("clientCertCa")]
        public Input<string>? ClientCertCa { get; set; }

        /// <summary>
        /// Certificate revocation file name
        /// </summary>
        [Input("crlFile")]
        public Input<string>? CrlFile { get; set; }

        /// <summary>
        /// Parent profile for this clientssl profile.Once this value has been set, it cannot be changed. Default value is `/Common/clientssl`. It Should Full path `/partition/profile_name`
        /// </summary>
        [Input("defaultsFrom")]
        public Input<string>? DefaultsFrom { get; set; }

        /// <summary>
        /// Forward proxy bypass default action. (enabled / disabled)
        /// </summary>
        [Input("forwardProxyBypassDefaultAction")]
        public Input<string>? ForwardProxyBypassDefaultAction { get; set; }

        /// <summary>
        /// full path of the profile
        /// </summary>
        [Input("fullPath")]
        public Input<string>? FullPath { get; set; }

        /// <summary>
        /// generation
        /// </summary>
        [Input("generation")]
        public Input<int>? Generation { get; set; }

        /// <summary>
        /// Generic alerts enabled / disabled.
        /// </summary>
        [Input("genericAlert")]
        public Input<string>? GenericAlert { get; set; }

        /// <summary>
        /// Handshake time out (seconds)
        /// </summary>
        [Input("handshakeTimeout")]
        public Input<string>? HandshakeTimeout { get; set; }

        /// <summary>
        /// Inherit cert key chain
        /// </summary>
        [Input("inheritCertKeychain")]
        public Input<string>? InheritCertKeychain { get; set; }

        /// <summary>
        /// Contains a key name
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// ModSSL Methods enabled / disabled. Default is disabled.
        /// </summary>
        [Input("modSslMethods")]
        public Input<string>? ModSslMethods { get; set; }

        /// <summary>
        /// ModSSL Methods enabled / disabled. Default is disabled.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// Specifies the name of the profile.Name of Profile should be full path.The full path is the combination of the `partition + profile name`,For example `/Common/test-clientssl-profile`.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// name of partition
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        [Input("passphrase")]
        private Input<string>? _passphrase;

        /// <summary>
        /// Client Certificate Constrained Delegation CA passphrase
        /// </summary>
        public Input<string>? Passphrase
        {
            get => _passphrase;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _passphrase = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies the way the system handles client certificates.When ignore, specifies that the system ignores certificates from client systems.When require, specifies that the system requires a client to present a valid certificate.When request, specifies that the system requests a valid certificate from a client but always authenticate the client.
        /// </summary>
        [Input("peerCertMode")]
        public Input<string>? PeerCertMode { get; set; }

        /// <summary>
        /// Proxy CA Cert
        /// </summary>
        [Input("proxyCaCert")]
        public Input<string>? ProxyCaCert { get; set; }

        /// <summary>
        /// Proxy CA Key
        /// </summary>
        [Input("proxyCaKey")]
        public Input<string>? ProxyCaKey { get; set; }

        /// <summary>
        /// Proxy CA Passphrase
        /// </summary>
        [Input("proxyCaPassphrase")]
        public Input<string>? ProxyCaPassphrase { get; set; }

        /// <summary>
        /// Proxy SSL enabled / disabled. Default is disabled.
        /// </summary>
        [Input("proxySsl")]
        public Input<string>? ProxySsl { get; set; }

        /// <summary>
        /// Proxy SSL passthrough enabled / disabled. Default is disabled.
        /// </summary>
        [Input("proxySslPassthrough")]
        public Input<string>? ProxySslPassthrough { get; set; }

        /// <summary>
        /// Renogotiate Period (seconds)
        /// </summary>
        [Input("renegotiatePeriod")]
        public Input<string>? RenegotiatePeriod { get; set; }

        /// <summary>
        /// Renogotiate Size
        /// </summary>
        [Input("renegotiateSize")]
        public Input<string>? RenegotiateSize { get; set; }

        /// <summary>
        /// Enables or disables SSL renegotiation.When creating a new profile, the setting is provided by the parent profile
        /// </summary>
        [Input("renegotiation")]
        public Input<string>? Renegotiation { get; set; }

        /// <summary>
        /// When `true`, client certificate is retained in SSL session.
        /// </summary>
        [Input("retainCertificate")]
        public Input<string>? RetainCertificate { get; set; }

        /// <summary>
        /// Specifies the method of secure renegotiations for SSL connections. When creating a new profile, the setting is provided by the parent profile.
        /// When `request` is set the system request secure renegotation of SSL connections.
        /// `require` is a default setting and when set the system permits initial SSL handshakes from clients but terminates renegotiations from unpatched clients.
        /// The `require-strict` setting the system requires strict renegotiation of SSL connections. In this mode the system refuses connections to insecure servers, and terminates existing SSL connections to insecure servers
        /// </summary>
        [Input("secureRenegotiation")]
        public Input<string>? SecureRenegotiation { get; set; }

        /// <summary>
        /// Specifies the fully qualified DNS hostname of the server used in Server Name Indication communications. When creating a new profile, the setting is provided by the parent profile.The server name can also be a wildcard string containing the asterisk `*` character.
        /// </summary>
        [Input("serverName")]
        public Input<string>? ServerName { get; set; }

        /// <summary>
        /// Session Mirroring (enabled / disabled)
        /// </summary>
        [Input("sessionMirroring")]
        public Input<string>? SessionMirroring { get; set; }

        /// <summary>
        /// Session Ticket (enabled / disabled)
        /// </summary>
        [Input("sessionTicket")]
        public Input<string>? SessionTicket { get; set; }

        /// <summary>
        /// Indicates that the system uses this profile as the default SSL profile when there is no match to the server name, or when the client provides no SNI extension support.When creating a new profile, the setting is provided by the parent profile.
        /// There can be only one SSL profile with this setting enabled.
        /// </summary>
        [Input("sniDefault")]
        public Input<string>? SniDefault { get; set; }

        /// <summary>
        /// Requires that the network peers also provide SNI support, this setting only takes effect when `sni_default` is set to `true`.When creating a new profile, the setting is provided by the parent profile
        /// </summary>
        [Input("sniRequire")]
        public Input<string>? SniRequire { get; set; }

        /// <summary>
        /// Enables or disables SSL client certificate constrained delegation. The default option is disabled. Conversely, you can specify enabled to use the SSL client certificate constrained delegation.
        /// </summary>
        [Input("sslC3d")]
        public Input<string>? SslC3d { get; set; }

        /// <summary>
        /// Specifies whether SSL forward proxy feature is enabled or not. The default value is disabled.
        /// </summary>
        [Input("sslForwardProxy")]
        public Input<string>? SslForwardProxy { get; set; }

        /// <summary>
        /// Specifies whether SSL forward proxy bypass feature is enabled or not. The default value is disabled.
        /// </summary>
        [Input("sslForwardProxyBypass")]
        public Input<string>? SslForwardProxyBypass { get; set; }

        /// <summary>
        /// SSL sign hash (any, sha1, sha256, sha384)
        /// </summary>
        [Input("sslSignHash")]
        public Input<string>? SslSignHash { get; set; }

        /// <summary>
        /// Enables or disables the resumption of SSL sessions after an unclean shutdown.When creating a new profile, the setting is provided by the parent profile.
        /// </summary>
        [Input("strictResume")]
        public Input<string>? StrictResume { get; set; }

        [Input("tmOptions")]
        private InputList<string>? _tmOptions;

        /// <summary>
        /// List of Enabled selection from a set of industry standard options for handling SSL processing.By default,
        /// Don't insert empty fragments and No TLSv1.3 are listed as Enabled Options. `Usage` : tm_options    = ["dont-insert-empty-fragments","no-tlsv1.3"]
        /// </summary>
        public InputList<string> TmOptions
        {
            get => _tmOptions ?? (_tmOptions = new InputList<string>());
            set => _tmOptions = value;
        }

        /// <summary>
        /// Unclean Shutdown (enabled / disabled)
        /// </summary>
        [Input("uncleanShutdown")]
        public Input<string>? UncleanShutdown { get; set; }

        public ProfileClientSslArgs()
        {
        }
        public static new ProfileClientSslArgs Empty => new ProfileClientSslArgs();
    }

    public sealed class ProfileClientSslState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Alert time out
        /// </summary>
        [Input("alertTimeout")]
        public Input<string>? AlertTimeout { get; set; }

        /// <summary>
        /// Enables or disables acceptance of non-SSL connections, When creating a new profile, the setting is provided by the parent profile
        /// </summary>
        [Input("allowNonSsl")]
        public Input<string>? AllowNonSsl { get; set; }

        /// <summary>
        /// Specifies the frequency of client authentication for an SSL session.When `once`,specifies that the system authenticates the client once for an SSL session.
        /// When `always`, specifies that the system authenticates the client once for an SSL session and also upon reuse of that session.
        /// </summary>
        [Input("authenticate")]
        public Input<string>? Authenticate { get; set; }

        /// <summary>
        /// Specifies the maximum number of certificates to be traversed in a client certificate chain
        /// </summary>
        [Input("authenticateDepth")]
        public Input<int>? AuthenticateDepth { get; set; }

        /// <summary>
        /// Specifies the client certificate to use in SSL client certificate constrained delegation. This certificate will be used if client does not provide a cert during the SSL handshake. The default value is none.
        /// </summary>
        [Input("c3dClientFallbackCert")]
        public Input<string>? C3dClientFallbackCert { get; set; }

        /// <summary>
        /// Specifies the BIG-IP action when the OCSP responder returns unknown status. The default value is drop, which causes the onnection to be dropped. Conversely, you can specify ignore, which causes the connection to ignore the unknown status and continue.
        /// </summary>
        [Input("c3dDropUnknownOcspStatus")]
        public Input<string>? C3dDropUnknownOcspStatus { get; set; }

        /// <summary>
        /// Specifies the SSL client certificate constrained delegation OCSP object that the BIG-IP SSL should use to connect to the OCSP responder and check the client certificate status.
        /// </summary>
        [Input("c3dOcsp")]
        public Input<string>? C3dOcsp { get; set; }

        /// <summary>
        /// Client certificate file path. Default None.
        /// </summary>
        [Input("caFile")]
        public Input<string>? CaFile { get; set; }

        /// <summary>
        /// Cache size (sessions).
        /// </summary>
        [Input("cacheSize")]
        public Input<int>? CacheSize { get; set; }

        /// <summary>
        /// Cache time out
        /// </summary>
        [Input("cacheTimeout")]
        public Input<int>? CacheTimeout { get; set; }

        /// <summary>
        /// Specifies a cert name for use.
        /// </summary>
        [Input("cert")]
        public Input<string>? Cert { get; set; }

        [Input("certExtensionIncludes")]
        private InputList<string>? _certExtensionIncludes;

        /// <summary>
        /// Cert extension includes for ssl forward proxy
        /// </summary>
        public InputList<string> CertExtensionIncludes
        {
            get => _certExtensionIncludes ?? (_certExtensionIncludes = new InputList<string>());
            set => _certExtensionIncludes = value;
        }

        [Input("certKeyChain")]
        public Input<Inputs.ProfileClientSslCertKeyChainGetArgs>? CertKeyChain { get; set; }

        /// <summary>
        /// Life span of the certificate in days for ssl forward proxy
        /// </summary>
        [Input("certLifeSpan")]
        public Input<int>? CertLifeSpan { get; set; }

        /// <summary>
        /// Cert lookup by ip address and port enabled / disabled
        /// </summary>
        [Input("certLookupByIpaddrPort")]
        public Input<string>? CertLookupByIpaddrPort { get; set; }

        /// <summary>
        /// Contains a certificate chain that is relevant to the certificate and key mentioned earlier.This key is optional
        /// </summary>
        [Input("chain")]
        public Input<string>? Chain { get; set; }

        /// <summary>
        /// Specifies the cipher group for the SSL server profile. It is mutually exclusive with the argument, `ciphers`. The default value is `none`.
        /// </summary>
        [Input("cipherGroup")]
        public Input<string>? CipherGroup { get; set; }

        /// <summary>
        /// Specifies the list of ciphers that the system supports. When creating a new profile, the default cipher list is provided by the parent profile.
        /// </summary>
        [Input("ciphers")]
        public Input<string>? Ciphers { get; set; }

        /// <summary>
        /// client certificate name
        /// </summary>
        [Input("clientCertCa")]
        public Input<string>? ClientCertCa { get; set; }

        /// <summary>
        /// Certificate revocation file name
        /// </summary>
        [Input("crlFile")]
        public Input<string>? CrlFile { get; set; }

        /// <summary>
        /// Parent profile for this clientssl profile.Once this value has been set, it cannot be changed. Default value is `/Common/clientssl`. It Should Full path `/partition/profile_name`
        /// </summary>
        [Input("defaultsFrom")]
        public Input<string>? DefaultsFrom { get; set; }

        /// <summary>
        /// Forward proxy bypass default action. (enabled / disabled)
        /// </summary>
        [Input("forwardProxyBypassDefaultAction")]
        public Input<string>? ForwardProxyBypassDefaultAction { get; set; }

        /// <summary>
        /// full path of the profile
        /// </summary>
        [Input("fullPath")]
        public Input<string>? FullPath { get; set; }

        /// <summary>
        /// generation
        /// </summary>
        [Input("generation")]
        public Input<int>? Generation { get; set; }

        /// <summary>
        /// Generic alerts enabled / disabled.
        /// </summary>
        [Input("genericAlert")]
        public Input<string>? GenericAlert { get; set; }

        /// <summary>
        /// Handshake time out (seconds)
        /// </summary>
        [Input("handshakeTimeout")]
        public Input<string>? HandshakeTimeout { get; set; }

        /// <summary>
        /// Inherit cert key chain
        /// </summary>
        [Input("inheritCertKeychain")]
        public Input<string>? InheritCertKeychain { get; set; }

        /// <summary>
        /// Contains a key name
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// ModSSL Methods enabled / disabled. Default is disabled.
        /// </summary>
        [Input("modSslMethods")]
        public Input<string>? ModSslMethods { get; set; }

        /// <summary>
        /// ModSSL Methods enabled / disabled. Default is disabled.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// Specifies the name of the profile.Name of Profile should be full path.The full path is the combination of the `partition + profile name`,For example `/Common/test-clientssl-profile`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// name of partition
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        [Input("passphrase")]
        private Input<string>? _passphrase;

        /// <summary>
        /// Client Certificate Constrained Delegation CA passphrase
        /// </summary>
        public Input<string>? Passphrase
        {
            get => _passphrase;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _passphrase = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies the way the system handles client certificates.When ignore, specifies that the system ignores certificates from client systems.When require, specifies that the system requires a client to present a valid certificate.When request, specifies that the system requests a valid certificate from a client but always authenticate the client.
        /// </summary>
        [Input("peerCertMode")]
        public Input<string>? PeerCertMode { get; set; }

        /// <summary>
        /// Proxy CA Cert
        /// </summary>
        [Input("proxyCaCert")]
        public Input<string>? ProxyCaCert { get; set; }

        /// <summary>
        /// Proxy CA Key
        /// </summary>
        [Input("proxyCaKey")]
        public Input<string>? ProxyCaKey { get; set; }

        /// <summary>
        /// Proxy CA Passphrase
        /// </summary>
        [Input("proxyCaPassphrase")]
        public Input<string>? ProxyCaPassphrase { get; set; }

        /// <summary>
        /// Proxy SSL enabled / disabled. Default is disabled.
        /// </summary>
        [Input("proxySsl")]
        public Input<string>? ProxySsl { get; set; }

        /// <summary>
        /// Proxy SSL passthrough enabled / disabled. Default is disabled.
        /// </summary>
        [Input("proxySslPassthrough")]
        public Input<string>? ProxySslPassthrough { get; set; }

        /// <summary>
        /// Renogotiate Period (seconds)
        /// </summary>
        [Input("renegotiatePeriod")]
        public Input<string>? RenegotiatePeriod { get; set; }

        /// <summary>
        /// Renogotiate Size
        /// </summary>
        [Input("renegotiateSize")]
        public Input<string>? RenegotiateSize { get; set; }

        /// <summary>
        /// Enables or disables SSL renegotiation.When creating a new profile, the setting is provided by the parent profile
        /// </summary>
        [Input("renegotiation")]
        public Input<string>? Renegotiation { get; set; }

        /// <summary>
        /// When `true`, client certificate is retained in SSL session.
        /// </summary>
        [Input("retainCertificate")]
        public Input<string>? RetainCertificate { get; set; }

        /// <summary>
        /// Specifies the method of secure renegotiations for SSL connections. When creating a new profile, the setting is provided by the parent profile.
        /// When `request` is set the system request secure renegotation of SSL connections.
        /// `require` is a default setting and when set the system permits initial SSL handshakes from clients but terminates renegotiations from unpatched clients.
        /// The `require-strict` setting the system requires strict renegotiation of SSL connections. In this mode the system refuses connections to insecure servers, and terminates existing SSL connections to insecure servers
        /// </summary>
        [Input("secureRenegotiation")]
        public Input<string>? SecureRenegotiation { get; set; }

        /// <summary>
        /// Specifies the fully qualified DNS hostname of the server used in Server Name Indication communications. When creating a new profile, the setting is provided by the parent profile.The server name can also be a wildcard string containing the asterisk `*` character.
        /// </summary>
        [Input("serverName")]
        public Input<string>? ServerName { get; set; }

        /// <summary>
        /// Session Mirroring (enabled / disabled)
        /// </summary>
        [Input("sessionMirroring")]
        public Input<string>? SessionMirroring { get; set; }

        /// <summary>
        /// Session Ticket (enabled / disabled)
        /// </summary>
        [Input("sessionTicket")]
        public Input<string>? SessionTicket { get; set; }

        /// <summary>
        /// Indicates that the system uses this profile as the default SSL profile when there is no match to the server name, or when the client provides no SNI extension support.When creating a new profile, the setting is provided by the parent profile.
        /// There can be only one SSL profile with this setting enabled.
        /// </summary>
        [Input("sniDefault")]
        public Input<string>? SniDefault { get; set; }

        /// <summary>
        /// Requires that the network peers also provide SNI support, this setting only takes effect when `sni_default` is set to `true`.When creating a new profile, the setting is provided by the parent profile
        /// </summary>
        [Input("sniRequire")]
        public Input<string>? SniRequire { get; set; }

        /// <summary>
        /// Enables or disables SSL client certificate constrained delegation. The default option is disabled. Conversely, you can specify enabled to use the SSL client certificate constrained delegation.
        /// </summary>
        [Input("sslC3d")]
        public Input<string>? SslC3d { get; set; }

        /// <summary>
        /// Specifies whether SSL forward proxy feature is enabled or not. The default value is disabled.
        /// </summary>
        [Input("sslForwardProxy")]
        public Input<string>? SslForwardProxy { get; set; }

        /// <summary>
        /// Specifies whether SSL forward proxy bypass feature is enabled or not. The default value is disabled.
        /// </summary>
        [Input("sslForwardProxyBypass")]
        public Input<string>? SslForwardProxyBypass { get; set; }

        /// <summary>
        /// SSL sign hash (any, sha1, sha256, sha384)
        /// </summary>
        [Input("sslSignHash")]
        public Input<string>? SslSignHash { get; set; }

        /// <summary>
        /// Enables or disables the resumption of SSL sessions after an unclean shutdown.When creating a new profile, the setting is provided by the parent profile.
        /// </summary>
        [Input("strictResume")]
        public Input<string>? StrictResume { get; set; }

        [Input("tmOptions")]
        private InputList<string>? _tmOptions;

        /// <summary>
        /// List of Enabled selection from a set of industry standard options for handling SSL processing.By default,
        /// Don't insert empty fragments and No TLSv1.3 are listed as Enabled Options. `Usage` : tm_options    = ["dont-insert-empty-fragments","no-tlsv1.3"]
        /// </summary>
        public InputList<string> TmOptions
        {
            get => _tmOptions ?? (_tmOptions = new InputList<string>());
            set => _tmOptions = value;
        }

        /// <summary>
        /// Unclean Shutdown (enabled / disabled)
        /// </summary>
        [Input("uncleanShutdown")]
        public Input<string>? UncleanShutdown { get; set; }

        public ProfileClientSslState()
        {
        }
        public static new ProfileClientSslState Empty => new ProfileClientSslState();
    }
}
