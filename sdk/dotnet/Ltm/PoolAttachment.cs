// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.F5BigIP.Ltm
{
    /// <summary>
    /// `f5bigip.ltm.PoolAttachment` Manages nodes membership in pools
    /// 
    /// Resources should be named with their "full path". The full path is the combination of the partition + name of the resource.
    /// For example /Common/my-pool.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using F5BigIP = Pulumi.F5BigIP;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var monitor = new F5BigIP.Ltm.Monitor("monitor", new F5BigIP.Ltm.MonitorArgs
    ///         {
    ///             Name = "/Common/terraform_monitor",
    ///             Parent = "/Common/http",
    ///             Send = @"GET /some/path
    /// ",
    ///             Timeout = 999,
    ///             Interval = 998,
    ///         });
    ///         var pool = new F5BigIP.Ltm.Pool("pool", new F5BigIP.Ltm.PoolArgs
    ///         {
    ///             Name = "/Common/terraform-pool",
    ///             LoadBalancingMode = "round-robin",
    ///             Monitors = 
    ///             {
    ///                 monitor.Name,
    ///             },
    ///             AllowSnat = "yes",
    ///             AllowNat = "yes",
    ///         });
    ///         var node = new F5BigIP.Ltm.Node("node", new F5BigIP.Ltm.NodeArgs
    ///         {
    ///             Name = "/Common/terraform_node",
    ///             Address = "192.168.30.2",
    ///         });
    ///         var attachNode = new F5BigIP.Ltm.PoolAttachment("attachNode", new F5BigIP.Ltm.PoolAttachmentArgs
    ///         {
    ///             Pool = pool.Name,
    ///             Node = node.Name.Apply(name =&gt; $"{name}:80"),
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class PoolAttachment : Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the Node with service port. (Name of Node should be referenced from `f5bigip.ltm.Node` resource)
        /// </summary>
        [Output("node")]
        public Output<string> Node { get; private set; } = null!;

        /// <summary>
        /// Name of the pool, which should be referenced from `f5bigip.ltm.Pool` resource
        /// </summary>
        [Output("pool")]
        public Output<string> Pool { get; private set; } = null!;


        /// <summary>
        /// Create a PoolAttachment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PoolAttachment(string name, PoolAttachmentArgs args, CustomResourceOptions? options = null)
            : base("f5bigip:ltm/poolAttachment:PoolAttachment", name, args ?? new PoolAttachmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PoolAttachment(string name, Input<string> id, PoolAttachmentState? state = null, CustomResourceOptions? options = null)
            : base("f5bigip:ltm/poolAttachment:PoolAttachment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PoolAttachment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PoolAttachment Get(string name, Input<string> id, PoolAttachmentState? state = null, CustomResourceOptions? options = null)
        {
            return new PoolAttachment(name, id, state, options);
        }
    }

    public sealed class PoolAttachmentArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the Node with service port. (Name of Node should be referenced from `f5bigip.ltm.Node` resource)
        /// </summary>
        [Input("node", required: true)]
        public Input<string> Node { get; set; } = null!;

        /// <summary>
        /// Name of the pool, which should be referenced from `f5bigip.ltm.Pool` resource
        /// </summary>
        [Input("pool", required: true)]
        public Input<string> Pool { get; set; } = null!;

        public PoolAttachmentArgs()
        {
        }
    }

    public sealed class PoolAttachmentState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the Node with service port. (Name of Node should be referenced from `f5bigip.ltm.Node` resource)
        /// </summary>
        [Input("node")]
        public Input<string>? Node { get; set; }

        /// <summary>
        /// Name of the pool, which should be referenced from `f5bigip.ltm.Pool` resource
        /// </summary>
        [Input("pool")]
        public Input<string>? Pool { get; set; }

        public PoolAttachmentState()
        {
        }
    }
}
