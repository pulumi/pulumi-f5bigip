// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.F5BigIP.Ltm
{
    /// <summary>
    /// `f5bigip.ltm.ProfileRewriteUriRules` Configures uri rewrite rules attached to the ltm rewrite profile
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using F5BigIP = Pulumi.F5BigIP;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var tftest = new F5BigIP.Ltm.ProfileRewrite("tftest", new()
    ///     {
    ///         Name = "/Common/tf_profile",
    ///         DefaultsFrom = "/Common/rewrite",
    ///         RewriteMode = "uri-translation",
    ///     });
    /// 
    ///     var tftestrule1 = new F5BigIP.Ltm.ProfileRewriteUriRules("tftestrule1", new()
    ///     {
    ///         ProfileName = tftest.Name,
    ///         RuleName = "tf_rule",
    ///         RuleType = "request",
    ///         Clients = new[]
    ///         {
    ///             new F5BigIP.Ltm.Inputs.ProfileRewriteUriRulesClientArgs
    ///             {
    ///                 Host = "www.foo.com",
    ///                 Scheme = "https",
    ///             },
    ///         },
    ///         Servers = new[]
    ///         {
    ///             new F5BigIP.Ltm.Inputs.ProfileRewriteUriRulesServerArgs
    ///             {
    ///                 Host = "www.bar.com",
    ///                 Path = "/this/",
    ///                 Scheme = "https",
    ///                 Port = "8888",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var tftestrule2 = new F5BigIP.Ltm.ProfileRewriteUriRules("tftestrule2", new()
    ///     {
    ///         ProfileName = tftest.Name,
    ///         RuleName = "tf_rule2",
    ///         Clients = new[]
    ///         {
    ///             new F5BigIP.Ltm.Inputs.ProfileRewriteUriRulesClientArgs
    ///             {
    ///                 Host = "www.baz.com",
    ///                 Path = "/that/",
    ///                 Scheme = "ftp",
    ///                 Port = "8888",
    ///             },
    ///         },
    ///         Servers = new[]
    ///         {
    ///             new F5BigIP.Ltm.Inputs.ProfileRewriteUriRulesServerArgs
    ///             {
    ///                 Host = "www.buz.com",
    ///                 Path = "/those/",
    ///                 Scheme = "ftps",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [F5BigIPResourceType("f5bigip:ltm/profileRewriteUriRules:ProfileRewriteUriRules")]
    public partial class ProfileRewriteUriRules : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Block type. Each request is block type with following arguments.
        /// </summary>
        [Output("clients")]
        public Output<ImmutableArray<Outputs.ProfileRewriteUriRulesClient>> Clients { get; private set; } = null!;

        /// <summary>
        /// Name of the rewrite profile. ( policy name should be in full path which is combination of partition and policy name )
        /// </summary>
        [Output("profileName")]
        public Output<string> ProfileName { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the uri rule.
        /// </summary>
        [Output("ruleName")]
        public Output<string> RuleName { get; private set; } = null!;

        /// <summary>
        /// Specifies the type of the uri rule. Valid choices are: `request, response, both`. Default value is: `both`
        /// </summary>
        [Output("ruleType")]
        public Output<string?> RuleType { get; private set; } = null!;

        /// <summary>
        /// Block type. Each request is block type with following arguments.
        /// </summary>
        [Output("servers")]
        public Output<ImmutableArray<Outputs.ProfileRewriteUriRulesServer>> Servers { get; private set; } = null!;


        /// <summary>
        /// Create a ProfileRewriteUriRules resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProfileRewriteUriRules(string name, ProfileRewriteUriRulesArgs args, CustomResourceOptions? options = null)
            : base("f5bigip:ltm/profileRewriteUriRules:ProfileRewriteUriRules", name, args ?? new ProfileRewriteUriRulesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProfileRewriteUriRules(string name, Input<string> id, ProfileRewriteUriRulesState? state = null, CustomResourceOptions? options = null)
            : base("f5bigip:ltm/profileRewriteUriRules:ProfileRewriteUriRules", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProfileRewriteUriRules resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProfileRewriteUriRules Get(string name, Input<string> id, ProfileRewriteUriRulesState? state = null, CustomResourceOptions? options = null)
        {
            return new ProfileRewriteUriRules(name, id, state, options);
        }
    }

    public sealed class ProfileRewriteUriRulesArgs : global::Pulumi.ResourceArgs
    {
        [Input("clients", required: true)]
        private InputList<Inputs.ProfileRewriteUriRulesClientArgs>? _clients;

        /// <summary>
        /// Block type. Each request is block type with following arguments.
        /// </summary>
        public InputList<Inputs.ProfileRewriteUriRulesClientArgs> Clients
        {
            get => _clients ?? (_clients = new InputList<Inputs.ProfileRewriteUriRulesClientArgs>());
            set => _clients = value;
        }

        /// <summary>
        /// Name of the rewrite profile. ( policy name should be in full path which is combination of partition and policy name )
        /// </summary>
        [Input("profileName", required: true)]
        public Input<string> ProfileName { get; set; } = null!;

        /// <summary>
        /// Specifies the name of the uri rule.
        /// </summary>
        [Input("ruleName", required: true)]
        public Input<string> RuleName { get; set; } = null!;

        /// <summary>
        /// Specifies the type of the uri rule. Valid choices are: `request, response, both`. Default value is: `both`
        /// </summary>
        [Input("ruleType")]
        public Input<string>? RuleType { get; set; }

        [Input("servers", required: true)]
        private InputList<Inputs.ProfileRewriteUriRulesServerArgs>? _servers;

        /// <summary>
        /// Block type. Each request is block type with following arguments.
        /// </summary>
        public InputList<Inputs.ProfileRewriteUriRulesServerArgs> Servers
        {
            get => _servers ?? (_servers = new InputList<Inputs.ProfileRewriteUriRulesServerArgs>());
            set => _servers = value;
        }

        public ProfileRewriteUriRulesArgs()
        {
        }
        public static new ProfileRewriteUriRulesArgs Empty => new ProfileRewriteUriRulesArgs();
    }

    public sealed class ProfileRewriteUriRulesState : global::Pulumi.ResourceArgs
    {
        [Input("clients")]
        private InputList<Inputs.ProfileRewriteUriRulesClientGetArgs>? _clients;

        /// <summary>
        /// Block type. Each request is block type with following arguments.
        /// </summary>
        public InputList<Inputs.ProfileRewriteUriRulesClientGetArgs> Clients
        {
            get => _clients ?? (_clients = new InputList<Inputs.ProfileRewriteUriRulesClientGetArgs>());
            set => _clients = value;
        }

        /// <summary>
        /// Name of the rewrite profile. ( policy name should be in full path which is combination of partition and policy name )
        /// </summary>
        [Input("profileName")]
        public Input<string>? ProfileName { get; set; }

        /// <summary>
        /// Specifies the name of the uri rule.
        /// </summary>
        [Input("ruleName")]
        public Input<string>? RuleName { get; set; }

        /// <summary>
        /// Specifies the type of the uri rule. Valid choices are: `request, response, both`. Default value is: `both`
        /// </summary>
        [Input("ruleType")]
        public Input<string>? RuleType { get; set; }

        [Input("servers")]
        private InputList<Inputs.ProfileRewriteUriRulesServerGetArgs>? _servers;

        /// <summary>
        /// Block type. Each request is block type with following arguments.
        /// </summary>
        public InputList<Inputs.ProfileRewriteUriRulesServerGetArgs> Servers
        {
            get => _servers ?? (_servers = new InputList<Inputs.ProfileRewriteUriRulesServerGetArgs>());
            set => _servers = value;
        }

        public ProfileRewriteUriRulesState()
        {
        }
        public static new ProfileRewriteUriRulesState Empty => new ProfileRewriteUriRulesState();
    }
}
