// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.F5bigip.Ltm
{
    /// <summary>
    /// `f5bigip.ltm.Policy` Configures Virtual Server
    /// 
    /// For resources should be named with their "full path". The full path is the combination of the partition + name of the resource. For example /Common/my-pool.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-bigip/blob/master/website/docs/r/ltm_policy.html.markdown.
    /// </summary>
    public partial class Policy : Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the controls
        /// </summary>
        [Output("controls")]
        public Output<ImmutableArray<string>> Controls { get; private set; } = null!;

        /// <summary>
        /// Name of the Policy
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// If you want to publish the policy else it will be deployed in Drafts mode.
        /// </summary>
        [Output("publishedCopy")]
        public Output<string?> PublishedCopy { get; private set; } = null!;

        /// <summary>
        /// Specifies the protocol
        /// </summary>
        [Output("requires")]
        public Output<ImmutableArray<string>> Requires { get; private set; } = null!;

        /// <summary>
        /// Rules can be applied using the policy
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.PolicyRules>> Rules { get; private set; } = null!;

        /// <summary>
        /// Specifies the match strategy
        /// </summary>
        [Output("strategy")]
        public Output<string?> Strategy { get; private set; } = null!;


        /// <summary>
        /// Create a Policy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Policy(string name, PolicyArgs args, CustomResourceOptions? options = null)
            : base("f5bigip:ltm/policy:Policy", name, args, MakeResourceOptions(options, ""))
        {
        }

        private Policy(string name, Input<string> id, PolicyState? state = null, CustomResourceOptions? options = null)
            : base("f5bigip:ltm/policy:Policy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Policy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Policy Get(string name, Input<string> id, PolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new Policy(name, id, state, options);
        }
    }

    public sealed class PolicyArgs : Pulumi.ResourceArgs
    {
        [Input("controls")]
        private InputList<string>? _controls;

        /// <summary>
        /// Specifies the controls
        /// </summary>
        public InputList<string> Controls
        {
            get => _controls ?? (_controls = new InputList<string>());
            set => _controls = value;
        }

        /// <summary>
        /// Name of the Policy
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// If you want to publish the policy else it will be deployed in Drafts mode.
        /// </summary>
        [Input("publishedCopy")]
        public Input<string>? PublishedCopy { get; set; }

        [Input("requires")]
        private InputList<string>? _requires;

        /// <summary>
        /// Specifies the protocol
        /// </summary>
        public InputList<string> Requires
        {
            get => _requires ?? (_requires = new InputList<string>());
            set => _requires = value;
        }

        [Input("rules")]
        private InputList<Inputs.PolicyRulesArgs>? _rules;

        /// <summary>
        /// Rules can be applied using the policy
        /// </summary>
        public InputList<Inputs.PolicyRulesArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.PolicyRulesArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// Specifies the match strategy
        /// </summary>
        [Input("strategy")]
        public Input<string>? Strategy { get; set; }

        public PolicyArgs()
        {
        }
    }

    public sealed class PolicyState : Pulumi.ResourceArgs
    {
        [Input("controls")]
        private InputList<string>? _controls;

        /// <summary>
        /// Specifies the controls
        /// </summary>
        public InputList<string> Controls
        {
            get => _controls ?? (_controls = new InputList<string>());
            set => _controls = value;
        }

        /// <summary>
        /// Name of the Policy
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// If you want to publish the policy else it will be deployed in Drafts mode.
        /// </summary>
        [Input("publishedCopy")]
        public Input<string>? PublishedCopy { get; set; }

        [Input("requires")]
        private InputList<string>? _requires;

        /// <summary>
        /// Specifies the protocol
        /// </summary>
        public InputList<string> Requires
        {
            get => _requires ?? (_requires = new InputList<string>());
            set => _requires = value;
        }

        [Input("rules")]
        private InputList<Inputs.PolicyRulesGetArgs>? _rules;

        /// <summary>
        /// Rules can be applied using the policy
        /// </summary>
        public InputList<Inputs.PolicyRulesGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.PolicyRulesGetArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// Specifies the match strategy
        /// </summary>
        [Input("strategy")]
        public Input<string>? Strategy { get; set; }

        public PolicyState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class PolicyRulesActionsArgs : Pulumi.ResourceArgs
    {
        [Input("appService")]
        public Input<string>? AppService { get; set; }

        [Input("application")]
        public Input<string>? Application { get; set; }

        [Input("asm")]
        public Input<bool>? Asm { get; set; }

        [Input("avr")]
        public Input<bool>? Avr { get; set; }

        [Input("cache")]
        public Input<bool>? Cache { get; set; }

        [Input("carp")]
        public Input<bool>? Carp { get; set; }

        [Input("category")]
        public Input<string>? Category { get; set; }

        [Input("classify")]
        public Input<bool>? Classify { get; set; }

        [Input("clonePool")]
        public Input<string>? ClonePool { get; set; }

        [Input("code")]
        public Input<int>? Code { get; set; }

        [Input("compress")]
        public Input<bool>? Compress { get; set; }

        [Input("content")]
        public Input<string>? Content { get; set; }

        [Input("cookieHash")]
        public Input<bool>? CookieHash { get; set; }

        [Input("cookieInsert")]
        public Input<bool>? CookieInsert { get; set; }

        [Input("cookiePassive")]
        public Input<bool>? CookiePassive { get; set; }

        [Input("cookieRewrite")]
        public Input<bool>? CookieRewrite { get; set; }

        [Input("decompress")]
        public Input<bool>? Decompress { get; set; }

        [Input("defer")]
        public Input<bool>? Defer { get; set; }

        [Input("destinationAddress")]
        public Input<bool>? DestinationAddress { get; set; }

        [Input("disable")]
        public Input<bool>? Disable { get; set; }

        [Input("domain")]
        public Input<string>? Domain { get; set; }

        [Input("enable")]
        public Input<bool>? Enable { get; set; }

        [Input("expiry")]
        public Input<string>? Expiry { get; set; }

        [Input("expirySecs")]
        public Input<int>? ExpirySecs { get; set; }

        [Input("expression")]
        public Input<string>? Expression { get; set; }

        [Input("extension")]
        public Input<string>? Extension { get; set; }

        [Input("facility")]
        public Input<string>? Facility { get; set; }

        /// <summary>
        /// This action will affect forwarding.
        /// </summary>
        [Input("forward")]
        public Input<bool>? Forward { get; set; }

        [Input("fromProfile")]
        public Input<string>? FromProfile { get; set; }

        [Input("hash")]
        public Input<bool>? Hash { get; set; }

        [Input("host")]
        public Input<string>? Host { get; set; }

        [Input("http")]
        public Input<bool>? Http { get; set; }

        [Input("httpBasicAuth")]
        public Input<bool>? HttpBasicAuth { get; set; }

        [Input("httpCookie")]
        public Input<bool>? HttpCookie { get; set; }

        [Input("httpHeader")]
        public Input<bool>? HttpHeader { get; set; }

        [Input("httpHost")]
        public Input<bool>? HttpHost { get; set; }

        [Input("httpReferer")]
        public Input<bool>? HttpReferer { get; set; }

        [Input("httpReply")]
        public Input<bool>? HttpReply { get; set; }

        [Input("httpSetCookie")]
        public Input<bool>? HttpSetCookie { get; set; }

        [Input("httpUri")]
        public Input<bool>? HttpUri { get; set; }

        [Input("ifile")]
        public Input<string>? Ifile { get; set; }

        [Input("insert")]
        public Input<bool>? Insert { get; set; }

        [Input("internalVirtual")]
        public Input<string>? InternalVirtual { get; set; }

        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        [Input("key")]
        public Input<string>? Key { get; set; }

        [Input("l7dos")]
        public Input<bool>? L7dos { get; set; }

        [Input("length")]
        public Input<int>? Length { get; set; }

        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("log")]
        public Input<bool>? Log { get; set; }

        [Input("ltmPolicy")]
        public Input<bool>? LtmPolicy { get; set; }

        [Input("member")]
        public Input<string>? Member { get; set; }

        [Input("message")]
        public Input<string>? Message { get; set; }

        [Input("netmask")]
        public Input<string>? Netmask { get; set; }

        [Input("nexthop")]
        public Input<string>? Nexthop { get; set; }

        [Input("node")]
        public Input<string>? Node { get; set; }

        [Input("offset")]
        public Input<int>? Offset { get; set; }

        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("pem")]
        public Input<bool>? Pem { get; set; }

        [Input("persist")]
        public Input<bool>? Persist { get; set; }

        [Input("pin")]
        public Input<bool>? Pin { get; set; }

        [Input("policy")]
        public Input<string>? Policy { get; set; }

        /// <summary>
        /// This action will direct the stream to this pool.
        /// </summary>
        [Input("pool")]
        public Input<string>? Pool { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("priority")]
        public Input<string>? Priority { get; set; }

        [Input("profile")]
        public Input<string>? Profile { get; set; }

        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        [Input("queryString")]
        public Input<string>? QueryString { get; set; }

        [Input("rateclass")]
        public Input<string>? Rateclass { get; set; }

        [Input("redirect")]
        public Input<bool>? Redirect { get; set; }

        [Input("remove")]
        public Input<bool>? Remove { get; set; }

        [Input("replace")]
        public Input<bool>? Replace { get; set; }

        [Input("request")]
        public Input<bool>? Request { get; set; }

        [Input("requestAdapt")]
        public Input<bool>? RequestAdapt { get; set; }

        [Input("reset")]
        public Input<bool>? Reset { get; set; }

        [Input("response")]
        public Input<bool>? Response { get; set; }

        [Input("responseAdapt")]
        public Input<bool>? ResponseAdapt { get; set; }

        [Input("scheme")]
        public Input<string>? Scheme { get; set; }

        [Input("script")]
        public Input<string>? Script { get; set; }

        [Input("select")]
        public Input<bool>? Select { get; set; }

        [Input("serverSsl")]
        public Input<bool>? ServerSsl { get; set; }

        [Input("setVariable")]
        public Input<bool>? SetVariable { get; set; }

        [Input("snat")]
        public Input<string>? Snat { get; set; }

        [Input("snatpool")]
        public Input<string>? Snatpool { get; set; }

        [Input("sourceAddress")]
        public Input<bool>? SourceAddress { get; set; }

        [Input("sslClientHello")]
        public Input<bool>? SslClientHello { get; set; }

        [Input("sslServerHandshake")]
        public Input<bool>? SslServerHandshake { get; set; }

        [Input("sslServerHello")]
        public Input<bool>? SslServerHello { get; set; }

        [Input("sslSessionId")]
        public Input<bool>? SslSessionId { get; set; }

        [Input("status")]
        public Input<int>? Status { get; set; }

        [Input("tcl")]
        public Input<bool>? Tcl { get; set; }

        [Input("tcpNagle")]
        public Input<bool>? TcpNagle { get; set; }

        [Input("text")]
        public Input<string>? Text { get; set; }

        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// If Rule is used then you need to provide the tm_name it can be any value
        /// </summary>
        [Input("tmName")]
        public Input<string>? TmName { get; set; }

        [Input("uie")]
        public Input<bool>? Uie { get; set; }

        [Input("universal")]
        public Input<bool>? Universal { get; set; }

        [Input("value")]
        public Input<string>? Value { get; set; }

        [Input("virtual")]
        public Input<string>? Virtual { get; set; }

        [Input("vlan")]
        public Input<string>? Vlan { get; set; }

        [Input("vlanId")]
        public Input<int>? VlanId { get; set; }

        [Input("wam")]
        public Input<bool>? Wam { get; set; }

        [Input("write")]
        public Input<bool>? Write { get; set; }

        public PolicyRulesActionsArgs()
        {
        }
    }

    public sealed class PolicyRulesActionsGetArgs : Pulumi.ResourceArgs
    {
        [Input("appService")]
        public Input<string>? AppService { get; set; }

        [Input("application")]
        public Input<string>? Application { get; set; }

        [Input("asm")]
        public Input<bool>? Asm { get; set; }

        [Input("avr")]
        public Input<bool>? Avr { get; set; }

        [Input("cache")]
        public Input<bool>? Cache { get; set; }

        [Input("carp")]
        public Input<bool>? Carp { get; set; }

        [Input("category")]
        public Input<string>? Category { get; set; }

        [Input("classify")]
        public Input<bool>? Classify { get; set; }

        [Input("clonePool")]
        public Input<string>? ClonePool { get; set; }

        [Input("code")]
        public Input<int>? Code { get; set; }

        [Input("compress")]
        public Input<bool>? Compress { get; set; }

        [Input("content")]
        public Input<string>? Content { get; set; }

        [Input("cookieHash")]
        public Input<bool>? CookieHash { get; set; }

        [Input("cookieInsert")]
        public Input<bool>? CookieInsert { get; set; }

        [Input("cookiePassive")]
        public Input<bool>? CookiePassive { get; set; }

        [Input("cookieRewrite")]
        public Input<bool>? CookieRewrite { get; set; }

        [Input("decompress")]
        public Input<bool>? Decompress { get; set; }

        [Input("defer")]
        public Input<bool>? Defer { get; set; }

        [Input("destinationAddress")]
        public Input<bool>? DestinationAddress { get; set; }

        [Input("disable")]
        public Input<bool>? Disable { get; set; }

        [Input("domain")]
        public Input<string>? Domain { get; set; }

        [Input("enable")]
        public Input<bool>? Enable { get; set; }

        [Input("expiry")]
        public Input<string>? Expiry { get; set; }

        [Input("expirySecs")]
        public Input<int>? ExpirySecs { get; set; }

        [Input("expression")]
        public Input<string>? Expression { get; set; }

        [Input("extension")]
        public Input<string>? Extension { get; set; }

        [Input("facility")]
        public Input<string>? Facility { get; set; }

        /// <summary>
        /// This action will affect forwarding.
        /// </summary>
        [Input("forward")]
        public Input<bool>? Forward { get; set; }

        [Input("fromProfile")]
        public Input<string>? FromProfile { get; set; }

        [Input("hash")]
        public Input<bool>? Hash { get; set; }

        [Input("host")]
        public Input<string>? Host { get; set; }

        [Input("http")]
        public Input<bool>? Http { get; set; }

        [Input("httpBasicAuth")]
        public Input<bool>? HttpBasicAuth { get; set; }

        [Input("httpCookie")]
        public Input<bool>? HttpCookie { get; set; }

        [Input("httpHeader")]
        public Input<bool>? HttpHeader { get; set; }

        [Input("httpHost")]
        public Input<bool>? HttpHost { get; set; }

        [Input("httpReferer")]
        public Input<bool>? HttpReferer { get; set; }

        [Input("httpReply")]
        public Input<bool>? HttpReply { get; set; }

        [Input("httpSetCookie")]
        public Input<bool>? HttpSetCookie { get; set; }

        [Input("httpUri")]
        public Input<bool>? HttpUri { get; set; }

        [Input("ifile")]
        public Input<string>? Ifile { get; set; }

        [Input("insert")]
        public Input<bool>? Insert { get; set; }

        [Input("internalVirtual")]
        public Input<string>? InternalVirtual { get; set; }

        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        [Input("key")]
        public Input<string>? Key { get; set; }

        [Input("l7dos")]
        public Input<bool>? L7dos { get; set; }

        [Input("length")]
        public Input<int>? Length { get; set; }

        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("log")]
        public Input<bool>? Log { get; set; }

        [Input("ltmPolicy")]
        public Input<bool>? LtmPolicy { get; set; }

        [Input("member")]
        public Input<string>? Member { get; set; }

        [Input("message")]
        public Input<string>? Message { get; set; }

        [Input("netmask")]
        public Input<string>? Netmask { get; set; }

        [Input("nexthop")]
        public Input<string>? Nexthop { get; set; }

        [Input("node")]
        public Input<string>? Node { get; set; }

        [Input("offset")]
        public Input<int>? Offset { get; set; }

        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("pem")]
        public Input<bool>? Pem { get; set; }

        [Input("persist")]
        public Input<bool>? Persist { get; set; }

        [Input("pin")]
        public Input<bool>? Pin { get; set; }

        [Input("policy")]
        public Input<string>? Policy { get; set; }

        /// <summary>
        /// This action will direct the stream to this pool.
        /// </summary>
        [Input("pool")]
        public Input<string>? Pool { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("priority")]
        public Input<string>? Priority { get; set; }

        [Input("profile")]
        public Input<string>? Profile { get; set; }

        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        [Input("queryString")]
        public Input<string>? QueryString { get; set; }

        [Input("rateclass")]
        public Input<string>? Rateclass { get; set; }

        [Input("redirect")]
        public Input<bool>? Redirect { get; set; }

        [Input("remove")]
        public Input<bool>? Remove { get; set; }

        [Input("replace")]
        public Input<bool>? Replace { get; set; }

        [Input("request")]
        public Input<bool>? Request { get; set; }

        [Input("requestAdapt")]
        public Input<bool>? RequestAdapt { get; set; }

        [Input("reset")]
        public Input<bool>? Reset { get; set; }

        [Input("response")]
        public Input<bool>? Response { get; set; }

        [Input("responseAdapt")]
        public Input<bool>? ResponseAdapt { get; set; }

        [Input("scheme")]
        public Input<string>? Scheme { get; set; }

        [Input("script")]
        public Input<string>? Script { get; set; }

        [Input("select")]
        public Input<bool>? Select { get; set; }

        [Input("serverSsl")]
        public Input<bool>? ServerSsl { get; set; }

        [Input("setVariable")]
        public Input<bool>? SetVariable { get; set; }

        [Input("snat")]
        public Input<string>? Snat { get; set; }

        [Input("snatpool")]
        public Input<string>? Snatpool { get; set; }

        [Input("sourceAddress")]
        public Input<bool>? SourceAddress { get; set; }

        [Input("sslClientHello")]
        public Input<bool>? SslClientHello { get; set; }

        [Input("sslServerHandshake")]
        public Input<bool>? SslServerHandshake { get; set; }

        [Input("sslServerHello")]
        public Input<bool>? SslServerHello { get; set; }

        [Input("sslSessionId")]
        public Input<bool>? SslSessionId { get; set; }

        [Input("status")]
        public Input<int>? Status { get; set; }

        [Input("tcl")]
        public Input<bool>? Tcl { get; set; }

        [Input("tcpNagle")]
        public Input<bool>? TcpNagle { get; set; }

        [Input("text")]
        public Input<string>? Text { get; set; }

        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// If Rule is used then you need to provide the tm_name it can be any value
        /// </summary>
        [Input("tmName")]
        public Input<string>? TmName { get; set; }

        [Input("uie")]
        public Input<bool>? Uie { get; set; }

        [Input("universal")]
        public Input<bool>? Universal { get; set; }

        [Input("value")]
        public Input<string>? Value { get; set; }

        [Input("virtual")]
        public Input<string>? Virtual { get; set; }

        [Input("vlan")]
        public Input<string>? Vlan { get; set; }

        [Input("vlanId")]
        public Input<int>? VlanId { get; set; }

        [Input("wam")]
        public Input<bool>? Wam { get; set; }

        [Input("write")]
        public Input<bool>? Write { get; set; }

        public PolicyRulesActionsGetArgs()
        {
        }
    }

    public sealed class PolicyRulesArgs : Pulumi.ResourceArgs
    {
        [Input("actions")]
        private InputList<PolicyRulesActionsArgs>? _actions;
        public InputList<PolicyRulesActionsArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<PolicyRulesActionsArgs>());
            set => _actions = value;
        }

        [Input("conditions")]
        private InputList<PolicyRulesConditionsArgs>? _conditions;
        public InputList<PolicyRulesConditionsArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<PolicyRulesConditionsArgs>());
            set => _conditions = value;
        }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public PolicyRulesArgs()
        {
        }
    }

    public sealed class PolicyRulesConditionsArgs : Pulumi.ResourceArgs
    {
        [Input("address")]
        public Input<bool>? Address { get; set; }

        [Input("all")]
        public Input<bool>? All { get; set; }

        [Input("appService")]
        public Input<string>? AppService { get; set; }

        [Input("browserType")]
        public Input<bool>? BrowserType { get; set; }

        [Input("browserVersion")]
        public Input<bool>? BrowserVersion { get; set; }

        [Input("caseInsensitive")]
        public Input<bool>? CaseInsensitive { get; set; }

        [Input("caseSensitive")]
        public Input<bool>? CaseSensitive { get; set; }

        [Input("cipher")]
        public Input<bool>? Cipher { get; set; }

        [Input("cipherBits")]
        public Input<bool>? CipherBits { get; set; }

        [Input("clientSsl")]
        public Input<bool>? ClientSsl { get; set; }

        [Input("code")]
        public Input<bool>? Code { get; set; }

        [Input("commonName")]
        public Input<bool>? CommonName { get; set; }

        [Input("contains")]
        public Input<bool>? Contains { get; set; }

        [Input("continent")]
        public Input<bool>? Continent { get; set; }

        [Input("countryCode")]
        public Input<bool>? CountryCode { get; set; }

        [Input("countryName")]
        public Input<bool>? CountryName { get; set; }

        [Input("cpuUsage")]
        public Input<bool>? CpuUsage { get; set; }

        [Input("deviceMake")]
        public Input<bool>? DeviceMake { get; set; }

        [Input("deviceModel")]
        public Input<bool>? DeviceModel { get; set; }

        [Input("domain")]
        public Input<bool>? Domain { get; set; }

        [Input("endsWith")]
        public Input<bool>? EndsWith { get; set; }

        [Input("equals")]
        public Input<bool>? Equals { get; set; }

        [Input("expiry")]
        public Input<bool>? Expiry { get; set; }

        [Input("extension")]
        public Input<bool>? Extension { get; set; }

        [Input("external")]
        public Input<bool>? External { get; set; }

        [Input("geoip")]
        public Input<bool>? Geoip { get; set; }

        [Input("greater")]
        public Input<bool>? Greater { get; set; }

        [Input("greaterOrEqual")]
        public Input<bool>? GreaterOrEqual { get; set; }

        [Input("host")]
        public Input<bool>? Host { get; set; }

        [Input("httpBasicAuth")]
        public Input<bool>? HttpBasicAuth { get; set; }

        [Input("httpCookie")]
        public Input<bool>? HttpCookie { get; set; }

        [Input("httpHeader")]
        public Input<bool>? HttpHeader { get; set; }

        [Input("httpHost")]
        public Input<bool>? HttpHost { get; set; }

        [Input("httpMethod")]
        public Input<bool>? HttpMethod { get; set; }

        [Input("httpReferer")]
        public Input<bool>? HttpReferer { get; set; }

        [Input("httpSetCookie")]
        public Input<bool>? HttpSetCookie { get; set; }

        [Input("httpStatus")]
        public Input<bool>? HttpStatus { get; set; }

        [Input("httpUri")]
        public Input<bool>? HttpUri { get; set; }

        [Input("httpUserAgent")]
        public Input<bool>? HttpUserAgent { get; set; }

        [Input("httpVersion")]
        public Input<bool>? HttpVersion { get; set; }

        [Input("index")]
        public Input<int>? Index { get; set; }

        [Input("internal")]
        public Input<bool>? Internal { get; set; }

        [Input("isp")]
        public Input<bool>? Isp { get; set; }

        [Input("last15secs")]
        public Input<bool>? Last15secs { get; set; }

        [Input("last1min")]
        public Input<bool>? Last1min { get; set; }

        [Input("last5mins")]
        public Input<bool>? Last5mins { get; set; }

        [Input("less")]
        public Input<bool>? Less { get; set; }

        [Input("lessOrEqual")]
        public Input<bool>? LessOrEqual { get; set; }

        [Input("local")]
        public Input<bool>? Local { get; set; }

        [Input("major")]
        public Input<bool>? Major { get; set; }

        [Input("matches")]
        public Input<bool>? Matches { get; set; }

        [Input("minor")]
        public Input<bool>? Minor { get; set; }

        [Input("missing")]
        public Input<bool>? Missing { get; set; }

        [Input("mss")]
        public Input<bool>? Mss { get; set; }

        [Input("not")]
        public Input<bool>? Not { get; set; }

        [Input("org")]
        public Input<bool>? Org { get; set; }

        [Input("password")]
        public Input<bool>? Password { get; set; }

        [Input("path")]
        public Input<bool>? Path { get; set; }

        [Input("pathSegment")]
        public Input<bool>? PathSegment { get; set; }

        [Input("port")]
        public Input<bool>? Port { get; set; }

        [Input("present")]
        public Input<bool>? Present { get; set; }

        [Input("protocol")]
        public Input<bool>? Protocol { get; set; }

        [Input("queryParameter")]
        public Input<bool>? QueryParameter { get; set; }

        [Input("queryString")]
        public Input<bool>? QueryString { get; set; }

        [Input("regionCode")]
        public Input<bool>? RegionCode { get; set; }

        [Input("regionName")]
        public Input<bool>? RegionName { get; set; }

        [Input("remote")]
        public Input<bool>? Remote { get; set; }

        [Input("request")]
        public Input<bool>? Request { get; set; }

        [Input("response")]
        public Input<bool>? Response { get; set; }

        [Input("routeDomain")]
        public Input<bool>? RouteDomain { get; set; }

        [Input("rtt")]
        public Input<bool>? Rtt { get; set; }

        [Input("scheme")]
        public Input<bool>? Scheme { get; set; }

        [Input("serverName")]
        public Input<bool>? ServerName { get; set; }

        [Input("sslCert")]
        public Input<bool>? SslCert { get; set; }

        [Input("sslClientHello")]
        public Input<bool>? SslClientHello { get; set; }

        [Input("sslExtension")]
        public Input<bool>? SslExtension { get; set; }

        [Input("sslServerHandshake")]
        public Input<bool>? SslServerHandshake { get; set; }

        [Input("sslServerHello")]
        public Input<bool>? SslServerHello { get; set; }

        [Input("startsWith")]
        public Input<bool>? StartsWith { get; set; }

        [Input("tcp")]
        public Input<bool>? Tcp { get; set; }

        [Input("text")]
        public Input<bool>? Text { get; set; }

        /// <summary>
        /// If Rule is used then you need to provide the tm_name it can be any value
        /// </summary>
        [Input("tmName")]
        public Input<string>? TmName { get; set; }

        [Input("unnamedQueryParameter")]
        public Input<bool>? UnnamedQueryParameter { get; set; }

        [Input("userAgentToken")]
        public Input<bool>? UserAgentToken { get; set; }

        [Input("username")]
        public Input<bool>? Username { get; set; }

        [Input("value")]
        public Input<bool>? Value { get; set; }

        [Input("values")]
        private InputList<string>? _values;
        public InputList<string> Values
        {
            get => _values ?? (_values = new InputList<string>());
            set => _values = value;
        }

        [Input("version")]
        public Input<bool>? Version { get; set; }

        [Input("vlan")]
        public Input<bool>? Vlan { get; set; }

        [Input("vlanId")]
        public Input<bool>? VlanId { get; set; }

        public PolicyRulesConditionsArgs()
        {
        }
    }

    public sealed class PolicyRulesConditionsGetArgs : Pulumi.ResourceArgs
    {
        [Input("address")]
        public Input<bool>? Address { get; set; }

        [Input("all")]
        public Input<bool>? All { get; set; }

        [Input("appService")]
        public Input<string>? AppService { get; set; }

        [Input("browserType")]
        public Input<bool>? BrowserType { get; set; }

        [Input("browserVersion")]
        public Input<bool>? BrowserVersion { get; set; }

        [Input("caseInsensitive")]
        public Input<bool>? CaseInsensitive { get; set; }

        [Input("caseSensitive")]
        public Input<bool>? CaseSensitive { get; set; }

        [Input("cipher")]
        public Input<bool>? Cipher { get; set; }

        [Input("cipherBits")]
        public Input<bool>? CipherBits { get; set; }

        [Input("clientSsl")]
        public Input<bool>? ClientSsl { get; set; }

        [Input("code")]
        public Input<bool>? Code { get; set; }

        [Input("commonName")]
        public Input<bool>? CommonName { get; set; }

        [Input("contains")]
        public Input<bool>? Contains { get; set; }

        [Input("continent")]
        public Input<bool>? Continent { get; set; }

        [Input("countryCode")]
        public Input<bool>? CountryCode { get; set; }

        [Input("countryName")]
        public Input<bool>? CountryName { get; set; }

        [Input("cpuUsage")]
        public Input<bool>? CpuUsage { get; set; }

        [Input("deviceMake")]
        public Input<bool>? DeviceMake { get; set; }

        [Input("deviceModel")]
        public Input<bool>? DeviceModel { get; set; }

        [Input("domain")]
        public Input<bool>? Domain { get; set; }

        [Input("endsWith")]
        public Input<bool>? EndsWith { get; set; }

        [Input("equals")]
        public Input<bool>? Equals { get; set; }

        [Input("expiry")]
        public Input<bool>? Expiry { get; set; }

        [Input("extension")]
        public Input<bool>? Extension { get; set; }

        [Input("external")]
        public Input<bool>? External { get; set; }

        [Input("geoip")]
        public Input<bool>? Geoip { get; set; }

        [Input("greater")]
        public Input<bool>? Greater { get; set; }

        [Input("greaterOrEqual")]
        public Input<bool>? GreaterOrEqual { get; set; }

        [Input("host")]
        public Input<bool>? Host { get; set; }

        [Input("httpBasicAuth")]
        public Input<bool>? HttpBasicAuth { get; set; }

        [Input("httpCookie")]
        public Input<bool>? HttpCookie { get; set; }

        [Input("httpHeader")]
        public Input<bool>? HttpHeader { get; set; }

        [Input("httpHost")]
        public Input<bool>? HttpHost { get; set; }

        [Input("httpMethod")]
        public Input<bool>? HttpMethod { get; set; }

        [Input("httpReferer")]
        public Input<bool>? HttpReferer { get; set; }

        [Input("httpSetCookie")]
        public Input<bool>? HttpSetCookie { get; set; }

        [Input("httpStatus")]
        public Input<bool>? HttpStatus { get; set; }

        [Input("httpUri")]
        public Input<bool>? HttpUri { get; set; }

        [Input("httpUserAgent")]
        public Input<bool>? HttpUserAgent { get; set; }

        [Input("httpVersion")]
        public Input<bool>? HttpVersion { get; set; }

        [Input("index")]
        public Input<int>? Index { get; set; }

        [Input("internal")]
        public Input<bool>? Internal { get; set; }

        [Input("isp")]
        public Input<bool>? Isp { get; set; }

        [Input("last15secs")]
        public Input<bool>? Last15secs { get; set; }

        [Input("last1min")]
        public Input<bool>? Last1min { get; set; }

        [Input("last5mins")]
        public Input<bool>? Last5mins { get; set; }

        [Input("less")]
        public Input<bool>? Less { get; set; }

        [Input("lessOrEqual")]
        public Input<bool>? LessOrEqual { get; set; }

        [Input("local")]
        public Input<bool>? Local { get; set; }

        [Input("major")]
        public Input<bool>? Major { get; set; }

        [Input("matches")]
        public Input<bool>? Matches { get; set; }

        [Input("minor")]
        public Input<bool>? Minor { get; set; }

        [Input("missing")]
        public Input<bool>? Missing { get; set; }

        [Input("mss")]
        public Input<bool>? Mss { get; set; }

        [Input("not")]
        public Input<bool>? Not { get; set; }

        [Input("org")]
        public Input<bool>? Org { get; set; }

        [Input("password")]
        public Input<bool>? Password { get; set; }

        [Input("path")]
        public Input<bool>? Path { get; set; }

        [Input("pathSegment")]
        public Input<bool>? PathSegment { get; set; }

        [Input("port")]
        public Input<bool>? Port { get; set; }

        [Input("present")]
        public Input<bool>? Present { get; set; }

        [Input("protocol")]
        public Input<bool>? Protocol { get; set; }

        [Input("queryParameter")]
        public Input<bool>? QueryParameter { get; set; }

        [Input("queryString")]
        public Input<bool>? QueryString { get; set; }

        [Input("regionCode")]
        public Input<bool>? RegionCode { get; set; }

        [Input("regionName")]
        public Input<bool>? RegionName { get; set; }

        [Input("remote")]
        public Input<bool>? Remote { get; set; }

        [Input("request")]
        public Input<bool>? Request { get; set; }

        [Input("response")]
        public Input<bool>? Response { get; set; }

        [Input("routeDomain")]
        public Input<bool>? RouteDomain { get; set; }

        [Input("rtt")]
        public Input<bool>? Rtt { get; set; }

        [Input("scheme")]
        public Input<bool>? Scheme { get; set; }

        [Input("serverName")]
        public Input<bool>? ServerName { get; set; }

        [Input("sslCert")]
        public Input<bool>? SslCert { get; set; }

        [Input("sslClientHello")]
        public Input<bool>? SslClientHello { get; set; }

        [Input("sslExtension")]
        public Input<bool>? SslExtension { get; set; }

        [Input("sslServerHandshake")]
        public Input<bool>? SslServerHandshake { get; set; }

        [Input("sslServerHello")]
        public Input<bool>? SslServerHello { get; set; }

        [Input("startsWith")]
        public Input<bool>? StartsWith { get; set; }

        [Input("tcp")]
        public Input<bool>? Tcp { get; set; }

        [Input("text")]
        public Input<bool>? Text { get; set; }

        /// <summary>
        /// If Rule is used then you need to provide the tm_name it can be any value
        /// </summary>
        [Input("tmName")]
        public Input<string>? TmName { get; set; }

        [Input("unnamedQueryParameter")]
        public Input<bool>? UnnamedQueryParameter { get; set; }

        [Input("userAgentToken")]
        public Input<bool>? UserAgentToken { get; set; }

        [Input("username")]
        public Input<bool>? Username { get; set; }

        [Input("value")]
        public Input<bool>? Value { get; set; }

        [Input("values")]
        private InputList<string>? _values;
        public InputList<string> Values
        {
            get => _values ?? (_values = new InputList<string>());
            set => _values = value;
        }

        [Input("version")]
        public Input<bool>? Version { get; set; }

        [Input("vlan")]
        public Input<bool>? Vlan { get; set; }

        [Input("vlanId")]
        public Input<bool>? VlanId { get; set; }

        public PolicyRulesConditionsGetArgs()
        {
        }
    }

    public sealed class PolicyRulesGetArgs : Pulumi.ResourceArgs
    {
        [Input("actions")]
        private InputList<PolicyRulesActionsGetArgs>? _actions;
        public InputList<PolicyRulesActionsGetArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<PolicyRulesActionsGetArgs>());
            set => _actions = value;
        }

        [Input("conditions")]
        private InputList<PolicyRulesConditionsGetArgs>? _conditions;
        public InputList<PolicyRulesConditionsGetArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<PolicyRulesConditionsGetArgs>());
            set => _conditions = value;
        }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public PolicyRulesGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class PolicyRules
    {
        public readonly ImmutableArray<PolicyRulesActions> Actions;
        public readonly ImmutableArray<PolicyRulesConditions> Conditions;
        public readonly string Name;

        [OutputConstructor]
        private PolicyRules(
            ImmutableArray<PolicyRulesActions> actions,
            ImmutableArray<PolicyRulesConditions> conditions,
            string name)
        {
            Actions = actions;
            Conditions = conditions;
            Name = name;
        }
    }

    [OutputType]
    public sealed class PolicyRulesActions
    {
        public readonly string AppService;
        public readonly string Application;
        public readonly bool Asm;
        public readonly bool Avr;
        public readonly bool Cache;
        public readonly bool Carp;
        public readonly string Category;
        public readonly bool Classify;
        public readonly string ClonePool;
        public readonly int Code;
        public readonly bool Compress;
        public readonly string Content;
        public readonly bool CookieHash;
        public readonly bool CookieInsert;
        public readonly bool CookiePassive;
        public readonly bool CookieRewrite;
        public readonly bool Decompress;
        public readonly bool Defer;
        public readonly bool DestinationAddress;
        public readonly bool Disable;
        public readonly string Domain;
        public readonly bool Enable;
        public readonly string Expiry;
        public readonly int ExpirySecs;
        public readonly string Expression;
        public readonly string Extension;
        public readonly string Facility;
        /// <summary>
        /// This action will affect forwarding.
        /// </summary>
        public readonly bool Forward;
        public readonly string FromProfile;
        public readonly bool Hash;
        public readonly string Host;
        public readonly bool Http;
        public readonly bool HttpBasicAuth;
        public readonly bool HttpCookie;
        public readonly bool HttpHeader;
        public readonly bool? HttpHost;
        public readonly bool HttpReferer;
        public readonly bool HttpReply;
        public readonly bool HttpSetCookie;
        public readonly bool HttpUri;
        public readonly string Ifile;
        public readonly bool Insert;
        public readonly string InternalVirtual;
        public readonly string IpAddress;
        public readonly string Key;
        public readonly bool L7dos;
        public readonly int Length;
        public readonly string Location;
        public readonly bool Log;
        public readonly bool LtmPolicy;
        public readonly string Member;
        public readonly string Message;
        public readonly string Netmask;
        public readonly string Nexthop;
        public readonly string Node;
        public readonly int Offset;
        public readonly string Path;
        public readonly bool Pem;
        public readonly bool Persist;
        public readonly bool Pin;
        public readonly string Policy;
        /// <summary>
        /// This action will direct the stream to this pool.
        /// </summary>
        public readonly string Pool;
        public readonly int Port;
        public readonly string Priority;
        public readonly string Profile;
        public readonly string Protocol;
        public readonly string QueryString;
        public readonly string Rateclass;
        public readonly bool Redirect;
        public readonly bool Remove;
        public readonly bool Replace;
        public readonly bool Request;
        public readonly bool RequestAdapt;
        public readonly bool Reset;
        public readonly bool Response;
        public readonly bool ResponseAdapt;
        public readonly string Scheme;
        public readonly string Script;
        public readonly bool Select;
        public readonly bool ServerSsl;
        public readonly bool SetVariable;
        public readonly string Snat;
        public readonly string Snatpool;
        public readonly bool SourceAddress;
        public readonly bool SslClientHello;
        public readonly bool SslServerHandshake;
        public readonly bool SslServerHello;
        public readonly bool SslSessionId;
        public readonly int Status;
        public readonly bool Tcl;
        public readonly bool TcpNagle;
        public readonly string Text;
        public readonly int Timeout;
        /// <summary>
        /// If Rule is used then you need to provide the tm_name it can be any value
        /// </summary>
        public readonly string TmName;
        public readonly bool Uie;
        public readonly bool Universal;
        public readonly string Value;
        public readonly string Virtual;
        public readonly string Vlan;
        public readonly int VlanId;
        public readonly bool Wam;
        public readonly bool Write;

        [OutputConstructor]
        private PolicyRulesActions(
            string appService,
            string application,
            bool asm,
            bool avr,
            bool cache,
            bool carp,
            string category,
            bool classify,
            string clonePool,
            int code,
            bool compress,
            string content,
            bool cookieHash,
            bool cookieInsert,
            bool cookiePassive,
            bool cookieRewrite,
            bool decompress,
            bool defer,
            bool destinationAddress,
            bool disable,
            string domain,
            bool enable,
            string expiry,
            int expirySecs,
            string expression,
            string extension,
            string facility,
            bool forward,
            string fromProfile,
            bool hash,
            string host,
            bool http,
            bool httpBasicAuth,
            bool httpCookie,
            bool httpHeader,
            bool? httpHost,
            bool httpReferer,
            bool httpReply,
            bool httpSetCookie,
            bool httpUri,
            string ifile,
            bool insert,
            string internalVirtual,
            string ipAddress,
            string key,
            bool l7dos,
            int length,
            string location,
            bool log,
            bool ltmPolicy,
            string member,
            string message,
            string netmask,
            string nexthop,
            string node,
            int offset,
            string path,
            bool pem,
            bool persist,
            bool pin,
            string policy,
            string pool,
            int port,
            string priority,
            string profile,
            string protocol,
            string queryString,
            string rateclass,
            bool redirect,
            bool remove,
            bool replace,
            bool request,
            bool requestAdapt,
            bool reset,
            bool response,
            bool responseAdapt,
            string scheme,
            string script,
            bool select,
            bool serverSsl,
            bool setVariable,
            string snat,
            string snatpool,
            bool sourceAddress,
            bool sslClientHello,
            bool sslServerHandshake,
            bool sslServerHello,
            bool sslSessionId,
            int status,
            bool tcl,
            bool tcpNagle,
            string text,
            int timeout,
            string tmName,
            bool uie,
            bool universal,
            string value,
            string @virtual,
            string vlan,
            int vlanId,
            bool wam,
            bool write)
        {
            AppService = appService;
            Application = application;
            Asm = asm;
            Avr = avr;
            Cache = cache;
            Carp = carp;
            Category = category;
            Classify = classify;
            ClonePool = clonePool;
            Code = code;
            Compress = compress;
            Content = content;
            CookieHash = cookieHash;
            CookieInsert = cookieInsert;
            CookiePassive = cookiePassive;
            CookieRewrite = cookieRewrite;
            Decompress = decompress;
            Defer = defer;
            DestinationAddress = destinationAddress;
            Disable = disable;
            Domain = domain;
            Enable = enable;
            Expiry = expiry;
            ExpirySecs = expirySecs;
            Expression = expression;
            Extension = extension;
            Facility = facility;
            Forward = forward;
            FromProfile = fromProfile;
            Hash = hash;
            Host = host;
            Http = http;
            HttpBasicAuth = httpBasicAuth;
            HttpCookie = httpCookie;
            HttpHeader = httpHeader;
            HttpHost = httpHost;
            HttpReferer = httpReferer;
            HttpReply = httpReply;
            HttpSetCookie = httpSetCookie;
            HttpUri = httpUri;
            Ifile = ifile;
            Insert = insert;
            InternalVirtual = internalVirtual;
            IpAddress = ipAddress;
            Key = key;
            L7dos = l7dos;
            Length = length;
            Location = location;
            Log = log;
            LtmPolicy = ltmPolicy;
            Member = member;
            Message = message;
            Netmask = netmask;
            Nexthop = nexthop;
            Node = node;
            Offset = offset;
            Path = path;
            Pem = pem;
            Persist = persist;
            Pin = pin;
            Policy = policy;
            Pool = pool;
            Port = port;
            Priority = priority;
            Profile = profile;
            Protocol = protocol;
            QueryString = queryString;
            Rateclass = rateclass;
            Redirect = redirect;
            Remove = remove;
            Replace = replace;
            Request = request;
            RequestAdapt = requestAdapt;
            Reset = reset;
            Response = response;
            ResponseAdapt = responseAdapt;
            Scheme = scheme;
            Script = script;
            Select = select;
            ServerSsl = serverSsl;
            SetVariable = setVariable;
            Snat = snat;
            Snatpool = snatpool;
            SourceAddress = sourceAddress;
            SslClientHello = sslClientHello;
            SslServerHandshake = sslServerHandshake;
            SslServerHello = sslServerHello;
            SslSessionId = sslSessionId;
            Status = status;
            Tcl = tcl;
            TcpNagle = tcpNagle;
            Text = text;
            Timeout = timeout;
            TmName = tmName;
            Uie = uie;
            Universal = universal;
            Value = value;
            Virtual = @virtual;
            Vlan = vlan;
            VlanId = vlanId;
            Wam = wam;
            Write = write;
        }
    }

    [OutputType]
    public sealed class PolicyRulesConditions
    {
        public readonly bool Address;
        public readonly bool All;
        public readonly string AppService;
        public readonly bool BrowserType;
        public readonly bool BrowserVersion;
        public readonly bool CaseInsensitive;
        public readonly bool CaseSensitive;
        public readonly bool Cipher;
        public readonly bool CipherBits;
        public readonly bool ClientSsl;
        public readonly bool Code;
        public readonly bool CommonName;
        public readonly bool Contains;
        public readonly bool Continent;
        public readonly bool CountryCode;
        public readonly bool CountryName;
        public readonly bool CpuUsage;
        public readonly bool DeviceMake;
        public readonly bool DeviceModel;
        public readonly bool Domain;
        public readonly bool EndsWith;
        public readonly bool Equals;
        public readonly bool Expiry;
        public readonly bool Extension;
        public readonly bool External;
        public readonly bool Geoip;
        public readonly bool Greater;
        public readonly bool GreaterOrEqual;
        public readonly bool Host;
        public readonly bool HttpBasicAuth;
        public readonly bool HttpCookie;
        public readonly bool HttpHeader;
        public readonly bool HttpHost;
        public readonly bool HttpMethod;
        public readonly bool HttpReferer;
        public readonly bool HttpSetCookie;
        public readonly bool HttpStatus;
        public readonly bool HttpUri;
        public readonly bool HttpUserAgent;
        public readonly bool HttpVersion;
        public readonly int Index;
        public readonly bool Internal;
        public readonly bool Isp;
        public readonly bool Last15secs;
        public readonly bool Last1min;
        public readonly bool Last5mins;
        public readonly bool Less;
        public readonly bool LessOrEqual;
        public readonly bool Local;
        public readonly bool Major;
        public readonly bool Matches;
        public readonly bool Minor;
        public readonly bool Missing;
        public readonly bool Mss;
        public readonly bool Not;
        public readonly bool Org;
        public readonly bool Password;
        public readonly bool Path;
        public readonly bool PathSegment;
        public readonly bool Port;
        public readonly bool Present;
        public readonly bool Protocol;
        public readonly bool QueryParameter;
        public readonly bool QueryString;
        public readonly bool RegionCode;
        public readonly bool RegionName;
        public readonly bool Remote;
        public readonly bool Request;
        public readonly bool Response;
        public readonly bool RouteDomain;
        public readonly bool Rtt;
        public readonly bool Scheme;
        public readonly bool ServerName;
        public readonly bool SslCert;
        public readonly bool SslClientHello;
        public readonly bool SslExtension;
        public readonly bool SslServerHandshake;
        public readonly bool SslServerHello;
        public readonly bool StartsWith;
        public readonly bool Tcp;
        public readonly bool Text;
        /// <summary>
        /// If Rule is used then you need to provide the tm_name it can be any value
        /// </summary>
        public readonly string TmName;
        public readonly bool UnnamedQueryParameter;
        public readonly bool UserAgentToken;
        public readonly bool Username;
        public readonly bool Value;
        public readonly ImmutableArray<string> Values;
        public readonly bool Version;
        public readonly bool Vlan;
        public readonly bool VlanId;

        [OutputConstructor]
        private PolicyRulesConditions(
            bool address,
            bool all,
            string appService,
            bool browserType,
            bool browserVersion,
            bool caseInsensitive,
            bool caseSensitive,
            bool cipher,
            bool cipherBits,
            bool clientSsl,
            bool code,
            bool commonName,
            bool contains,
            bool continent,
            bool countryCode,
            bool countryName,
            bool cpuUsage,
            bool deviceMake,
            bool deviceModel,
            bool domain,
            bool endsWith,
            bool equals,
            bool expiry,
            bool extension,
            bool external,
            bool geoip,
            bool greater,
            bool greaterOrEqual,
            bool host,
            bool httpBasicAuth,
            bool httpCookie,
            bool httpHeader,
            bool httpHost,
            bool httpMethod,
            bool httpReferer,
            bool httpSetCookie,
            bool httpStatus,
            bool httpUri,
            bool httpUserAgent,
            bool httpVersion,
            int index,
            bool @internal,
            bool isp,
            bool last15secs,
            bool last1min,
            bool last5mins,
            bool less,
            bool lessOrEqual,
            bool local,
            bool major,
            bool matches,
            bool minor,
            bool missing,
            bool mss,
            bool not,
            bool org,
            bool password,
            bool path,
            bool pathSegment,
            bool port,
            bool present,
            bool protocol,
            bool queryParameter,
            bool queryString,
            bool regionCode,
            bool regionName,
            bool remote,
            bool request,
            bool response,
            bool routeDomain,
            bool rtt,
            bool scheme,
            bool serverName,
            bool sslCert,
            bool sslClientHello,
            bool sslExtension,
            bool sslServerHandshake,
            bool sslServerHello,
            bool startsWith,
            bool tcp,
            bool text,
            string tmName,
            bool unnamedQueryParameter,
            bool userAgentToken,
            bool username,
            bool value,
            ImmutableArray<string> values,
            bool version,
            bool vlan,
            bool vlanId)
        {
            Address = address;
            All = all;
            AppService = appService;
            BrowserType = browserType;
            BrowserVersion = browserVersion;
            CaseInsensitive = caseInsensitive;
            CaseSensitive = caseSensitive;
            Cipher = cipher;
            CipherBits = cipherBits;
            ClientSsl = clientSsl;
            Code = code;
            CommonName = commonName;
            Contains = contains;
            Continent = continent;
            CountryCode = countryCode;
            CountryName = countryName;
            CpuUsage = cpuUsage;
            DeviceMake = deviceMake;
            DeviceModel = deviceModel;
            Domain = domain;
            EndsWith = endsWith;
            Equals = equals;
            Expiry = expiry;
            Extension = extension;
            External = external;
            Geoip = geoip;
            Greater = greater;
            GreaterOrEqual = greaterOrEqual;
            Host = host;
            HttpBasicAuth = httpBasicAuth;
            HttpCookie = httpCookie;
            HttpHeader = httpHeader;
            HttpHost = httpHost;
            HttpMethod = httpMethod;
            HttpReferer = httpReferer;
            HttpSetCookie = httpSetCookie;
            HttpStatus = httpStatus;
            HttpUri = httpUri;
            HttpUserAgent = httpUserAgent;
            HttpVersion = httpVersion;
            Index = index;
            Internal = @internal;
            Isp = isp;
            Last15secs = last15secs;
            Last1min = last1min;
            Last5mins = last5mins;
            Less = less;
            LessOrEqual = lessOrEqual;
            Local = local;
            Major = major;
            Matches = matches;
            Minor = minor;
            Missing = missing;
            Mss = mss;
            Not = not;
            Org = org;
            Password = password;
            Path = path;
            PathSegment = pathSegment;
            Port = port;
            Present = present;
            Protocol = protocol;
            QueryParameter = queryParameter;
            QueryString = queryString;
            RegionCode = regionCode;
            RegionName = regionName;
            Remote = remote;
            Request = request;
            Response = response;
            RouteDomain = routeDomain;
            Rtt = rtt;
            Scheme = scheme;
            ServerName = serverName;
            SslCert = sslCert;
            SslClientHello = sslClientHello;
            SslExtension = sslExtension;
            SslServerHandshake = sslServerHandshake;
            SslServerHello = sslServerHello;
            StartsWith = startsWith;
            Tcp = tcp;
            Text = text;
            TmName = tmName;
            UnnamedQueryParameter = unnamedQueryParameter;
            UserAgentToken = userAgentToken;
            Username = username;
            Value = value;
            Values = values;
            Version = version;
            Vlan = vlan;
            VlanId = vlanId;
        }
    }
    }
}
