// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.F5BigIP.Ltm
{
    /// <summary>
    /// `f5bigip.ltm.Ifile` This resource creates an LTM iFile on F5 BIG-IP that references an existing system iFile.
    /// LTM iFiles are used in iRules and LTM policies to access file content for traffic processing and decision making.
    /// 
    /// ## Example Usage
    /// 
    /// ### Using LTM iFile in iRule
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using F5BigIP = Pulumi.F5BigIP;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var serverList = new F5BigIP.Sys.Ifile("server_list", new()
    ///     {
    ///         Name = "server-mapping",
    ///         Partition = "Production",
    ///         Content = @"web1:10.1.1.10
    /// web2:10.1.1.11
    /// web3:10.1.1.12
    /// ",
    ///     });
    /// 
    ///     var ltmServers = new F5BigIP.Ltm.Ifile("ltm_servers", new()
    ///     {
    ///         Name = "ltm-server-mapping",
    ///         Partition = "Production",
    ///         FileName = "/Production/server-mapping",
    ///     });
    /// 
    ///     var serverSelector = new F5BigIP.Ltm.IRule("server_selector", new()
    ///     {
    ///         Name = "select-server-rule",
    ///         Irule = @"when HTTP_REQUEST {
    ///   set server_map [ifile get ltm-server-mapping]
    ///   # Process server mapping logic
    ///   foreach line [split $server_map \""\
    /// \""] {
    ///     set parts [split $line \"":\""]
    ///     # Implement server selection logic
    ///   }
    /// }
    /// ",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Notes
    /// 
    /// * The referenced system iFile (specified in `FileName`) must exist before creating the LTM iFile.
    /// * LTM iFiles are primarily used in iRules and LTM policies for traffic processing.
    /// * Changes to `Name`, `Partition`, or `SubPath` will force recreation of the resource.
    /// * The LTM iFile acts as a reference to the system iFile and doesn't store content directly.
    /// * Use `f5bigip.sys.Ifile` to upload file content, then reference it with `f5bigip.ltm.Ifile` for LTM usage.
    /// 
    /// ## Related Resources
    /// 
    /// * `f5bigip.sys.Ifile` - Creates system iFiles with content
    /// * `f5bigip.ltm.IRule` - Creates iRules that can reference LTM iFiles
    /// * `f5bigip.ltm.Policy` - Creates LTM policies that can use LTM iFiles
    /// 
    /// ## Import
    /// 
    /// LTM iFiles can be imported using their full path:
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import f5bigip:ltm/ifile:Ifile example /Common/my-ltm-ifile
    /// ```
    /// 
    /// For iFiles with sub-paths:
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import f5bigip:ltm/ifile:Ifile example /Common/templates/my-ltm-ifile
    /// ```
    /// </summary>
    [F5BigIPResourceType("f5bigip:ltm/ifile:Ifile")]
    public partial class Ifile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The system iFile name to reference (e.g., `/Common/my-sys-ifile`). This should reference an existing system iFile created with `f5bigip.sys.Ifile`.
        /// </summary>
        [Output("fileName")]
        public Output<string> FileName { get; private set; } = null!;

        /// <summary>
        /// The complete path of the LTM iFile on the BIG-IP system.
        /// </summary>
        [Output("fullPath")]
        public Output<string> FullPath { get; private set; } = null!;

        /// <summary>
        /// Name of the LTM iFile to be created on BIG-IP.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Partition where the LTM iFile will be created. Defaults to `Common`.
        /// </summary>
        [Output("partition")]
        public Output<string?> Partition { get; private set; } = null!;

        /// <summary>
        /// Subdirectory within the partition for organizing iFiles.
        /// </summary>
        [Output("subPath")]
        public Output<string?> SubPath { get; private set; } = null!;


        /// <summary>
        /// Create a Ifile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Ifile(string name, IfileArgs args, CustomResourceOptions? options = null)
            : base("f5bigip:ltm/ifile:Ifile", name, args ?? new IfileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Ifile(string name, Input<string> id, IfileState? state = null, CustomResourceOptions? options = null)
            : base("f5bigip:ltm/ifile:Ifile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Ifile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Ifile Get(string name, Input<string> id, IfileState? state = null, CustomResourceOptions? options = null)
        {
            return new Ifile(name, id, state, options);
        }
    }

    public sealed class IfileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The system iFile name to reference (e.g., `/Common/my-sys-ifile`). This should reference an existing system iFile created with `f5bigip.sys.Ifile`.
        /// </summary>
        [Input("fileName", required: true)]
        public Input<string> FileName { get; set; } = null!;

        /// <summary>
        /// Name of the LTM iFile to be created on BIG-IP.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Partition where the LTM iFile will be created. Defaults to `Common`.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        /// <summary>
        /// Subdirectory within the partition for organizing iFiles.
        /// </summary>
        [Input("subPath")]
        public Input<string>? SubPath { get; set; }

        public IfileArgs()
        {
        }
        public static new IfileArgs Empty => new IfileArgs();
    }

    public sealed class IfileState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The system iFile name to reference (e.g., `/Common/my-sys-ifile`). This should reference an existing system iFile created with `f5bigip.sys.Ifile`.
        /// </summary>
        [Input("fileName")]
        public Input<string>? FileName { get; set; }

        /// <summary>
        /// The complete path of the LTM iFile on the BIG-IP system.
        /// </summary>
        [Input("fullPath")]
        public Input<string>? FullPath { get; set; }

        /// <summary>
        /// Name of the LTM iFile to be created on BIG-IP.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Partition where the LTM iFile will be created. Defaults to `Common`.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        /// <summary>
        /// Subdirectory within the partition for organizing iFiles.
        /// </summary>
        [Input("subPath")]
        public Input<string>? SubPath { get; set; }

        public IfileState()
        {
        }
        public static new IfileState Empty => new IfileState();
    }
}
