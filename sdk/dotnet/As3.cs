// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.F5BigIP
{
    /// <summary>
    /// `f5bigip.As3` provides details about bigip as3 resource
    /// 
    /// This resource is helpful to configure as3 declarative JSON on BIG-IP.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.IO;
    /// using Pulumi;
    /// using F5BigIP = Pulumi.F5BigIP;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         // Example Usage for json file
    ///         var as3_example1As3 = new F5BigIP.As3("as3-example1As3", new F5BigIP.As3Args
    ///         {
    ///             As3Json = File.ReadAllText("example1.json"),
    ///         });
    ///         // Example Usage for json file with tenant filter
    ///         var as3_example1Index_as3As3 = new F5BigIP.As3("as3-example1Index/as3As3", new F5BigIP.As3Args
    ///         {
    ///             As3Json = File.ReadAllText("example2.json"),
    ///             TenantFilter = "Sample_03",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [F5BigIPResourceType("f5bigip:index/as3:As3")]
    public partial class As3 : Pulumi.CustomResource
    {
        /// <summary>
        /// Name of Application
        /// </summary>
        [Output("applicationList")]
        public Output<string> ApplicationList { get; private set; } = null!;

        /// <summary>
        /// Path/Filename of Declarative AS3 JSON which is a json file used with builtin ```file``` function
        /// </summary>
        [Output("as3Json")]
        public Output<string> As3Json { get; private set; } = null!;

        /// <summary>
        /// Set True if you want to ignore metadata changes during update. By default it is set to false
        /// </summary>
        [Output("ignoreMetadata")]
        public Output<bool?> IgnoreMetadata { get; private set; } = null!;

        /// <summary>
        /// If there are muntiple tenants in a json this attribute helps the user to set a particular tenant to which he want to reflect the changes. Other tenants will neither be created nor be modified
        /// </summary>
        [Output("tenantFilter")]
        public Output<string?> TenantFilter { get; private set; } = null!;

        /// <summary>
        /// Name of Tenant
        /// </summary>
        [Output("tenantList")]
        public Output<string> TenantList { get; private set; } = null!;

        /// <summary>
        /// Name of Tenant
        /// </summary>
        [Output("tenantName")]
        public Output<string?> TenantName { get; private set; } = null!;


        /// <summary>
        /// Create a As3 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public As3(string name, As3Args args, CustomResourceOptions? options = null)
            : base("f5bigip:index/as3:As3", name, args ?? new As3Args(), MakeResourceOptions(options, ""))
        {
        }

        private As3(string name, Input<string> id, As3State? state = null, CustomResourceOptions? options = null)
            : base("f5bigip:index/as3:As3", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing As3 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static As3 Get(string name, Input<string> id, As3State? state = null, CustomResourceOptions? options = null)
        {
            return new As3(name, id, state, options);
        }
    }

    public sealed class As3Args : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of Application
        /// </summary>
        [Input("applicationList")]
        public Input<string>? ApplicationList { get; set; }

        /// <summary>
        /// Path/Filename of Declarative AS3 JSON which is a json file used with builtin ```file``` function
        /// </summary>
        [Input("as3Json", required: true)]
        public Input<string> As3Json { get; set; } = null!;

        /// <summary>
        /// Set True if you want to ignore metadata changes during update. By default it is set to false
        /// </summary>
        [Input("ignoreMetadata")]
        public Input<bool>? IgnoreMetadata { get; set; }

        /// <summary>
        /// If there are muntiple tenants in a json this attribute helps the user to set a particular tenant to which he want to reflect the changes. Other tenants will neither be created nor be modified
        /// </summary>
        [Input("tenantFilter")]
        public Input<string>? TenantFilter { get; set; }

        /// <summary>
        /// Name of Tenant
        /// </summary>
        [Input("tenantList")]
        public Input<string>? TenantList { get; set; }

        /// <summary>
        /// Name of Tenant
        /// </summary>
        [Input("tenantName")]
        public Input<string>? TenantName { get; set; }

        public As3Args()
        {
        }
    }

    public sealed class As3State : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of Application
        /// </summary>
        [Input("applicationList")]
        public Input<string>? ApplicationList { get; set; }

        /// <summary>
        /// Path/Filename of Declarative AS3 JSON which is a json file used with builtin ```file``` function
        /// </summary>
        [Input("as3Json")]
        public Input<string>? As3Json { get; set; }

        /// <summary>
        /// Set True if you want to ignore metadata changes during update. By default it is set to false
        /// </summary>
        [Input("ignoreMetadata")]
        public Input<bool>? IgnoreMetadata { get; set; }

        /// <summary>
        /// If there are muntiple tenants in a json this attribute helps the user to set a particular tenant to which he want to reflect the changes. Other tenants will neither be created nor be modified
        /// </summary>
        [Input("tenantFilter")]
        public Input<string>? TenantFilter { get; set; }

        /// <summary>
        /// Name of Tenant
        /// </summary>
        [Input("tenantList")]
        public Input<string>? TenantList { get; set; }

        /// <summary>
        /// Name of Tenant
        /// </summary>
        [Input("tenantName")]
        public Input<string>? TenantName { get; set; }

        public As3State()
        {
        }
    }
}
