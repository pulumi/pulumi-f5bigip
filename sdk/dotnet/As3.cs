// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.F5BigIP
{
    /// <summary>
    /// `f5bigip..As3` provides details about bigip as3 resource
    /// 
    /// This resource is helpful to configure as3 declarative JSON on BIG-IP.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-bigip/blob/master/website/docs/r/bigip_as3.html.markdown.
    /// </summary>
    public partial class As3 : Pulumi.CustomResource
    {
        /// <summary>
        /// Path/Filename of Declarative AS3 JSON which can be a template/json file used with builtin ```templatefile``` function (or) ```file``` function
        /// </summary>
        [Output("as3Json")]
        public Output<string> As3Json { get; private set; } = null!;

        /// <summary>
        /// Name of Tenant
        /// </summary>
        [Output("tenantName")]
        public Output<string> TenantName { get; private set; } = null!;


        /// <summary>
        /// Create a As3 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public As3(string name, As3Args args, CustomResourceOptions? options = null)
            : base("f5bigip:index/as3:As3", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private As3(string name, Input<string> id, As3State? state = null, CustomResourceOptions? options = null)
            : base("f5bigip:index/as3:As3", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing As3 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static As3 Get(string name, Input<string> id, As3State? state = null, CustomResourceOptions? options = null)
        {
            return new As3(name, id, state, options);
        }
    }

    public sealed class As3Args : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Path/Filename of Declarative AS3 JSON which can be a template/json file used with builtin ```templatefile``` function (or) ```file``` function
        /// </summary>
        [Input("as3Json", required: true)]
        public Input<string> As3Json { get; set; } = null!;

        /// <summary>
        /// Name of Tenant
        /// </summary>
        [Input("tenantName", required: true)]
        public Input<string> TenantName { get; set; } = null!;

        public As3Args()
        {
        }
    }

    public sealed class As3State : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Path/Filename of Declarative AS3 JSON which can be a template/json file used with builtin ```templatefile``` function (or) ```file``` function
        /// </summary>
        [Input("as3Json")]
        public Input<string>? As3Json { get; set; }

        /// <summary>
        /// Name of Tenant
        /// </summary>
        [Input("tenantName")]
        public Input<string>? TenantName { get; set; }

        public As3State()
        {
        }
    }
}
