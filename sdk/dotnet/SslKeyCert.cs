// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.F5BigIP
{
    /// <summary>
    /// `f5bigip.SslKeyCert` This resource will import SSL certificate and key on BIG-IP LTM.
    /// The certificate and the key can be imported from files on the local disk, in PEM format
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using F5BigIP = Pulumi.F5BigIP;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testkeycert = new F5BigIP.SslKeyCert("testkeycert", new()
    ///     {
    ///         Partition = "Common",
    ///         KeyName = "ssl-test-key",
    ///         KeyContent = Std.File.Invoke(new()
    ///         {
    ///             Input = "key.pem",
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///         CertName = "ssl-test-cert",
    ///         CertContent = Std.File.Invoke(new()
    ///         {
    ///             Input = "certificate.pem",
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// </summary>
    [F5BigIPResourceType("f5bigip:index/sslKeyCert:SslKeyCert")]
    public partial class SslKeyCert : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The content of the cert.
        /// </summary>
        [Output("certContent")]
        public Output<string> CertContent { get; private set; } = null!;

        /// <summary>
        /// full path of the SSL certificate on the BIGIP.
        /// </summary>
        [Output("certFullPath")]
        public Output<string> CertFullPath { get; private set; } = null!;

        /// <summary>
        /// Specifies the type of monitoring used.
        /// </summary>
        [Output("certMonitoringType")]
        public Output<string?> CertMonitoringType { get; private set; } = null!;

        /// <summary>
        /// Name of the SSL certificate to be Imported on to BIGIP.
        /// </summary>
        [Output("certName")]
        public Output<string> CertName { get; private set; } = null!;

        /// <summary>
        /// Specifies the OCSP responder.
        /// </summary>
        [Output("certOcsp")]
        public Output<string?> CertOcsp { get; private set; } = null!;

        /// <summary>
        /// Specifies the issuer certificate.
        /// </summary>
        [Output("issuerCert")]
        public Output<string?> IssuerCert { get; private set; } = null!;

        /// <summary>
        /// The content of the key.
        /// </summary>
        [Output("keyContent")]
        public Output<string> KeyContent { get; private set; } = null!;

        /// <summary>
        /// full path of the SSL key on the BIGIP.
        /// </summary>
        [Output("keyFullPath")]
        public Output<string> KeyFullPath { get; private set; } = null!;

        /// <summary>
        /// Name of the SSL key to be Imported on to BIGIP.
        /// </summary>
        [Output("keyName")]
        public Output<string> KeyName { get; private set; } = null!;

        /// <summary>
        /// Partition on to SSL certificate and key to be imported.
        /// </summary>
        [Output("partition")]
        public Output<string?> Partition { get; private set; } = null!;

        /// <summary>
        /// Passphrase on the SSL key.
        /// </summary>
        [Output("passphrase")]
        public Output<string?> Passphrase { get; private set; } = null!;


        /// <summary>
        /// Create a SslKeyCert resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SslKeyCert(string name, SslKeyCertArgs args, CustomResourceOptions? options = null)
            : base("f5bigip:index/sslKeyCert:SslKeyCert", name, args ?? new SslKeyCertArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SslKeyCert(string name, Input<string> id, SslKeyCertState? state = null, CustomResourceOptions? options = null)
            : base("f5bigip:index/sslKeyCert:SslKeyCert", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "certContent",
                    "keyContent",
                    "passphrase",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SslKeyCert resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SslKeyCert Get(string name, Input<string> id, SslKeyCertState? state = null, CustomResourceOptions? options = null)
        {
            return new SslKeyCert(name, id, state, options);
        }
    }

    public sealed class SslKeyCertArgs : global::Pulumi.ResourceArgs
    {
        [Input("certContent", required: true)]
        private Input<string>? _certContent;

        /// <summary>
        /// The content of the cert.
        /// </summary>
        public Input<string>? CertContent
        {
            get => _certContent;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _certContent = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// full path of the SSL certificate on the BIGIP.
        /// </summary>
        [Input("certFullPath")]
        public Input<string>? CertFullPath { get; set; }

        /// <summary>
        /// Specifies the type of monitoring used.
        /// </summary>
        [Input("certMonitoringType")]
        public Input<string>? CertMonitoringType { get; set; }

        /// <summary>
        /// Name of the SSL certificate to be Imported on to BIGIP.
        /// </summary>
        [Input("certName", required: true)]
        public Input<string> CertName { get; set; } = null!;

        /// <summary>
        /// Specifies the OCSP responder.
        /// </summary>
        [Input("certOcsp")]
        public Input<string>? CertOcsp { get; set; }

        /// <summary>
        /// Specifies the issuer certificate.
        /// </summary>
        [Input("issuerCert")]
        public Input<string>? IssuerCert { get; set; }

        [Input("keyContent", required: true)]
        private Input<string>? _keyContent;

        /// <summary>
        /// The content of the key.
        /// </summary>
        public Input<string>? KeyContent
        {
            get => _keyContent;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _keyContent = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// full path of the SSL key on the BIGIP.
        /// </summary>
        [Input("keyFullPath")]
        public Input<string>? KeyFullPath { get; set; }

        /// <summary>
        /// Name of the SSL key to be Imported on to BIGIP.
        /// </summary>
        [Input("keyName", required: true)]
        public Input<string> KeyName { get; set; } = null!;

        /// <summary>
        /// Partition on to SSL certificate and key to be imported.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        [Input("passphrase")]
        private Input<string>? _passphrase;

        /// <summary>
        /// Passphrase on the SSL key.
        /// </summary>
        public Input<string>? Passphrase
        {
            get => _passphrase;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _passphrase = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public SslKeyCertArgs()
        {
        }
        public static new SslKeyCertArgs Empty => new SslKeyCertArgs();
    }

    public sealed class SslKeyCertState : global::Pulumi.ResourceArgs
    {
        [Input("certContent")]
        private Input<string>? _certContent;

        /// <summary>
        /// The content of the cert.
        /// </summary>
        public Input<string>? CertContent
        {
            get => _certContent;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _certContent = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// full path of the SSL certificate on the BIGIP.
        /// </summary>
        [Input("certFullPath")]
        public Input<string>? CertFullPath { get; set; }

        /// <summary>
        /// Specifies the type of monitoring used.
        /// </summary>
        [Input("certMonitoringType")]
        public Input<string>? CertMonitoringType { get; set; }

        /// <summary>
        /// Name of the SSL certificate to be Imported on to BIGIP.
        /// </summary>
        [Input("certName")]
        public Input<string>? CertName { get; set; }

        /// <summary>
        /// Specifies the OCSP responder.
        /// </summary>
        [Input("certOcsp")]
        public Input<string>? CertOcsp { get; set; }

        /// <summary>
        /// Specifies the issuer certificate.
        /// </summary>
        [Input("issuerCert")]
        public Input<string>? IssuerCert { get; set; }

        [Input("keyContent")]
        private Input<string>? _keyContent;

        /// <summary>
        /// The content of the key.
        /// </summary>
        public Input<string>? KeyContent
        {
            get => _keyContent;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _keyContent = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// full path of the SSL key on the BIGIP.
        /// </summary>
        [Input("keyFullPath")]
        public Input<string>? KeyFullPath { get; set; }

        /// <summary>
        /// Name of the SSL key to be Imported on to BIGIP.
        /// </summary>
        [Input("keyName")]
        public Input<string>? KeyName { get; set; }

        /// <summary>
        /// Partition on to SSL certificate and key to be imported.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        [Input("passphrase")]
        private Input<string>? _passphrase;

        /// <summary>
        /// Passphrase on the SSL key.
        /// </summary>
        public Input<string>? Passphrase
        {
            get => _passphrase;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _passphrase = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public SslKeyCertState()
        {
        }
        public static new SslKeyCertState Empty => new SslKeyCertState();
    }
}
