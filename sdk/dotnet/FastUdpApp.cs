// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.F5BigIP
{
    /// <summary>
    /// `f5bigip.FastUdpApp` This resource will create and manage FAST UDP applications on BIG-IP from provided JSON declaration.
    /// </summary>
    [F5BigIPResourceType("f5bigip:index/fastUdpApp:FastUdpApp")]
    public partial class FastUdpApp : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the FAST UDP application.
        /// </summary>
        [Output("application")]
        public Output<string> Application { get; private set; } = null!;

        /// <summary>
        /// Enables use of FastL4 profiles.
        /// </summary>
        [Output("enableFastl4")]
        public Output<bool?> EnableFastl4 { get; private set; } = null!;

        /// <summary>
        /// Name of an existing BIG-IP UDP pool monitor. Monitors are used to determine the health of the application on each server.
        /// </summary>
        [Output("existingMonitor")]
        public Output<string?> ExistingMonitor { get; private set; } = null!;

        /// <summary>
        /// Name of an existing BIG-IP pool.
        /// </summary>
        [Output("existingPool")]
        public Output<string?> ExistingPool { get; private set; } = null!;

        /// <summary>
        /// Name of an existing BIG-IP FastL4 or UDP profile.
        /// </summary>
        [Output("existingProfile")]
        public Output<string?> ExistingProfile { get; private set; } = null!;

        /// <summary>
        /// Name of an existing BIG-IP SNAT pool.
        /// </summary>
        [Output("existingSnatPool")]
        public Output<string?> ExistingSnatPool { get; private set; } = null!;

        /// <summary>
        /// Type of fallback persistence record to be created for each new client connection.
        /// </summary>
        [Output("fallbackPersistence")]
        public Output<string?> FallbackPersistence { get; private set; } = null!;

        /// <summary>
        /// Json payload for FAST UDP application.
        /// </summary>
        [Output("fastUdpJson")]
        public Output<string> FastUdpJson { get; private set; } = null!;

        /// <summary>
        /// Irules to attach to Virtual Server.
        /// </summary>
        [Output("irules")]
        public Output<ImmutableArray<string>> Irules { get; private set; } = null!;

        /// <summary>
        /// A `load balancing method` is an algorithm that the BIG-IP system uses to select a pool member for processing a request. F5 recommends the Least Connections load balancing method
        /// </summary>
        [Output("loadBalancingMode")]
        public Output<string?> LoadBalancingMode { get; private set; } = null!;

        /// <summary>
        /// `Monitor` block takes input for FAST-Generated Pool Monitor.
        /// See Pool Monitor below for more details.
        /// </summary>
        [Output("monitor")]
        public Output<Outputs.FastUdpAppMonitor?> Monitor { get; private set; } = null!;

        /// <summary>
        /// Name of an existing BIG-IP persistence profile to be used.
        /// </summary>
        [Output("persistenceProfile")]
        public Output<string?> PersistenceProfile { get; private set; } = null!;

        /// <summary>
        /// Type of persistence profile to be created. Using this option will enable use of FAST generated persistence profiles.
        /// </summary>
        [Output("persistenceType")]
        public Output<string?> PersistenceType { get; private set; } = null!;

        /// <summary>
        /// `PoolMembers` block takes input for FAST-Generated Pool.
        /// See Pool Members below for more details.
        /// </summary>
        [Output("poolMembers")]
        public Output<ImmutableArray<Outputs.FastUdpAppPoolMember>> PoolMembers { get; private set; } = null!;

        /// <summary>
        /// Existing security log profiles to enable.
        /// </summary>
        [Output("securityLogProfiles")]
        public Output<ImmutableArray<string>> SecurityLogProfiles { get; private set; } = null!;

        /// <summary>
        /// Slow ramp temporarily throttles the number of connections to a new pool member. The recommended value is 300 seconds
        /// </summary>
        [Output("slowRampTime")]
        public Output<int?> SlowRampTime { get; private set; } = null!;

        /// <summary>
        /// List of address to be used for FAST-Generated SNAT Pool.
        /// </summary>
        [Output("snatPoolAddresses")]
        public Output<ImmutableArray<string>> SnatPoolAddresses { get; private set; } = null!;

        /// <summary>
        /// Name of the FAST UDP application tenant.
        /// </summary>
        [Output("tenant")]
        public Output<string> Tenant { get; private set; } = null!;

        /// <summary>
        /// `VirtualServer` block will provide `Ip` and `Port` options to be used for virtual server.
        /// See virtual server below for more details.
        /// </summary>
        [Output("virtualServer")]
        public Output<Outputs.FastUdpAppVirtualServer?> VirtualServer { get; private set; } = null!;

        /// <summary>
        /// Names of existing VLANs to allow.
        /// </summary>
        [Output("vlansAlloweds")]
        public Output<ImmutableArray<string>> VlansAlloweds { get; private set; } = null!;

        /// <summary>
        /// Names of existing VLANs to reject.
        /// </summary>
        [Output("vlansRejecteds")]
        public Output<ImmutableArray<string>> VlansRejecteds { get; private set; } = null!;


        /// <summary>
        /// Create a FastUdpApp resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FastUdpApp(string name, FastUdpAppArgs args, CustomResourceOptions? options = null)
            : base("f5bigip:index/fastUdpApp:FastUdpApp", name, args ?? new FastUdpAppArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FastUdpApp(string name, Input<string> id, FastUdpAppState? state = null, CustomResourceOptions? options = null)
            : base("f5bigip:index/fastUdpApp:FastUdpApp", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FastUdpApp resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FastUdpApp Get(string name, Input<string> id, FastUdpAppState? state = null, CustomResourceOptions? options = null)
        {
            return new FastUdpApp(name, id, state, options);
        }
    }

    public sealed class FastUdpAppArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the FAST UDP application.
        /// </summary>
        [Input("application", required: true)]
        public Input<string> Application { get; set; } = null!;

        /// <summary>
        /// Enables use of FastL4 profiles.
        /// </summary>
        [Input("enableFastl4")]
        public Input<bool>? EnableFastl4 { get; set; }

        /// <summary>
        /// Name of an existing BIG-IP UDP pool monitor. Monitors are used to determine the health of the application on each server.
        /// </summary>
        [Input("existingMonitor")]
        public Input<string>? ExistingMonitor { get; set; }

        /// <summary>
        /// Name of an existing BIG-IP pool.
        /// </summary>
        [Input("existingPool")]
        public Input<string>? ExistingPool { get; set; }

        /// <summary>
        /// Name of an existing BIG-IP FastL4 or UDP profile.
        /// </summary>
        [Input("existingProfile")]
        public Input<string>? ExistingProfile { get; set; }

        /// <summary>
        /// Name of an existing BIG-IP SNAT pool.
        /// </summary>
        [Input("existingSnatPool")]
        public Input<string>? ExistingSnatPool { get; set; }

        /// <summary>
        /// Type of fallback persistence record to be created for each new client connection.
        /// </summary>
        [Input("fallbackPersistence")]
        public Input<string>? FallbackPersistence { get; set; }

        [Input("irules")]
        private InputList<string>? _irules;

        /// <summary>
        /// Irules to attach to Virtual Server.
        /// </summary>
        public InputList<string> Irules
        {
            get => _irules ?? (_irules = new InputList<string>());
            set => _irules = value;
        }

        /// <summary>
        /// A `load balancing method` is an algorithm that the BIG-IP system uses to select a pool member for processing a request. F5 recommends the Least Connections load balancing method
        /// </summary>
        [Input("loadBalancingMode")]
        public Input<string>? LoadBalancingMode { get; set; }

        /// <summary>
        /// `Monitor` block takes input for FAST-Generated Pool Monitor.
        /// See Pool Monitor below for more details.
        /// </summary>
        [Input("monitor")]
        public Input<Inputs.FastUdpAppMonitorArgs>? Monitor { get; set; }

        /// <summary>
        /// Name of an existing BIG-IP persistence profile to be used.
        /// </summary>
        [Input("persistenceProfile")]
        public Input<string>? PersistenceProfile { get; set; }

        /// <summary>
        /// Type of persistence profile to be created. Using this option will enable use of FAST generated persistence profiles.
        /// </summary>
        [Input("persistenceType")]
        public Input<string>? PersistenceType { get; set; }

        [Input("poolMembers")]
        private InputList<Inputs.FastUdpAppPoolMemberArgs>? _poolMembers;

        /// <summary>
        /// `PoolMembers` block takes input for FAST-Generated Pool.
        /// See Pool Members below for more details.
        /// </summary>
        public InputList<Inputs.FastUdpAppPoolMemberArgs> PoolMembers
        {
            get => _poolMembers ?? (_poolMembers = new InputList<Inputs.FastUdpAppPoolMemberArgs>());
            set => _poolMembers = value;
        }

        [Input("securityLogProfiles")]
        private InputList<string>? _securityLogProfiles;

        /// <summary>
        /// Existing security log profiles to enable.
        /// </summary>
        public InputList<string> SecurityLogProfiles
        {
            get => _securityLogProfiles ?? (_securityLogProfiles = new InputList<string>());
            set => _securityLogProfiles = value;
        }

        /// <summary>
        /// Slow ramp temporarily throttles the number of connections to a new pool member. The recommended value is 300 seconds
        /// </summary>
        [Input("slowRampTime")]
        public Input<int>? SlowRampTime { get; set; }

        [Input("snatPoolAddresses")]
        private InputList<string>? _snatPoolAddresses;

        /// <summary>
        /// List of address to be used for FAST-Generated SNAT Pool.
        /// </summary>
        public InputList<string> SnatPoolAddresses
        {
            get => _snatPoolAddresses ?? (_snatPoolAddresses = new InputList<string>());
            set => _snatPoolAddresses = value;
        }

        /// <summary>
        /// Name of the FAST UDP application tenant.
        /// </summary>
        [Input("tenant", required: true)]
        public Input<string> Tenant { get; set; } = null!;

        /// <summary>
        /// `VirtualServer` block will provide `Ip` and `Port` options to be used for virtual server.
        /// See virtual server below for more details.
        /// </summary>
        [Input("virtualServer")]
        public Input<Inputs.FastUdpAppVirtualServerArgs>? VirtualServer { get; set; }

        [Input("vlansAlloweds")]
        private InputList<string>? _vlansAlloweds;

        /// <summary>
        /// Names of existing VLANs to allow.
        /// </summary>
        public InputList<string> VlansAlloweds
        {
            get => _vlansAlloweds ?? (_vlansAlloweds = new InputList<string>());
            set => _vlansAlloweds = value;
        }

        [Input("vlansRejecteds")]
        private InputList<string>? _vlansRejecteds;

        /// <summary>
        /// Names of existing VLANs to reject.
        /// </summary>
        public InputList<string> VlansRejecteds
        {
            get => _vlansRejecteds ?? (_vlansRejecteds = new InputList<string>());
            set => _vlansRejecteds = value;
        }

        public FastUdpAppArgs()
        {
        }
        public static new FastUdpAppArgs Empty => new FastUdpAppArgs();
    }

    public sealed class FastUdpAppState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the FAST UDP application.
        /// </summary>
        [Input("application")]
        public Input<string>? Application { get; set; }

        /// <summary>
        /// Enables use of FastL4 profiles.
        /// </summary>
        [Input("enableFastl4")]
        public Input<bool>? EnableFastl4 { get; set; }

        /// <summary>
        /// Name of an existing BIG-IP UDP pool monitor. Monitors are used to determine the health of the application on each server.
        /// </summary>
        [Input("existingMonitor")]
        public Input<string>? ExistingMonitor { get; set; }

        /// <summary>
        /// Name of an existing BIG-IP pool.
        /// </summary>
        [Input("existingPool")]
        public Input<string>? ExistingPool { get; set; }

        /// <summary>
        /// Name of an existing BIG-IP FastL4 or UDP profile.
        /// </summary>
        [Input("existingProfile")]
        public Input<string>? ExistingProfile { get; set; }

        /// <summary>
        /// Name of an existing BIG-IP SNAT pool.
        /// </summary>
        [Input("existingSnatPool")]
        public Input<string>? ExistingSnatPool { get; set; }

        /// <summary>
        /// Type of fallback persistence record to be created for each new client connection.
        /// </summary>
        [Input("fallbackPersistence")]
        public Input<string>? FallbackPersistence { get; set; }

        /// <summary>
        /// Json payload for FAST UDP application.
        /// </summary>
        [Input("fastUdpJson")]
        public Input<string>? FastUdpJson { get; set; }

        [Input("irules")]
        private InputList<string>? _irules;

        /// <summary>
        /// Irules to attach to Virtual Server.
        /// </summary>
        public InputList<string> Irules
        {
            get => _irules ?? (_irules = new InputList<string>());
            set => _irules = value;
        }

        /// <summary>
        /// A `load balancing method` is an algorithm that the BIG-IP system uses to select a pool member for processing a request. F5 recommends the Least Connections load balancing method
        /// </summary>
        [Input("loadBalancingMode")]
        public Input<string>? LoadBalancingMode { get; set; }

        /// <summary>
        /// `Monitor` block takes input for FAST-Generated Pool Monitor.
        /// See Pool Monitor below for more details.
        /// </summary>
        [Input("monitor")]
        public Input<Inputs.FastUdpAppMonitorGetArgs>? Monitor { get; set; }

        /// <summary>
        /// Name of an existing BIG-IP persistence profile to be used.
        /// </summary>
        [Input("persistenceProfile")]
        public Input<string>? PersistenceProfile { get; set; }

        /// <summary>
        /// Type of persistence profile to be created. Using this option will enable use of FAST generated persistence profiles.
        /// </summary>
        [Input("persistenceType")]
        public Input<string>? PersistenceType { get; set; }

        [Input("poolMembers")]
        private InputList<Inputs.FastUdpAppPoolMemberGetArgs>? _poolMembers;

        /// <summary>
        /// `PoolMembers` block takes input for FAST-Generated Pool.
        /// See Pool Members below for more details.
        /// </summary>
        public InputList<Inputs.FastUdpAppPoolMemberGetArgs> PoolMembers
        {
            get => _poolMembers ?? (_poolMembers = new InputList<Inputs.FastUdpAppPoolMemberGetArgs>());
            set => _poolMembers = value;
        }

        [Input("securityLogProfiles")]
        private InputList<string>? _securityLogProfiles;

        /// <summary>
        /// Existing security log profiles to enable.
        /// </summary>
        public InputList<string> SecurityLogProfiles
        {
            get => _securityLogProfiles ?? (_securityLogProfiles = new InputList<string>());
            set => _securityLogProfiles = value;
        }

        /// <summary>
        /// Slow ramp temporarily throttles the number of connections to a new pool member. The recommended value is 300 seconds
        /// </summary>
        [Input("slowRampTime")]
        public Input<int>? SlowRampTime { get; set; }

        [Input("snatPoolAddresses")]
        private InputList<string>? _snatPoolAddresses;

        /// <summary>
        /// List of address to be used for FAST-Generated SNAT Pool.
        /// </summary>
        public InputList<string> SnatPoolAddresses
        {
            get => _snatPoolAddresses ?? (_snatPoolAddresses = new InputList<string>());
            set => _snatPoolAddresses = value;
        }

        /// <summary>
        /// Name of the FAST UDP application tenant.
        /// </summary>
        [Input("tenant")]
        public Input<string>? Tenant { get; set; }

        /// <summary>
        /// `VirtualServer` block will provide `Ip` and `Port` options to be used for virtual server.
        /// See virtual server below for more details.
        /// </summary>
        [Input("virtualServer")]
        public Input<Inputs.FastUdpAppVirtualServerGetArgs>? VirtualServer { get; set; }

        [Input("vlansAlloweds")]
        private InputList<string>? _vlansAlloweds;

        /// <summary>
        /// Names of existing VLANs to allow.
        /// </summary>
        public InputList<string> VlansAlloweds
        {
            get => _vlansAlloweds ?? (_vlansAlloweds = new InputList<string>());
            set => _vlansAlloweds = value;
        }

        [Input("vlansRejecteds")]
        private InputList<string>? _vlansRejecteds;

        /// <summary>
        /// Names of existing VLANs to reject.
        /// </summary>
        public InputList<string> VlansRejecteds
        {
            get => _vlansRejecteds ?? (_vlansRejecteds = new InputList<string>());
            set => _vlansRejecteds = value;
        }

        public FastUdpAppState()
        {
        }
        public static new FastUdpAppState Empty => new FastUdpAppState();
    }
}
