// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.F5BigIP.Sys
{
    /// <summary>
    /// `f5bigip.sys.Snmp` provides details bout how to enable "ilx", "asm" "apm" resource on BIG-IP
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using F5BigIP = Pulumi.F5BigIP;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var snmp = new F5BigIP.Sys.Snmp("snmp", new()
    ///     {
    ///         SysContact = " NetOPsAdmin s.shitole@f5.com",
    ///         SysLocation = "SeattleHQ",
    ///         Allowedaddresses = new[]
    ///         {
    ///             "202.10.10.2",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// </summary>
    [F5BigIPResourceType("f5bigip:sys/snmp:Snmp")]
    public partial class Snmp : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configures hosts or networks from which snmpd can accept traffic. Entries go directly into hosts.allow.
        /// </summary>
        [Output("allowedaddresses")]
        public Output<ImmutableArray<string>> Allowedaddresses { get; private set; } = null!;

        /// <summary>
        /// Specifies the contact information for the system administrator.
        /// </summary>
        [Output("sysContact")]
        public Output<string?> SysContact { get; private set; } = null!;

        /// <summary>
        /// Describes the system's physical location.
        /// </summary>
        [Output("sysLocation")]
        public Output<string?> SysLocation { get; private set; } = null!;


        /// <summary>
        /// Create a Snmp resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Snmp(string name, SnmpArgs? args = null, CustomResourceOptions? options = null)
            : base("f5bigip:sys/snmp:Snmp", name, args ?? new SnmpArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Snmp(string name, Input<string> id, SnmpState? state = null, CustomResourceOptions? options = null)
            : base("f5bigip:sys/snmp:Snmp", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Snmp resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Snmp Get(string name, Input<string> id, SnmpState? state = null, CustomResourceOptions? options = null)
        {
            return new Snmp(name, id, state, options);
        }
    }

    public sealed class SnmpArgs : global::Pulumi.ResourceArgs
    {
        [Input("allowedaddresses")]
        private InputList<string>? _allowedaddresses;

        /// <summary>
        /// Configures hosts or networks from which snmpd can accept traffic. Entries go directly into hosts.allow.
        /// </summary>
        public InputList<string> Allowedaddresses
        {
            get => _allowedaddresses ?? (_allowedaddresses = new InputList<string>());
            set => _allowedaddresses = value;
        }

        /// <summary>
        /// Specifies the contact information for the system administrator.
        /// </summary>
        [Input("sysContact")]
        public Input<string>? SysContact { get; set; }

        /// <summary>
        /// Describes the system's physical location.
        /// </summary>
        [Input("sysLocation")]
        public Input<string>? SysLocation { get; set; }

        public SnmpArgs()
        {
        }
        public static new SnmpArgs Empty => new SnmpArgs();
    }

    public sealed class SnmpState : global::Pulumi.ResourceArgs
    {
        [Input("allowedaddresses")]
        private InputList<string>? _allowedaddresses;

        /// <summary>
        /// Configures hosts or networks from which snmpd can accept traffic. Entries go directly into hosts.allow.
        /// </summary>
        public InputList<string> Allowedaddresses
        {
            get => _allowedaddresses ?? (_allowedaddresses = new InputList<string>());
            set => _allowedaddresses = value;
        }

        /// <summary>
        /// Specifies the contact information for the system administrator.
        /// </summary>
        [Input("sysContact")]
        public Input<string>? SysContact { get; set; }

        /// <summary>
        /// Describes the system's physical location.
        /// </summary>
        [Input("sysLocation")]
        public Input<string>? SysLocation { get; set; }

        public SnmpState()
        {
        }
        public static new SnmpState Empty => new SnmpState();
    }
}
