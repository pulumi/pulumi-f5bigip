// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.F5BigIP.Sys
{
    /// <summary>
    /// ## Import
    /// 
    /// System iFiles can be imported using their full path:
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import f5bigip:sys/ifile:Ifile example /Common/my-ifile
    /// ```
    /// 
    /// For iFiles with sub-paths:
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import f5bigip:sys/ifile:Ifile example /Common/templates/my-ifile
    /// ```
    /// </summary>
    [F5BigIPResourceType("f5bigip:sys/ifile:Ifile")]
    public partial class Ifile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// MD5 checksum of the iFile content, automatically calculated by BIG-IP.
        /// </summary>
        [Output("checksum")]
        public Output<string> Checksum { get; private set; } = null!;

        /// <summary>
        /// The content of the iFile. This can be inline text, file content loaded with `file()`, or dynamically generated content. This field is marked as sensitive.
        /// </summary>
        [Output("content")]
        public Output<string> Content { get; private set; } = null!;

        /// <summary>
        /// Name of the system iFile to be created on BIG-IP. Changing this forces a new resource to be created.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Partition where the iFile will be stored. Defaults to `Common`.
        /// </summary>
        [Output("partition")]
        public Output<string?> Partition { get; private set; } = null!;

        /// <summary>
        /// Size of the iFile content in bytes.
        /// </summary>
        [Output("size")]
        public Output<int> Size { get; private set; } = null!;

        /// <summary>
        /// Subdirectory within the partition for organizing iFiles hierarchically.
        /// </summary>
        [Output("subPath")]
        public Output<string?> SubPath { get; private set; } = null!;


        /// <summary>
        /// Create a Ifile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Ifile(string name, IfileArgs args, CustomResourceOptions? options = null)
            : base("f5bigip:sys/ifile:Ifile", name, args ?? new IfileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Ifile(string name, Input<string> id, IfileState? state = null, CustomResourceOptions? options = null)
            : base("f5bigip:sys/ifile:Ifile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "content",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Ifile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Ifile Get(string name, Input<string> id, IfileState? state = null, CustomResourceOptions? options = null)
        {
            return new Ifile(name, id, state, options);
        }
    }

    public sealed class IfileArgs : global::Pulumi.ResourceArgs
    {
        [Input("content", required: true)]
        private Input<string>? _content;

        /// <summary>
        /// The content of the iFile. This can be inline text, file content loaded with `file()`, or dynamically generated content. This field is marked as sensitive.
        /// </summary>
        public Input<string>? Content
        {
            get => _content;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _content = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Name of the system iFile to be created on BIG-IP. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Partition where the iFile will be stored. Defaults to `Common`.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        /// <summary>
        /// Subdirectory within the partition for organizing iFiles hierarchically.
        /// </summary>
        [Input("subPath")]
        public Input<string>? SubPath { get; set; }

        public IfileArgs()
        {
        }
        public static new IfileArgs Empty => new IfileArgs();
    }

    public sealed class IfileState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// MD5 checksum of the iFile content, automatically calculated by BIG-IP.
        /// </summary>
        [Input("checksum")]
        public Input<string>? Checksum { get; set; }

        [Input("content")]
        private Input<string>? _content;

        /// <summary>
        /// The content of the iFile. This can be inline text, file content loaded with `file()`, or dynamically generated content. This field is marked as sensitive.
        /// </summary>
        public Input<string>? Content
        {
            get => _content;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _content = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Name of the system iFile to be created on BIG-IP. Changing this forces a new resource to be created.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Partition where the iFile will be stored. Defaults to `Common`.
        /// </summary>
        [Input("partition")]
        public Input<string>? Partition { get; set; }

        /// <summary>
        /// Size of the iFile content in bytes.
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        /// <summary>
        /// Subdirectory within the partition for organizing iFiles hierarchically.
        /// </summary>
        [Input("subPath")]
        public Input<string>? SubPath { get; set; }

        public IfileState()
        {
        }
        public static new IfileState Empty => new IfileState();
    }
}
