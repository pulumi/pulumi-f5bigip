// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProfileHttpState extends com.pulumi.resources.ResourceArgs {

    public static final ProfileHttpState Empty = new ProfileHttpState();

    /**
     * Enables or disables trusting the client IP address, and statistics from the client IP address, based on the request&#39;s XFF (X-forwarded-for) headers, if they exist.
     * 
     */
    @Import(name="acceptXff")
    private @Nullable Output<String> acceptXff;

    /**
     * @return Enables or disables trusting the client IP address, and statistics from the client IP address, based on the request&#39;s XFF (X-forwarded-for) headers, if they exist.
     * 
     */
    public Optional<Output<String>> acceptXff() {
        return Optional.ofNullable(this.acceptXff);
    }

    /**
     * The application service to which the object belongs.
     * 
     */
    @Import(name="appService")
    private @Nullable Output<String> appService;

    /**
     * @return The application service to which the object belongs.
     * 
     */
    public Optional<Output<String>> appService() {
        return Optional.ofNullable(this.appService);
    }

    /**
     * Specifies a quoted string for the basic authentication realm. The system sends this string to a client whenever authorization fails. The default value is `none`
     * 
     */
    @Import(name="basicAuthRealm")
    private @Nullable Output<String> basicAuthRealm;

    /**
     * @return Specifies a quoted string for the basic authentication realm. The system sends this string to a client whenever authorization fails. The default value is `none`
     * 
     */
    public Optional<Output<String>> basicAuthRealm() {
        return Optional.ofNullable(this.basicAuthRealm);
    }

    /**
     * Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
     * 
     */
    @Import(name="defaultsFrom")
    private @Nullable Output<String> defaultsFrom;

    /**
     * @return Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
     * 
     */
    public Optional<Output<String>> defaultsFrom() {
        return Optional.ofNullable(this.defaultsFrom);
    }

    /**
     * Specifies user-defined description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Specifies user-defined description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Type a passphrase for cookie encryption.
     * 
     */
    @Import(name="encryptCookieSecret")
    private @Nullable Output<String> encryptCookieSecret;

    /**
     * @return Type a passphrase for cookie encryption.
     * 
     */
    public Optional<Output<String>> encryptCookieSecret() {
        return Optional.ofNullable(this.encryptCookieSecret);
    }

    /**
     * Type the cookie names for the system to encrypt.
     * 
     */
    @Import(name="encryptCookies")
    private @Nullable Output<List<String>> encryptCookies;

    /**
     * @return Type the cookie names for the system to encrypt.
     * 
     */
    public Optional<Output<List<String>>> encryptCookies() {
        return Optional.ofNullable(this.encryptCookies);
    }

    /**
     * Specifies an HTTP fallback host. HTTP redirection allows you to redirect HTTP traffic to another protocol identifier, host name, port number
     * 
     */
    @Import(name="fallbackHost")
    private @Nullable Output<String> fallbackHost;

    /**
     * @return Specifies an HTTP fallback host. HTTP redirection allows you to redirect HTTP traffic to another protocol identifier, host name, port number
     * 
     */
    public Optional<Output<String>> fallbackHost() {
        return Optional.ofNullable(this.fallbackHost);
    }

    /**
     * Specifies one or more three-digit status codes that can be returned by an HTTP server,that should trigger a redirection to the fallback host.
     * 
     */
    @Import(name="fallbackStatusCodes")
    private @Nullable Output<List<String>> fallbackStatusCodes;

    /**
     * @return Specifies one or more three-digit status codes that can be returned by an HTTP server,that should trigger a redirection to the fallback host.
     * 
     */
    public Optional<Output<List<String>>> fallbackStatusCodes() {
        return Optional.ofNullable(this.fallbackStatusCodes);
    }

    /**
     * Specifies the header string that you want to erase from an HTTP request. Default is `none`.
     * 
     */
    @Import(name="headErase")
    private @Nullable Output<String> headErase;

    /**
     * @return Specifies the header string that you want to erase from an HTTP request. Default is `none`.
     * 
     */
    public Optional<Output<String>> headErase() {
        return Optional.ofNullable(this.headErase);
    }

    /**
     * Specifies a quoted header string that you want to insert into an HTTP request.Default is `none`.
     * 
     */
    @Import(name="headInsert")
    private @Nullable Output<String> headInsert;

    /**
     * @return Specifies a quoted header string that you want to insert into an HTTP request.Default is `none`.
     * 
     */
    public Optional<Output<String>> headInsert() {
        return Optional.ofNullable(this.headInsert);
    }

    /**
     * Specifies, when enabled, that the system inserts an X-Forwarded-For header in an HTTP request with the client IP address, to use with connection pooling. The default is `Disabled`.
     * 
     */
    @Import(name="insertXforwardedFor")
    private @Nullable Output<String> insertXforwardedFor;

    /**
     * @return Specifies, when enabled, that the system inserts an X-Forwarded-For header in an HTTP request with the client IP address, to use with connection pooling. The default is `Disabled`.
     * 
     */
    public Optional<Output<String>> insertXforwardedFor() {
        return Optional.ofNullable(this.insertXforwardedFor);
    }

    /**
     * Specifies the linear white space (LWS) separator that the system inserts when a header exceeds the maximum width you
     * specify in the LWS Maximum Columns setting.
     * 
     */
    @Import(name="lwsSeparator")
    private @Nullable Output<String> lwsSeparator;

    /**
     * @return Specifies the linear white space (LWS) separator that the system inserts when a header exceeds the maximum width you
     * specify in the LWS Maximum Columns setting.
     * 
     */
    public Optional<Output<String>> lwsSeparator() {
        return Optional.ofNullable(this.lwsSeparator);
    }

    /**
     * Specifies the linear white space (LWS) separator that the system inserts when a header exceeds the maximum width you specify in the LWS Maximum Columns setting.
     * 
     */
    @Import(name="lwsWidth")
    private @Nullable Output<Integer> lwsWidth;

    /**
     * @return Specifies the linear white space (LWS) separator that the system inserts when a header exceeds the maximum width you specify in the LWS Maximum Columns setting.
     * 
     */
    public Optional<Output<Integer>> lwsWidth() {
        return Optional.ofNullable(this.lwsWidth);
    }

    /**
     * Specifies the name of the http profile,name of Profile should be full path. Full path is the combination of the `partition + profile name`,For example `/Common/test-http-profile`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the http profile,name of Profile should be full path. Full path is the combination of the `partition + profile name`,For example `/Common/test-http-profile`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Enables the system to perform HTTP header transformations for the purpose of  keeping server-side connections open. This feature requires configuration of a OneConnect profile
     * 
     */
    @Import(name="oneconnectTransformations")
    private @Nullable Output<String> oneconnectTransformations;

    /**
     * @return Enables the system to perform HTTP header transformations for the purpose of  keeping server-side connections open. This feature requires configuration of a OneConnect profile
     * 
     */
    public Optional<Output<String>> oneconnectTransformations() {
        return Optional.ofNullable(this.oneconnectTransformations);
    }

    /**
     * Specifies the proxy mode for this profile: reverse, explicit, or transparent. The default is `reverse`.
     * 
     */
    @Import(name="proxyType")
    private @Nullable Output<String> proxyType;

    /**
     * @return Specifies the proxy mode for this profile: reverse, explicit, or transparent. The default is `reverse`.
     * 
     */
    public Optional<Output<String>> proxyType() {
        return Optional.ofNullable(this.proxyType);
    }

    /**
     * Specifies whether the system rewrites the URIs that are part of HTTP redirect (3XX) responses. The default is `none`.
     * 
     */
    @Import(name="redirectRewrite")
    private @Nullable Output<String> redirectRewrite;

    /**
     * @return Specifies whether the system rewrites the URIs that are part of HTTP redirect (3XX) responses. The default is `none`.
     * 
     */
    public Optional<Output<String>> redirectRewrite() {
        return Optional.ofNullable(this.redirectRewrite);
    }

    /**
     * Specifies how the system handles HTTP content that is chunked by a client. The default is `preserve`.
     * 
     */
    @Import(name="requestChunking")
    private @Nullable Output<String> requestChunking;

    /**
     * @return Specifies how the system handles HTTP content that is chunked by a client. The default is `preserve`.
     * 
     */
    public Optional<Output<String>> requestChunking() {
        return Optional.ofNullable(this.requestChunking);
    }

    /**
     * Specifies how the system handles HTTP content that is chunked by a server. The default is `selective`.
     * 
     */
    @Import(name="responseChunking")
    private @Nullable Output<String> responseChunking;

    /**
     * @return Specifies how the system handles HTTP content that is chunked by a server. The default is `selective`.
     * 
     */
    public Optional<Output<String>> responseChunking() {
        return Optional.ofNullable(this.responseChunking);
    }

    /**
     * Specifies headers that the BIG-IP system allows in an HTTP response.If you are specifying more than one header, separate the headers with a blank space.
     * 
     */
    @Import(name="responseHeadersPermitteds")
    private @Nullable Output<List<String>> responseHeadersPermitteds;

    /**
     * @return Specifies headers that the BIG-IP system allows in an HTTP response.If you are specifying more than one header, separate the headers with a blank space.
     * 
     */
    public Optional<Output<List<String>>> responseHeadersPermitteds() {
        return Optional.ofNullable(this.responseHeadersPermitteds);
    }

    /**
     * Specifies the value of the Server header in responses that the BIG-IP itself generates. The default is BigIP. If no
     * string is specified, then no Server header will be added to such responses
     * 
     */
    @Import(name="serverAgentName")
    private @Nullable Output<String> serverAgentName;

    /**
     * @return Specifies the value of the Server header in responses that the BIG-IP itself generates. The default is BigIP. If no
     * string is specified, then no Server header will be added to such responses
     * 
     */
    public Optional<Output<String>> serverAgentName() {
        return Optional.ofNullable(this.serverAgentName);
    }

    /**
     * Displays the administrative partition within which this profile resides.
     * 
     */
    @Import(name="tmPartition")
    private @Nullable Output<String> tmPartition;

    /**
     * @return Displays the administrative partition within which this profile resides.
     * 
     */
    public Optional<Output<String>> tmPartition() {
        return Optional.ofNullable(this.tmPartition);
    }

    /**
     * Specifies the hostname to include into Via header
     * 
     */
    @Import(name="viaHostName")
    private @Nullable Output<String> viaHostName;

    /**
     * @return Specifies the hostname to include into Via header
     * 
     */
    public Optional<Output<String>> viaHostName() {
        return Optional.ofNullable(this.viaHostName);
    }

    /**
     * Specifies whether to append, remove, or preserve a Via header in an HTTP request
     * 
     */
    @Import(name="viaRequest")
    private @Nullable Output<String> viaRequest;

    /**
     * @return Specifies whether to append, remove, or preserve a Via header in an HTTP request
     * 
     */
    public Optional<Output<String>> viaRequest() {
        return Optional.ofNullable(this.viaRequest);
    }

    /**
     * Specifies whether to append, remove, or preserve a Via header in an HTTP request
     * 
     */
    @Import(name="viaResponse")
    private @Nullable Output<String> viaResponse;

    /**
     * @return Specifies whether to append, remove, or preserve a Via header in an HTTP request
     * 
     */
    public Optional<Output<String>> viaResponse() {
        return Optional.ofNullable(this.viaResponse);
    }

    /**
     * Specifies alternative XFF headers instead of the default X-forwarded-for header.
     * 
     */
    @Import(name="xffAlternativeNames")
    private @Nullable Output<List<String>> xffAlternativeNames;

    /**
     * @return Specifies alternative XFF headers instead of the default X-forwarded-for header.
     * 
     */
    public Optional<Output<List<String>>> xffAlternativeNames() {
        return Optional.ofNullable(this.xffAlternativeNames);
    }

    private ProfileHttpState() {}

    private ProfileHttpState(ProfileHttpState $) {
        this.acceptXff = $.acceptXff;
        this.appService = $.appService;
        this.basicAuthRealm = $.basicAuthRealm;
        this.defaultsFrom = $.defaultsFrom;
        this.description = $.description;
        this.encryptCookieSecret = $.encryptCookieSecret;
        this.encryptCookies = $.encryptCookies;
        this.fallbackHost = $.fallbackHost;
        this.fallbackStatusCodes = $.fallbackStatusCodes;
        this.headErase = $.headErase;
        this.headInsert = $.headInsert;
        this.insertXforwardedFor = $.insertXforwardedFor;
        this.lwsSeparator = $.lwsSeparator;
        this.lwsWidth = $.lwsWidth;
        this.name = $.name;
        this.oneconnectTransformations = $.oneconnectTransformations;
        this.proxyType = $.proxyType;
        this.redirectRewrite = $.redirectRewrite;
        this.requestChunking = $.requestChunking;
        this.responseChunking = $.responseChunking;
        this.responseHeadersPermitteds = $.responseHeadersPermitteds;
        this.serverAgentName = $.serverAgentName;
        this.tmPartition = $.tmPartition;
        this.viaHostName = $.viaHostName;
        this.viaRequest = $.viaRequest;
        this.viaResponse = $.viaResponse;
        this.xffAlternativeNames = $.xffAlternativeNames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProfileHttpState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProfileHttpState $;

        public Builder() {
            $ = new ProfileHttpState();
        }

        public Builder(ProfileHttpState defaults) {
            $ = new ProfileHttpState(Objects.requireNonNull(defaults));
        }

        /**
         * @param acceptXff Enables or disables trusting the client IP address, and statistics from the client IP address, based on the request&#39;s XFF (X-forwarded-for) headers, if they exist.
         * 
         * @return builder
         * 
         */
        public Builder acceptXff(@Nullable Output<String> acceptXff) {
            $.acceptXff = acceptXff;
            return this;
        }

        /**
         * @param acceptXff Enables or disables trusting the client IP address, and statistics from the client IP address, based on the request&#39;s XFF (X-forwarded-for) headers, if they exist.
         * 
         * @return builder
         * 
         */
        public Builder acceptXff(String acceptXff) {
            return acceptXff(Output.of(acceptXff));
        }

        /**
         * @param appService The application service to which the object belongs.
         * 
         * @return builder
         * 
         */
        public Builder appService(@Nullable Output<String> appService) {
            $.appService = appService;
            return this;
        }

        /**
         * @param appService The application service to which the object belongs.
         * 
         * @return builder
         * 
         */
        public Builder appService(String appService) {
            return appService(Output.of(appService));
        }

        /**
         * @param basicAuthRealm Specifies a quoted string for the basic authentication realm. The system sends this string to a client whenever authorization fails. The default value is `none`
         * 
         * @return builder
         * 
         */
        public Builder basicAuthRealm(@Nullable Output<String> basicAuthRealm) {
            $.basicAuthRealm = basicAuthRealm;
            return this;
        }

        /**
         * @param basicAuthRealm Specifies a quoted string for the basic authentication realm. The system sends this string to a client whenever authorization fails. The default value is `none`
         * 
         * @return builder
         * 
         */
        public Builder basicAuthRealm(String basicAuthRealm) {
            return basicAuthRealm(Output.of(basicAuthRealm));
        }

        /**
         * @param defaultsFrom Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
         * 
         * @return builder
         * 
         */
        public Builder defaultsFrom(@Nullable Output<String> defaultsFrom) {
            $.defaultsFrom = defaultsFrom;
            return this;
        }

        /**
         * @param defaultsFrom Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
         * 
         * @return builder
         * 
         */
        public Builder defaultsFrom(String defaultsFrom) {
            return defaultsFrom(Output.of(defaultsFrom));
        }

        /**
         * @param description Specifies user-defined description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Specifies user-defined description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param encryptCookieSecret Type a passphrase for cookie encryption.
         * 
         * @return builder
         * 
         */
        public Builder encryptCookieSecret(@Nullable Output<String> encryptCookieSecret) {
            $.encryptCookieSecret = encryptCookieSecret;
            return this;
        }

        /**
         * @param encryptCookieSecret Type a passphrase for cookie encryption.
         * 
         * @return builder
         * 
         */
        public Builder encryptCookieSecret(String encryptCookieSecret) {
            return encryptCookieSecret(Output.of(encryptCookieSecret));
        }

        /**
         * @param encryptCookies Type the cookie names for the system to encrypt.
         * 
         * @return builder
         * 
         */
        public Builder encryptCookies(@Nullable Output<List<String>> encryptCookies) {
            $.encryptCookies = encryptCookies;
            return this;
        }

        /**
         * @param encryptCookies Type the cookie names for the system to encrypt.
         * 
         * @return builder
         * 
         */
        public Builder encryptCookies(List<String> encryptCookies) {
            return encryptCookies(Output.of(encryptCookies));
        }

        /**
         * @param encryptCookies Type the cookie names for the system to encrypt.
         * 
         * @return builder
         * 
         */
        public Builder encryptCookies(String... encryptCookies) {
            return encryptCookies(List.of(encryptCookies));
        }

        /**
         * @param fallbackHost Specifies an HTTP fallback host. HTTP redirection allows you to redirect HTTP traffic to another protocol identifier, host name, port number
         * 
         * @return builder
         * 
         */
        public Builder fallbackHost(@Nullable Output<String> fallbackHost) {
            $.fallbackHost = fallbackHost;
            return this;
        }

        /**
         * @param fallbackHost Specifies an HTTP fallback host. HTTP redirection allows you to redirect HTTP traffic to another protocol identifier, host name, port number
         * 
         * @return builder
         * 
         */
        public Builder fallbackHost(String fallbackHost) {
            return fallbackHost(Output.of(fallbackHost));
        }

        /**
         * @param fallbackStatusCodes Specifies one or more three-digit status codes that can be returned by an HTTP server,that should trigger a redirection to the fallback host.
         * 
         * @return builder
         * 
         */
        public Builder fallbackStatusCodes(@Nullable Output<List<String>> fallbackStatusCodes) {
            $.fallbackStatusCodes = fallbackStatusCodes;
            return this;
        }

        /**
         * @param fallbackStatusCodes Specifies one or more three-digit status codes that can be returned by an HTTP server,that should trigger a redirection to the fallback host.
         * 
         * @return builder
         * 
         */
        public Builder fallbackStatusCodes(List<String> fallbackStatusCodes) {
            return fallbackStatusCodes(Output.of(fallbackStatusCodes));
        }

        /**
         * @param fallbackStatusCodes Specifies one or more three-digit status codes that can be returned by an HTTP server,that should trigger a redirection to the fallback host.
         * 
         * @return builder
         * 
         */
        public Builder fallbackStatusCodes(String... fallbackStatusCodes) {
            return fallbackStatusCodes(List.of(fallbackStatusCodes));
        }

        /**
         * @param headErase Specifies the header string that you want to erase from an HTTP request. Default is `none`.
         * 
         * @return builder
         * 
         */
        public Builder headErase(@Nullable Output<String> headErase) {
            $.headErase = headErase;
            return this;
        }

        /**
         * @param headErase Specifies the header string that you want to erase from an HTTP request. Default is `none`.
         * 
         * @return builder
         * 
         */
        public Builder headErase(String headErase) {
            return headErase(Output.of(headErase));
        }

        /**
         * @param headInsert Specifies a quoted header string that you want to insert into an HTTP request.Default is `none`.
         * 
         * @return builder
         * 
         */
        public Builder headInsert(@Nullable Output<String> headInsert) {
            $.headInsert = headInsert;
            return this;
        }

        /**
         * @param headInsert Specifies a quoted header string that you want to insert into an HTTP request.Default is `none`.
         * 
         * @return builder
         * 
         */
        public Builder headInsert(String headInsert) {
            return headInsert(Output.of(headInsert));
        }

        /**
         * @param insertXforwardedFor Specifies, when enabled, that the system inserts an X-Forwarded-For header in an HTTP request with the client IP address, to use with connection pooling. The default is `Disabled`.
         * 
         * @return builder
         * 
         */
        public Builder insertXforwardedFor(@Nullable Output<String> insertXforwardedFor) {
            $.insertXforwardedFor = insertXforwardedFor;
            return this;
        }

        /**
         * @param insertXforwardedFor Specifies, when enabled, that the system inserts an X-Forwarded-For header in an HTTP request with the client IP address, to use with connection pooling. The default is `Disabled`.
         * 
         * @return builder
         * 
         */
        public Builder insertXforwardedFor(String insertXforwardedFor) {
            return insertXforwardedFor(Output.of(insertXforwardedFor));
        }

        /**
         * @param lwsSeparator Specifies the linear white space (LWS) separator that the system inserts when a header exceeds the maximum width you
         * specify in the LWS Maximum Columns setting.
         * 
         * @return builder
         * 
         */
        public Builder lwsSeparator(@Nullable Output<String> lwsSeparator) {
            $.lwsSeparator = lwsSeparator;
            return this;
        }

        /**
         * @param lwsSeparator Specifies the linear white space (LWS) separator that the system inserts when a header exceeds the maximum width you
         * specify in the LWS Maximum Columns setting.
         * 
         * @return builder
         * 
         */
        public Builder lwsSeparator(String lwsSeparator) {
            return lwsSeparator(Output.of(lwsSeparator));
        }

        /**
         * @param lwsWidth Specifies the linear white space (LWS) separator that the system inserts when a header exceeds the maximum width you specify in the LWS Maximum Columns setting.
         * 
         * @return builder
         * 
         */
        public Builder lwsWidth(@Nullable Output<Integer> lwsWidth) {
            $.lwsWidth = lwsWidth;
            return this;
        }

        /**
         * @param lwsWidth Specifies the linear white space (LWS) separator that the system inserts when a header exceeds the maximum width you specify in the LWS Maximum Columns setting.
         * 
         * @return builder
         * 
         */
        public Builder lwsWidth(Integer lwsWidth) {
            return lwsWidth(Output.of(lwsWidth));
        }

        /**
         * @param name Specifies the name of the http profile,name of Profile should be full path. Full path is the combination of the `partition + profile name`,For example `/Common/test-http-profile`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the http profile,name of Profile should be full path. Full path is the combination of the `partition + profile name`,For example `/Common/test-http-profile`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param oneconnectTransformations Enables the system to perform HTTP header transformations for the purpose of  keeping server-side connections open. This feature requires configuration of a OneConnect profile
         * 
         * @return builder
         * 
         */
        public Builder oneconnectTransformations(@Nullable Output<String> oneconnectTransformations) {
            $.oneconnectTransformations = oneconnectTransformations;
            return this;
        }

        /**
         * @param oneconnectTransformations Enables the system to perform HTTP header transformations for the purpose of  keeping server-side connections open. This feature requires configuration of a OneConnect profile
         * 
         * @return builder
         * 
         */
        public Builder oneconnectTransformations(String oneconnectTransformations) {
            return oneconnectTransformations(Output.of(oneconnectTransformations));
        }

        /**
         * @param proxyType Specifies the proxy mode for this profile: reverse, explicit, or transparent. The default is `reverse`.
         * 
         * @return builder
         * 
         */
        public Builder proxyType(@Nullable Output<String> proxyType) {
            $.proxyType = proxyType;
            return this;
        }

        /**
         * @param proxyType Specifies the proxy mode for this profile: reverse, explicit, or transparent. The default is `reverse`.
         * 
         * @return builder
         * 
         */
        public Builder proxyType(String proxyType) {
            return proxyType(Output.of(proxyType));
        }

        /**
         * @param redirectRewrite Specifies whether the system rewrites the URIs that are part of HTTP redirect (3XX) responses. The default is `none`.
         * 
         * @return builder
         * 
         */
        public Builder redirectRewrite(@Nullable Output<String> redirectRewrite) {
            $.redirectRewrite = redirectRewrite;
            return this;
        }

        /**
         * @param redirectRewrite Specifies whether the system rewrites the URIs that are part of HTTP redirect (3XX) responses. The default is `none`.
         * 
         * @return builder
         * 
         */
        public Builder redirectRewrite(String redirectRewrite) {
            return redirectRewrite(Output.of(redirectRewrite));
        }

        /**
         * @param requestChunking Specifies how the system handles HTTP content that is chunked by a client. The default is `preserve`.
         * 
         * @return builder
         * 
         */
        public Builder requestChunking(@Nullable Output<String> requestChunking) {
            $.requestChunking = requestChunking;
            return this;
        }

        /**
         * @param requestChunking Specifies how the system handles HTTP content that is chunked by a client. The default is `preserve`.
         * 
         * @return builder
         * 
         */
        public Builder requestChunking(String requestChunking) {
            return requestChunking(Output.of(requestChunking));
        }

        /**
         * @param responseChunking Specifies how the system handles HTTP content that is chunked by a server. The default is `selective`.
         * 
         * @return builder
         * 
         */
        public Builder responseChunking(@Nullable Output<String> responseChunking) {
            $.responseChunking = responseChunking;
            return this;
        }

        /**
         * @param responseChunking Specifies how the system handles HTTP content that is chunked by a server. The default is `selective`.
         * 
         * @return builder
         * 
         */
        public Builder responseChunking(String responseChunking) {
            return responseChunking(Output.of(responseChunking));
        }

        /**
         * @param responseHeadersPermitteds Specifies headers that the BIG-IP system allows in an HTTP response.If you are specifying more than one header, separate the headers with a blank space.
         * 
         * @return builder
         * 
         */
        public Builder responseHeadersPermitteds(@Nullable Output<List<String>> responseHeadersPermitteds) {
            $.responseHeadersPermitteds = responseHeadersPermitteds;
            return this;
        }

        /**
         * @param responseHeadersPermitteds Specifies headers that the BIG-IP system allows in an HTTP response.If you are specifying more than one header, separate the headers with a blank space.
         * 
         * @return builder
         * 
         */
        public Builder responseHeadersPermitteds(List<String> responseHeadersPermitteds) {
            return responseHeadersPermitteds(Output.of(responseHeadersPermitteds));
        }

        /**
         * @param responseHeadersPermitteds Specifies headers that the BIG-IP system allows in an HTTP response.If you are specifying more than one header, separate the headers with a blank space.
         * 
         * @return builder
         * 
         */
        public Builder responseHeadersPermitteds(String... responseHeadersPermitteds) {
            return responseHeadersPermitteds(List.of(responseHeadersPermitteds));
        }

        /**
         * @param serverAgentName Specifies the value of the Server header in responses that the BIG-IP itself generates. The default is BigIP. If no
         * string is specified, then no Server header will be added to such responses
         * 
         * @return builder
         * 
         */
        public Builder serverAgentName(@Nullable Output<String> serverAgentName) {
            $.serverAgentName = serverAgentName;
            return this;
        }

        /**
         * @param serverAgentName Specifies the value of the Server header in responses that the BIG-IP itself generates. The default is BigIP. If no
         * string is specified, then no Server header will be added to such responses
         * 
         * @return builder
         * 
         */
        public Builder serverAgentName(String serverAgentName) {
            return serverAgentName(Output.of(serverAgentName));
        }

        /**
         * @param tmPartition Displays the administrative partition within which this profile resides.
         * 
         * @return builder
         * 
         */
        public Builder tmPartition(@Nullable Output<String> tmPartition) {
            $.tmPartition = tmPartition;
            return this;
        }

        /**
         * @param tmPartition Displays the administrative partition within which this profile resides.
         * 
         * @return builder
         * 
         */
        public Builder tmPartition(String tmPartition) {
            return tmPartition(Output.of(tmPartition));
        }

        /**
         * @param viaHostName Specifies the hostname to include into Via header
         * 
         * @return builder
         * 
         */
        public Builder viaHostName(@Nullable Output<String> viaHostName) {
            $.viaHostName = viaHostName;
            return this;
        }

        /**
         * @param viaHostName Specifies the hostname to include into Via header
         * 
         * @return builder
         * 
         */
        public Builder viaHostName(String viaHostName) {
            return viaHostName(Output.of(viaHostName));
        }

        /**
         * @param viaRequest Specifies whether to append, remove, or preserve a Via header in an HTTP request
         * 
         * @return builder
         * 
         */
        public Builder viaRequest(@Nullable Output<String> viaRequest) {
            $.viaRequest = viaRequest;
            return this;
        }

        /**
         * @param viaRequest Specifies whether to append, remove, or preserve a Via header in an HTTP request
         * 
         * @return builder
         * 
         */
        public Builder viaRequest(String viaRequest) {
            return viaRequest(Output.of(viaRequest));
        }

        /**
         * @param viaResponse Specifies whether to append, remove, or preserve a Via header in an HTTP request
         * 
         * @return builder
         * 
         */
        public Builder viaResponse(@Nullable Output<String> viaResponse) {
            $.viaResponse = viaResponse;
            return this;
        }

        /**
         * @param viaResponse Specifies whether to append, remove, or preserve a Via header in an HTTP request
         * 
         * @return builder
         * 
         */
        public Builder viaResponse(String viaResponse) {
            return viaResponse(Output.of(viaResponse));
        }

        /**
         * @param xffAlternativeNames Specifies alternative XFF headers instead of the default X-forwarded-for header.
         * 
         * @return builder
         * 
         */
        public Builder xffAlternativeNames(@Nullable Output<List<String>> xffAlternativeNames) {
            $.xffAlternativeNames = xffAlternativeNames;
            return this;
        }

        /**
         * @param xffAlternativeNames Specifies alternative XFF headers instead of the default X-forwarded-for header.
         * 
         * @return builder
         * 
         */
        public Builder xffAlternativeNames(List<String> xffAlternativeNames) {
            return xffAlternativeNames(Output.of(xffAlternativeNames));
        }

        /**
         * @param xffAlternativeNames Specifies alternative XFF headers instead of the default X-forwarded-for header.
         * 
         * @return builder
         * 
         */
        public Builder xffAlternativeNames(String... xffAlternativeNames) {
            return xffAlternativeNames(List.of(xffAlternativeNames));
        }

        public ProfileHttpState build() {
            return $;
        }
    }

}
