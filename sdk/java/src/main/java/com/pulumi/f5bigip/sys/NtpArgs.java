// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.sys;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NtpArgs extends com.pulumi.resources.ResourceArgs {

    public static final NtpArgs Empty = new NtpArgs();

    /**
     * Name of the ntp Servers
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return Name of the ntp Servers
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * Adds NTP servers to or deletes NTP servers from the BIG-IP system.
     * 
     */
    @Import(name="servers")
    private @Nullable Output<List<String>> servers;

    /**
     * @return Adds NTP servers to or deletes NTP servers from the BIG-IP system.
     * 
     */
    public Optional<Output<List<String>>> servers() {
        return Optional.ofNullable(this.servers);
    }

    /**
     * Specifies the time zone that you want to use for the system time.
     * 
     */
    @Import(name="timezone")
    private @Nullable Output<String> timezone;

    /**
     * @return Specifies the time zone that you want to use for the system time.
     * 
     */
    public Optional<Output<String>> timezone() {
        return Optional.ofNullable(this.timezone);
    }

    private NtpArgs() {}

    private NtpArgs(NtpArgs $) {
        this.description = $.description;
        this.servers = $.servers;
        this.timezone = $.timezone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NtpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NtpArgs $;

        public Builder() {
            $ = new NtpArgs();
        }

        public Builder(NtpArgs defaults) {
            $ = new NtpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Name of the ntp Servers
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Name of the ntp Servers
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param servers Adds NTP servers to or deletes NTP servers from the BIG-IP system.
         * 
         * @return builder
         * 
         */
        public Builder servers(@Nullable Output<List<String>> servers) {
            $.servers = servers;
            return this;
        }

        /**
         * @param servers Adds NTP servers to or deletes NTP servers from the BIG-IP system.
         * 
         * @return builder
         * 
         */
        public Builder servers(List<String> servers) {
            return servers(Output.of(servers));
        }

        /**
         * @param servers Adds NTP servers to or deletes NTP servers from the BIG-IP system.
         * 
         * @return builder
         * 
         */
        public Builder servers(String... servers) {
            return servers(List.of(servers));
        }

        /**
         * @param timezone Specifies the time zone that you want to use for the system time.
         * 
         * @return builder
         * 
         */
        public Builder timezone(@Nullable Output<String> timezone) {
            $.timezone = timezone;
            return this;
        }

        /**
         * @param timezone Specifies the time zone that you want to use for the system time.
         * 
         * @return builder
         * 
         */
        public Builder timezone(String timezone) {
            return timezone(Output.of(timezone));
        }

        public NtpArgs build() {
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            return $;
        }
    }

}
