// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPolicyRuleAction extends com.pulumi.resources.InvokeArgs {

    public static final GetPolicyRuleAction Empty = new GetPolicyRuleAction();

    @Import(name="appService", required=true)
    private String appService;

    public String appService() {
        return this.appService;
    }

    @Import(name="application", required=true)
    private String application;

    public String application() {
        return this.application;
    }

    @Import(name="asm", required=true)
    private Boolean asm;

    public Boolean asm() {
        return this.asm;
    }

    @Import(name="avr", required=true)
    private Boolean avr;

    public Boolean avr() {
        return this.avr;
    }

    @Import(name="cache", required=true)
    private Boolean cache;

    public Boolean cache() {
        return this.cache;
    }

    @Import(name="carp", required=true)
    private Boolean carp;

    public Boolean carp() {
        return this.carp;
    }

    @Import(name="category", required=true)
    private String category;

    public String category() {
        return this.category;
    }

    @Import(name="classify", required=true)
    private Boolean classify;

    public Boolean classify() {
        return this.classify;
    }

    @Import(name="clonePool", required=true)
    private String clonePool;

    public String clonePool() {
        return this.clonePool;
    }

    @Import(name="code", required=true)
    private Integer code;

    public Integer code() {
        return this.code;
    }

    @Import(name="compress", required=true)
    private Boolean compress;

    public Boolean compress() {
        return this.compress;
    }

    @Import(name="connection", required=true)
    private Boolean connection;

    public Boolean connection() {
        return this.connection;
    }

    @Import(name="content", required=true)
    private String content;

    public String content() {
        return this.content;
    }

    @Import(name="cookieHash", required=true)
    private Boolean cookieHash;

    public Boolean cookieHash() {
        return this.cookieHash;
    }

    @Import(name="cookieInsert", required=true)
    private Boolean cookieInsert;

    public Boolean cookieInsert() {
        return this.cookieInsert;
    }

    @Import(name="cookiePassive", required=true)
    private Boolean cookiePassive;

    public Boolean cookiePassive() {
        return this.cookiePassive;
    }

    @Import(name="cookieRewrite", required=true)
    private Boolean cookieRewrite;

    public Boolean cookieRewrite() {
        return this.cookieRewrite;
    }

    @Import(name="decompress", required=true)
    private Boolean decompress;

    public Boolean decompress() {
        return this.decompress;
    }

    @Import(name="defer", required=true)
    private Boolean defer;

    public Boolean defer() {
        return this.defer;
    }

    @Import(name="destinationAddress", required=true)
    private Boolean destinationAddress;

    public Boolean destinationAddress() {
        return this.destinationAddress;
    }

    @Import(name="disable", required=true)
    private Boolean disable;

    public Boolean disable() {
        return this.disable;
    }

    @Import(name="domain", required=true)
    private String domain;

    public String domain() {
        return this.domain;
    }

    @Import(name="enable", required=true)
    private Boolean enable;

    public Boolean enable() {
        return this.enable;
    }

    @Import(name="expiry", required=true)
    private String expiry;

    public String expiry() {
        return this.expiry;
    }

    @Import(name="expirySecs", required=true)
    private Integer expirySecs;

    public Integer expirySecs() {
        return this.expirySecs;
    }

    @Import(name="expression", required=true)
    private String expression;

    public String expression() {
        return this.expression;
    }

    @Import(name="extension", required=true)
    private String extension;

    public String extension() {
        return this.extension;
    }

    @Import(name="facility", required=true)
    private String facility;

    public String facility() {
        return this.facility;
    }

    @Import(name="forward")
    private @Nullable Boolean forward;

    public Optional<Boolean> forward() {
        return Optional.ofNullable(this.forward);
    }

    @Import(name="fromProfile", required=true)
    private String fromProfile;

    public String fromProfile() {
        return this.fromProfile;
    }

    @Import(name="hash", required=true)
    private Boolean hash;

    public Boolean hash() {
        return this.hash;
    }

    @Import(name="host", required=true)
    private String host;

    public String host() {
        return this.host;
    }

    @Import(name="http", required=true)
    private Boolean http;

    public Boolean http() {
        return this.http;
    }

    @Import(name="httpBasicAuth", required=true)
    private Boolean httpBasicAuth;

    public Boolean httpBasicAuth() {
        return this.httpBasicAuth;
    }

    @Import(name="httpCookie", required=true)
    private Boolean httpCookie;

    public Boolean httpCookie() {
        return this.httpCookie;
    }

    @Import(name="httpHeader", required=true)
    private Boolean httpHeader;

    public Boolean httpHeader() {
        return this.httpHeader;
    }

    @Import(name="httpHost")
    private @Nullable Boolean httpHost;

    public Optional<Boolean> httpHost() {
        return Optional.ofNullable(this.httpHost);
    }

    @Import(name="httpReferer", required=true)
    private Boolean httpReferer;

    public Boolean httpReferer() {
        return this.httpReferer;
    }

    @Import(name="httpReply", required=true)
    private Boolean httpReply;

    public Boolean httpReply() {
        return this.httpReply;
    }

    @Import(name="httpSetCookie", required=true)
    private Boolean httpSetCookie;

    public Boolean httpSetCookie() {
        return this.httpSetCookie;
    }

    @Import(name="httpUri", required=true)
    private Boolean httpUri;

    public Boolean httpUri() {
        return this.httpUri;
    }

    @Import(name="ifile", required=true)
    private String ifile;

    public String ifile() {
        return this.ifile;
    }

    @Import(name="insert", required=true)
    private Boolean insert;

    public Boolean insert() {
        return this.insert;
    }

    @Import(name="internalVirtual", required=true)
    private String internalVirtual;

    public String internalVirtual() {
        return this.internalVirtual;
    }

    @Import(name="ipAddress", required=true)
    private String ipAddress;

    public String ipAddress() {
        return this.ipAddress;
    }

    @Import(name="key", required=true)
    private String key;

    public String key() {
        return this.key;
    }

    @Import(name="l7dos", required=true)
    private Boolean l7dos;

    public Boolean l7dos() {
        return this.l7dos;
    }

    @Import(name="length", required=true)
    private Integer length;

    public Integer length() {
        return this.length;
    }

    @Import(name="location", required=true)
    private String location;

    public String location() {
        return this.location;
    }

    @Import(name="log", required=true)
    private Boolean log;

    public Boolean log() {
        return this.log;
    }

    @Import(name="ltmPolicy", required=true)
    private Boolean ltmPolicy;

    public Boolean ltmPolicy() {
        return this.ltmPolicy;
    }

    @Import(name="member", required=true)
    private String member;

    public String member() {
        return this.member;
    }

    @Import(name="message", required=true)
    private String message;

    public String message() {
        return this.message;
    }

    @Import(name="netmask", required=true)
    private String netmask;

    public String netmask() {
        return this.netmask;
    }

    @Import(name="nexthop", required=true)
    private String nexthop;

    public String nexthop() {
        return this.nexthop;
    }

    @Import(name="node", required=true)
    private String node;

    public String node() {
        return this.node;
    }

    @Import(name="offset", required=true)
    private Integer offset;

    public Integer offset() {
        return this.offset;
    }

    @Import(name="path", required=true)
    private String path;

    public String path() {
        return this.path;
    }

    @Import(name="pem", required=true)
    private Boolean pem;

    public Boolean pem() {
        return this.pem;
    }

    @Import(name="persist", required=true)
    private Boolean persist;

    public Boolean persist() {
        return this.persist;
    }

    @Import(name="pin", required=true)
    private Boolean pin;

    public Boolean pin() {
        return this.pin;
    }

    @Import(name="policy", required=true)
    private String policy;

    public String policy() {
        return this.policy;
    }

    @Import(name="pool", required=true)
    private String pool;

    public String pool() {
        return this.pool;
    }

    @Import(name="port", required=true)
    private Integer port;

    public Integer port() {
        return this.port;
    }

    @Import(name="priority", required=true)
    private String priority;

    public String priority() {
        return this.priority;
    }

    @Import(name="profile", required=true)
    private String profile;

    public String profile() {
        return this.profile;
    }

    @Import(name="protocol", required=true)
    private String protocol;

    public String protocol() {
        return this.protocol;
    }

    @Import(name="queryString", required=true)
    private String queryString;

    public String queryString() {
        return this.queryString;
    }

    @Import(name="rateclass", required=true)
    private String rateclass;

    public String rateclass() {
        return this.rateclass;
    }

    @Import(name="redirect", required=true)
    private Boolean redirect;

    public Boolean redirect() {
        return this.redirect;
    }

    @Import(name="remove", required=true)
    private Boolean remove;

    public Boolean remove() {
        return this.remove;
    }

    @Import(name="replace", required=true)
    private Boolean replace;

    public Boolean replace() {
        return this.replace;
    }

    @Import(name="request", required=true)
    private Boolean request;

    public Boolean request() {
        return this.request;
    }

    @Import(name="requestAdapt", required=true)
    private Boolean requestAdapt;

    public Boolean requestAdapt() {
        return this.requestAdapt;
    }

    @Import(name="reset", required=true)
    private Boolean reset;

    public Boolean reset() {
        return this.reset;
    }

    @Import(name="response", required=true)
    private Boolean response;

    public Boolean response() {
        return this.response;
    }

    @Import(name="responseAdapt", required=true)
    private Boolean responseAdapt;

    public Boolean responseAdapt() {
        return this.responseAdapt;
    }

    @Import(name="scheme", required=true)
    private String scheme;

    public String scheme() {
        return this.scheme;
    }

    @Import(name="script", required=true)
    private String script;

    public String script() {
        return this.script;
    }

    @Import(name="select", required=true)
    private Boolean select;

    public Boolean select() {
        return this.select;
    }

    @Import(name="serverSsl", required=true)
    private Boolean serverSsl;

    public Boolean serverSsl() {
        return this.serverSsl;
    }

    @Import(name="setVariable", required=true)
    private Boolean setVariable;

    public Boolean setVariable() {
        return this.setVariable;
    }

    @Import(name="shutdown", required=true)
    private Boolean shutdown;

    public Boolean shutdown() {
        return this.shutdown;
    }

    @Import(name="snat", required=true)
    private String snat;

    public String snat() {
        return this.snat;
    }

    @Import(name="snatpool", required=true)
    private String snatpool;

    public String snatpool() {
        return this.snatpool;
    }

    @Import(name="sourceAddress", required=true)
    private Boolean sourceAddress;

    public Boolean sourceAddress() {
        return this.sourceAddress;
    }

    @Import(name="sslClientHello", required=true)
    private Boolean sslClientHello;

    public Boolean sslClientHello() {
        return this.sslClientHello;
    }

    @Import(name="sslServerHandshake", required=true)
    private Boolean sslServerHandshake;

    public Boolean sslServerHandshake() {
        return this.sslServerHandshake;
    }

    @Import(name="sslServerHello", required=true)
    private Boolean sslServerHello;

    public Boolean sslServerHello() {
        return this.sslServerHello;
    }

    @Import(name="sslSessionId", required=true)
    private Boolean sslSessionId;

    public Boolean sslSessionId() {
        return this.sslSessionId;
    }

    @Import(name="status", required=true)
    private Integer status;

    public Integer status() {
        return this.status;
    }

    @Import(name="tcl", required=true)
    private Boolean tcl;

    public Boolean tcl() {
        return this.tcl;
    }

    @Import(name="tcpNagle", required=true)
    private Boolean tcpNagle;

    public Boolean tcpNagle() {
        return this.tcpNagle;
    }

    @Import(name="text", required=true)
    private String text;

    public String text() {
        return this.text;
    }

    @Import(name="timeout", required=true)
    private Integer timeout;

    public Integer timeout() {
        return this.timeout;
    }

    @Import(name="tmName", required=true)
    private String tmName;

    public String tmName() {
        return this.tmName;
    }

    @Import(name="uie", required=true)
    private Boolean uie;

    public Boolean uie() {
        return this.uie;
    }

    @Import(name="universal", required=true)
    private Boolean universal;

    public Boolean universal() {
        return this.universal;
    }

    @Import(name="value", required=true)
    private String value;

    public String value() {
        return this.value;
    }

    @Import(name="virtual", required=true)
    private String virtual;

    public String virtual() {
        return this.virtual;
    }

    @Import(name="vlan", required=true)
    private String vlan;

    public String vlan() {
        return this.vlan;
    }

    @Import(name="vlanId", required=true)
    private Integer vlanId;

    public Integer vlanId() {
        return this.vlanId;
    }

    @Import(name="wam", required=true)
    private Boolean wam;

    public Boolean wam() {
        return this.wam;
    }

    @Import(name="write", required=true)
    private Boolean write;

    public Boolean write() {
        return this.write;
    }

    private GetPolicyRuleAction() {}

    private GetPolicyRuleAction(GetPolicyRuleAction $) {
        this.appService = $.appService;
        this.application = $.application;
        this.asm = $.asm;
        this.avr = $.avr;
        this.cache = $.cache;
        this.carp = $.carp;
        this.category = $.category;
        this.classify = $.classify;
        this.clonePool = $.clonePool;
        this.code = $.code;
        this.compress = $.compress;
        this.connection = $.connection;
        this.content = $.content;
        this.cookieHash = $.cookieHash;
        this.cookieInsert = $.cookieInsert;
        this.cookiePassive = $.cookiePassive;
        this.cookieRewrite = $.cookieRewrite;
        this.decompress = $.decompress;
        this.defer = $.defer;
        this.destinationAddress = $.destinationAddress;
        this.disable = $.disable;
        this.domain = $.domain;
        this.enable = $.enable;
        this.expiry = $.expiry;
        this.expirySecs = $.expirySecs;
        this.expression = $.expression;
        this.extension = $.extension;
        this.facility = $.facility;
        this.forward = $.forward;
        this.fromProfile = $.fromProfile;
        this.hash = $.hash;
        this.host = $.host;
        this.http = $.http;
        this.httpBasicAuth = $.httpBasicAuth;
        this.httpCookie = $.httpCookie;
        this.httpHeader = $.httpHeader;
        this.httpHost = $.httpHost;
        this.httpReferer = $.httpReferer;
        this.httpReply = $.httpReply;
        this.httpSetCookie = $.httpSetCookie;
        this.httpUri = $.httpUri;
        this.ifile = $.ifile;
        this.insert = $.insert;
        this.internalVirtual = $.internalVirtual;
        this.ipAddress = $.ipAddress;
        this.key = $.key;
        this.l7dos = $.l7dos;
        this.length = $.length;
        this.location = $.location;
        this.log = $.log;
        this.ltmPolicy = $.ltmPolicy;
        this.member = $.member;
        this.message = $.message;
        this.netmask = $.netmask;
        this.nexthop = $.nexthop;
        this.node = $.node;
        this.offset = $.offset;
        this.path = $.path;
        this.pem = $.pem;
        this.persist = $.persist;
        this.pin = $.pin;
        this.policy = $.policy;
        this.pool = $.pool;
        this.port = $.port;
        this.priority = $.priority;
        this.profile = $.profile;
        this.protocol = $.protocol;
        this.queryString = $.queryString;
        this.rateclass = $.rateclass;
        this.redirect = $.redirect;
        this.remove = $.remove;
        this.replace = $.replace;
        this.request = $.request;
        this.requestAdapt = $.requestAdapt;
        this.reset = $.reset;
        this.response = $.response;
        this.responseAdapt = $.responseAdapt;
        this.scheme = $.scheme;
        this.script = $.script;
        this.select = $.select;
        this.serverSsl = $.serverSsl;
        this.setVariable = $.setVariable;
        this.shutdown = $.shutdown;
        this.snat = $.snat;
        this.snatpool = $.snatpool;
        this.sourceAddress = $.sourceAddress;
        this.sslClientHello = $.sslClientHello;
        this.sslServerHandshake = $.sslServerHandshake;
        this.sslServerHello = $.sslServerHello;
        this.sslSessionId = $.sslSessionId;
        this.status = $.status;
        this.tcl = $.tcl;
        this.tcpNagle = $.tcpNagle;
        this.text = $.text;
        this.timeout = $.timeout;
        this.tmName = $.tmName;
        this.uie = $.uie;
        this.universal = $.universal;
        this.value = $.value;
        this.virtual = $.virtual;
        this.vlan = $.vlan;
        this.vlanId = $.vlanId;
        this.wam = $.wam;
        this.write = $.write;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPolicyRuleAction defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPolicyRuleAction $;

        public Builder() {
            $ = new GetPolicyRuleAction();
        }

        public Builder(GetPolicyRuleAction defaults) {
            $ = new GetPolicyRuleAction(Objects.requireNonNull(defaults));
        }

        public Builder appService(String appService) {
            $.appService = appService;
            return this;
        }

        public Builder application(String application) {
            $.application = application;
            return this;
        }

        public Builder asm(Boolean asm) {
            $.asm = asm;
            return this;
        }

        public Builder avr(Boolean avr) {
            $.avr = avr;
            return this;
        }

        public Builder cache(Boolean cache) {
            $.cache = cache;
            return this;
        }

        public Builder carp(Boolean carp) {
            $.carp = carp;
            return this;
        }

        public Builder category(String category) {
            $.category = category;
            return this;
        }

        public Builder classify(Boolean classify) {
            $.classify = classify;
            return this;
        }

        public Builder clonePool(String clonePool) {
            $.clonePool = clonePool;
            return this;
        }

        public Builder code(Integer code) {
            $.code = code;
            return this;
        }

        public Builder compress(Boolean compress) {
            $.compress = compress;
            return this;
        }

        public Builder connection(Boolean connection) {
            $.connection = connection;
            return this;
        }

        public Builder content(String content) {
            $.content = content;
            return this;
        }

        public Builder cookieHash(Boolean cookieHash) {
            $.cookieHash = cookieHash;
            return this;
        }

        public Builder cookieInsert(Boolean cookieInsert) {
            $.cookieInsert = cookieInsert;
            return this;
        }

        public Builder cookiePassive(Boolean cookiePassive) {
            $.cookiePassive = cookiePassive;
            return this;
        }

        public Builder cookieRewrite(Boolean cookieRewrite) {
            $.cookieRewrite = cookieRewrite;
            return this;
        }

        public Builder decompress(Boolean decompress) {
            $.decompress = decompress;
            return this;
        }

        public Builder defer(Boolean defer) {
            $.defer = defer;
            return this;
        }

        public Builder destinationAddress(Boolean destinationAddress) {
            $.destinationAddress = destinationAddress;
            return this;
        }

        public Builder disable(Boolean disable) {
            $.disable = disable;
            return this;
        }

        public Builder domain(String domain) {
            $.domain = domain;
            return this;
        }

        public Builder enable(Boolean enable) {
            $.enable = enable;
            return this;
        }

        public Builder expiry(String expiry) {
            $.expiry = expiry;
            return this;
        }

        public Builder expirySecs(Integer expirySecs) {
            $.expirySecs = expirySecs;
            return this;
        }

        public Builder expression(String expression) {
            $.expression = expression;
            return this;
        }

        public Builder extension(String extension) {
            $.extension = extension;
            return this;
        }

        public Builder facility(String facility) {
            $.facility = facility;
            return this;
        }

        public Builder forward(@Nullable Boolean forward) {
            $.forward = forward;
            return this;
        }

        public Builder fromProfile(String fromProfile) {
            $.fromProfile = fromProfile;
            return this;
        }

        public Builder hash(Boolean hash) {
            $.hash = hash;
            return this;
        }

        public Builder host(String host) {
            $.host = host;
            return this;
        }

        public Builder http(Boolean http) {
            $.http = http;
            return this;
        }

        public Builder httpBasicAuth(Boolean httpBasicAuth) {
            $.httpBasicAuth = httpBasicAuth;
            return this;
        }

        public Builder httpCookie(Boolean httpCookie) {
            $.httpCookie = httpCookie;
            return this;
        }

        public Builder httpHeader(Boolean httpHeader) {
            $.httpHeader = httpHeader;
            return this;
        }

        public Builder httpHost(@Nullable Boolean httpHost) {
            $.httpHost = httpHost;
            return this;
        }

        public Builder httpReferer(Boolean httpReferer) {
            $.httpReferer = httpReferer;
            return this;
        }

        public Builder httpReply(Boolean httpReply) {
            $.httpReply = httpReply;
            return this;
        }

        public Builder httpSetCookie(Boolean httpSetCookie) {
            $.httpSetCookie = httpSetCookie;
            return this;
        }

        public Builder httpUri(Boolean httpUri) {
            $.httpUri = httpUri;
            return this;
        }

        public Builder ifile(String ifile) {
            $.ifile = ifile;
            return this;
        }

        public Builder insert(Boolean insert) {
            $.insert = insert;
            return this;
        }

        public Builder internalVirtual(String internalVirtual) {
            $.internalVirtual = internalVirtual;
            return this;
        }

        public Builder ipAddress(String ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        public Builder key(String key) {
            $.key = key;
            return this;
        }

        public Builder l7dos(Boolean l7dos) {
            $.l7dos = l7dos;
            return this;
        }

        public Builder length(Integer length) {
            $.length = length;
            return this;
        }

        public Builder location(String location) {
            $.location = location;
            return this;
        }

        public Builder log(Boolean log) {
            $.log = log;
            return this;
        }

        public Builder ltmPolicy(Boolean ltmPolicy) {
            $.ltmPolicy = ltmPolicy;
            return this;
        }

        public Builder member(String member) {
            $.member = member;
            return this;
        }

        public Builder message(String message) {
            $.message = message;
            return this;
        }

        public Builder netmask(String netmask) {
            $.netmask = netmask;
            return this;
        }

        public Builder nexthop(String nexthop) {
            $.nexthop = nexthop;
            return this;
        }

        public Builder node(String node) {
            $.node = node;
            return this;
        }

        public Builder offset(Integer offset) {
            $.offset = offset;
            return this;
        }

        public Builder path(String path) {
            $.path = path;
            return this;
        }

        public Builder pem(Boolean pem) {
            $.pem = pem;
            return this;
        }

        public Builder persist(Boolean persist) {
            $.persist = persist;
            return this;
        }

        public Builder pin(Boolean pin) {
            $.pin = pin;
            return this;
        }

        public Builder policy(String policy) {
            $.policy = policy;
            return this;
        }

        public Builder pool(String pool) {
            $.pool = pool;
            return this;
        }

        public Builder port(Integer port) {
            $.port = port;
            return this;
        }

        public Builder priority(String priority) {
            $.priority = priority;
            return this;
        }

        public Builder profile(String profile) {
            $.profile = profile;
            return this;
        }

        public Builder protocol(String protocol) {
            $.protocol = protocol;
            return this;
        }

        public Builder queryString(String queryString) {
            $.queryString = queryString;
            return this;
        }

        public Builder rateclass(String rateclass) {
            $.rateclass = rateclass;
            return this;
        }

        public Builder redirect(Boolean redirect) {
            $.redirect = redirect;
            return this;
        }

        public Builder remove(Boolean remove) {
            $.remove = remove;
            return this;
        }

        public Builder replace(Boolean replace) {
            $.replace = replace;
            return this;
        }

        public Builder request(Boolean request) {
            $.request = request;
            return this;
        }

        public Builder requestAdapt(Boolean requestAdapt) {
            $.requestAdapt = requestAdapt;
            return this;
        }

        public Builder reset(Boolean reset) {
            $.reset = reset;
            return this;
        }

        public Builder response(Boolean response) {
            $.response = response;
            return this;
        }

        public Builder responseAdapt(Boolean responseAdapt) {
            $.responseAdapt = responseAdapt;
            return this;
        }

        public Builder scheme(String scheme) {
            $.scheme = scheme;
            return this;
        }

        public Builder script(String script) {
            $.script = script;
            return this;
        }

        public Builder select(Boolean select) {
            $.select = select;
            return this;
        }

        public Builder serverSsl(Boolean serverSsl) {
            $.serverSsl = serverSsl;
            return this;
        }

        public Builder setVariable(Boolean setVariable) {
            $.setVariable = setVariable;
            return this;
        }

        public Builder shutdown(Boolean shutdown) {
            $.shutdown = shutdown;
            return this;
        }

        public Builder snat(String snat) {
            $.snat = snat;
            return this;
        }

        public Builder snatpool(String snatpool) {
            $.snatpool = snatpool;
            return this;
        }

        public Builder sourceAddress(Boolean sourceAddress) {
            $.sourceAddress = sourceAddress;
            return this;
        }

        public Builder sslClientHello(Boolean sslClientHello) {
            $.sslClientHello = sslClientHello;
            return this;
        }

        public Builder sslServerHandshake(Boolean sslServerHandshake) {
            $.sslServerHandshake = sslServerHandshake;
            return this;
        }

        public Builder sslServerHello(Boolean sslServerHello) {
            $.sslServerHello = sslServerHello;
            return this;
        }

        public Builder sslSessionId(Boolean sslSessionId) {
            $.sslSessionId = sslSessionId;
            return this;
        }

        public Builder status(Integer status) {
            $.status = status;
            return this;
        }

        public Builder tcl(Boolean tcl) {
            $.tcl = tcl;
            return this;
        }

        public Builder tcpNagle(Boolean tcpNagle) {
            $.tcpNagle = tcpNagle;
            return this;
        }

        public Builder text(String text) {
            $.text = text;
            return this;
        }

        public Builder timeout(Integer timeout) {
            $.timeout = timeout;
            return this;
        }

        public Builder tmName(String tmName) {
            $.tmName = tmName;
            return this;
        }

        public Builder uie(Boolean uie) {
            $.uie = uie;
            return this;
        }

        public Builder universal(Boolean universal) {
            $.universal = universal;
            return this;
        }

        public Builder value(String value) {
            $.value = value;
            return this;
        }

        public Builder virtual(String virtual) {
            $.virtual = virtual;
            return this;
        }

        public Builder vlan(String vlan) {
            $.vlan = vlan;
            return this;
        }

        public Builder vlanId(Integer vlanId) {
            $.vlanId = vlanId;
            return this;
        }

        public Builder wam(Boolean wam) {
            $.wam = wam;
            return this;
        }

        public Builder write(Boolean write) {
            $.write = write;
            return this;
        }

        public GetPolicyRuleAction build() {
            $.appService = Objects.requireNonNull($.appService, "expected parameter 'appService' to be non-null");
            $.application = Objects.requireNonNull($.application, "expected parameter 'application' to be non-null");
            $.asm = Objects.requireNonNull($.asm, "expected parameter 'asm' to be non-null");
            $.avr = Objects.requireNonNull($.avr, "expected parameter 'avr' to be non-null");
            $.cache = Objects.requireNonNull($.cache, "expected parameter 'cache' to be non-null");
            $.carp = Objects.requireNonNull($.carp, "expected parameter 'carp' to be non-null");
            $.category = Objects.requireNonNull($.category, "expected parameter 'category' to be non-null");
            $.classify = Objects.requireNonNull($.classify, "expected parameter 'classify' to be non-null");
            $.clonePool = Objects.requireNonNull($.clonePool, "expected parameter 'clonePool' to be non-null");
            $.code = Objects.requireNonNull($.code, "expected parameter 'code' to be non-null");
            $.compress = Objects.requireNonNull($.compress, "expected parameter 'compress' to be non-null");
            $.connection = Objects.requireNonNull($.connection, "expected parameter 'connection' to be non-null");
            $.content = Objects.requireNonNull($.content, "expected parameter 'content' to be non-null");
            $.cookieHash = Objects.requireNonNull($.cookieHash, "expected parameter 'cookieHash' to be non-null");
            $.cookieInsert = Objects.requireNonNull($.cookieInsert, "expected parameter 'cookieInsert' to be non-null");
            $.cookiePassive = Objects.requireNonNull($.cookiePassive, "expected parameter 'cookiePassive' to be non-null");
            $.cookieRewrite = Objects.requireNonNull($.cookieRewrite, "expected parameter 'cookieRewrite' to be non-null");
            $.decompress = Objects.requireNonNull($.decompress, "expected parameter 'decompress' to be non-null");
            $.defer = Objects.requireNonNull($.defer, "expected parameter 'defer' to be non-null");
            $.destinationAddress = Objects.requireNonNull($.destinationAddress, "expected parameter 'destinationAddress' to be non-null");
            $.disable = Objects.requireNonNull($.disable, "expected parameter 'disable' to be non-null");
            $.domain = Objects.requireNonNull($.domain, "expected parameter 'domain' to be non-null");
            $.enable = Objects.requireNonNull($.enable, "expected parameter 'enable' to be non-null");
            $.expiry = Objects.requireNonNull($.expiry, "expected parameter 'expiry' to be non-null");
            $.expirySecs = Objects.requireNonNull($.expirySecs, "expected parameter 'expirySecs' to be non-null");
            $.expression = Objects.requireNonNull($.expression, "expected parameter 'expression' to be non-null");
            $.extension = Objects.requireNonNull($.extension, "expected parameter 'extension' to be non-null");
            $.facility = Objects.requireNonNull($.facility, "expected parameter 'facility' to be non-null");
            $.fromProfile = Objects.requireNonNull($.fromProfile, "expected parameter 'fromProfile' to be non-null");
            $.hash = Objects.requireNonNull($.hash, "expected parameter 'hash' to be non-null");
            $.host = Objects.requireNonNull($.host, "expected parameter 'host' to be non-null");
            $.http = Objects.requireNonNull($.http, "expected parameter 'http' to be non-null");
            $.httpBasicAuth = Objects.requireNonNull($.httpBasicAuth, "expected parameter 'httpBasicAuth' to be non-null");
            $.httpCookie = Objects.requireNonNull($.httpCookie, "expected parameter 'httpCookie' to be non-null");
            $.httpHeader = Objects.requireNonNull($.httpHeader, "expected parameter 'httpHeader' to be non-null");
            $.httpReferer = Objects.requireNonNull($.httpReferer, "expected parameter 'httpReferer' to be non-null");
            $.httpReply = Objects.requireNonNull($.httpReply, "expected parameter 'httpReply' to be non-null");
            $.httpSetCookie = Objects.requireNonNull($.httpSetCookie, "expected parameter 'httpSetCookie' to be non-null");
            $.httpUri = Objects.requireNonNull($.httpUri, "expected parameter 'httpUri' to be non-null");
            $.ifile = Objects.requireNonNull($.ifile, "expected parameter 'ifile' to be non-null");
            $.insert = Objects.requireNonNull($.insert, "expected parameter 'insert' to be non-null");
            $.internalVirtual = Objects.requireNonNull($.internalVirtual, "expected parameter 'internalVirtual' to be non-null");
            $.ipAddress = Objects.requireNonNull($.ipAddress, "expected parameter 'ipAddress' to be non-null");
            $.key = Objects.requireNonNull($.key, "expected parameter 'key' to be non-null");
            $.l7dos = Objects.requireNonNull($.l7dos, "expected parameter 'l7dos' to be non-null");
            $.length = Objects.requireNonNull($.length, "expected parameter 'length' to be non-null");
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            $.log = Objects.requireNonNull($.log, "expected parameter 'log' to be non-null");
            $.ltmPolicy = Objects.requireNonNull($.ltmPolicy, "expected parameter 'ltmPolicy' to be non-null");
            $.member = Objects.requireNonNull($.member, "expected parameter 'member' to be non-null");
            $.message = Objects.requireNonNull($.message, "expected parameter 'message' to be non-null");
            $.netmask = Objects.requireNonNull($.netmask, "expected parameter 'netmask' to be non-null");
            $.nexthop = Objects.requireNonNull($.nexthop, "expected parameter 'nexthop' to be non-null");
            $.node = Objects.requireNonNull($.node, "expected parameter 'node' to be non-null");
            $.offset = Objects.requireNonNull($.offset, "expected parameter 'offset' to be non-null");
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            $.pem = Objects.requireNonNull($.pem, "expected parameter 'pem' to be non-null");
            $.persist = Objects.requireNonNull($.persist, "expected parameter 'persist' to be non-null");
            $.pin = Objects.requireNonNull($.pin, "expected parameter 'pin' to be non-null");
            $.policy = Objects.requireNonNull($.policy, "expected parameter 'policy' to be non-null");
            $.pool = Objects.requireNonNull($.pool, "expected parameter 'pool' to be non-null");
            $.port = Objects.requireNonNull($.port, "expected parameter 'port' to be non-null");
            $.priority = Objects.requireNonNull($.priority, "expected parameter 'priority' to be non-null");
            $.profile = Objects.requireNonNull($.profile, "expected parameter 'profile' to be non-null");
            $.protocol = Objects.requireNonNull($.protocol, "expected parameter 'protocol' to be non-null");
            $.queryString = Objects.requireNonNull($.queryString, "expected parameter 'queryString' to be non-null");
            $.rateclass = Objects.requireNonNull($.rateclass, "expected parameter 'rateclass' to be non-null");
            $.redirect = Objects.requireNonNull($.redirect, "expected parameter 'redirect' to be non-null");
            $.remove = Objects.requireNonNull($.remove, "expected parameter 'remove' to be non-null");
            $.replace = Objects.requireNonNull($.replace, "expected parameter 'replace' to be non-null");
            $.request = Objects.requireNonNull($.request, "expected parameter 'request' to be non-null");
            $.requestAdapt = Objects.requireNonNull($.requestAdapt, "expected parameter 'requestAdapt' to be non-null");
            $.reset = Objects.requireNonNull($.reset, "expected parameter 'reset' to be non-null");
            $.response = Objects.requireNonNull($.response, "expected parameter 'response' to be non-null");
            $.responseAdapt = Objects.requireNonNull($.responseAdapt, "expected parameter 'responseAdapt' to be non-null");
            $.scheme = Objects.requireNonNull($.scheme, "expected parameter 'scheme' to be non-null");
            $.script = Objects.requireNonNull($.script, "expected parameter 'script' to be non-null");
            $.select = Objects.requireNonNull($.select, "expected parameter 'select' to be non-null");
            $.serverSsl = Objects.requireNonNull($.serverSsl, "expected parameter 'serverSsl' to be non-null");
            $.setVariable = Objects.requireNonNull($.setVariable, "expected parameter 'setVariable' to be non-null");
            $.shutdown = Objects.requireNonNull($.shutdown, "expected parameter 'shutdown' to be non-null");
            $.snat = Objects.requireNonNull($.snat, "expected parameter 'snat' to be non-null");
            $.snatpool = Objects.requireNonNull($.snatpool, "expected parameter 'snatpool' to be non-null");
            $.sourceAddress = Objects.requireNonNull($.sourceAddress, "expected parameter 'sourceAddress' to be non-null");
            $.sslClientHello = Objects.requireNonNull($.sslClientHello, "expected parameter 'sslClientHello' to be non-null");
            $.sslServerHandshake = Objects.requireNonNull($.sslServerHandshake, "expected parameter 'sslServerHandshake' to be non-null");
            $.sslServerHello = Objects.requireNonNull($.sslServerHello, "expected parameter 'sslServerHello' to be non-null");
            $.sslSessionId = Objects.requireNonNull($.sslSessionId, "expected parameter 'sslSessionId' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            $.tcl = Objects.requireNonNull($.tcl, "expected parameter 'tcl' to be non-null");
            $.tcpNagle = Objects.requireNonNull($.tcpNagle, "expected parameter 'tcpNagle' to be non-null");
            $.text = Objects.requireNonNull($.text, "expected parameter 'text' to be non-null");
            $.timeout = Objects.requireNonNull($.timeout, "expected parameter 'timeout' to be non-null");
            $.tmName = Objects.requireNonNull($.tmName, "expected parameter 'tmName' to be non-null");
            $.uie = Objects.requireNonNull($.uie, "expected parameter 'uie' to be non-null");
            $.universal = Objects.requireNonNull($.universal, "expected parameter 'universal' to be non-null");
            $.value = Objects.requireNonNull($.value, "expected parameter 'value' to be non-null");
            $.virtual = Objects.requireNonNull($.virtual, "expected parameter 'virtual' to be non-null");
            $.vlan = Objects.requireNonNull($.vlan, "expected parameter 'vlan' to be non-null");
            $.vlanId = Objects.requireNonNull($.vlanId, "expected parameter 'vlanId' to be non-null");
            $.wam = Objects.requireNonNull($.wam, "expected parameter 'wam' to be non-null");
            $.write = Objects.requireNonNull($.write, "expected parameter 'write' to be non-null");
            return $;
        }
    }

}
