// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.f5bigip.inputs.WafPolicyFileTypeArgs;
import com.pulumi.f5bigip.inputs.WafPolicyGraphqlProfileArgs;
import com.pulumi.f5bigip.inputs.WafPolicyHostNameArgs;
import com.pulumi.f5bigip.inputs.WafPolicyIpExceptionArgs;
import com.pulumi.f5bigip.inputs.WafPolicyPolicyBuilderArgs;
import com.pulumi.f5bigip.inputs.WafPolicySignaturesSettingArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WafPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final WafPolicyArgs Empty = new WafPolicyArgs();

    /**
     * The character encoding for the web application. The character encoding determines how the policy processes the character sets. The default is `utf-8`
     * 
     */
    @Import(name="applicationLanguage")
    private @Nullable Output<String> applicationLanguage;

    /**
     * @return The character encoding for the web application. The character encoding determines how the policy processes the character sets. The default is `utf-8`
     * 
     */
    public Optional<Output<String>> applicationLanguage() {
        return Optional.ofNullable(this.applicationLanguage);
    }

    /**
     * Specifies whether the security policy treats microservice URLs, file types, URLs, and parameters as case sensitive or not. When this setting is enabled, the system stores these security policy elements in lowercase in the security policy configuration
     * 
     */
    @Import(name="caseInsensitive")
    private @Nullable Output<Boolean> caseInsensitive;

    /**
     * @return Specifies whether the security policy treats microservice URLs, file types, URLs, and parameters as case sensitive or not. When this setting is enabled, the system stores these security policy elements in lowercase in the security policy configuration
     * 
     */
    public Optional<Output<Boolean>> caseInsensitive() {
        return Optional.ofNullable(this.caseInsensitive);
    }

    /**
     * Specifies the description of the policy.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Specifies the description of the policy.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Passive Mode allows the policy to be associated with a Performance L4 Virtual Server (using a FastL4 profile). With FastL4, traffic is analyzed but is not modified in any way.
     * 
     */
    @Import(name="enablePassivemode")
    private @Nullable Output<Boolean> enablePassivemode;

    /**
     * @return Passive Mode allows the policy to be associated with a Performance L4 Virtual Server (using a FastL4 profile). With FastL4, traffic is analyzed but is not modified in any way.
     * 
     */
    public Optional<Output<Boolean>> enablePassivemode() {
        return Optional.ofNullable(this.enablePassivemode);
    }

    /**
     * How the system processes a request that triggers a security policy violation
     * 
     */
    @Import(name="enforcementMode")
    private @Nullable Output<String> enforcementMode;

    /**
     * @return How the system processes a request that triggers a security policy violation
     * 
     */
    public Optional<Output<String>> enforcementMode() {
        return Optional.ofNullable(this.enforcementMode);
    }

    /**
     * `file_types` takes list of file-types options to be used for policy builder.
     * See file types below for more details.
     * 
     */
    @Import(name="fileTypes")
    private @Nullable Output<List<WafPolicyFileTypeArgs>> fileTypes;

    /**
     * @return `file_types` takes list of file-types options to be used for policy builder.
     * See file types below for more details.
     * 
     */
    public Optional<Output<List<WafPolicyFileTypeArgs>>> fileTypes() {
        return Optional.ofNullable(this.fileTypes);
    }

    /**
     * `graphql_profiles` takes list of graphql profile options to be used for policy builder.
     * See graphql profiles below for more details.
     * 
     */
    @Import(name="graphqlProfiles")
    private @Nullable Output<List<WafPolicyGraphqlProfileArgs>> graphqlProfiles;

    /**
     * @return `graphql_profiles` takes list of graphql profile options to be used for policy builder.
     * See graphql profiles below for more details.
     * 
     */
    public Optional<Output<List<WafPolicyGraphqlProfileArgs>>> graphqlProfiles() {
        return Optional.ofNullable(this.graphqlProfiles);
    }

    /**
     * specify the list of host name that is used to access the application
     * 
     */
    @Import(name="hostNames")
    private @Nullable Output<List<WafPolicyHostNameArgs>> hostNames;

    /**
     * @return specify the list of host name that is used to access the application
     * 
     */
    public Optional<Output<List<WafPolicyHostNameArgs>>> hostNames() {
        return Optional.ofNullable(this.hostNames);
    }

    /**
     * `ip_exceptions` takes list of IP address exception,An IP address exception is an IP address that you want the system to treat in a specific way for a security policy.For example, you can specify IP addresses from which the system should always trust traffic.
     * See IP Exceptions below for more details.
     * 
     */
    @Import(name="ipExceptions")
    private @Nullable Output<List<WafPolicyIpExceptionArgs>> ipExceptions;

    /**
     * @return `ip_exceptions` takes list of IP address exception,An IP address exception is an IP address that you want the system to treat in a specific way for a security policy.For example, you can specify IP addresses from which the system should always trust traffic.
     * See IP Exceptions below for more details.
     * 
     */
    public Optional<Output<List<WafPolicyIpExceptionArgs>>> ipExceptions() {
        return Optional.ofNullable(this.ipExceptions);
    }

    /**
     * the modifications section includes actions that modify the declarative policy as it is defined in the adjustments section. The modifications section is updated manually, with the changes generally driven by the learning suggestions provided by the BIG-IP.
     * 
     */
    @Import(name="modifications")
    private @Nullable Output<List<String>> modifications;

    /**
     * @return the modifications section includes actions that modify the declarative policy as it is defined in the adjustments section. The modifications section is updated manually, with the changes generally driven by the learning suggestions provided by the BIG-IP.
     * 
     */
    public Optional<Output<List<String>>> modifications() {
        return Optional.ofNullable(this.modifications);
    }

    /**
     * The unique user-given name of the policy. Policy names cannot contain spaces or special characters. Allowed characters are a-z, A-Z, 0-9, dot, dash (-), colon (:) and underscore (_).
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The unique user-given name of the policy. Policy names cannot contain spaces or special characters. Allowed characters are a-z, A-Z, 0-9, dot, dash (-), colon (:) and underscore (_).
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * This section defines the Link for open api files on the policy.
     * 
     */
    @Import(name="openApiFiles")
    private @Nullable Output<List<String>> openApiFiles;

    /**
     * @return This section defines the Link for open api files on the policy.
     * 
     */
    public Optional<Output<List<String>>> openApiFiles() {
        return Optional.ofNullable(this.openApiFiles);
    }

    /**
     * This section defines parameters that the security policy permits in requests.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<List<String>> parameters;

    /**
     * @return This section defines parameters that the security policy permits in requests.
     * 
     */
    public Optional<Output<List<String>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * Specifies the partition of the policy. Default is `Common`
     * 
     */
    @Import(name="partition")
    private @Nullable Output<String> partition;

    /**
     * @return Specifies the partition of the policy. Default is `Common`
     * 
     */
    public Optional<Output<String>> partition() {
        return Optional.ofNullable(this.partition);
    }

    /**
     * `policy_builder` block will provide `learning_mode` options to be used for policy builder.
     * See policy builder below for more details.
     * 
     */
    @Import(name="policyBuilders")
    private @Nullable Output<List<WafPolicyPolicyBuilderArgs>> policyBuilders;

    /**
     * @return `policy_builder` block will provide `learning_mode` options to be used for policy builder.
     * See policy builder below for more details.
     * 
     */
    public Optional<Output<List<WafPolicyPolicyBuilderArgs>>> policyBuilders() {
        return Optional.ofNullable(this.policyBuilders);
    }

    /**
     * The id of the A.WAF Policy as it would be calculated on the BIG-IP.
     * 
     */
    @Import(name="policyId")
    private @Nullable Output<String> policyId;

    /**
     * @return The id of the A.WAF Policy as it would be calculated on the BIG-IP.
     * 
     */
    public Optional<Output<String>> policyId() {
        return Optional.ofNullable(this.policyId);
    }

    /**
     * The payload of the WAF Policy to be used for IMPORT on to BIG-IP.
     * 
     */
    @Import(name="policyImportJson")
    private @Nullable Output<String> policyImportJson;

    /**
     * @return The payload of the WAF Policy to be used for IMPORT on to BIG-IP.
     * 
     */
    public Optional<Output<String>> policyImportJson() {
        return Optional.ofNullable(this.policyImportJson);
    }

    /**
     * When creating a security policy, you can determine whether a security policy differentiates between HTTP and HTTPS URLs. If enabled, the security policy differentiates between HTTP and HTTPS URLs. If disabled, the security policy configures URLs without specifying a specific protocol. This is useful for applications that behave the same for HTTP and HTTPS, and it keeps the security policy from including the same URL twice.
     * 
     */
    @Import(name="protocolIndependent")
    private @Nullable Output<Boolean> protocolIndependent;

    /**
     * @return When creating a security policy, you can determine whether a security policy differentiates between HTTP and HTTPS URLs. If enabled, the security policy differentiates between HTTP and HTTPS URLs. If disabled, the security policy configures URLs without specifying a specific protocol. This is useful for applications that behave the same for HTTP and HTTPS, and it keeps the security policy from including the same URL twice.
     * 
     */
    public Optional<Output<Boolean>> protocolIndependent() {
        return Optional.ofNullable(this.protocolIndependent);
    }

    /**
     * The server technology is a server-side application, framework, web server or operating system type that is configured in the policy in order to adapt the policy to the checks needed for the respective technology.
     * 
     */
    @Import(name="serverTechnologies")
    private @Nullable Output<List<String>> serverTechnologies;

    /**
     * @return The server technology is a server-side application, framework, web server or operating system type that is configured in the policy in order to adapt the policy to the checks needed for the respective technology.
     * 
     */
    public Optional<Output<List<String>>> serverTechnologies() {
        return Optional.ofNullable(this.serverTechnologies);
    }

    /**
     * Defines behavior when signatures found within a signature-set are detected in a request. Settings are culmulative, so if a signature is found in any set with block enabled, that signature will have block enabled.
     * 
     */
    @Import(name="signatureSets")
    private @Nullable Output<List<String>> signatureSets;

    /**
     * @return Defines behavior when signatures found within a signature-set are detected in a request. Settings are culmulative, so if a signature is found in any set with block enabled, that signature will have block enabled.
     * 
     */
    public Optional<Output<List<String>>> signatureSets() {
        return Optional.ofNullable(this.signatureSets);
    }

    /**
     * This section defines the properties of a signature on the policy.
     * 
     */
    @Import(name="signatures")
    private @Nullable Output<List<String>> signatures;

    /**
     * @return This section defines the properties of a signature on the policy.
     * 
     */
    public Optional<Output<List<String>>> signatures() {
        return Optional.ofNullable(this.signatures);
    }

    /**
     * bulk signature setting
     * 
     */
    @Import(name="signaturesSettings")
    private @Nullable Output<List<WafPolicySignaturesSettingArgs>> signaturesSettings;

    /**
     * @return bulk signature setting
     * 
     */
    public Optional<Output<List<WafPolicySignaturesSettingArgs>>> signaturesSettings() {
        return Optional.ofNullable(this.signaturesSettings);
    }

    /**
     * Specifies the Link of the template used for the policy creation.
     * 
     */
    @Import(name="templateLink")
    private @Nullable Output<String> templateLink;

    /**
     * @return Specifies the Link of the template used for the policy creation.
     * 
     */
    public Optional<Output<String>> templateLink() {
        return Optional.ofNullable(this.templateLink);
    }

    /**
     * Specifies the name of the template used for the policy creation.
     * 
     */
    @Import(name="templateName", required=true)
    private Output<String> templateName;

    /**
     * @return Specifies the name of the template used for the policy creation.
     * 
     */
    public Output<String> templateName() {
        return this.templateName;
    }

    /**
     * The type of policy you want to create. The default policy type is `security`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of policy you want to create. The default policy type is `security`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * In a security policy, you can manually specify the HTTP URLs that are allowed (or disallowed) in traffic to the web application being protected. If you are using automatic policy building (and the policy includes learning URLs), the system can determine which URLs to add, based on legitimate traffic.
     * 
     */
    @Import(name="urls")
    private @Nullable Output<List<String>> urls;

    /**
     * @return In a security policy, you can manually specify the HTTP URLs that are allowed (or disallowed) in traffic to the web application being protected. If you are using automatic policy building (and the policy includes learning URLs), the system can determine which URLs to add, based on legitimate traffic.
     * 
     */
    public Optional<Output<List<String>>> urls() {
        return Optional.ofNullable(this.urls);
    }

    private WafPolicyArgs() {}

    private WafPolicyArgs(WafPolicyArgs $) {
        this.applicationLanguage = $.applicationLanguage;
        this.caseInsensitive = $.caseInsensitive;
        this.description = $.description;
        this.enablePassivemode = $.enablePassivemode;
        this.enforcementMode = $.enforcementMode;
        this.fileTypes = $.fileTypes;
        this.graphqlProfiles = $.graphqlProfiles;
        this.hostNames = $.hostNames;
        this.ipExceptions = $.ipExceptions;
        this.modifications = $.modifications;
        this.name = $.name;
        this.openApiFiles = $.openApiFiles;
        this.parameters = $.parameters;
        this.partition = $.partition;
        this.policyBuilders = $.policyBuilders;
        this.policyId = $.policyId;
        this.policyImportJson = $.policyImportJson;
        this.protocolIndependent = $.protocolIndependent;
        this.serverTechnologies = $.serverTechnologies;
        this.signatureSets = $.signatureSets;
        this.signatures = $.signatures;
        this.signaturesSettings = $.signaturesSettings;
        this.templateLink = $.templateLink;
        this.templateName = $.templateName;
        this.type = $.type;
        this.urls = $.urls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WafPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WafPolicyArgs $;

        public Builder() {
            $ = new WafPolicyArgs();
        }

        public Builder(WafPolicyArgs defaults) {
            $ = new WafPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationLanguage The character encoding for the web application. The character encoding determines how the policy processes the character sets. The default is `utf-8`
         * 
         * @return builder
         * 
         */
        public Builder applicationLanguage(@Nullable Output<String> applicationLanguage) {
            $.applicationLanguage = applicationLanguage;
            return this;
        }

        /**
         * @param applicationLanguage The character encoding for the web application. The character encoding determines how the policy processes the character sets. The default is `utf-8`
         * 
         * @return builder
         * 
         */
        public Builder applicationLanguage(String applicationLanguage) {
            return applicationLanguage(Output.of(applicationLanguage));
        }

        /**
         * @param caseInsensitive Specifies whether the security policy treats microservice URLs, file types, URLs, and parameters as case sensitive or not. When this setting is enabled, the system stores these security policy elements in lowercase in the security policy configuration
         * 
         * @return builder
         * 
         */
        public Builder caseInsensitive(@Nullable Output<Boolean> caseInsensitive) {
            $.caseInsensitive = caseInsensitive;
            return this;
        }

        /**
         * @param caseInsensitive Specifies whether the security policy treats microservice URLs, file types, URLs, and parameters as case sensitive or not. When this setting is enabled, the system stores these security policy elements in lowercase in the security policy configuration
         * 
         * @return builder
         * 
         */
        public Builder caseInsensitive(Boolean caseInsensitive) {
            return caseInsensitive(Output.of(caseInsensitive));
        }

        /**
         * @param description Specifies the description of the policy.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Specifies the description of the policy.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enablePassivemode Passive Mode allows the policy to be associated with a Performance L4 Virtual Server (using a FastL4 profile). With FastL4, traffic is analyzed but is not modified in any way.
         * 
         * @return builder
         * 
         */
        public Builder enablePassivemode(@Nullable Output<Boolean> enablePassivemode) {
            $.enablePassivemode = enablePassivemode;
            return this;
        }

        /**
         * @param enablePassivemode Passive Mode allows the policy to be associated with a Performance L4 Virtual Server (using a FastL4 profile). With FastL4, traffic is analyzed but is not modified in any way.
         * 
         * @return builder
         * 
         */
        public Builder enablePassivemode(Boolean enablePassivemode) {
            return enablePassivemode(Output.of(enablePassivemode));
        }

        /**
         * @param enforcementMode How the system processes a request that triggers a security policy violation
         * 
         * @return builder
         * 
         */
        public Builder enforcementMode(@Nullable Output<String> enforcementMode) {
            $.enforcementMode = enforcementMode;
            return this;
        }

        /**
         * @param enforcementMode How the system processes a request that triggers a security policy violation
         * 
         * @return builder
         * 
         */
        public Builder enforcementMode(String enforcementMode) {
            return enforcementMode(Output.of(enforcementMode));
        }

        /**
         * @param fileTypes `file_types` takes list of file-types options to be used for policy builder.
         * See file types below for more details.
         * 
         * @return builder
         * 
         */
        public Builder fileTypes(@Nullable Output<List<WafPolicyFileTypeArgs>> fileTypes) {
            $.fileTypes = fileTypes;
            return this;
        }

        /**
         * @param fileTypes `file_types` takes list of file-types options to be used for policy builder.
         * See file types below for more details.
         * 
         * @return builder
         * 
         */
        public Builder fileTypes(List<WafPolicyFileTypeArgs> fileTypes) {
            return fileTypes(Output.of(fileTypes));
        }

        /**
         * @param fileTypes `file_types` takes list of file-types options to be used for policy builder.
         * See file types below for more details.
         * 
         * @return builder
         * 
         */
        public Builder fileTypes(WafPolicyFileTypeArgs... fileTypes) {
            return fileTypes(List.of(fileTypes));
        }

        /**
         * @param graphqlProfiles `graphql_profiles` takes list of graphql profile options to be used for policy builder.
         * See graphql profiles below for more details.
         * 
         * @return builder
         * 
         */
        public Builder graphqlProfiles(@Nullable Output<List<WafPolicyGraphqlProfileArgs>> graphqlProfiles) {
            $.graphqlProfiles = graphqlProfiles;
            return this;
        }

        /**
         * @param graphqlProfiles `graphql_profiles` takes list of graphql profile options to be used for policy builder.
         * See graphql profiles below for more details.
         * 
         * @return builder
         * 
         */
        public Builder graphqlProfiles(List<WafPolicyGraphqlProfileArgs> graphqlProfiles) {
            return graphqlProfiles(Output.of(graphqlProfiles));
        }

        /**
         * @param graphqlProfiles `graphql_profiles` takes list of graphql profile options to be used for policy builder.
         * See graphql profiles below for more details.
         * 
         * @return builder
         * 
         */
        public Builder graphqlProfiles(WafPolicyGraphqlProfileArgs... graphqlProfiles) {
            return graphqlProfiles(List.of(graphqlProfiles));
        }

        /**
         * @param hostNames specify the list of host name that is used to access the application
         * 
         * @return builder
         * 
         */
        public Builder hostNames(@Nullable Output<List<WafPolicyHostNameArgs>> hostNames) {
            $.hostNames = hostNames;
            return this;
        }

        /**
         * @param hostNames specify the list of host name that is used to access the application
         * 
         * @return builder
         * 
         */
        public Builder hostNames(List<WafPolicyHostNameArgs> hostNames) {
            return hostNames(Output.of(hostNames));
        }

        /**
         * @param hostNames specify the list of host name that is used to access the application
         * 
         * @return builder
         * 
         */
        public Builder hostNames(WafPolicyHostNameArgs... hostNames) {
            return hostNames(List.of(hostNames));
        }

        /**
         * @param ipExceptions `ip_exceptions` takes list of IP address exception,An IP address exception is an IP address that you want the system to treat in a specific way for a security policy.For example, you can specify IP addresses from which the system should always trust traffic.
         * See IP Exceptions below for more details.
         * 
         * @return builder
         * 
         */
        public Builder ipExceptions(@Nullable Output<List<WafPolicyIpExceptionArgs>> ipExceptions) {
            $.ipExceptions = ipExceptions;
            return this;
        }

        /**
         * @param ipExceptions `ip_exceptions` takes list of IP address exception,An IP address exception is an IP address that you want the system to treat in a specific way for a security policy.For example, you can specify IP addresses from which the system should always trust traffic.
         * See IP Exceptions below for more details.
         * 
         * @return builder
         * 
         */
        public Builder ipExceptions(List<WafPolicyIpExceptionArgs> ipExceptions) {
            return ipExceptions(Output.of(ipExceptions));
        }

        /**
         * @param ipExceptions `ip_exceptions` takes list of IP address exception,An IP address exception is an IP address that you want the system to treat in a specific way for a security policy.For example, you can specify IP addresses from which the system should always trust traffic.
         * See IP Exceptions below for more details.
         * 
         * @return builder
         * 
         */
        public Builder ipExceptions(WafPolicyIpExceptionArgs... ipExceptions) {
            return ipExceptions(List.of(ipExceptions));
        }

        /**
         * @param modifications the modifications section includes actions that modify the declarative policy as it is defined in the adjustments section. The modifications section is updated manually, with the changes generally driven by the learning suggestions provided by the BIG-IP.
         * 
         * @return builder
         * 
         */
        public Builder modifications(@Nullable Output<List<String>> modifications) {
            $.modifications = modifications;
            return this;
        }

        /**
         * @param modifications the modifications section includes actions that modify the declarative policy as it is defined in the adjustments section. The modifications section is updated manually, with the changes generally driven by the learning suggestions provided by the BIG-IP.
         * 
         * @return builder
         * 
         */
        public Builder modifications(List<String> modifications) {
            return modifications(Output.of(modifications));
        }

        /**
         * @param modifications the modifications section includes actions that modify the declarative policy as it is defined in the adjustments section. The modifications section is updated manually, with the changes generally driven by the learning suggestions provided by the BIG-IP.
         * 
         * @return builder
         * 
         */
        public Builder modifications(String... modifications) {
            return modifications(List.of(modifications));
        }

        /**
         * @param name The unique user-given name of the policy. Policy names cannot contain spaces or special characters. Allowed characters are a-z, A-Z, 0-9, dot, dash (-), colon (:) and underscore (_).
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The unique user-given name of the policy. Policy names cannot contain spaces or special characters. Allowed characters are a-z, A-Z, 0-9, dot, dash (-), colon (:) and underscore (_).
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param openApiFiles This section defines the Link for open api files on the policy.
         * 
         * @return builder
         * 
         */
        public Builder openApiFiles(@Nullable Output<List<String>> openApiFiles) {
            $.openApiFiles = openApiFiles;
            return this;
        }

        /**
         * @param openApiFiles This section defines the Link for open api files on the policy.
         * 
         * @return builder
         * 
         */
        public Builder openApiFiles(List<String> openApiFiles) {
            return openApiFiles(Output.of(openApiFiles));
        }

        /**
         * @param openApiFiles This section defines the Link for open api files on the policy.
         * 
         * @return builder
         * 
         */
        public Builder openApiFiles(String... openApiFiles) {
            return openApiFiles(List.of(openApiFiles));
        }

        /**
         * @param parameters This section defines parameters that the security policy permits in requests.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<List<String>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters This section defines parameters that the security policy permits in requests.
         * 
         * @return builder
         * 
         */
        public Builder parameters(List<String> parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param parameters This section defines parameters that the security policy permits in requests.
         * 
         * @return builder
         * 
         */
        public Builder parameters(String... parameters) {
            return parameters(List.of(parameters));
        }

        /**
         * @param partition Specifies the partition of the policy. Default is `Common`
         * 
         * @return builder
         * 
         */
        public Builder partition(@Nullable Output<String> partition) {
            $.partition = partition;
            return this;
        }

        /**
         * @param partition Specifies the partition of the policy. Default is `Common`
         * 
         * @return builder
         * 
         */
        public Builder partition(String partition) {
            return partition(Output.of(partition));
        }

        /**
         * @param policyBuilders `policy_builder` block will provide `learning_mode` options to be used for policy builder.
         * See policy builder below for more details.
         * 
         * @return builder
         * 
         */
        public Builder policyBuilders(@Nullable Output<List<WafPolicyPolicyBuilderArgs>> policyBuilders) {
            $.policyBuilders = policyBuilders;
            return this;
        }

        /**
         * @param policyBuilders `policy_builder` block will provide `learning_mode` options to be used for policy builder.
         * See policy builder below for more details.
         * 
         * @return builder
         * 
         */
        public Builder policyBuilders(List<WafPolicyPolicyBuilderArgs> policyBuilders) {
            return policyBuilders(Output.of(policyBuilders));
        }

        /**
         * @param policyBuilders `policy_builder` block will provide `learning_mode` options to be used for policy builder.
         * See policy builder below for more details.
         * 
         * @return builder
         * 
         */
        public Builder policyBuilders(WafPolicyPolicyBuilderArgs... policyBuilders) {
            return policyBuilders(List.of(policyBuilders));
        }

        /**
         * @param policyId The id of the A.WAF Policy as it would be calculated on the BIG-IP.
         * 
         * @return builder
         * 
         */
        public Builder policyId(@Nullable Output<String> policyId) {
            $.policyId = policyId;
            return this;
        }

        /**
         * @param policyId The id of the A.WAF Policy as it would be calculated on the BIG-IP.
         * 
         * @return builder
         * 
         */
        public Builder policyId(String policyId) {
            return policyId(Output.of(policyId));
        }

        /**
         * @param policyImportJson The payload of the WAF Policy to be used for IMPORT on to BIG-IP.
         * 
         * @return builder
         * 
         */
        public Builder policyImportJson(@Nullable Output<String> policyImportJson) {
            $.policyImportJson = policyImportJson;
            return this;
        }

        /**
         * @param policyImportJson The payload of the WAF Policy to be used for IMPORT on to BIG-IP.
         * 
         * @return builder
         * 
         */
        public Builder policyImportJson(String policyImportJson) {
            return policyImportJson(Output.of(policyImportJson));
        }

        /**
         * @param protocolIndependent When creating a security policy, you can determine whether a security policy differentiates between HTTP and HTTPS URLs. If enabled, the security policy differentiates between HTTP and HTTPS URLs. If disabled, the security policy configures URLs without specifying a specific protocol. This is useful for applications that behave the same for HTTP and HTTPS, and it keeps the security policy from including the same URL twice.
         * 
         * @return builder
         * 
         */
        public Builder protocolIndependent(@Nullable Output<Boolean> protocolIndependent) {
            $.protocolIndependent = protocolIndependent;
            return this;
        }

        /**
         * @param protocolIndependent When creating a security policy, you can determine whether a security policy differentiates between HTTP and HTTPS URLs. If enabled, the security policy differentiates between HTTP and HTTPS URLs. If disabled, the security policy configures URLs without specifying a specific protocol. This is useful for applications that behave the same for HTTP and HTTPS, and it keeps the security policy from including the same URL twice.
         * 
         * @return builder
         * 
         */
        public Builder protocolIndependent(Boolean protocolIndependent) {
            return protocolIndependent(Output.of(protocolIndependent));
        }

        /**
         * @param serverTechnologies The server technology is a server-side application, framework, web server or operating system type that is configured in the policy in order to adapt the policy to the checks needed for the respective technology.
         * 
         * @return builder
         * 
         */
        public Builder serverTechnologies(@Nullable Output<List<String>> serverTechnologies) {
            $.serverTechnologies = serverTechnologies;
            return this;
        }

        /**
         * @param serverTechnologies The server technology is a server-side application, framework, web server or operating system type that is configured in the policy in order to adapt the policy to the checks needed for the respective technology.
         * 
         * @return builder
         * 
         */
        public Builder serverTechnologies(List<String> serverTechnologies) {
            return serverTechnologies(Output.of(serverTechnologies));
        }

        /**
         * @param serverTechnologies The server technology is a server-side application, framework, web server or operating system type that is configured in the policy in order to adapt the policy to the checks needed for the respective technology.
         * 
         * @return builder
         * 
         */
        public Builder serverTechnologies(String... serverTechnologies) {
            return serverTechnologies(List.of(serverTechnologies));
        }

        /**
         * @param signatureSets Defines behavior when signatures found within a signature-set are detected in a request. Settings are culmulative, so if a signature is found in any set with block enabled, that signature will have block enabled.
         * 
         * @return builder
         * 
         */
        public Builder signatureSets(@Nullable Output<List<String>> signatureSets) {
            $.signatureSets = signatureSets;
            return this;
        }

        /**
         * @param signatureSets Defines behavior when signatures found within a signature-set are detected in a request. Settings are culmulative, so if a signature is found in any set with block enabled, that signature will have block enabled.
         * 
         * @return builder
         * 
         */
        public Builder signatureSets(List<String> signatureSets) {
            return signatureSets(Output.of(signatureSets));
        }

        /**
         * @param signatureSets Defines behavior when signatures found within a signature-set are detected in a request. Settings are culmulative, so if a signature is found in any set with block enabled, that signature will have block enabled.
         * 
         * @return builder
         * 
         */
        public Builder signatureSets(String... signatureSets) {
            return signatureSets(List.of(signatureSets));
        }

        /**
         * @param signatures This section defines the properties of a signature on the policy.
         * 
         * @return builder
         * 
         */
        public Builder signatures(@Nullable Output<List<String>> signatures) {
            $.signatures = signatures;
            return this;
        }

        /**
         * @param signatures This section defines the properties of a signature on the policy.
         * 
         * @return builder
         * 
         */
        public Builder signatures(List<String> signatures) {
            return signatures(Output.of(signatures));
        }

        /**
         * @param signatures This section defines the properties of a signature on the policy.
         * 
         * @return builder
         * 
         */
        public Builder signatures(String... signatures) {
            return signatures(List.of(signatures));
        }

        /**
         * @param signaturesSettings bulk signature setting
         * 
         * @return builder
         * 
         */
        public Builder signaturesSettings(@Nullable Output<List<WafPolicySignaturesSettingArgs>> signaturesSettings) {
            $.signaturesSettings = signaturesSettings;
            return this;
        }

        /**
         * @param signaturesSettings bulk signature setting
         * 
         * @return builder
         * 
         */
        public Builder signaturesSettings(List<WafPolicySignaturesSettingArgs> signaturesSettings) {
            return signaturesSettings(Output.of(signaturesSettings));
        }

        /**
         * @param signaturesSettings bulk signature setting
         * 
         * @return builder
         * 
         */
        public Builder signaturesSettings(WafPolicySignaturesSettingArgs... signaturesSettings) {
            return signaturesSettings(List.of(signaturesSettings));
        }

        /**
         * @param templateLink Specifies the Link of the template used for the policy creation.
         * 
         * @return builder
         * 
         */
        public Builder templateLink(@Nullable Output<String> templateLink) {
            $.templateLink = templateLink;
            return this;
        }

        /**
         * @param templateLink Specifies the Link of the template used for the policy creation.
         * 
         * @return builder
         * 
         */
        public Builder templateLink(String templateLink) {
            return templateLink(Output.of(templateLink));
        }

        /**
         * @param templateName Specifies the name of the template used for the policy creation.
         * 
         * @return builder
         * 
         */
        public Builder templateName(Output<String> templateName) {
            $.templateName = templateName;
            return this;
        }

        /**
         * @param templateName Specifies the name of the template used for the policy creation.
         * 
         * @return builder
         * 
         */
        public Builder templateName(String templateName) {
            return templateName(Output.of(templateName));
        }

        /**
         * @param type The type of policy you want to create. The default policy type is `security`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of policy you want to create. The default policy type is `security`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param urls In a security policy, you can manually specify the HTTP URLs that are allowed (or disallowed) in traffic to the web application being protected. If you are using automatic policy building (and the policy includes learning URLs), the system can determine which URLs to add, based on legitimate traffic.
         * 
         * @return builder
         * 
         */
        public Builder urls(@Nullable Output<List<String>> urls) {
            $.urls = urls;
            return this;
        }

        /**
         * @param urls In a security policy, you can manually specify the HTTP URLs that are allowed (or disallowed) in traffic to the web application being protected. If you are using automatic policy building (and the policy includes learning URLs), the system can determine which URLs to add, based on legitimate traffic.
         * 
         * @return builder
         * 
         */
        public Builder urls(List<String> urls) {
            return urls(Output.of(urls));
        }

        /**
         * @param urls In a security policy, you can manually specify the HTTP URLs that are allowed (or disallowed) in traffic to the web application being protected. If you are using automatic policy building (and the policy includes learning URLs), the system can determine which URLs to add, based on legitimate traffic.
         * 
         * @return builder
         * 
         */
        public Builder urls(String... urls) {
            return urls(List.of(urls));
        }

        public WafPolicyArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("WafPolicyArgs", "name");
            }
            if ($.templateName == null) {
                throw new MissingRequiredPropertyException("WafPolicyArgs", "templateName");
            }
            return $;
        }
    }

}
