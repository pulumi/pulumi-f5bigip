// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class FastHttpsAppTlsServerProfileArgs extends com.pulumi.resources.ResourceArgs {

    public static final FastHttpsAppTlsServerProfileArgs Empty = new FastHttpsAppTlsServerProfileArgs();

    /**
     * Name of existing BIG-IP SSL certificate to be used for FAST-Generated TLS Server Profile.
     * 
     */
    @Import(name="tlsCertName", required=true)
    private Output<String> tlsCertName;

    /**
     * @return Name of existing BIG-IP SSL certificate to be used for FAST-Generated TLS Server Profile.
     * 
     */
    public Output<String> tlsCertName() {
        return this.tlsCertName;
    }

    /**
     * Name of existing BIG-IP SSL Key to be used for FAST-Generated TLS Server Profile.
     * 
     */
    @Import(name="tlsKeyName", required=true)
    private Output<String> tlsKeyName;

    /**
     * @return Name of existing BIG-IP SSL Key to be used for FAST-Generated TLS Server Profile.
     * 
     */
    public Output<String> tlsKeyName() {
        return this.tlsKeyName;
    }

    private FastHttpsAppTlsServerProfileArgs() {}

    private FastHttpsAppTlsServerProfileArgs(FastHttpsAppTlsServerProfileArgs $) {
        this.tlsCertName = $.tlsCertName;
        this.tlsKeyName = $.tlsKeyName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FastHttpsAppTlsServerProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FastHttpsAppTlsServerProfileArgs $;

        public Builder() {
            $ = new FastHttpsAppTlsServerProfileArgs();
        }

        public Builder(FastHttpsAppTlsServerProfileArgs defaults) {
            $ = new FastHttpsAppTlsServerProfileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param tlsCertName Name of existing BIG-IP SSL certificate to be used for FAST-Generated TLS Server Profile.
         * 
         * @return builder
         * 
         */
        public Builder tlsCertName(Output<String> tlsCertName) {
            $.tlsCertName = tlsCertName;
            return this;
        }

        /**
         * @param tlsCertName Name of existing BIG-IP SSL certificate to be used for FAST-Generated TLS Server Profile.
         * 
         * @return builder
         * 
         */
        public Builder tlsCertName(String tlsCertName) {
            return tlsCertName(Output.of(tlsCertName));
        }

        /**
         * @param tlsKeyName Name of existing BIG-IP SSL Key to be used for FAST-Generated TLS Server Profile.
         * 
         * @return builder
         * 
         */
        public Builder tlsKeyName(Output<String> tlsKeyName) {
            $.tlsKeyName = tlsKeyName;
            return this;
        }

        /**
         * @param tlsKeyName Name of existing BIG-IP SSL Key to be used for FAST-Generated TLS Server Profile.
         * 
         * @return builder
         * 
         */
        public Builder tlsKeyName(String tlsKeyName) {
            return tlsKeyName(Output.of(tlsKeyName));
        }

        public FastHttpsAppTlsServerProfileArgs build() {
            if ($.tlsCertName == null) {
                throw new MissingRequiredPropertyException("FastHttpsAppTlsServerProfileArgs", "tlsCertName");
            }
            if ($.tlsKeyName == null) {
                throw new MissingRequiredPropertyException("FastHttpsAppTlsServerProfileArgs", "tlsKeyName");
            }
            return $;
        }
    }

}
