// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetPolicyRuleConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetPolicyRuleConditionArgs Empty = new GetPolicyRuleConditionArgs();

    @Import(name="address", required=true)
    private Output<Boolean> address;

    public Output<Boolean> address() {
        return this.address;
    }

    @Import(name="all", required=true)
    private Output<Boolean> all;

    public Output<Boolean> all() {
        return this.all;
    }

    @Import(name="appService", required=true)
    private Output<String> appService;

    public Output<String> appService() {
        return this.appService;
    }

    @Import(name="browserType", required=true)
    private Output<Boolean> browserType;

    public Output<Boolean> browserType() {
        return this.browserType;
    }

    @Import(name="browserVersion", required=true)
    private Output<Boolean> browserVersion;

    public Output<Boolean> browserVersion() {
        return this.browserVersion;
    }

    @Import(name="caseInsensitive", required=true)
    private Output<Boolean> caseInsensitive;

    public Output<Boolean> caseInsensitive() {
        return this.caseInsensitive;
    }

    @Import(name="caseSensitive", required=true)
    private Output<Boolean> caseSensitive;

    public Output<Boolean> caseSensitive() {
        return this.caseSensitive;
    }

    @Import(name="cipher", required=true)
    private Output<Boolean> cipher;

    public Output<Boolean> cipher() {
        return this.cipher;
    }

    @Import(name="cipherBits", required=true)
    private Output<Boolean> cipherBits;

    public Output<Boolean> cipherBits() {
        return this.cipherBits;
    }

    @Import(name="clientSsl", required=true)
    private Output<Boolean> clientSsl;

    public Output<Boolean> clientSsl() {
        return this.clientSsl;
    }

    @Import(name="code", required=true)
    private Output<Boolean> code;

    public Output<Boolean> code() {
        return this.code;
    }

    @Import(name="commonName", required=true)
    private Output<Boolean> commonName;

    public Output<Boolean> commonName() {
        return this.commonName;
    }

    @Import(name="contains", required=true)
    private Output<Boolean> contains;

    public Output<Boolean> contains() {
        return this.contains;
    }

    @Import(name="continent", required=true)
    private Output<Boolean> continent;

    public Output<Boolean> continent() {
        return this.continent;
    }

    @Import(name="countryCode", required=true)
    private Output<Boolean> countryCode;

    public Output<Boolean> countryCode() {
        return this.countryCode;
    }

    @Import(name="countryName", required=true)
    private Output<Boolean> countryName;

    public Output<Boolean> countryName() {
        return this.countryName;
    }

    @Import(name="cpuUsage", required=true)
    private Output<Boolean> cpuUsage;

    public Output<Boolean> cpuUsage() {
        return this.cpuUsage;
    }

    @Import(name="datagroup", required=true)
    private Output<String> datagroup;

    public Output<String> datagroup() {
        return this.datagroup;
    }

    @Import(name="deviceMake", required=true)
    private Output<Boolean> deviceMake;

    public Output<Boolean> deviceMake() {
        return this.deviceMake;
    }

    @Import(name="deviceModel", required=true)
    private Output<Boolean> deviceModel;

    public Output<Boolean> deviceModel() {
        return this.deviceModel;
    }

    @Import(name="domain", required=true)
    private Output<Boolean> domain;

    public Output<Boolean> domain() {
        return this.domain;
    }

    @Import(name="endsWith", required=true)
    private Output<Boolean> endsWith;

    public Output<Boolean> endsWith() {
        return this.endsWith;
    }

    @Import(name="equals", required=true)
    private Output<Boolean> equals;

    public Output<Boolean> equals_() {
        return this.equals;
    }

    @Import(name="expiry", required=true)
    private Output<Boolean> expiry;

    public Output<Boolean> expiry() {
        return this.expiry;
    }

    @Import(name="extension", required=true)
    private Output<Boolean> extension;

    public Output<Boolean> extension() {
        return this.extension;
    }

    @Import(name="external", required=true)
    private Output<Boolean> external;

    public Output<Boolean> external() {
        return this.external;
    }

    @Import(name="geoip", required=true)
    private Output<Boolean> geoip;

    public Output<Boolean> geoip() {
        return this.geoip;
    }

    @Import(name="greater", required=true)
    private Output<Boolean> greater;

    public Output<Boolean> greater() {
        return this.greater;
    }

    @Import(name="greaterOrEqual", required=true)
    private Output<Boolean> greaterOrEqual;

    public Output<Boolean> greaterOrEqual() {
        return this.greaterOrEqual;
    }

    @Import(name="host", required=true)
    private Output<Boolean> host;

    public Output<Boolean> host() {
        return this.host;
    }

    @Import(name="httpBasicAuth", required=true)
    private Output<Boolean> httpBasicAuth;

    public Output<Boolean> httpBasicAuth() {
        return this.httpBasicAuth;
    }

    @Import(name="httpCookie", required=true)
    private Output<Boolean> httpCookie;

    public Output<Boolean> httpCookie() {
        return this.httpCookie;
    }

    @Import(name="httpHeader", required=true)
    private Output<Boolean> httpHeader;

    public Output<Boolean> httpHeader() {
        return this.httpHeader;
    }

    @Import(name="httpHost", required=true)
    private Output<Boolean> httpHost;

    public Output<Boolean> httpHost() {
        return this.httpHost;
    }

    @Import(name="httpMethod", required=true)
    private Output<Boolean> httpMethod;

    public Output<Boolean> httpMethod() {
        return this.httpMethod;
    }

    @Import(name="httpReferer", required=true)
    private Output<Boolean> httpReferer;

    public Output<Boolean> httpReferer() {
        return this.httpReferer;
    }

    @Import(name="httpSetCookie", required=true)
    private Output<Boolean> httpSetCookie;

    public Output<Boolean> httpSetCookie() {
        return this.httpSetCookie;
    }

    @Import(name="httpStatus", required=true)
    private Output<Boolean> httpStatus;

    public Output<Boolean> httpStatus() {
        return this.httpStatus;
    }

    @Import(name="httpUri", required=true)
    private Output<Boolean> httpUri;

    public Output<Boolean> httpUri() {
        return this.httpUri;
    }

    @Import(name="httpUserAgent", required=true)
    private Output<Boolean> httpUserAgent;

    public Output<Boolean> httpUserAgent() {
        return this.httpUserAgent;
    }

    @Import(name="httpVersion", required=true)
    private Output<Boolean> httpVersion;

    public Output<Boolean> httpVersion() {
        return this.httpVersion;
    }

    @Import(name="index", required=true)
    private Output<Integer> index;

    public Output<Integer> index() {
        return this.index;
    }

    @Import(name="internal", required=true)
    private Output<Boolean> internal;

    public Output<Boolean> internal() {
        return this.internal;
    }

    @Import(name="isp", required=true)
    private Output<Boolean> isp;

    public Output<Boolean> isp() {
        return this.isp;
    }

    @Import(name="last15secs", required=true)
    private Output<Boolean> last15secs;

    public Output<Boolean> last15secs() {
        return this.last15secs;
    }

    @Import(name="last1min", required=true)
    private Output<Boolean> last1min;

    public Output<Boolean> last1min() {
        return this.last1min;
    }

    @Import(name="last5mins", required=true)
    private Output<Boolean> last5mins;

    public Output<Boolean> last5mins() {
        return this.last5mins;
    }

    @Import(name="less", required=true)
    private Output<Boolean> less;

    public Output<Boolean> less() {
        return this.less;
    }

    @Import(name="lessOrEqual", required=true)
    private Output<Boolean> lessOrEqual;

    public Output<Boolean> lessOrEqual() {
        return this.lessOrEqual;
    }

    @Import(name="local", required=true)
    private Output<Boolean> local;

    public Output<Boolean> local() {
        return this.local;
    }

    @Import(name="major", required=true)
    private Output<Boolean> major;

    public Output<Boolean> major() {
        return this.major;
    }

    @Import(name="matches", required=true)
    private Output<Boolean> matches;

    public Output<Boolean> matches() {
        return this.matches;
    }

    @Import(name="minor", required=true)
    private Output<Boolean> minor;

    public Output<Boolean> minor() {
        return this.minor;
    }

    @Import(name="missing", required=true)
    private Output<Boolean> missing;

    public Output<Boolean> missing() {
        return this.missing;
    }

    @Import(name="mss", required=true)
    private Output<Boolean> mss;

    public Output<Boolean> mss() {
        return this.mss;
    }

    @Import(name="not", required=true)
    private Output<Boolean> not;

    public Output<Boolean> not() {
        return this.not;
    }

    @Import(name="org", required=true)
    private Output<Boolean> org;

    public Output<Boolean> org() {
        return this.org;
    }

    @Import(name="password", required=true)
    private Output<Boolean> password;

    public Output<Boolean> password() {
        return this.password;
    }

    @Import(name="path", required=true)
    private Output<Boolean> path;

    public Output<Boolean> path() {
        return this.path;
    }

    @Import(name="pathSegment", required=true)
    private Output<Boolean> pathSegment;

    public Output<Boolean> pathSegment() {
        return this.pathSegment;
    }

    @Import(name="port", required=true)
    private Output<Boolean> port;

    public Output<Boolean> port() {
        return this.port;
    }

    @Import(name="present", required=true)
    private Output<Boolean> present;

    public Output<Boolean> present() {
        return this.present;
    }

    @Import(name="protocol", required=true)
    private Output<Boolean> protocol;

    public Output<Boolean> protocol() {
        return this.protocol;
    }

    @Import(name="queryParameter", required=true)
    private Output<Boolean> queryParameter;

    public Output<Boolean> queryParameter() {
        return this.queryParameter;
    }

    @Import(name="queryString", required=true)
    private Output<Boolean> queryString;

    public Output<Boolean> queryString() {
        return this.queryString;
    }

    @Import(name="regionCode", required=true)
    private Output<Boolean> regionCode;

    public Output<Boolean> regionCode() {
        return this.regionCode;
    }

    @Import(name="regionName", required=true)
    private Output<Boolean> regionName;

    public Output<Boolean> regionName() {
        return this.regionName;
    }

    @Import(name="remote", required=true)
    private Output<Boolean> remote;

    public Output<Boolean> remote() {
        return this.remote;
    }

    @Import(name="request", required=true)
    private Output<Boolean> request;

    public Output<Boolean> request() {
        return this.request;
    }

    @Import(name="response", required=true)
    private Output<Boolean> response;

    public Output<Boolean> response() {
        return this.response;
    }

    @Import(name="routeDomain", required=true)
    private Output<Boolean> routeDomain;

    public Output<Boolean> routeDomain() {
        return this.routeDomain;
    }

    @Import(name="rtt", required=true)
    private Output<Boolean> rtt;

    public Output<Boolean> rtt() {
        return this.rtt;
    }

    @Import(name="scheme", required=true)
    private Output<Boolean> scheme;

    public Output<Boolean> scheme() {
        return this.scheme;
    }

    @Import(name="serverName", required=true)
    private Output<Boolean> serverName;

    public Output<Boolean> serverName() {
        return this.serverName;
    }

    @Import(name="sslCert", required=true)
    private Output<Boolean> sslCert;

    public Output<Boolean> sslCert() {
        return this.sslCert;
    }

    @Import(name="sslClientHello", required=true)
    private Output<Boolean> sslClientHello;

    public Output<Boolean> sslClientHello() {
        return this.sslClientHello;
    }

    @Import(name="sslExtension", required=true)
    private Output<Boolean> sslExtension;

    public Output<Boolean> sslExtension() {
        return this.sslExtension;
    }

    @Import(name="sslServerHandshake", required=true)
    private Output<Boolean> sslServerHandshake;

    public Output<Boolean> sslServerHandshake() {
        return this.sslServerHandshake;
    }

    @Import(name="sslServerHello", required=true)
    private Output<Boolean> sslServerHello;

    public Output<Boolean> sslServerHello() {
        return this.sslServerHello;
    }

    @Import(name="startsWith", required=true)
    private Output<Boolean> startsWith;

    public Output<Boolean> startsWith() {
        return this.startsWith;
    }

    @Import(name="tcp", required=true)
    private Output<Boolean> tcp;

    public Output<Boolean> tcp() {
        return this.tcp;
    }

    @Import(name="text", required=true)
    private Output<Boolean> text;

    public Output<Boolean> text() {
        return this.text;
    }

    @Import(name="tmName", required=true)
    private Output<String> tmName;

    public Output<String> tmName() {
        return this.tmName;
    }

    @Import(name="unnamedQueryParameter", required=true)
    private Output<Boolean> unnamedQueryParameter;

    public Output<Boolean> unnamedQueryParameter() {
        return this.unnamedQueryParameter;
    }

    @Import(name="userAgentToken", required=true)
    private Output<Boolean> userAgentToken;

    public Output<Boolean> userAgentToken() {
        return this.userAgentToken;
    }

    @Import(name="username", required=true)
    private Output<Boolean> username;

    public Output<Boolean> username() {
        return this.username;
    }

    @Import(name="value", required=true)
    private Output<Boolean> value;

    public Output<Boolean> value() {
        return this.value;
    }

    @Import(name="values", required=true)
    private Output<List<String>> values;

    public Output<List<String>> values() {
        return this.values;
    }

    @Import(name="version", required=true)
    private Output<Boolean> version;

    public Output<Boolean> version() {
        return this.version;
    }

    @Import(name="vlan", required=true)
    private Output<Boolean> vlan;

    public Output<Boolean> vlan() {
        return this.vlan;
    }

    @Import(name="vlanId", required=true)
    private Output<Boolean> vlanId;

    public Output<Boolean> vlanId() {
        return this.vlanId;
    }

    private GetPolicyRuleConditionArgs() {}

    private GetPolicyRuleConditionArgs(GetPolicyRuleConditionArgs $) {
        this.address = $.address;
        this.all = $.all;
        this.appService = $.appService;
        this.browserType = $.browserType;
        this.browserVersion = $.browserVersion;
        this.caseInsensitive = $.caseInsensitive;
        this.caseSensitive = $.caseSensitive;
        this.cipher = $.cipher;
        this.cipherBits = $.cipherBits;
        this.clientSsl = $.clientSsl;
        this.code = $.code;
        this.commonName = $.commonName;
        this.contains = $.contains;
        this.continent = $.continent;
        this.countryCode = $.countryCode;
        this.countryName = $.countryName;
        this.cpuUsage = $.cpuUsage;
        this.datagroup = $.datagroup;
        this.deviceMake = $.deviceMake;
        this.deviceModel = $.deviceModel;
        this.domain = $.domain;
        this.endsWith = $.endsWith;
        this.equals = $.equals;
        this.expiry = $.expiry;
        this.extension = $.extension;
        this.external = $.external;
        this.geoip = $.geoip;
        this.greater = $.greater;
        this.greaterOrEqual = $.greaterOrEqual;
        this.host = $.host;
        this.httpBasicAuth = $.httpBasicAuth;
        this.httpCookie = $.httpCookie;
        this.httpHeader = $.httpHeader;
        this.httpHost = $.httpHost;
        this.httpMethod = $.httpMethod;
        this.httpReferer = $.httpReferer;
        this.httpSetCookie = $.httpSetCookie;
        this.httpStatus = $.httpStatus;
        this.httpUri = $.httpUri;
        this.httpUserAgent = $.httpUserAgent;
        this.httpVersion = $.httpVersion;
        this.index = $.index;
        this.internal = $.internal;
        this.isp = $.isp;
        this.last15secs = $.last15secs;
        this.last1min = $.last1min;
        this.last5mins = $.last5mins;
        this.less = $.less;
        this.lessOrEqual = $.lessOrEqual;
        this.local = $.local;
        this.major = $.major;
        this.matches = $.matches;
        this.minor = $.minor;
        this.missing = $.missing;
        this.mss = $.mss;
        this.not = $.not;
        this.org = $.org;
        this.password = $.password;
        this.path = $.path;
        this.pathSegment = $.pathSegment;
        this.port = $.port;
        this.present = $.present;
        this.protocol = $.protocol;
        this.queryParameter = $.queryParameter;
        this.queryString = $.queryString;
        this.regionCode = $.regionCode;
        this.regionName = $.regionName;
        this.remote = $.remote;
        this.request = $.request;
        this.response = $.response;
        this.routeDomain = $.routeDomain;
        this.rtt = $.rtt;
        this.scheme = $.scheme;
        this.serverName = $.serverName;
        this.sslCert = $.sslCert;
        this.sslClientHello = $.sslClientHello;
        this.sslExtension = $.sslExtension;
        this.sslServerHandshake = $.sslServerHandshake;
        this.sslServerHello = $.sslServerHello;
        this.startsWith = $.startsWith;
        this.tcp = $.tcp;
        this.text = $.text;
        this.tmName = $.tmName;
        this.unnamedQueryParameter = $.unnamedQueryParameter;
        this.userAgentToken = $.userAgentToken;
        this.username = $.username;
        this.value = $.value;
        this.values = $.values;
        this.version = $.version;
        this.vlan = $.vlan;
        this.vlanId = $.vlanId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPolicyRuleConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPolicyRuleConditionArgs $;

        public Builder() {
            $ = new GetPolicyRuleConditionArgs();
        }

        public Builder(GetPolicyRuleConditionArgs defaults) {
            $ = new GetPolicyRuleConditionArgs(Objects.requireNonNull(defaults));
        }

        public Builder address(Output<Boolean> address) {
            $.address = address;
            return this;
        }

        public Builder address(Boolean address) {
            return address(Output.of(address));
        }

        public Builder all(Output<Boolean> all) {
            $.all = all;
            return this;
        }

        public Builder all(Boolean all) {
            return all(Output.of(all));
        }

        public Builder appService(Output<String> appService) {
            $.appService = appService;
            return this;
        }

        public Builder appService(String appService) {
            return appService(Output.of(appService));
        }

        public Builder browserType(Output<Boolean> browserType) {
            $.browserType = browserType;
            return this;
        }

        public Builder browserType(Boolean browserType) {
            return browserType(Output.of(browserType));
        }

        public Builder browserVersion(Output<Boolean> browserVersion) {
            $.browserVersion = browserVersion;
            return this;
        }

        public Builder browserVersion(Boolean browserVersion) {
            return browserVersion(Output.of(browserVersion));
        }

        public Builder caseInsensitive(Output<Boolean> caseInsensitive) {
            $.caseInsensitive = caseInsensitive;
            return this;
        }

        public Builder caseInsensitive(Boolean caseInsensitive) {
            return caseInsensitive(Output.of(caseInsensitive));
        }

        public Builder caseSensitive(Output<Boolean> caseSensitive) {
            $.caseSensitive = caseSensitive;
            return this;
        }

        public Builder caseSensitive(Boolean caseSensitive) {
            return caseSensitive(Output.of(caseSensitive));
        }

        public Builder cipher(Output<Boolean> cipher) {
            $.cipher = cipher;
            return this;
        }

        public Builder cipher(Boolean cipher) {
            return cipher(Output.of(cipher));
        }

        public Builder cipherBits(Output<Boolean> cipherBits) {
            $.cipherBits = cipherBits;
            return this;
        }

        public Builder cipherBits(Boolean cipherBits) {
            return cipherBits(Output.of(cipherBits));
        }

        public Builder clientSsl(Output<Boolean> clientSsl) {
            $.clientSsl = clientSsl;
            return this;
        }

        public Builder clientSsl(Boolean clientSsl) {
            return clientSsl(Output.of(clientSsl));
        }

        public Builder code(Output<Boolean> code) {
            $.code = code;
            return this;
        }

        public Builder code(Boolean code) {
            return code(Output.of(code));
        }

        public Builder commonName(Output<Boolean> commonName) {
            $.commonName = commonName;
            return this;
        }

        public Builder commonName(Boolean commonName) {
            return commonName(Output.of(commonName));
        }

        public Builder contains(Output<Boolean> contains) {
            $.contains = contains;
            return this;
        }

        public Builder contains(Boolean contains) {
            return contains(Output.of(contains));
        }

        public Builder continent(Output<Boolean> continent) {
            $.continent = continent;
            return this;
        }

        public Builder continent(Boolean continent) {
            return continent(Output.of(continent));
        }

        public Builder countryCode(Output<Boolean> countryCode) {
            $.countryCode = countryCode;
            return this;
        }

        public Builder countryCode(Boolean countryCode) {
            return countryCode(Output.of(countryCode));
        }

        public Builder countryName(Output<Boolean> countryName) {
            $.countryName = countryName;
            return this;
        }

        public Builder countryName(Boolean countryName) {
            return countryName(Output.of(countryName));
        }

        public Builder cpuUsage(Output<Boolean> cpuUsage) {
            $.cpuUsage = cpuUsage;
            return this;
        }

        public Builder cpuUsage(Boolean cpuUsage) {
            return cpuUsage(Output.of(cpuUsage));
        }

        public Builder datagroup(Output<String> datagroup) {
            $.datagroup = datagroup;
            return this;
        }

        public Builder datagroup(String datagroup) {
            return datagroup(Output.of(datagroup));
        }

        public Builder deviceMake(Output<Boolean> deviceMake) {
            $.deviceMake = deviceMake;
            return this;
        }

        public Builder deviceMake(Boolean deviceMake) {
            return deviceMake(Output.of(deviceMake));
        }

        public Builder deviceModel(Output<Boolean> deviceModel) {
            $.deviceModel = deviceModel;
            return this;
        }

        public Builder deviceModel(Boolean deviceModel) {
            return deviceModel(Output.of(deviceModel));
        }

        public Builder domain(Output<Boolean> domain) {
            $.domain = domain;
            return this;
        }

        public Builder domain(Boolean domain) {
            return domain(Output.of(domain));
        }

        public Builder endsWith(Output<Boolean> endsWith) {
            $.endsWith = endsWith;
            return this;
        }

        public Builder endsWith(Boolean endsWith) {
            return endsWith(Output.of(endsWith));
        }

        public Builder equals_(Output<Boolean> equals) {
            $.equals = equals;
            return this;
        }

        public Builder equals_(Boolean equals) {
            return equals_(Output.of(equals));
        }

        public Builder expiry(Output<Boolean> expiry) {
            $.expiry = expiry;
            return this;
        }

        public Builder expiry(Boolean expiry) {
            return expiry(Output.of(expiry));
        }

        public Builder extension(Output<Boolean> extension) {
            $.extension = extension;
            return this;
        }

        public Builder extension(Boolean extension) {
            return extension(Output.of(extension));
        }

        public Builder external(Output<Boolean> external) {
            $.external = external;
            return this;
        }

        public Builder external(Boolean external) {
            return external(Output.of(external));
        }

        public Builder geoip(Output<Boolean> geoip) {
            $.geoip = geoip;
            return this;
        }

        public Builder geoip(Boolean geoip) {
            return geoip(Output.of(geoip));
        }

        public Builder greater(Output<Boolean> greater) {
            $.greater = greater;
            return this;
        }

        public Builder greater(Boolean greater) {
            return greater(Output.of(greater));
        }

        public Builder greaterOrEqual(Output<Boolean> greaterOrEqual) {
            $.greaterOrEqual = greaterOrEqual;
            return this;
        }

        public Builder greaterOrEqual(Boolean greaterOrEqual) {
            return greaterOrEqual(Output.of(greaterOrEqual));
        }

        public Builder host(Output<Boolean> host) {
            $.host = host;
            return this;
        }

        public Builder host(Boolean host) {
            return host(Output.of(host));
        }

        public Builder httpBasicAuth(Output<Boolean> httpBasicAuth) {
            $.httpBasicAuth = httpBasicAuth;
            return this;
        }

        public Builder httpBasicAuth(Boolean httpBasicAuth) {
            return httpBasicAuth(Output.of(httpBasicAuth));
        }

        public Builder httpCookie(Output<Boolean> httpCookie) {
            $.httpCookie = httpCookie;
            return this;
        }

        public Builder httpCookie(Boolean httpCookie) {
            return httpCookie(Output.of(httpCookie));
        }

        public Builder httpHeader(Output<Boolean> httpHeader) {
            $.httpHeader = httpHeader;
            return this;
        }

        public Builder httpHeader(Boolean httpHeader) {
            return httpHeader(Output.of(httpHeader));
        }

        public Builder httpHost(Output<Boolean> httpHost) {
            $.httpHost = httpHost;
            return this;
        }

        public Builder httpHost(Boolean httpHost) {
            return httpHost(Output.of(httpHost));
        }

        public Builder httpMethod(Output<Boolean> httpMethod) {
            $.httpMethod = httpMethod;
            return this;
        }

        public Builder httpMethod(Boolean httpMethod) {
            return httpMethod(Output.of(httpMethod));
        }

        public Builder httpReferer(Output<Boolean> httpReferer) {
            $.httpReferer = httpReferer;
            return this;
        }

        public Builder httpReferer(Boolean httpReferer) {
            return httpReferer(Output.of(httpReferer));
        }

        public Builder httpSetCookie(Output<Boolean> httpSetCookie) {
            $.httpSetCookie = httpSetCookie;
            return this;
        }

        public Builder httpSetCookie(Boolean httpSetCookie) {
            return httpSetCookie(Output.of(httpSetCookie));
        }

        public Builder httpStatus(Output<Boolean> httpStatus) {
            $.httpStatus = httpStatus;
            return this;
        }

        public Builder httpStatus(Boolean httpStatus) {
            return httpStatus(Output.of(httpStatus));
        }

        public Builder httpUri(Output<Boolean> httpUri) {
            $.httpUri = httpUri;
            return this;
        }

        public Builder httpUri(Boolean httpUri) {
            return httpUri(Output.of(httpUri));
        }

        public Builder httpUserAgent(Output<Boolean> httpUserAgent) {
            $.httpUserAgent = httpUserAgent;
            return this;
        }

        public Builder httpUserAgent(Boolean httpUserAgent) {
            return httpUserAgent(Output.of(httpUserAgent));
        }

        public Builder httpVersion(Output<Boolean> httpVersion) {
            $.httpVersion = httpVersion;
            return this;
        }

        public Builder httpVersion(Boolean httpVersion) {
            return httpVersion(Output.of(httpVersion));
        }

        public Builder index(Output<Integer> index) {
            $.index = index;
            return this;
        }

        public Builder index(Integer index) {
            return index(Output.of(index));
        }

        public Builder internal(Output<Boolean> internal) {
            $.internal = internal;
            return this;
        }

        public Builder internal(Boolean internal) {
            return internal(Output.of(internal));
        }

        public Builder isp(Output<Boolean> isp) {
            $.isp = isp;
            return this;
        }

        public Builder isp(Boolean isp) {
            return isp(Output.of(isp));
        }

        public Builder last15secs(Output<Boolean> last15secs) {
            $.last15secs = last15secs;
            return this;
        }

        public Builder last15secs(Boolean last15secs) {
            return last15secs(Output.of(last15secs));
        }

        public Builder last1min(Output<Boolean> last1min) {
            $.last1min = last1min;
            return this;
        }

        public Builder last1min(Boolean last1min) {
            return last1min(Output.of(last1min));
        }

        public Builder last5mins(Output<Boolean> last5mins) {
            $.last5mins = last5mins;
            return this;
        }

        public Builder last5mins(Boolean last5mins) {
            return last5mins(Output.of(last5mins));
        }

        public Builder less(Output<Boolean> less) {
            $.less = less;
            return this;
        }

        public Builder less(Boolean less) {
            return less(Output.of(less));
        }

        public Builder lessOrEqual(Output<Boolean> lessOrEqual) {
            $.lessOrEqual = lessOrEqual;
            return this;
        }

        public Builder lessOrEqual(Boolean lessOrEqual) {
            return lessOrEqual(Output.of(lessOrEqual));
        }

        public Builder local(Output<Boolean> local) {
            $.local = local;
            return this;
        }

        public Builder local(Boolean local) {
            return local(Output.of(local));
        }

        public Builder major(Output<Boolean> major) {
            $.major = major;
            return this;
        }

        public Builder major(Boolean major) {
            return major(Output.of(major));
        }

        public Builder matches(Output<Boolean> matches) {
            $.matches = matches;
            return this;
        }

        public Builder matches(Boolean matches) {
            return matches(Output.of(matches));
        }

        public Builder minor(Output<Boolean> minor) {
            $.minor = minor;
            return this;
        }

        public Builder minor(Boolean minor) {
            return minor(Output.of(minor));
        }

        public Builder missing(Output<Boolean> missing) {
            $.missing = missing;
            return this;
        }

        public Builder missing(Boolean missing) {
            return missing(Output.of(missing));
        }

        public Builder mss(Output<Boolean> mss) {
            $.mss = mss;
            return this;
        }

        public Builder mss(Boolean mss) {
            return mss(Output.of(mss));
        }

        public Builder not(Output<Boolean> not) {
            $.not = not;
            return this;
        }

        public Builder not(Boolean not) {
            return not(Output.of(not));
        }

        public Builder org(Output<Boolean> org) {
            $.org = org;
            return this;
        }

        public Builder org(Boolean org) {
            return org(Output.of(org));
        }

        public Builder password(Output<Boolean> password) {
            $.password = password;
            return this;
        }

        public Builder password(Boolean password) {
            return password(Output.of(password));
        }

        public Builder path(Output<Boolean> path) {
            $.path = path;
            return this;
        }

        public Builder path(Boolean path) {
            return path(Output.of(path));
        }

        public Builder pathSegment(Output<Boolean> pathSegment) {
            $.pathSegment = pathSegment;
            return this;
        }

        public Builder pathSegment(Boolean pathSegment) {
            return pathSegment(Output.of(pathSegment));
        }

        public Builder port(Output<Boolean> port) {
            $.port = port;
            return this;
        }

        public Builder port(Boolean port) {
            return port(Output.of(port));
        }

        public Builder present(Output<Boolean> present) {
            $.present = present;
            return this;
        }

        public Builder present(Boolean present) {
            return present(Output.of(present));
        }

        public Builder protocol(Output<Boolean> protocol) {
            $.protocol = protocol;
            return this;
        }

        public Builder protocol(Boolean protocol) {
            return protocol(Output.of(protocol));
        }

        public Builder queryParameter(Output<Boolean> queryParameter) {
            $.queryParameter = queryParameter;
            return this;
        }

        public Builder queryParameter(Boolean queryParameter) {
            return queryParameter(Output.of(queryParameter));
        }

        public Builder queryString(Output<Boolean> queryString) {
            $.queryString = queryString;
            return this;
        }

        public Builder queryString(Boolean queryString) {
            return queryString(Output.of(queryString));
        }

        public Builder regionCode(Output<Boolean> regionCode) {
            $.regionCode = regionCode;
            return this;
        }

        public Builder regionCode(Boolean regionCode) {
            return regionCode(Output.of(regionCode));
        }

        public Builder regionName(Output<Boolean> regionName) {
            $.regionName = regionName;
            return this;
        }

        public Builder regionName(Boolean regionName) {
            return regionName(Output.of(regionName));
        }

        public Builder remote(Output<Boolean> remote) {
            $.remote = remote;
            return this;
        }

        public Builder remote(Boolean remote) {
            return remote(Output.of(remote));
        }

        public Builder request(Output<Boolean> request) {
            $.request = request;
            return this;
        }

        public Builder request(Boolean request) {
            return request(Output.of(request));
        }

        public Builder response(Output<Boolean> response) {
            $.response = response;
            return this;
        }

        public Builder response(Boolean response) {
            return response(Output.of(response));
        }

        public Builder routeDomain(Output<Boolean> routeDomain) {
            $.routeDomain = routeDomain;
            return this;
        }

        public Builder routeDomain(Boolean routeDomain) {
            return routeDomain(Output.of(routeDomain));
        }

        public Builder rtt(Output<Boolean> rtt) {
            $.rtt = rtt;
            return this;
        }

        public Builder rtt(Boolean rtt) {
            return rtt(Output.of(rtt));
        }

        public Builder scheme(Output<Boolean> scheme) {
            $.scheme = scheme;
            return this;
        }

        public Builder scheme(Boolean scheme) {
            return scheme(Output.of(scheme));
        }

        public Builder serverName(Output<Boolean> serverName) {
            $.serverName = serverName;
            return this;
        }

        public Builder serverName(Boolean serverName) {
            return serverName(Output.of(serverName));
        }

        public Builder sslCert(Output<Boolean> sslCert) {
            $.sslCert = sslCert;
            return this;
        }

        public Builder sslCert(Boolean sslCert) {
            return sslCert(Output.of(sslCert));
        }

        public Builder sslClientHello(Output<Boolean> sslClientHello) {
            $.sslClientHello = sslClientHello;
            return this;
        }

        public Builder sslClientHello(Boolean sslClientHello) {
            return sslClientHello(Output.of(sslClientHello));
        }

        public Builder sslExtension(Output<Boolean> sslExtension) {
            $.sslExtension = sslExtension;
            return this;
        }

        public Builder sslExtension(Boolean sslExtension) {
            return sslExtension(Output.of(sslExtension));
        }

        public Builder sslServerHandshake(Output<Boolean> sslServerHandshake) {
            $.sslServerHandshake = sslServerHandshake;
            return this;
        }

        public Builder sslServerHandshake(Boolean sslServerHandshake) {
            return sslServerHandshake(Output.of(sslServerHandshake));
        }

        public Builder sslServerHello(Output<Boolean> sslServerHello) {
            $.sslServerHello = sslServerHello;
            return this;
        }

        public Builder sslServerHello(Boolean sslServerHello) {
            return sslServerHello(Output.of(sslServerHello));
        }

        public Builder startsWith(Output<Boolean> startsWith) {
            $.startsWith = startsWith;
            return this;
        }

        public Builder startsWith(Boolean startsWith) {
            return startsWith(Output.of(startsWith));
        }

        public Builder tcp(Output<Boolean> tcp) {
            $.tcp = tcp;
            return this;
        }

        public Builder tcp(Boolean tcp) {
            return tcp(Output.of(tcp));
        }

        public Builder text(Output<Boolean> text) {
            $.text = text;
            return this;
        }

        public Builder text(Boolean text) {
            return text(Output.of(text));
        }

        public Builder tmName(Output<String> tmName) {
            $.tmName = tmName;
            return this;
        }

        public Builder tmName(String tmName) {
            return tmName(Output.of(tmName));
        }

        public Builder unnamedQueryParameter(Output<Boolean> unnamedQueryParameter) {
            $.unnamedQueryParameter = unnamedQueryParameter;
            return this;
        }

        public Builder unnamedQueryParameter(Boolean unnamedQueryParameter) {
            return unnamedQueryParameter(Output.of(unnamedQueryParameter));
        }

        public Builder userAgentToken(Output<Boolean> userAgentToken) {
            $.userAgentToken = userAgentToken;
            return this;
        }

        public Builder userAgentToken(Boolean userAgentToken) {
            return userAgentToken(Output.of(userAgentToken));
        }

        public Builder username(Output<Boolean> username) {
            $.username = username;
            return this;
        }

        public Builder username(Boolean username) {
            return username(Output.of(username));
        }

        public Builder value(Output<Boolean> value) {
            $.value = value;
            return this;
        }

        public Builder value(Boolean value) {
            return value(Output.of(value));
        }

        public Builder values(Output<List<String>> values) {
            $.values = values;
            return this;
        }

        public Builder values(List<String> values) {
            return values(Output.of(values));
        }

        public Builder values(String... values) {
            return values(List.of(values));
        }

        public Builder version(Output<Boolean> version) {
            $.version = version;
            return this;
        }

        public Builder version(Boolean version) {
            return version(Output.of(version));
        }

        public Builder vlan(Output<Boolean> vlan) {
            $.vlan = vlan;
            return this;
        }

        public Builder vlan(Boolean vlan) {
            return vlan(Output.of(vlan));
        }

        public Builder vlanId(Output<Boolean> vlanId) {
            $.vlanId = vlanId;
            return this;
        }

        public Builder vlanId(Boolean vlanId) {
            return vlanId(Output.of(vlanId));
        }

        public GetPolicyRuleConditionArgs build() {
            if ($.address == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "address");
            }
            if ($.all == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "all");
            }
            if ($.appService == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "appService");
            }
            if ($.browserType == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "browserType");
            }
            if ($.browserVersion == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "browserVersion");
            }
            if ($.caseInsensitive == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "caseInsensitive");
            }
            if ($.caseSensitive == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "caseSensitive");
            }
            if ($.cipher == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "cipher");
            }
            if ($.cipherBits == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "cipherBits");
            }
            if ($.clientSsl == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "clientSsl");
            }
            if ($.code == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "code");
            }
            if ($.commonName == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "commonName");
            }
            if ($.contains == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "contains");
            }
            if ($.continent == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "continent");
            }
            if ($.countryCode == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "countryCode");
            }
            if ($.countryName == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "countryName");
            }
            if ($.cpuUsage == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "cpuUsage");
            }
            if ($.datagroup == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "datagroup");
            }
            if ($.deviceMake == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "deviceMake");
            }
            if ($.deviceModel == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "deviceModel");
            }
            if ($.domain == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "domain");
            }
            if ($.endsWith == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "endsWith");
            }
            if ($.equals == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "equals");
            }
            if ($.expiry == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "expiry");
            }
            if ($.extension == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "extension");
            }
            if ($.external == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "external");
            }
            if ($.geoip == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "geoip");
            }
            if ($.greater == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "greater");
            }
            if ($.greaterOrEqual == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "greaterOrEqual");
            }
            if ($.host == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "host");
            }
            if ($.httpBasicAuth == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "httpBasicAuth");
            }
            if ($.httpCookie == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "httpCookie");
            }
            if ($.httpHeader == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "httpHeader");
            }
            if ($.httpHost == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "httpHost");
            }
            if ($.httpMethod == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "httpMethod");
            }
            if ($.httpReferer == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "httpReferer");
            }
            if ($.httpSetCookie == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "httpSetCookie");
            }
            if ($.httpStatus == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "httpStatus");
            }
            if ($.httpUri == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "httpUri");
            }
            if ($.httpUserAgent == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "httpUserAgent");
            }
            if ($.httpVersion == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "httpVersion");
            }
            if ($.index == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "index");
            }
            if ($.internal == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "internal");
            }
            if ($.isp == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "isp");
            }
            if ($.last15secs == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "last15secs");
            }
            if ($.last1min == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "last1min");
            }
            if ($.last5mins == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "last5mins");
            }
            if ($.less == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "less");
            }
            if ($.lessOrEqual == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "lessOrEqual");
            }
            if ($.local == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "local");
            }
            if ($.major == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "major");
            }
            if ($.matches == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "matches");
            }
            if ($.minor == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "minor");
            }
            if ($.missing == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "missing");
            }
            if ($.mss == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "mss");
            }
            if ($.not == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "not");
            }
            if ($.org == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "org");
            }
            if ($.password == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "password");
            }
            if ($.path == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "path");
            }
            if ($.pathSegment == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "pathSegment");
            }
            if ($.port == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "port");
            }
            if ($.present == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "present");
            }
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "protocol");
            }
            if ($.queryParameter == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "queryParameter");
            }
            if ($.queryString == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "queryString");
            }
            if ($.regionCode == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "regionCode");
            }
            if ($.regionName == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "regionName");
            }
            if ($.remote == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "remote");
            }
            if ($.request == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "request");
            }
            if ($.response == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "response");
            }
            if ($.routeDomain == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "routeDomain");
            }
            if ($.rtt == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "rtt");
            }
            if ($.scheme == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "scheme");
            }
            if ($.serverName == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "serverName");
            }
            if ($.sslCert == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "sslCert");
            }
            if ($.sslClientHello == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "sslClientHello");
            }
            if ($.sslExtension == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "sslExtension");
            }
            if ($.sslServerHandshake == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "sslServerHandshake");
            }
            if ($.sslServerHello == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "sslServerHello");
            }
            if ($.startsWith == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "startsWith");
            }
            if ($.tcp == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "tcp");
            }
            if ($.text == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "text");
            }
            if ($.tmName == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "tmName");
            }
            if ($.unnamedQueryParameter == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "unnamedQueryParameter");
            }
            if ($.userAgentToken == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "userAgentToken");
            }
            if ($.username == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "username");
            }
            if ($.value == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "value");
            }
            if ($.values == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "values");
            }
            if ($.version == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "version");
            }
            if ($.vlan == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "vlan");
            }
            if ($.vlanId == null) {
                throw new MissingRequiredPropertyException("GetPolicyRuleConditionArgs", "vlanId");
            }
            return $;
        }
    }

}
