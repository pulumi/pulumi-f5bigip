// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FastApplicationState extends com.pulumi.resources.ResourceArgs {

    public static final FastApplicationState Empty = new FastApplicationState();

    /**
     * A FAST application name.
     * 
     */
    @Import(name="application")
    private @Nullable Output<String> application;

    /**
     * @return A FAST application name.
     * 
     */
    public Optional<Output<String>> application() {
        return Optional.ofNullable(this.application);
    }

    /**
     * Path/Filename of Declarative FAST JSON which is a json file used with builtin ```file``` function
     * 
     */
    @Import(name="fastJson")
    private @Nullable Output<String> fastJson;

    /**
     * @return Path/Filename of Declarative FAST JSON which is a json file used with builtin ```file``` function
     * 
     */
    public Optional<Output<String>> fastJson() {
        return Optional.ofNullable(this.fastJson);
    }

    /**
     * Name of installed FAST template used to create FAST application. This parameter is required when creating new resource.
     * 
     */
    @Import(name="template")
    private @Nullable Output<String> template;

    /**
     * @return Name of installed FAST template used to create FAST application. This parameter is required when creating new resource.
     * 
     */
    public Optional<Output<String>> template() {
        return Optional.ofNullable(this.template);
    }

    /**
     * A FAST tenant name on which you want to manage application.
     * 
     */
    @Import(name="tenant")
    private @Nullable Output<String> tenant;

    /**
     * @return A FAST tenant name on which you want to manage application.
     * 
     */
    public Optional<Output<String>> tenant() {
        return Optional.ofNullable(this.tenant);
    }

    private FastApplicationState() {}

    private FastApplicationState(FastApplicationState $) {
        this.application = $.application;
        this.fastJson = $.fastJson;
        this.template = $.template;
        this.tenant = $.tenant;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FastApplicationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FastApplicationState $;

        public Builder() {
            $ = new FastApplicationState();
        }

        public Builder(FastApplicationState defaults) {
            $ = new FastApplicationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param application A FAST application name.
         * 
         * @return builder
         * 
         */
        public Builder application(@Nullable Output<String> application) {
            $.application = application;
            return this;
        }

        /**
         * @param application A FAST application name.
         * 
         * @return builder
         * 
         */
        public Builder application(String application) {
            return application(Output.of(application));
        }

        /**
         * @param fastJson Path/Filename of Declarative FAST JSON which is a json file used with builtin ```file``` function
         * 
         * @return builder
         * 
         */
        public Builder fastJson(@Nullable Output<String> fastJson) {
            $.fastJson = fastJson;
            return this;
        }

        /**
         * @param fastJson Path/Filename of Declarative FAST JSON which is a json file used with builtin ```file``` function
         * 
         * @return builder
         * 
         */
        public Builder fastJson(String fastJson) {
            return fastJson(Output.of(fastJson));
        }

        /**
         * @param template Name of installed FAST template used to create FAST application. This parameter is required when creating new resource.
         * 
         * @return builder
         * 
         */
        public Builder template(@Nullable Output<String> template) {
            $.template = template;
            return this;
        }

        /**
         * @param template Name of installed FAST template used to create FAST application. This parameter is required when creating new resource.
         * 
         * @return builder
         * 
         */
        public Builder template(String template) {
            return template(Output.of(template));
        }

        /**
         * @param tenant A FAST tenant name on which you want to manage application.
         * 
         * @return builder
         * 
         */
        public Builder tenant(@Nullable Output<String> tenant) {
            $.tenant = tenant;
            return this;
        }

        /**
         * @param tenant A FAST tenant name on which you want to manage application.
         * 
         * @return builder
         * 
         */
        public Builder tenant(String tenant) {
            return tenant(Output.of(tenant));
        }

        public FastApplicationState build() {
            return $;
        }
    }

}
