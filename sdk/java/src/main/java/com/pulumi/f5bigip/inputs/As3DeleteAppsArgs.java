// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class As3DeleteAppsArgs extends com.pulumi.resources.ResourceArgs {

    public static final As3DeleteAppsArgs Empty = new As3DeleteAppsArgs();

    /**
     * List of application names to delete from the specified tenant.
     * 
     * &gt; `delete_apps` cannot be used together with `as3_json`.
     * 
     */
    @Import(name="apps", required=true)
    private Output<List<String>> apps;

    /**
     * @return List of application names to delete from the specified tenant.
     * 
     * &gt; `delete_apps` cannot be used together with `as3_json`.
     * 
     */
    public Output<List<String>> apps() {
        return this.apps;
    }

    /**
     * Name of the tenant containing the apps to delete.
     * 
     */
    @Import(name="tenantName", required=true)
    private Output<String> tenantName;

    /**
     * @return Name of the tenant containing the apps to delete.
     * 
     */
    public Output<String> tenantName() {
        return this.tenantName;
    }

    private As3DeleteAppsArgs() {}

    private As3DeleteAppsArgs(As3DeleteAppsArgs $) {
        this.apps = $.apps;
        this.tenantName = $.tenantName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(As3DeleteAppsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private As3DeleteAppsArgs $;

        public Builder() {
            $ = new As3DeleteAppsArgs();
        }

        public Builder(As3DeleteAppsArgs defaults) {
            $ = new As3DeleteAppsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apps List of application names to delete from the specified tenant.
         * 
         * &gt; `delete_apps` cannot be used together with `as3_json`.
         * 
         * @return builder
         * 
         */
        public Builder apps(Output<List<String>> apps) {
            $.apps = apps;
            return this;
        }

        /**
         * @param apps List of application names to delete from the specified tenant.
         * 
         * &gt; `delete_apps` cannot be used together with `as3_json`.
         * 
         * @return builder
         * 
         */
        public Builder apps(List<String> apps) {
            return apps(Output.of(apps));
        }

        /**
         * @param apps List of application names to delete from the specified tenant.
         * 
         * &gt; `delete_apps` cannot be used together with `as3_json`.
         * 
         * @return builder
         * 
         */
        public Builder apps(String... apps) {
            return apps(List.of(apps));
        }

        /**
         * @param tenantName Name of the tenant containing the apps to delete.
         * 
         * @return builder
         * 
         */
        public Builder tenantName(Output<String> tenantName) {
            $.tenantName = tenantName;
            return this;
        }

        /**
         * @param tenantName Name of the tenant containing the apps to delete.
         * 
         * @return builder
         * 
         */
        public Builder tenantName(String tenantName) {
            return tenantName(Output.of(tenantName));
        }

        public As3DeleteAppsArgs build() {
            if ($.apps == null) {
                throw new MissingRequiredPropertyException("As3DeleteAppsArgs", "apps");
            }
            if ($.tenantName == null) {
                throw new MissingRequiredPropertyException("As3DeleteAppsArgs", "tenantName");
            }
            return $;
        }
    }

}
