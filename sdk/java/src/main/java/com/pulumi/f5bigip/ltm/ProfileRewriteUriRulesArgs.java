// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.f5bigip.ltm.inputs.ProfileRewriteUriRulesClientArgs;
import com.pulumi.f5bigip.ltm.inputs.ProfileRewriteUriRulesServerArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProfileRewriteUriRulesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProfileRewriteUriRulesArgs Empty = new ProfileRewriteUriRulesArgs();

    /**
     * Block type. Each request is block type with following arguments.
     * 
     */
    @Import(name="clients", required=true)
    private Output<List<ProfileRewriteUriRulesClientArgs>> clients;

    /**
     * @return Block type. Each request is block type with following arguments.
     * 
     */
    public Output<List<ProfileRewriteUriRulesClientArgs>> clients() {
        return this.clients;
    }

    /**
     * Name of the rewrite profile. ( policy name should be in full path which is combination of partition and policy name )
     * 
     */
    @Import(name="profileName", required=true)
    private Output<String> profileName;

    /**
     * @return Name of the rewrite profile. ( policy name should be in full path which is combination of partition and policy name )
     * 
     */
    public Output<String> profileName() {
        return this.profileName;
    }

    /**
     * Specifies the name of the uri rule.
     * 
     */
    @Import(name="ruleName", required=true)
    private Output<String> ruleName;

    /**
     * @return Specifies the name of the uri rule.
     * 
     */
    public Output<String> ruleName() {
        return this.ruleName;
    }

    /**
     * Specifies the type of the uri rule. Valid choices are: `request, response, both`. Default value is: `both`
     * 
     */
    @Import(name="ruleType")
    private @Nullable Output<String> ruleType;

    /**
     * @return Specifies the type of the uri rule. Valid choices are: `request, response, both`. Default value is: `both`
     * 
     */
    public Optional<Output<String>> ruleType() {
        return Optional.ofNullable(this.ruleType);
    }

    /**
     * Block type. Each request is block type with following arguments.
     * 
     */
    @Import(name="servers", required=true)
    private Output<List<ProfileRewriteUriRulesServerArgs>> servers;

    /**
     * @return Block type. Each request is block type with following arguments.
     * 
     */
    public Output<List<ProfileRewriteUriRulesServerArgs>> servers() {
        return this.servers;
    }

    private ProfileRewriteUriRulesArgs() {}

    private ProfileRewriteUriRulesArgs(ProfileRewriteUriRulesArgs $) {
        this.clients = $.clients;
        this.profileName = $.profileName;
        this.ruleName = $.ruleName;
        this.ruleType = $.ruleType;
        this.servers = $.servers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProfileRewriteUriRulesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProfileRewriteUriRulesArgs $;

        public Builder() {
            $ = new ProfileRewriteUriRulesArgs();
        }

        public Builder(ProfileRewriteUriRulesArgs defaults) {
            $ = new ProfileRewriteUriRulesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clients Block type. Each request is block type with following arguments.
         * 
         * @return builder
         * 
         */
        public Builder clients(Output<List<ProfileRewriteUriRulesClientArgs>> clients) {
            $.clients = clients;
            return this;
        }

        /**
         * @param clients Block type. Each request is block type with following arguments.
         * 
         * @return builder
         * 
         */
        public Builder clients(List<ProfileRewriteUriRulesClientArgs> clients) {
            return clients(Output.of(clients));
        }

        /**
         * @param clients Block type. Each request is block type with following arguments.
         * 
         * @return builder
         * 
         */
        public Builder clients(ProfileRewriteUriRulesClientArgs... clients) {
            return clients(List.of(clients));
        }

        /**
         * @param profileName Name of the rewrite profile. ( policy name should be in full path which is combination of partition and policy name )
         * 
         * @return builder
         * 
         */
        public Builder profileName(Output<String> profileName) {
            $.profileName = profileName;
            return this;
        }

        /**
         * @param profileName Name of the rewrite profile. ( policy name should be in full path which is combination of partition and policy name )
         * 
         * @return builder
         * 
         */
        public Builder profileName(String profileName) {
            return profileName(Output.of(profileName));
        }

        /**
         * @param ruleName Specifies the name of the uri rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        /**
         * @param ruleName Specifies the name of the uri rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        /**
         * @param ruleType Specifies the type of the uri rule. Valid choices are: `request, response, both`. Default value is: `both`
         * 
         * @return builder
         * 
         */
        public Builder ruleType(@Nullable Output<String> ruleType) {
            $.ruleType = ruleType;
            return this;
        }

        /**
         * @param ruleType Specifies the type of the uri rule. Valid choices are: `request, response, both`. Default value is: `both`
         * 
         * @return builder
         * 
         */
        public Builder ruleType(String ruleType) {
            return ruleType(Output.of(ruleType));
        }

        /**
         * @param servers Block type. Each request is block type with following arguments.
         * 
         * @return builder
         * 
         */
        public Builder servers(Output<List<ProfileRewriteUriRulesServerArgs>> servers) {
            $.servers = servers;
            return this;
        }

        /**
         * @param servers Block type. Each request is block type with following arguments.
         * 
         * @return builder
         * 
         */
        public Builder servers(List<ProfileRewriteUriRulesServerArgs> servers) {
            return servers(Output.of(servers));
        }

        /**
         * @param servers Block type. Each request is block type with following arguments.
         * 
         * @return builder
         * 
         */
        public Builder servers(ProfileRewriteUriRulesServerArgs... servers) {
            return servers(List.of(servers));
        }

        public ProfileRewriteUriRulesArgs build() {
            if ($.clients == null) {
                throw new MissingRequiredPropertyException("ProfileRewriteUriRulesArgs", "clients");
            }
            if ($.profileName == null) {
                throw new MissingRequiredPropertyException("ProfileRewriteUriRulesArgs", "profileName");
            }
            if ($.ruleName == null) {
                throw new MissingRequiredPropertyException("ProfileRewriteUriRulesArgs", "ruleName");
            }
            if ($.servers == null) {
                throw new MissingRequiredPropertyException("ProfileRewriteUriRulesArgs", "servers");
            }
            return $;
        }
    }

}
