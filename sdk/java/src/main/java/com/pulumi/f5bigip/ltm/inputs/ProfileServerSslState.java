// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProfileServerSslState extends com.pulumi.resources.ResourceArgs {

    public static final ProfileServerSslState Empty = new ProfileServerSslState();

    /**
     * Alert time out
     * 
     */
    @Import(name="alertTimeout")
    private @Nullable Output<String> alertTimeout;

    /**
     * @return Alert time out
     * 
     */
    public Optional<Output<String>> alertTimeout() {
        return Optional.ofNullable(this.alertTimeout);
    }

    /**
     * Specifies the frequency of server authentication for an SSL session.When `once`,specifies that the system authenticates the server once for an SSL session.
     * When `always`, specifies that the system authenticates the server once for an SSL session and also upon reuse of that session.
     * 
     */
    @Import(name="authenticate")
    private @Nullable Output<String> authenticate;

    /**
     * @return Specifies the frequency of server authentication for an SSL session.When `once`,specifies that the system authenticates the server once for an SSL session.
     * When `always`, specifies that the system authenticates the server once for an SSL session and also upon reuse of that session.
     * 
     */
    public Optional<Output<String>> authenticate() {
        return Optional.ofNullable(this.authenticate);
    }

    /**
     * Client certificate chain traversal depth. Default 9.
     * 
     */
    @Import(name="authenticateDepth")
    private @Nullable Output<Integer> authenticateDepth;

    /**
     * @return Client certificate chain traversal depth. Default 9.
     * 
     */
    public Optional<Output<Integer>> authenticateDepth() {
        return Optional.ofNullable(this.authenticateDepth);
    }

    /**
     * Specifies the name of the certificate file that is used as the certification authority certificate when SSL client certificate constrained delegation is enabled. The certificate should be generated and installed by you on the system. When selecting this option, type a certificate file name.
     * 
     */
    @Import(name="c3dCaCert")
    private @Nullable Output<String> c3dCaCert;

    /**
     * @return Specifies the name of the certificate file that is used as the certification authority certificate when SSL client certificate constrained delegation is enabled. The certificate should be generated and installed by you on the system. When selecting this option, type a certificate file name.
     * 
     */
    public Optional<Output<String>> c3dCaCert() {
        return Optional.ofNullable(this.c3dCaCert);
    }

    /**
     * Specifies the name of the key file that is used as the certification authority key when SSL client certificate constrained delegation is enabled. The key should be generated and installed by you on the system. When selecting this option, type a key file name.
     * 
     */
    @Import(name="c3dCaKey")
    private @Nullable Output<String> c3dCaKey;

    /**
     * @return Specifies the name of the key file that is used as the certification authority key when SSL client certificate constrained delegation is enabled. The key should be generated and installed by you on the system. When selecting this option, type a key file name.
     * 
     */
    public Optional<Output<String>> c3dCaKey() {
        return Optional.ofNullable(this.c3dCaKey);
    }

    /**
     * CA Passphrase. Default
     * 
     */
    @Import(name="c3dCaPassphrase")
    private @Nullable Output<String> c3dCaPassphrase;

    /**
     * @return CA Passphrase. Default
     * 
     */
    public Optional<Output<String>> c3dCaPassphrase() {
        return Optional.ofNullable(this.c3dCaPassphrase);
    }

    /**
     * Certificate Extensions List. Default
     * 
     */
    @Import(name="c3dCertExtensionCustomOids")
    private @Nullable Output<List<String>> c3dCertExtensionCustomOids;

    /**
     * @return Certificate Extensions List. Default
     * 
     */
    public Optional<Output<List<String>>> c3dCertExtensionCustomOids() {
        return Optional.ofNullable(this.c3dCertExtensionCustomOids);
    }

    /**
     * Specifies the extensions of the client certificates to be included in the generated certificates using SSL client certificate constrained delegation. For example, { basic-constraints }. The default value is { basic-constraints extended-key-usage key-usage subject-alternative-name }. The extensions are:
     * 
     */
    @Import(name="c3dCertExtensionIncludes")
    private @Nullable Output<List<String>> c3dCertExtensionIncludes;

    /**
     * @return Specifies the extensions of the client certificates to be included in the generated certificates using SSL client certificate constrained delegation. For example, { basic-constraints }. The default value is { basic-constraints extended-key-usage key-usage subject-alternative-name }. The extensions are:
     * 
     */
    public Optional<Output<List<String>>> c3dCertExtensionIncludes() {
        return Optional.ofNullable(this.c3dCertExtensionIncludes);
    }

    /**
     * Certificate Lifespan. Default
     * 
     */
    @Import(name="c3dCertLifespan")
    private @Nullable Output<Integer> c3dCertLifespan;

    /**
     * @return Certificate Lifespan. Default
     * 
     */
    public Optional<Output<Integer>> c3dCertLifespan() {
        return Optional.ofNullable(this.c3dCertLifespan);
    }

    /**
     * CA Passphrase. Default enabled
     * 
     */
    @Import(name="c3dCertificateExtensions")
    private @Nullable Output<String> c3dCertificateExtensions;

    /**
     * @return CA Passphrase. Default enabled
     * 
     */
    public Optional<Output<String>> c3dCertificateExtensions() {
        return Optional.ofNullable(this.c3dCertificateExtensions);
    }

    /**
     * Client certificate file path. Default None.
     * 
     */
    @Import(name="caFile")
    private @Nullable Output<String> caFile;

    /**
     * @return Client certificate file path. Default None.
     * 
     */
    public Optional<Output<String>> caFile() {
        return Optional.ofNullable(this.caFile);
    }

    /**
     * Cache size (sessions).
     * 
     */
    @Import(name="cacheSize")
    private @Nullable Output<Integer> cacheSize;

    /**
     * @return Cache size (sessions).
     * 
     */
    public Optional<Output<Integer>> cacheSize() {
        return Optional.ofNullable(this.cacheSize);
    }

    /**
     * Cache time out
     * 
     */
    @Import(name="cacheTimeout")
    private @Nullable Output<Integer> cacheTimeout;

    /**
     * @return Cache time out
     * 
     */
    public Optional<Output<Integer>> cacheTimeout() {
        return Optional.ofNullable(this.cacheTimeout);
    }

    /**
     * Specifies the name of the certificate that the system uses for server-side SSL processing.
     * 
     */
    @Import(name="cert")
    private @Nullable Output<String> cert;

    /**
     * @return Specifies the name of the certificate that the system uses for server-side SSL processing.
     * 
     */
    public Optional<Output<String>> cert() {
        return Optional.ofNullable(this.cert);
    }

    /**
     * Specifies the certificates-key chain to associate with the SSL profile
     * 
     */
    @Import(name="chain")
    private @Nullable Output<String> chain;

    /**
     * @return Specifies the certificates-key chain to associate with the SSL profile
     * 
     */
    public Optional<Output<String>> chain() {
        return Optional.ofNullable(this.chain);
    }

    /**
     * Specifies the list of ciphers that the system supports. When creating a new profile, the default cipher list is provided by the parent profile.
     * 
     */
    @Import(name="ciphers")
    private @Nullable Output<String> ciphers;

    /**
     * @return Specifies the list of ciphers that the system supports. When creating a new profile, the default cipher list is provided by the parent profile.
     * 
     */
    public Optional<Output<String>> ciphers() {
        return Optional.ofNullable(this.ciphers);
    }

    /**
     * The parent template of this monitor template. Once this value has been set, it cannot be changed. By default, this value is `/Common/serverssl`.
     * 
     */
    @Import(name="defaultsFrom")
    private @Nullable Output<String> defaultsFrom;

    /**
     * @return The parent template of this monitor template. Once this value has been set, it cannot be changed. By default, this value is `/Common/serverssl`.
     * 
     */
    public Optional<Output<String>> defaultsFrom() {
        return Optional.ofNullable(this.defaultsFrom);
    }

    /**
     * Response if the cert is expired (drop / ignore).
     * 
     */
    @Import(name="expireCertResponseControl")
    private @Nullable Output<String> expireCertResponseControl;

    /**
     * @return Response if the cert is expired (drop / ignore).
     * 
     */
    public Optional<Output<String>> expireCertResponseControl() {
        return Optional.ofNullable(this.expireCertResponseControl);
    }

    /**
     * full path of the profile
     * 
     */
    @Import(name="fullPath")
    private @Nullable Output<String> fullPath;

    /**
     * @return full path of the profile
     * 
     */
    public Optional<Output<String>> fullPath() {
        return Optional.ofNullable(this.fullPath);
    }

    /**
     * generation
     * 
     */
    @Import(name="generation")
    private @Nullable Output<Integer> generation;

    /**
     * @return generation
     * 
     */
    public Optional<Output<Integer>> generation() {
        return Optional.ofNullable(this.generation);
    }

    /**
     * Generic alerts enabled / disabled.
     * 
     */
    @Import(name="genericAlert")
    private @Nullable Output<String> genericAlert;

    /**
     * @return Generic alerts enabled / disabled.
     * 
     */
    public Optional<Output<String>> genericAlert() {
        return Optional.ofNullable(this.genericAlert);
    }

    /**
     * Handshake time out (seconds)
     * 
     */
    @Import(name="handshakeTimeout")
    private @Nullable Output<String> handshakeTimeout;

    /**
     * @return Handshake time out (seconds)
     * 
     */
    public Optional<Output<String>> handshakeTimeout() {
        return Optional.ofNullable(this.handshakeTimeout);
    }

    /**
     * Specifies the file name of the SSL key.
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return Specifies the file name of the SSL key.
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * ModSSL Methods enabled / disabled. Default is disabled.
     * 
     */
    @Import(name="modSslMethods")
    private @Nullable Output<String> modSslMethods;

    /**
     * @return ModSSL Methods enabled / disabled. Default is disabled.
     * 
     */
    public Optional<Output<String>> modSslMethods() {
        return Optional.ofNullable(this.modSslMethods);
    }

    /**
     * ModSSL Methods enabled / disabled. Default is disabled.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return ModSSL Methods enabled / disabled. Default is disabled.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Specifies the name of the profile.Name of Profile should be full path,full path is the combination of the `partition + profile name`. For example `/Common/test-serverssl-profile`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the profile.Name of Profile should be full path,full path is the combination of the `partition + profile name`. For example `/Common/test-serverssl-profile`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * name of partition
     * 
     */
    @Import(name="partition")
    private @Nullable Output<String> partition;

    /**
     * @return name of partition
     * 
     */
    public Optional<Output<String>> partition() {
        return Optional.ofNullable(this.partition);
    }

    /**
     * Client Certificate Constrained Delegation CA passphrase
     * 
     */
    @Import(name="passphrase")
    private @Nullable Output<String> passphrase;

    /**
     * @return Client Certificate Constrained Delegation CA passphrase
     * 
     */
    public Optional<Output<String>> passphrase() {
        return Optional.ofNullable(this.passphrase);
    }

    /**
     * Specifies the way the system handles client certificates.When ignore, specifies that the system ignores certificates from client systems.When require, specifies that the system requires a client to present a valid certificate.When request, specifies that the system requests a valid certificate from a client but always authenticate the client.
     * 
     */
    @Import(name="peerCertMode")
    private @Nullable Output<String> peerCertMode;

    /**
     * @return Specifies the way the system handles client certificates.When ignore, specifies that the system ignores certificates from client systems.When require, specifies that the system requires a client to present a valid certificate.When request, specifies that the system requests a valid certificate from a client but always authenticate the client.
     * 
     */
    public Optional<Output<String>> peerCertMode() {
        return Optional.ofNullable(this.peerCertMode);
    }

    /**
     * Proxy CA Cert
     * 
     */
    @Import(name="proxyCaCert")
    private @Nullable Output<String> proxyCaCert;

    /**
     * @return Proxy CA Cert
     * 
     */
    public Optional<Output<String>> proxyCaCert() {
        return Optional.ofNullable(this.proxyCaCert);
    }

    /**
     * Proxy CA Key
     * 
     */
    @Import(name="proxyCaKey")
    private @Nullable Output<String> proxyCaKey;

    /**
     * @return Proxy CA Key
     * 
     */
    public Optional<Output<String>> proxyCaKey() {
        return Optional.ofNullable(this.proxyCaKey);
    }

    /**
     * Proxy SSL enabled / disabled. Default is disabled.
     * 
     */
    @Import(name="proxySsl")
    private @Nullable Output<String> proxySsl;

    /**
     * @return Proxy SSL enabled / disabled. Default is disabled.
     * 
     */
    public Optional<Output<String>> proxySsl() {
        return Optional.ofNullable(this.proxySsl);
    }

    /**
     * Renogotiate Period (seconds)
     * 
     */
    @Import(name="renegotiatePeriod")
    private @Nullable Output<String> renegotiatePeriod;

    /**
     * @return Renogotiate Period (seconds)
     * 
     */
    public Optional<Output<String>> renegotiatePeriod() {
        return Optional.ofNullable(this.renegotiatePeriod);
    }

    /**
     * Renogotiate Size
     * 
     */
    @Import(name="renegotiateSize")
    private @Nullable Output<String> renegotiateSize;

    /**
     * @return Renogotiate Size
     * 
     */
    public Optional<Output<String>> renegotiateSize() {
        return Optional.ofNullable(this.renegotiateSize);
    }

    /**
     * Enables or disables SSL renegotiation.When creating a new profile, the setting is provided by the parent profile
     * 
     */
    @Import(name="renegotiation")
    private @Nullable Output<String> renegotiation;

    /**
     * @return Enables or disables SSL renegotiation.When creating a new profile, the setting is provided by the parent profile
     * 
     */
    public Optional<Output<String>> renegotiation() {
        return Optional.ofNullable(this.renegotiation);
    }

    /**
     * When `true`, client certificate is retained in SSL session.
     * 
     */
    @Import(name="retainCertificate")
    private @Nullable Output<String> retainCertificate;

    /**
     * @return When `true`, client certificate is retained in SSL session.
     * 
     */
    public Optional<Output<String>> retainCertificate() {
        return Optional.ofNullable(this.retainCertificate);
    }

    /**
     * Specifies the method of secure renegotiations for SSL connections. When creating a new profile, the setting is provided by the parent profile.
     * When `request` is set the system request secure renegotation of SSL connections.
     * `require` is a default setting and when set the system permits initial SSL handshakes from clients but terminates renegotiations from unpatched clients.
     * The `require-strict` setting the system requires strict renegotiation of SSL connections. In this mode the system refuses connections to insecure servers, and terminates existing SSL connections to insecure servers
     * 
     */
    @Import(name="secureRenegotiation")
    private @Nullable Output<String> secureRenegotiation;

    /**
     * @return Specifies the method of secure renegotiations for SSL connections. When creating a new profile, the setting is provided by the parent profile.
     * When `request` is set the system request secure renegotation of SSL connections.
     * `require` is a default setting and when set the system permits initial SSL handshakes from clients but terminates renegotiations from unpatched clients.
     * The `require-strict` setting the system requires strict renegotiation of SSL connections. In this mode the system refuses connections to insecure servers, and terminates existing SSL connections to insecure servers
     * 
     */
    public Optional<Output<String>> secureRenegotiation() {
        return Optional.ofNullable(this.secureRenegotiation);
    }

    /**
     * Specifies the fully qualified DNS hostname of the server used in Server Name Indication communications. When creating a new profile, the setting is provided by the parent profile.The server name can also be a wildcard string containing the asterisk `*` character.
     * 
     */
    @Import(name="serverName")
    private @Nullable Output<String> serverName;

    /**
     * @return Specifies the fully qualified DNS hostname of the server used in Server Name Indication communications. When creating a new profile, the setting is provided by the parent profile.The server name can also be a wildcard string containing the asterisk `*` character.
     * 
     */
    public Optional<Output<String>> serverName() {
        return Optional.ofNullable(this.serverName);
    }

    /**
     * Session Mirroring (enabled / disabled)
     * 
     */
    @Import(name="sessionMirroring")
    private @Nullable Output<String> sessionMirroring;

    /**
     * @return Session Mirroring (enabled / disabled)
     * 
     */
    public Optional<Output<String>> sessionMirroring() {
        return Optional.ofNullable(this.sessionMirroring);
    }

    /**
     * Session Ticket (enabled / disabled)
     * 
     */
    @Import(name="sessionTicket")
    private @Nullable Output<String> sessionTicket;

    /**
     * @return Session Ticket (enabled / disabled)
     * 
     */
    public Optional<Output<String>> sessionTicket() {
        return Optional.ofNullable(this.sessionTicket);
    }

    /**
     * Indicates that the system uses this profile as the default SSL profile when there is no match to the server name, or when the client provides no SNI extension support.When creating a new profile, the setting is provided by the parent profile.
     * There can be only one SSL profile with this setting enabled.
     * 
     */
    @Import(name="sniDefault")
    private @Nullable Output<String> sniDefault;

    /**
     * @return Indicates that the system uses this profile as the default SSL profile when there is no match to the server name, or when the client provides no SNI extension support.When creating a new profile, the setting is provided by the parent profile.
     * There can be only one SSL profile with this setting enabled.
     * 
     */
    public Optional<Output<String>> sniDefault() {
        return Optional.ofNullable(this.sniDefault);
    }

    /**
     * Requires that the network peers also provide SNI support, this setting only takes effect when `sni_default` is set to `true`.When creating a new profile, the setting is provided by the parent profile
     * 
     */
    @Import(name="sniRequire")
    private @Nullable Output<String> sniRequire;

    /**
     * @return Requires that the network peers also provide SNI support, this setting only takes effect when `sni_default` is set to `true`.When creating a new profile, the setting is provided by the parent profile
     * 
     */
    public Optional<Output<String>> sniRequire() {
        return Optional.ofNullable(this.sniRequire);
    }

    /**
     * Enables or disables SSL forward proxy bypass on receiving
     * handshake_failure, protocol_version or unsupported_extension alert message during the serverside SSL handshake. When enabled and there is an SSL handshake_failure, protocol_version or unsupported_extension alert during the serverside SSL handshake, SSL traffic bypasses the BIG-IP system untouched, without decryption/encryption. The default value is disabled. Conversely, you can specify enabled to use this feature.
     * 
     */
    @Import(name="sslC3d")
    private @Nullable Output<String> sslC3d;

    /**
     * @return Enables or disables SSL forward proxy bypass on receiving
     * handshake_failure, protocol_version or unsupported_extension alert message during the serverside SSL handshake. When enabled and there is an SSL handshake_failure, protocol_version or unsupported_extension alert during the serverside SSL handshake, SSL traffic bypasses the BIG-IP system untouched, without decryption/encryption. The default value is disabled. Conversely, you can specify enabled to use this feature.
     * 
     */
    public Optional<Output<String>> sslC3d() {
        return Optional.ofNullable(this.sslC3d);
    }

    /**
     * Specifies whether SSL forward proxy feature is enabled or not. The default value is disabled.
     * 
     */
    @Import(name="sslForwardProxy")
    private @Nullable Output<String> sslForwardProxy;

    /**
     * @return Specifies whether SSL forward proxy feature is enabled or not. The default value is disabled.
     * 
     */
    public Optional<Output<String>> sslForwardProxy() {
        return Optional.ofNullable(this.sslForwardProxy);
    }

    /**
     * Specifies whether SSL forward proxy bypass feature is enabled or not. The default value is disabled.
     * 
     */
    @Import(name="sslForwardProxyBypass")
    private @Nullable Output<String> sslForwardProxyBypass;

    /**
     * @return Specifies whether SSL forward proxy bypass feature is enabled or not. The default value is disabled.
     * 
     */
    public Optional<Output<String>> sslForwardProxyBypass() {
        return Optional.ofNullable(this.sslForwardProxyBypass);
    }

    /**
     * SSL sign hash (any, sha1, sha256, sha384)
     * 
     */
    @Import(name="sslSignHash")
    private @Nullable Output<String> sslSignHash;

    /**
     * @return SSL sign hash (any, sha1, sha256, sha384)
     * 
     */
    public Optional<Output<String>> sslSignHash() {
        return Optional.ofNullable(this.sslSignHash);
    }

    /**
     * Enables or disables the resumption of SSL sessions after an unclean shutdown.When creating a new profile, the setting is provided by the parent profile.
     * 
     */
    @Import(name="strictResume")
    private @Nullable Output<String> strictResume;

    /**
     * @return Enables or disables the resumption of SSL sessions after an unclean shutdown.When creating a new profile, the setting is provided by the parent profile.
     * 
     */
    public Optional<Output<String>> strictResume() {
        return Optional.ofNullable(this.strictResume);
    }

    /**
     * List of Enabled selection from a set of industry standard options for handling SSL processing.By default,
     * Don&#39;t insert empty fragments and No TLSv1.3 are listed as Enabled Options. `Usage` : tm_options    = [&#34;dont-insert-empty-fragments&#34;,&#34;no-tlsv1.3&#34;]
     * 
     */
    @Import(name="tmOptions")
    private @Nullable Output<List<String>> tmOptions;

    /**
     * @return List of Enabled selection from a set of industry standard options for handling SSL processing.By default,
     * Don&#39;t insert empty fragments and No TLSv1.3 are listed as Enabled Options. `Usage` : tm_options    = [&#34;dont-insert-empty-fragments&#34;,&#34;no-tlsv1.3&#34;]
     * 
     */
    public Optional<Output<List<String>>> tmOptions() {
        return Optional.ofNullable(this.tmOptions);
    }

    /**
     * Unclean Shutdown (enabled / disabled)
     * 
     */
    @Import(name="uncleanShutdown")
    private @Nullable Output<String> uncleanShutdown;

    /**
     * @return Unclean Shutdown (enabled / disabled)
     * 
     */
    public Optional<Output<String>> uncleanShutdown() {
        return Optional.ofNullable(this.uncleanShutdown);
    }

    /**
     * Unclean Shutdown (drop / ignore)
     * 
     */
    @Import(name="untrustedCertResponseControl")
    private @Nullable Output<String> untrustedCertResponseControl;

    /**
     * @return Unclean Shutdown (drop / ignore)
     * 
     */
    public Optional<Output<String>> untrustedCertResponseControl() {
        return Optional.ofNullable(this.untrustedCertResponseControl);
    }

    private ProfileServerSslState() {}

    private ProfileServerSslState(ProfileServerSslState $) {
        this.alertTimeout = $.alertTimeout;
        this.authenticate = $.authenticate;
        this.authenticateDepth = $.authenticateDepth;
        this.c3dCaCert = $.c3dCaCert;
        this.c3dCaKey = $.c3dCaKey;
        this.c3dCaPassphrase = $.c3dCaPassphrase;
        this.c3dCertExtensionCustomOids = $.c3dCertExtensionCustomOids;
        this.c3dCertExtensionIncludes = $.c3dCertExtensionIncludes;
        this.c3dCertLifespan = $.c3dCertLifespan;
        this.c3dCertificateExtensions = $.c3dCertificateExtensions;
        this.caFile = $.caFile;
        this.cacheSize = $.cacheSize;
        this.cacheTimeout = $.cacheTimeout;
        this.cert = $.cert;
        this.chain = $.chain;
        this.ciphers = $.ciphers;
        this.defaultsFrom = $.defaultsFrom;
        this.expireCertResponseControl = $.expireCertResponseControl;
        this.fullPath = $.fullPath;
        this.generation = $.generation;
        this.genericAlert = $.genericAlert;
        this.handshakeTimeout = $.handshakeTimeout;
        this.key = $.key;
        this.modSslMethods = $.modSslMethods;
        this.mode = $.mode;
        this.name = $.name;
        this.partition = $.partition;
        this.passphrase = $.passphrase;
        this.peerCertMode = $.peerCertMode;
        this.proxyCaCert = $.proxyCaCert;
        this.proxyCaKey = $.proxyCaKey;
        this.proxySsl = $.proxySsl;
        this.renegotiatePeriod = $.renegotiatePeriod;
        this.renegotiateSize = $.renegotiateSize;
        this.renegotiation = $.renegotiation;
        this.retainCertificate = $.retainCertificate;
        this.secureRenegotiation = $.secureRenegotiation;
        this.serverName = $.serverName;
        this.sessionMirroring = $.sessionMirroring;
        this.sessionTicket = $.sessionTicket;
        this.sniDefault = $.sniDefault;
        this.sniRequire = $.sniRequire;
        this.sslC3d = $.sslC3d;
        this.sslForwardProxy = $.sslForwardProxy;
        this.sslForwardProxyBypass = $.sslForwardProxyBypass;
        this.sslSignHash = $.sslSignHash;
        this.strictResume = $.strictResume;
        this.tmOptions = $.tmOptions;
        this.uncleanShutdown = $.uncleanShutdown;
        this.untrustedCertResponseControl = $.untrustedCertResponseControl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProfileServerSslState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProfileServerSslState $;

        public Builder() {
            $ = new ProfileServerSslState();
        }

        public Builder(ProfileServerSslState defaults) {
            $ = new ProfileServerSslState(Objects.requireNonNull(defaults));
        }

        /**
         * @param alertTimeout Alert time out
         * 
         * @return builder
         * 
         */
        public Builder alertTimeout(@Nullable Output<String> alertTimeout) {
            $.alertTimeout = alertTimeout;
            return this;
        }

        /**
         * @param alertTimeout Alert time out
         * 
         * @return builder
         * 
         */
        public Builder alertTimeout(String alertTimeout) {
            return alertTimeout(Output.of(alertTimeout));
        }

        /**
         * @param authenticate Specifies the frequency of server authentication for an SSL session.When `once`,specifies that the system authenticates the server once for an SSL session.
         * When `always`, specifies that the system authenticates the server once for an SSL session and also upon reuse of that session.
         * 
         * @return builder
         * 
         */
        public Builder authenticate(@Nullable Output<String> authenticate) {
            $.authenticate = authenticate;
            return this;
        }

        /**
         * @param authenticate Specifies the frequency of server authentication for an SSL session.When `once`,specifies that the system authenticates the server once for an SSL session.
         * When `always`, specifies that the system authenticates the server once for an SSL session and also upon reuse of that session.
         * 
         * @return builder
         * 
         */
        public Builder authenticate(String authenticate) {
            return authenticate(Output.of(authenticate));
        }

        /**
         * @param authenticateDepth Client certificate chain traversal depth. Default 9.
         * 
         * @return builder
         * 
         */
        public Builder authenticateDepth(@Nullable Output<Integer> authenticateDepth) {
            $.authenticateDepth = authenticateDepth;
            return this;
        }

        /**
         * @param authenticateDepth Client certificate chain traversal depth. Default 9.
         * 
         * @return builder
         * 
         */
        public Builder authenticateDepth(Integer authenticateDepth) {
            return authenticateDepth(Output.of(authenticateDepth));
        }

        /**
         * @param c3dCaCert Specifies the name of the certificate file that is used as the certification authority certificate when SSL client certificate constrained delegation is enabled. The certificate should be generated and installed by you on the system. When selecting this option, type a certificate file name.
         * 
         * @return builder
         * 
         */
        public Builder c3dCaCert(@Nullable Output<String> c3dCaCert) {
            $.c3dCaCert = c3dCaCert;
            return this;
        }

        /**
         * @param c3dCaCert Specifies the name of the certificate file that is used as the certification authority certificate when SSL client certificate constrained delegation is enabled. The certificate should be generated and installed by you on the system. When selecting this option, type a certificate file name.
         * 
         * @return builder
         * 
         */
        public Builder c3dCaCert(String c3dCaCert) {
            return c3dCaCert(Output.of(c3dCaCert));
        }

        /**
         * @param c3dCaKey Specifies the name of the key file that is used as the certification authority key when SSL client certificate constrained delegation is enabled. The key should be generated and installed by you on the system. When selecting this option, type a key file name.
         * 
         * @return builder
         * 
         */
        public Builder c3dCaKey(@Nullable Output<String> c3dCaKey) {
            $.c3dCaKey = c3dCaKey;
            return this;
        }

        /**
         * @param c3dCaKey Specifies the name of the key file that is used as the certification authority key when SSL client certificate constrained delegation is enabled. The key should be generated and installed by you on the system. When selecting this option, type a key file name.
         * 
         * @return builder
         * 
         */
        public Builder c3dCaKey(String c3dCaKey) {
            return c3dCaKey(Output.of(c3dCaKey));
        }

        /**
         * @param c3dCaPassphrase CA Passphrase. Default
         * 
         * @return builder
         * 
         */
        public Builder c3dCaPassphrase(@Nullable Output<String> c3dCaPassphrase) {
            $.c3dCaPassphrase = c3dCaPassphrase;
            return this;
        }

        /**
         * @param c3dCaPassphrase CA Passphrase. Default
         * 
         * @return builder
         * 
         */
        public Builder c3dCaPassphrase(String c3dCaPassphrase) {
            return c3dCaPassphrase(Output.of(c3dCaPassphrase));
        }

        /**
         * @param c3dCertExtensionCustomOids Certificate Extensions List. Default
         * 
         * @return builder
         * 
         */
        public Builder c3dCertExtensionCustomOids(@Nullable Output<List<String>> c3dCertExtensionCustomOids) {
            $.c3dCertExtensionCustomOids = c3dCertExtensionCustomOids;
            return this;
        }

        /**
         * @param c3dCertExtensionCustomOids Certificate Extensions List. Default
         * 
         * @return builder
         * 
         */
        public Builder c3dCertExtensionCustomOids(List<String> c3dCertExtensionCustomOids) {
            return c3dCertExtensionCustomOids(Output.of(c3dCertExtensionCustomOids));
        }

        /**
         * @param c3dCertExtensionCustomOids Certificate Extensions List. Default
         * 
         * @return builder
         * 
         */
        public Builder c3dCertExtensionCustomOids(String... c3dCertExtensionCustomOids) {
            return c3dCertExtensionCustomOids(List.of(c3dCertExtensionCustomOids));
        }

        /**
         * @param c3dCertExtensionIncludes Specifies the extensions of the client certificates to be included in the generated certificates using SSL client certificate constrained delegation. For example, { basic-constraints }. The default value is { basic-constraints extended-key-usage key-usage subject-alternative-name }. The extensions are:
         * 
         * @return builder
         * 
         */
        public Builder c3dCertExtensionIncludes(@Nullable Output<List<String>> c3dCertExtensionIncludes) {
            $.c3dCertExtensionIncludes = c3dCertExtensionIncludes;
            return this;
        }

        /**
         * @param c3dCertExtensionIncludes Specifies the extensions of the client certificates to be included in the generated certificates using SSL client certificate constrained delegation. For example, { basic-constraints }. The default value is { basic-constraints extended-key-usage key-usage subject-alternative-name }. The extensions are:
         * 
         * @return builder
         * 
         */
        public Builder c3dCertExtensionIncludes(List<String> c3dCertExtensionIncludes) {
            return c3dCertExtensionIncludes(Output.of(c3dCertExtensionIncludes));
        }

        /**
         * @param c3dCertExtensionIncludes Specifies the extensions of the client certificates to be included in the generated certificates using SSL client certificate constrained delegation. For example, { basic-constraints }. The default value is { basic-constraints extended-key-usage key-usage subject-alternative-name }. The extensions are:
         * 
         * @return builder
         * 
         */
        public Builder c3dCertExtensionIncludes(String... c3dCertExtensionIncludes) {
            return c3dCertExtensionIncludes(List.of(c3dCertExtensionIncludes));
        }

        /**
         * @param c3dCertLifespan Certificate Lifespan. Default
         * 
         * @return builder
         * 
         */
        public Builder c3dCertLifespan(@Nullable Output<Integer> c3dCertLifespan) {
            $.c3dCertLifespan = c3dCertLifespan;
            return this;
        }

        /**
         * @param c3dCertLifespan Certificate Lifespan. Default
         * 
         * @return builder
         * 
         */
        public Builder c3dCertLifespan(Integer c3dCertLifespan) {
            return c3dCertLifespan(Output.of(c3dCertLifespan));
        }

        /**
         * @param c3dCertificateExtensions CA Passphrase. Default enabled
         * 
         * @return builder
         * 
         */
        public Builder c3dCertificateExtensions(@Nullable Output<String> c3dCertificateExtensions) {
            $.c3dCertificateExtensions = c3dCertificateExtensions;
            return this;
        }

        /**
         * @param c3dCertificateExtensions CA Passphrase. Default enabled
         * 
         * @return builder
         * 
         */
        public Builder c3dCertificateExtensions(String c3dCertificateExtensions) {
            return c3dCertificateExtensions(Output.of(c3dCertificateExtensions));
        }

        /**
         * @param caFile Client certificate file path. Default None.
         * 
         * @return builder
         * 
         */
        public Builder caFile(@Nullable Output<String> caFile) {
            $.caFile = caFile;
            return this;
        }

        /**
         * @param caFile Client certificate file path. Default None.
         * 
         * @return builder
         * 
         */
        public Builder caFile(String caFile) {
            return caFile(Output.of(caFile));
        }

        /**
         * @param cacheSize Cache size (sessions).
         * 
         * @return builder
         * 
         */
        public Builder cacheSize(@Nullable Output<Integer> cacheSize) {
            $.cacheSize = cacheSize;
            return this;
        }

        /**
         * @param cacheSize Cache size (sessions).
         * 
         * @return builder
         * 
         */
        public Builder cacheSize(Integer cacheSize) {
            return cacheSize(Output.of(cacheSize));
        }

        /**
         * @param cacheTimeout Cache time out
         * 
         * @return builder
         * 
         */
        public Builder cacheTimeout(@Nullable Output<Integer> cacheTimeout) {
            $.cacheTimeout = cacheTimeout;
            return this;
        }

        /**
         * @param cacheTimeout Cache time out
         * 
         * @return builder
         * 
         */
        public Builder cacheTimeout(Integer cacheTimeout) {
            return cacheTimeout(Output.of(cacheTimeout));
        }

        /**
         * @param cert Specifies the name of the certificate that the system uses for server-side SSL processing.
         * 
         * @return builder
         * 
         */
        public Builder cert(@Nullable Output<String> cert) {
            $.cert = cert;
            return this;
        }

        /**
         * @param cert Specifies the name of the certificate that the system uses for server-side SSL processing.
         * 
         * @return builder
         * 
         */
        public Builder cert(String cert) {
            return cert(Output.of(cert));
        }

        /**
         * @param chain Specifies the certificates-key chain to associate with the SSL profile
         * 
         * @return builder
         * 
         */
        public Builder chain(@Nullable Output<String> chain) {
            $.chain = chain;
            return this;
        }

        /**
         * @param chain Specifies the certificates-key chain to associate with the SSL profile
         * 
         * @return builder
         * 
         */
        public Builder chain(String chain) {
            return chain(Output.of(chain));
        }

        /**
         * @param ciphers Specifies the list of ciphers that the system supports. When creating a new profile, the default cipher list is provided by the parent profile.
         * 
         * @return builder
         * 
         */
        public Builder ciphers(@Nullable Output<String> ciphers) {
            $.ciphers = ciphers;
            return this;
        }

        /**
         * @param ciphers Specifies the list of ciphers that the system supports. When creating a new profile, the default cipher list is provided by the parent profile.
         * 
         * @return builder
         * 
         */
        public Builder ciphers(String ciphers) {
            return ciphers(Output.of(ciphers));
        }

        /**
         * @param defaultsFrom The parent template of this monitor template. Once this value has been set, it cannot be changed. By default, this value is `/Common/serverssl`.
         * 
         * @return builder
         * 
         */
        public Builder defaultsFrom(@Nullable Output<String> defaultsFrom) {
            $.defaultsFrom = defaultsFrom;
            return this;
        }

        /**
         * @param defaultsFrom The parent template of this monitor template. Once this value has been set, it cannot be changed. By default, this value is `/Common/serverssl`.
         * 
         * @return builder
         * 
         */
        public Builder defaultsFrom(String defaultsFrom) {
            return defaultsFrom(Output.of(defaultsFrom));
        }

        /**
         * @param expireCertResponseControl Response if the cert is expired (drop / ignore).
         * 
         * @return builder
         * 
         */
        public Builder expireCertResponseControl(@Nullable Output<String> expireCertResponseControl) {
            $.expireCertResponseControl = expireCertResponseControl;
            return this;
        }

        /**
         * @param expireCertResponseControl Response if the cert is expired (drop / ignore).
         * 
         * @return builder
         * 
         */
        public Builder expireCertResponseControl(String expireCertResponseControl) {
            return expireCertResponseControl(Output.of(expireCertResponseControl));
        }

        /**
         * @param fullPath full path of the profile
         * 
         * @return builder
         * 
         */
        public Builder fullPath(@Nullable Output<String> fullPath) {
            $.fullPath = fullPath;
            return this;
        }

        /**
         * @param fullPath full path of the profile
         * 
         * @return builder
         * 
         */
        public Builder fullPath(String fullPath) {
            return fullPath(Output.of(fullPath));
        }

        /**
         * @param generation generation
         * 
         * @return builder
         * 
         */
        public Builder generation(@Nullable Output<Integer> generation) {
            $.generation = generation;
            return this;
        }

        /**
         * @param generation generation
         * 
         * @return builder
         * 
         */
        public Builder generation(Integer generation) {
            return generation(Output.of(generation));
        }

        /**
         * @param genericAlert Generic alerts enabled / disabled.
         * 
         * @return builder
         * 
         */
        public Builder genericAlert(@Nullable Output<String> genericAlert) {
            $.genericAlert = genericAlert;
            return this;
        }

        /**
         * @param genericAlert Generic alerts enabled / disabled.
         * 
         * @return builder
         * 
         */
        public Builder genericAlert(String genericAlert) {
            return genericAlert(Output.of(genericAlert));
        }

        /**
         * @param handshakeTimeout Handshake time out (seconds)
         * 
         * @return builder
         * 
         */
        public Builder handshakeTimeout(@Nullable Output<String> handshakeTimeout) {
            $.handshakeTimeout = handshakeTimeout;
            return this;
        }

        /**
         * @param handshakeTimeout Handshake time out (seconds)
         * 
         * @return builder
         * 
         */
        public Builder handshakeTimeout(String handshakeTimeout) {
            return handshakeTimeout(Output.of(handshakeTimeout));
        }

        /**
         * @param key Specifies the file name of the SSL key.
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Specifies the file name of the SSL key.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param modSslMethods ModSSL Methods enabled / disabled. Default is disabled.
         * 
         * @return builder
         * 
         */
        public Builder modSslMethods(@Nullable Output<String> modSslMethods) {
            $.modSslMethods = modSslMethods;
            return this;
        }

        /**
         * @param modSslMethods ModSSL Methods enabled / disabled. Default is disabled.
         * 
         * @return builder
         * 
         */
        public Builder modSslMethods(String modSslMethods) {
            return modSslMethods(Output.of(modSslMethods));
        }

        /**
         * @param mode ModSSL Methods enabled / disabled. Default is disabled.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode ModSSL Methods enabled / disabled. Default is disabled.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param name Specifies the name of the profile.Name of Profile should be full path,full path is the combination of the `partition + profile name`. For example `/Common/test-serverssl-profile`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the profile.Name of Profile should be full path,full path is the combination of the `partition + profile name`. For example `/Common/test-serverssl-profile`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param partition name of partition
         * 
         * @return builder
         * 
         */
        public Builder partition(@Nullable Output<String> partition) {
            $.partition = partition;
            return this;
        }

        /**
         * @param partition name of partition
         * 
         * @return builder
         * 
         */
        public Builder partition(String partition) {
            return partition(Output.of(partition));
        }

        /**
         * @param passphrase Client Certificate Constrained Delegation CA passphrase
         * 
         * @return builder
         * 
         */
        public Builder passphrase(@Nullable Output<String> passphrase) {
            $.passphrase = passphrase;
            return this;
        }

        /**
         * @param passphrase Client Certificate Constrained Delegation CA passphrase
         * 
         * @return builder
         * 
         */
        public Builder passphrase(String passphrase) {
            return passphrase(Output.of(passphrase));
        }

        /**
         * @param peerCertMode Specifies the way the system handles client certificates.When ignore, specifies that the system ignores certificates from client systems.When require, specifies that the system requires a client to present a valid certificate.When request, specifies that the system requests a valid certificate from a client but always authenticate the client.
         * 
         * @return builder
         * 
         */
        public Builder peerCertMode(@Nullable Output<String> peerCertMode) {
            $.peerCertMode = peerCertMode;
            return this;
        }

        /**
         * @param peerCertMode Specifies the way the system handles client certificates.When ignore, specifies that the system ignores certificates from client systems.When require, specifies that the system requires a client to present a valid certificate.When request, specifies that the system requests a valid certificate from a client but always authenticate the client.
         * 
         * @return builder
         * 
         */
        public Builder peerCertMode(String peerCertMode) {
            return peerCertMode(Output.of(peerCertMode));
        }

        /**
         * @param proxyCaCert Proxy CA Cert
         * 
         * @return builder
         * 
         */
        public Builder proxyCaCert(@Nullable Output<String> proxyCaCert) {
            $.proxyCaCert = proxyCaCert;
            return this;
        }

        /**
         * @param proxyCaCert Proxy CA Cert
         * 
         * @return builder
         * 
         */
        public Builder proxyCaCert(String proxyCaCert) {
            return proxyCaCert(Output.of(proxyCaCert));
        }

        /**
         * @param proxyCaKey Proxy CA Key
         * 
         * @return builder
         * 
         */
        public Builder proxyCaKey(@Nullable Output<String> proxyCaKey) {
            $.proxyCaKey = proxyCaKey;
            return this;
        }

        /**
         * @param proxyCaKey Proxy CA Key
         * 
         * @return builder
         * 
         */
        public Builder proxyCaKey(String proxyCaKey) {
            return proxyCaKey(Output.of(proxyCaKey));
        }

        /**
         * @param proxySsl Proxy SSL enabled / disabled. Default is disabled.
         * 
         * @return builder
         * 
         */
        public Builder proxySsl(@Nullable Output<String> proxySsl) {
            $.proxySsl = proxySsl;
            return this;
        }

        /**
         * @param proxySsl Proxy SSL enabled / disabled. Default is disabled.
         * 
         * @return builder
         * 
         */
        public Builder proxySsl(String proxySsl) {
            return proxySsl(Output.of(proxySsl));
        }

        /**
         * @param renegotiatePeriod Renogotiate Period (seconds)
         * 
         * @return builder
         * 
         */
        public Builder renegotiatePeriod(@Nullable Output<String> renegotiatePeriod) {
            $.renegotiatePeriod = renegotiatePeriod;
            return this;
        }

        /**
         * @param renegotiatePeriod Renogotiate Period (seconds)
         * 
         * @return builder
         * 
         */
        public Builder renegotiatePeriod(String renegotiatePeriod) {
            return renegotiatePeriod(Output.of(renegotiatePeriod));
        }

        /**
         * @param renegotiateSize Renogotiate Size
         * 
         * @return builder
         * 
         */
        public Builder renegotiateSize(@Nullable Output<String> renegotiateSize) {
            $.renegotiateSize = renegotiateSize;
            return this;
        }

        /**
         * @param renegotiateSize Renogotiate Size
         * 
         * @return builder
         * 
         */
        public Builder renegotiateSize(String renegotiateSize) {
            return renegotiateSize(Output.of(renegotiateSize));
        }

        /**
         * @param renegotiation Enables or disables SSL renegotiation.When creating a new profile, the setting is provided by the parent profile
         * 
         * @return builder
         * 
         */
        public Builder renegotiation(@Nullable Output<String> renegotiation) {
            $.renegotiation = renegotiation;
            return this;
        }

        /**
         * @param renegotiation Enables or disables SSL renegotiation.When creating a new profile, the setting is provided by the parent profile
         * 
         * @return builder
         * 
         */
        public Builder renegotiation(String renegotiation) {
            return renegotiation(Output.of(renegotiation));
        }

        /**
         * @param retainCertificate When `true`, client certificate is retained in SSL session.
         * 
         * @return builder
         * 
         */
        public Builder retainCertificate(@Nullable Output<String> retainCertificate) {
            $.retainCertificate = retainCertificate;
            return this;
        }

        /**
         * @param retainCertificate When `true`, client certificate is retained in SSL session.
         * 
         * @return builder
         * 
         */
        public Builder retainCertificate(String retainCertificate) {
            return retainCertificate(Output.of(retainCertificate));
        }

        /**
         * @param secureRenegotiation Specifies the method of secure renegotiations for SSL connections. When creating a new profile, the setting is provided by the parent profile.
         * When `request` is set the system request secure renegotation of SSL connections.
         * `require` is a default setting and when set the system permits initial SSL handshakes from clients but terminates renegotiations from unpatched clients.
         * The `require-strict` setting the system requires strict renegotiation of SSL connections. In this mode the system refuses connections to insecure servers, and terminates existing SSL connections to insecure servers
         * 
         * @return builder
         * 
         */
        public Builder secureRenegotiation(@Nullable Output<String> secureRenegotiation) {
            $.secureRenegotiation = secureRenegotiation;
            return this;
        }

        /**
         * @param secureRenegotiation Specifies the method of secure renegotiations for SSL connections. When creating a new profile, the setting is provided by the parent profile.
         * When `request` is set the system request secure renegotation of SSL connections.
         * `require` is a default setting and when set the system permits initial SSL handshakes from clients but terminates renegotiations from unpatched clients.
         * The `require-strict` setting the system requires strict renegotiation of SSL connections. In this mode the system refuses connections to insecure servers, and terminates existing SSL connections to insecure servers
         * 
         * @return builder
         * 
         */
        public Builder secureRenegotiation(String secureRenegotiation) {
            return secureRenegotiation(Output.of(secureRenegotiation));
        }

        /**
         * @param serverName Specifies the fully qualified DNS hostname of the server used in Server Name Indication communications. When creating a new profile, the setting is provided by the parent profile.The server name can also be a wildcard string containing the asterisk `*` character.
         * 
         * @return builder
         * 
         */
        public Builder serverName(@Nullable Output<String> serverName) {
            $.serverName = serverName;
            return this;
        }

        /**
         * @param serverName Specifies the fully qualified DNS hostname of the server used in Server Name Indication communications. When creating a new profile, the setting is provided by the parent profile.The server name can also be a wildcard string containing the asterisk `*` character.
         * 
         * @return builder
         * 
         */
        public Builder serverName(String serverName) {
            return serverName(Output.of(serverName));
        }

        /**
         * @param sessionMirroring Session Mirroring (enabled / disabled)
         * 
         * @return builder
         * 
         */
        public Builder sessionMirroring(@Nullable Output<String> sessionMirroring) {
            $.sessionMirroring = sessionMirroring;
            return this;
        }

        /**
         * @param sessionMirroring Session Mirroring (enabled / disabled)
         * 
         * @return builder
         * 
         */
        public Builder sessionMirroring(String sessionMirroring) {
            return sessionMirroring(Output.of(sessionMirroring));
        }

        /**
         * @param sessionTicket Session Ticket (enabled / disabled)
         * 
         * @return builder
         * 
         */
        public Builder sessionTicket(@Nullable Output<String> sessionTicket) {
            $.sessionTicket = sessionTicket;
            return this;
        }

        /**
         * @param sessionTicket Session Ticket (enabled / disabled)
         * 
         * @return builder
         * 
         */
        public Builder sessionTicket(String sessionTicket) {
            return sessionTicket(Output.of(sessionTicket));
        }

        /**
         * @param sniDefault Indicates that the system uses this profile as the default SSL profile when there is no match to the server name, or when the client provides no SNI extension support.When creating a new profile, the setting is provided by the parent profile.
         * There can be only one SSL profile with this setting enabled.
         * 
         * @return builder
         * 
         */
        public Builder sniDefault(@Nullable Output<String> sniDefault) {
            $.sniDefault = sniDefault;
            return this;
        }

        /**
         * @param sniDefault Indicates that the system uses this profile as the default SSL profile when there is no match to the server name, or when the client provides no SNI extension support.When creating a new profile, the setting is provided by the parent profile.
         * There can be only one SSL profile with this setting enabled.
         * 
         * @return builder
         * 
         */
        public Builder sniDefault(String sniDefault) {
            return sniDefault(Output.of(sniDefault));
        }

        /**
         * @param sniRequire Requires that the network peers also provide SNI support, this setting only takes effect when `sni_default` is set to `true`.When creating a new profile, the setting is provided by the parent profile
         * 
         * @return builder
         * 
         */
        public Builder sniRequire(@Nullable Output<String> sniRequire) {
            $.sniRequire = sniRequire;
            return this;
        }

        /**
         * @param sniRequire Requires that the network peers also provide SNI support, this setting only takes effect when `sni_default` is set to `true`.When creating a new profile, the setting is provided by the parent profile
         * 
         * @return builder
         * 
         */
        public Builder sniRequire(String sniRequire) {
            return sniRequire(Output.of(sniRequire));
        }

        /**
         * @param sslC3d Enables or disables SSL forward proxy bypass on receiving
         * handshake_failure, protocol_version or unsupported_extension alert message during the serverside SSL handshake. When enabled and there is an SSL handshake_failure, protocol_version or unsupported_extension alert during the serverside SSL handshake, SSL traffic bypasses the BIG-IP system untouched, without decryption/encryption. The default value is disabled. Conversely, you can specify enabled to use this feature.
         * 
         * @return builder
         * 
         */
        public Builder sslC3d(@Nullable Output<String> sslC3d) {
            $.sslC3d = sslC3d;
            return this;
        }

        /**
         * @param sslC3d Enables or disables SSL forward proxy bypass on receiving
         * handshake_failure, protocol_version or unsupported_extension alert message during the serverside SSL handshake. When enabled and there is an SSL handshake_failure, protocol_version or unsupported_extension alert during the serverside SSL handshake, SSL traffic bypasses the BIG-IP system untouched, without decryption/encryption. The default value is disabled. Conversely, you can specify enabled to use this feature.
         * 
         * @return builder
         * 
         */
        public Builder sslC3d(String sslC3d) {
            return sslC3d(Output.of(sslC3d));
        }

        /**
         * @param sslForwardProxy Specifies whether SSL forward proxy feature is enabled or not. The default value is disabled.
         * 
         * @return builder
         * 
         */
        public Builder sslForwardProxy(@Nullable Output<String> sslForwardProxy) {
            $.sslForwardProxy = sslForwardProxy;
            return this;
        }

        /**
         * @param sslForwardProxy Specifies whether SSL forward proxy feature is enabled or not. The default value is disabled.
         * 
         * @return builder
         * 
         */
        public Builder sslForwardProxy(String sslForwardProxy) {
            return sslForwardProxy(Output.of(sslForwardProxy));
        }

        /**
         * @param sslForwardProxyBypass Specifies whether SSL forward proxy bypass feature is enabled or not. The default value is disabled.
         * 
         * @return builder
         * 
         */
        public Builder sslForwardProxyBypass(@Nullable Output<String> sslForwardProxyBypass) {
            $.sslForwardProxyBypass = sslForwardProxyBypass;
            return this;
        }

        /**
         * @param sslForwardProxyBypass Specifies whether SSL forward proxy bypass feature is enabled or not. The default value is disabled.
         * 
         * @return builder
         * 
         */
        public Builder sslForwardProxyBypass(String sslForwardProxyBypass) {
            return sslForwardProxyBypass(Output.of(sslForwardProxyBypass));
        }

        /**
         * @param sslSignHash SSL sign hash (any, sha1, sha256, sha384)
         * 
         * @return builder
         * 
         */
        public Builder sslSignHash(@Nullable Output<String> sslSignHash) {
            $.sslSignHash = sslSignHash;
            return this;
        }

        /**
         * @param sslSignHash SSL sign hash (any, sha1, sha256, sha384)
         * 
         * @return builder
         * 
         */
        public Builder sslSignHash(String sslSignHash) {
            return sslSignHash(Output.of(sslSignHash));
        }

        /**
         * @param strictResume Enables or disables the resumption of SSL sessions after an unclean shutdown.When creating a new profile, the setting is provided by the parent profile.
         * 
         * @return builder
         * 
         */
        public Builder strictResume(@Nullable Output<String> strictResume) {
            $.strictResume = strictResume;
            return this;
        }

        /**
         * @param strictResume Enables or disables the resumption of SSL sessions after an unclean shutdown.When creating a new profile, the setting is provided by the parent profile.
         * 
         * @return builder
         * 
         */
        public Builder strictResume(String strictResume) {
            return strictResume(Output.of(strictResume));
        }

        /**
         * @param tmOptions List of Enabled selection from a set of industry standard options for handling SSL processing.By default,
         * Don&#39;t insert empty fragments and No TLSv1.3 are listed as Enabled Options. `Usage` : tm_options    = [&#34;dont-insert-empty-fragments&#34;,&#34;no-tlsv1.3&#34;]
         * 
         * @return builder
         * 
         */
        public Builder tmOptions(@Nullable Output<List<String>> tmOptions) {
            $.tmOptions = tmOptions;
            return this;
        }

        /**
         * @param tmOptions List of Enabled selection from a set of industry standard options for handling SSL processing.By default,
         * Don&#39;t insert empty fragments and No TLSv1.3 are listed as Enabled Options. `Usage` : tm_options    = [&#34;dont-insert-empty-fragments&#34;,&#34;no-tlsv1.3&#34;]
         * 
         * @return builder
         * 
         */
        public Builder tmOptions(List<String> tmOptions) {
            return tmOptions(Output.of(tmOptions));
        }

        /**
         * @param tmOptions List of Enabled selection from a set of industry standard options for handling SSL processing.By default,
         * Don&#39;t insert empty fragments and No TLSv1.3 are listed as Enabled Options. `Usage` : tm_options    = [&#34;dont-insert-empty-fragments&#34;,&#34;no-tlsv1.3&#34;]
         * 
         * @return builder
         * 
         */
        public Builder tmOptions(String... tmOptions) {
            return tmOptions(List.of(tmOptions));
        }

        /**
         * @param uncleanShutdown Unclean Shutdown (enabled / disabled)
         * 
         * @return builder
         * 
         */
        public Builder uncleanShutdown(@Nullable Output<String> uncleanShutdown) {
            $.uncleanShutdown = uncleanShutdown;
            return this;
        }

        /**
         * @param uncleanShutdown Unclean Shutdown (enabled / disabled)
         * 
         * @return builder
         * 
         */
        public Builder uncleanShutdown(String uncleanShutdown) {
            return uncleanShutdown(Output.of(uncleanShutdown));
        }

        /**
         * @param untrustedCertResponseControl Unclean Shutdown (drop / ignore)
         * 
         * @return builder
         * 
         */
        public Builder untrustedCertResponseControl(@Nullable Output<String> untrustedCertResponseControl) {
            $.untrustedCertResponseControl = untrustedCertResponseControl;
            return this;
        }

        /**
         * @param untrustedCertResponseControl Unclean Shutdown (drop / ignore)
         * 
         * @return builder
         * 
         */
        public Builder untrustedCertResponseControl(String untrustedCertResponseControl) {
            return untrustedCertResponseControl(Output.of(untrustedCertResponseControl));
        }

        public ProfileServerSslState build() {
            return $;
        }
    }

}
