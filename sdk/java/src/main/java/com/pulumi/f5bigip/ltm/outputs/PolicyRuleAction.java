// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PolicyRuleAction {
    private @Nullable String appService;
    private @Nullable String application;
    private @Nullable Boolean asm;
    private @Nullable Boolean avr;
    private @Nullable Boolean cache;
    private @Nullable Boolean carp;
    private @Nullable String category;
    private @Nullable Boolean classify;
    private @Nullable String clonePool;
    private @Nullable Integer code;
    private @Nullable Boolean compress;
    /**
     * @return This action is set to `true` by default, it needs to be explicitly set to `false` for actions it conflicts with.
     * 
     */
    private @Nullable Boolean connection;
    private @Nullable String content;
    private @Nullable Boolean cookieHash;
    private @Nullable Boolean cookieInsert;
    private @Nullable Boolean cookiePassive;
    private @Nullable Boolean cookieRewrite;
    private @Nullable Boolean decompress;
    private @Nullable Boolean defer;
    private @Nullable Boolean destinationAddress;
    private @Nullable Boolean disable;
    private @Nullable String domain;
    private @Nullable Boolean enable;
    private @Nullable String expiry;
    private @Nullable Integer expirySecs;
    private @Nullable String expression;
    private @Nullable String extension;
    private @Nullable String facility;
    /**
     * @return This action will affect forwarding.
     * 
     */
    private @Nullable Boolean forward;
    private @Nullable String fromProfile;
    private @Nullable Boolean hash;
    private @Nullable String host;
    private @Nullable Boolean http;
    private @Nullable Boolean httpBasicAuth;
    private @Nullable Boolean httpCookie;
    private @Nullable Boolean httpHeader;
    private @Nullable Boolean httpHost;
    private @Nullable Boolean httpReferer;
    private @Nullable Boolean httpReply;
    private @Nullable Boolean httpSetCookie;
    private @Nullable Boolean httpUri;
    private @Nullable String ifile;
    private @Nullable Boolean insert;
    private @Nullable String internalVirtual;
    private @Nullable String ipAddress;
    private @Nullable String key;
    private @Nullable Boolean l7dos;
    private @Nullable Integer length;
    private @Nullable String location;
    private @Nullable Boolean log;
    private @Nullable Boolean ltmPolicy;
    private @Nullable String member;
    private @Nullable String message;
    private @Nullable String netmask;
    private @Nullable String nexthop;
    private @Nullable String node;
    private @Nullable Integer offset;
    private @Nullable String path;
    private @Nullable Boolean pem;
    private @Nullable Boolean persist;
    private @Nullable Boolean pin;
    private @Nullable String policy;
    /**
     * @return This action will direct the stream to this pool.
     * 
     */
    private @Nullable String pool;
    private @Nullable Integer port;
    private @Nullable String priority;
    private @Nullable String profile;
    private @Nullable String protocol;
    private @Nullable String queryString;
    private @Nullable String rateclass;
    private @Nullable Boolean redirect;
    private @Nullable Boolean remove;
    private @Nullable Boolean replace;
    private @Nullable Boolean request;
    private @Nullable Boolean requestAdapt;
    private @Nullable Boolean reset;
    private @Nullable Boolean response;
    private @Nullable Boolean responseAdapt;
    private @Nullable String scheme;
    private @Nullable String script;
    private @Nullable Boolean select;
    private @Nullable Boolean serverSsl;
    private @Nullable Boolean setVariable;
    private @Nullable Boolean shutdown;
    private @Nullable String snat;
    private @Nullable String snatpool;
    private @Nullable Boolean sourceAddress;
    private @Nullable Boolean sslClientHello;
    private @Nullable Boolean sslServerHandshake;
    private @Nullable Boolean sslServerHello;
    private @Nullable Boolean sslSessionId;
    private @Nullable Integer status;
    private @Nullable Boolean tcl;
    private @Nullable Boolean tcpNagle;
    private @Nullable String text;
    private @Nullable Integer timeout;
    private @Nullable String tmName;
    private @Nullable Boolean uie;
    private @Nullable Boolean universal;
    private @Nullable String value;
    private @Nullable String virtual;
    private @Nullable String vlan;
    private @Nullable Integer vlanId;
    private @Nullable Boolean wam;
    private @Nullable Boolean write;

    private PolicyRuleAction() {}
    public Optional<String> appService() {
        return Optional.ofNullable(this.appService);
    }
    public Optional<String> application() {
        return Optional.ofNullable(this.application);
    }
    public Optional<Boolean> asm() {
        return Optional.ofNullable(this.asm);
    }
    public Optional<Boolean> avr() {
        return Optional.ofNullable(this.avr);
    }
    public Optional<Boolean> cache() {
        return Optional.ofNullable(this.cache);
    }
    public Optional<Boolean> carp() {
        return Optional.ofNullable(this.carp);
    }
    public Optional<String> category() {
        return Optional.ofNullable(this.category);
    }
    public Optional<Boolean> classify() {
        return Optional.ofNullable(this.classify);
    }
    public Optional<String> clonePool() {
        return Optional.ofNullable(this.clonePool);
    }
    public Optional<Integer> code() {
        return Optional.ofNullable(this.code);
    }
    public Optional<Boolean> compress() {
        return Optional.ofNullable(this.compress);
    }
    /**
     * @return This action is set to `true` by default, it needs to be explicitly set to `false` for actions it conflicts with.
     * 
     */
    public Optional<Boolean> connection() {
        return Optional.ofNullable(this.connection);
    }
    public Optional<String> content() {
        return Optional.ofNullable(this.content);
    }
    public Optional<Boolean> cookieHash() {
        return Optional.ofNullable(this.cookieHash);
    }
    public Optional<Boolean> cookieInsert() {
        return Optional.ofNullable(this.cookieInsert);
    }
    public Optional<Boolean> cookiePassive() {
        return Optional.ofNullable(this.cookiePassive);
    }
    public Optional<Boolean> cookieRewrite() {
        return Optional.ofNullable(this.cookieRewrite);
    }
    public Optional<Boolean> decompress() {
        return Optional.ofNullable(this.decompress);
    }
    public Optional<Boolean> defer() {
        return Optional.ofNullable(this.defer);
    }
    public Optional<Boolean> destinationAddress() {
        return Optional.ofNullable(this.destinationAddress);
    }
    public Optional<Boolean> disable() {
        return Optional.ofNullable(this.disable);
    }
    public Optional<String> domain() {
        return Optional.ofNullable(this.domain);
    }
    public Optional<Boolean> enable() {
        return Optional.ofNullable(this.enable);
    }
    public Optional<String> expiry() {
        return Optional.ofNullable(this.expiry);
    }
    public Optional<Integer> expirySecs() {
        return Optional.ofNullable(this.expirySecs);
    }
    public Optional<String> expression() {
        return Optional.ofNullable(this.expression);
    }
    public Optional<String> extension() {
        return Optional.ofNullable(this.extension);
    }
    public Optional<String> facility() {
        return Optional.ofNullable(this.facility);
    }
    /**
     * @return This action will affect forwarding.
     * 
     */
    public Optional<Boolean> forward() {
        return Optional.ofNullable(this.forward);
    }
    public Optional<String> fromProfile() {
        return Optional.ofNullable(this.fromProfile);
    }
    public Optional<Boolean> hash() {
        return Optional.ofNullable(this.hash);
    }
    public Optional<String> host() {
        return Optional.ofNullable(this.host);
    }
    public Optional<Boolean> http() {
        return Optional.ofNullable(this.http);
    }
    public Optional<Boolean> httpBasicAuth() {
        return Optional.ofNullable(this.httpBasicAuth);
    }
    public Optional<Boolean> httpCookie() {
        return Optional.ofNullable(this.httpCookie);
    }
    public Optional<Boolean> httpHeader() {
        return Optional.ofNullable(this.httpHeader);
    }
    public Optional<Boolean> httpHost() {
        return Optional.ofNullable(this.httpHost);
    }
    public Optional<Boolean> httpReferer() {
        return Optional.ofNullable(this.httpReferer);
    }
    public Optional<Boolean> httpReply() {
        return Optional.ofNullable(this.httpReply);
    }
    public Optional<Boolean> httpSetCookie() {
        return Optional.ofNullable(this.httpSetCookie);
    }
    public Optional<Boolean> httpUri() {
        return Optional.ofNullable(this.httpUri);
    }
    public Optional<String> ifile() {
        return Optional.ofNullable(this.ifile);
    }
    public Optional<Boolean> insert() {
        return Optional.ofNullable(this.insert);
    }
    public Optional<String> internalVirtual() {
        return Optional.ofNullable(this.internalVirtual);
    }
    public Optional<String> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    public Optional<Boolean> l7dos() {
        return Optional.ofNullable(this.l7dos);
    }
    public Optional<Integer> length() {
        return Optional.ofNullable(this.length);
    }
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    public Optional<Boolean> log() {
        return Optional.ofNullable(this.log);
    }
    public Optional<Boolean> ltmPolicy() {
        return Optional.ofNullable(this.ltmPolicy);
    }
    public Optional<String> member() {
        return Optional.ofNullable(this.member);
    }
    public Optional<String> message() {
        return Optional.ofNullable(this.message);
    }
    public Optional<String> netmask() {
        return Optional.ofNullable(this.netmask);
    }
    public Optional<String> nexthop() {
        return Optional.ofNullable(this.nexthop);
    }
    public Optional<String> node() {
        return Optional.ofNullable(this.node);
    }
    public Optional<Integer> offset() {
        return Optional.ofNullable(this.offset);
    }
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    public Optional<Boolean> pem() {
        return Optional.ofNullable(this.pem);
    }
    public Optional<Boolean> persist() {
        return Optional.ofNullable(this.persist);
    }
    public Optional<Boolean> pin() {
        return Optional.ofNullable(this.pin);
    }
    public Optional<String> policy() {
        return Optional.ofNullable(this.policy);
    }
    /**
     * @return This action will direct the stream to this pool.
     * 
     */
    public Optional<String> pool() {
        return Optional.ofNullable(this.pool);
    }
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    public Optional<String> priority() {
        return Optional.ofNullable(this.priority);
    }
    public Optional<String> profile() {
        return Optional.ofNullable(this.profile);
    }
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }
    public Optional<String> queryString() {
        return Optional.ofNullable(this.queryString);
    }
    public Optional<String> rateclass() {
        return Optional.ofNullable(this.rateclass);
    }
    public Optional<Boolean> redirect() {
        return Optional.ofNullable(this.redirect);
    }
    public Optional<Boolean> remove() {
        return Optional.ofNullable(this.remove);
    }
    public Optional<Boolean> replace() {
        return Optional.ofNullable(this.replace);
    }
    public Optional<Boolean> request() {
        return Optional.ofNullable(this.request);
    }
    public Optional<Boolean> requestAdapt() {
        return Optional.ofNullable(this.requestAdapt);
    }
    public Optional<Boolean> reset() {
        return Optional.ofNullable(this.reset);
    }
    public Optional<Boolean> response() {
        return Optional.ofNullable(this.response);
    }
    public Optional<Boolean> responseAdapt() {
        return Optional.ofNullable(this.responseAdapt);
    }
    public Optional<String> scheme() {
        return Optional.ofNullable(this.scheme);
    }
    public Optional<String> script() {
        return Optional.ofNullable(this.script);
    }
    public Optional<Boolean> select() {
        return Optional.ofNullable(this.select);
    }
    public Optional<Boolean> serverSsl() {
        return Optional.ofNullable(this.serverSsl);
    }
    public Optional<Boolean> setVariable() {
        return Optional.ofNullable(this.setVariable);
    }
    public Optional<Boolean> shutdown() {
        return Optional.ofNullable(this.shutdown);
    }
    public Optional<String> snat() {
        return Optional.ofNullable(this.snat);
    }
    public Optional<String> snatpool() {
        return Optional.ofNullable(this.snatpool);
    }
    public Optional<Boolean> sourceAddress() {
        return Optional.ofNullable(this.sourceAddress);
    }
    public Optional<Boolean> sslClientHello() {
        return Optional.ofNullable(this.sslClientHello);
    }
    public Optional<Boolean> sslServerHandshake() {
        return Optional.ofNullable(this.sslServerHandshake);
    }
    public Optional<Boolean> sslServerHello() {
        return Optional.ofNullable(this.sslServerHello);
    }
    public Optional<Boolean> sslSessionId() {
        return Optional.ofNullable(this.sslSessionId);
    }
    public Optional<Integer> status() {
        return Optional.ofNullable(this.status);
    }
    public Optional<Boolean> tcl() {
        return Optional.ofNullable(this.tcl);
    }
    public Optional<Boolean> tcpNagle() {
        return Optional.ofNullable(this.tcpNagle);
    }
    public Optional<String> text() {
        return Optional.ofNullable(this.text);
    }
    public Optional<Integer> timeout() {
        return Optional.ofNullable(this.timeout);
    }
    public Optional<String> tmName() {
        return Optional.ofNullable(this.tmName);
    }
    public Optional<Boolean> uie() {
        return Optional.ofNullable(this.uie);
    }
    public Optional<Boolean> universal() {
        return Optional.ofNullable(this.universal);
    }
    public Optional<String> value() {
        return Optional.ofNullable(this.value);
    }
    public Optional<String> virtual() {
        return Optional.ofNullable(this.virtual);
    }
    public Optional<String> vlan() {
        return Optional.ofNullable(this.vlan);
    }
    public Optional<Integer> vlanId() {
        return Optional.ofNullable(this.vlanId);
    }
    public Optional<Boolean> wam() {
        return Optional.ofNullable(this.wam);
    }
    public Optional<Boolean> write() {
        return Optional.ofNullable(this.write);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PolicyRuleAction defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String appService;
        private @Nullable String application;
        private @Nullable Boolean asm;
        private @Nullable Boolean avr;
        private @Nullable Boolean cache;
        private @Nullable Boolean carp;
        private @Nullable String category;
        private @Nullable Boolean classify;
        private @Nullable String clonePool;
        private @Nullable Integer code;
        private @Nullable Boolean compress;
        private @Nullable Boolean connection;
        private @Nullable String content;
        private @Nullable Boolean cookieHash;
        private @Nullable Boolean cookieInsert;
        private @Nullable Boolean cookiePassive;
        private @Nullable Boolean cookieRewrite;
        private @Nullable Boolean decompress;
        private @Nullable Boolean defer;
        private @Nullable Boolean destinationAddress;
        private @Nullable Boolean disable;
        private @Nullable String domain;
        private @Nullable Boolean enable;
        private @Nullable String expiry;
        private @Nullable Integer expirySecs;
        private @Nullable String expression;
        private @Nullable String extension;
        private @Nullable String facility;
        private @Nullable Boolean forward;
        private @Nullable String fromProfile;
        private @Nullable Boolean hash;
        private @Nullable String host;
        private @Nullable Boolean http;
        private @Nullable Boolean httpBasicAuth;
        private @Nullable Boolean httpCookie;
        private @Nullable Boolean httpHeader;
        private @Nullable Boolean httpHost;
        private @Nullable Boolean httpReferer;
        private @Nullable Boolean httpReply;
        private @Nullable Boolean httpSetCookie;
        private @Nullable Boolean httpUri;
        private @Nullable String ifile;
        private @Nullable Boolean insert;
        private @Nullable String internalVirtual;
        private @Nullable String ipAddress;
        private @Nullable String key;
        private @Nullable Boolean l7dos;
        private @Nullable Integer length;
        private @Nullable String location;
        private @Nullable Boolean log;
        private @Nullable Boolean ltmPolicy;
        private @Nullable String member;
        private @Nullable String message;
        private @Nullable String netmask;
        private @Nullable String nexthop;
        private @Nullable String node;
        private @Nullable Integer offset;
        private @Nullable String path;
        private @Nullable Boolean pem;
        private @Nullable Boolean persist;
        private @Nullable Boolean pin;
        private @Nullable String policy;
        private @Nullable String pool;
        private @Nullable Integer port;
        private @Nullable String priority;
        private @Nullable String profile;
        private @Nullable String protocol;
        private @Nullable String queryString;
        private @Nullable String rateclass;
        private @Nullable Boolean redirect;
        private @Nullable Boolean remove;
        private @Nullable Boolean replace;
        private @Nullable Boolean request;
        private @Nullable Boolean requestAdapt;
        private @Nullable Boolean reset;
        private @Nullable Boolean response;
        private @Nullable Boolean responseAdapt;
        private @Nullable String scheme;
        private @Nullable String script;
        private @Nullable Boolean select;
        private @Nullable Boolean serverSsl;
        private @Nullable Boolean setVariable;
        private @Nullable Boolean shutdown;
        private @Nullable String snat;
        private @Nullable String snatpool;
        private @Nullable Boolean sourceAddress;
        private @Nullable Boolean sslClientHello;
        private @Nullable Boolean sslServerHandshake;
        private @Nullable Boolean sslServerHello;
        private @Nullable Boolean sslSessionId;
        private @Nullable Integer status;
        private @Nullable Boolean tcl;
        private @Nullable Boolean tcpNagle;
        private @Nullable String text;
        private @Nullable Integer timeout;
        private @Nullable String tmName;
        private @Nullable Boolean uie;
        private @Nullable Boolean universal;
        private @Nullable String value;
        private @Nullable String virtual;
        private @Nullable String vlan;
        private @Nullable Integer vlanId;
        private @Nullable Boolean wam;
        private @Nullable Boolean write;
        public Builder() {}
        public Builder(PolicyRuleAction defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appService = defaults.appService;
    	      this.application = defaults.application;
    	      this.asm = defaults.asm;
    	      this.avr = defaults.avr;
    	      this.cache = defaults.cache;
    	      this.carp = defaults.carp;
    	      this.category = defaults.category;
    	      this.classify = defaults.classify;
    	      this.clonePool = defaults.clonePool;
    	      this.code = defaults.code;
    	      this.compress = defaults.compress;
    	      this.connection = defaults.connection;
    	      this.content = defaults.content;
    	      this.cookieHash = defaults.cookieHash;
    	      this.cookieInsert = defaults.cookieInsert;
    	      this.cookiePassive = defaults.cookiePassive;
    	      this.cookieRewrite = defaults.cookieRewrite;
    	      this.decompress = defaults.decompress;
    	      this.defer = defaults.defer;
    	      this.destinationAddress = defaults.destinationAddress;
    	      this.disable = defaults.disable;
    	      this.domain = defaults.domain;
    	      this.enable = defaults.enable;
    	      this.expiry = defaults.expiry;
    	      this.expirySecs = defaults.expirySecs;
    	      this.expression = defaults.expression;
    	      this.extension = defaults.extension;
    	      this.facility = defaults.facility;
    	      this.forward = defaults.forward;
    	      this.fromProfile = defaults.fromProfile;
    	      this.hash = defaults.hash;
    	      this.host = defaults.host;
    	      this.http = defaults.http;
    	      this.httpBasicAuth = defaults.httpBasicAuth;
    	      this.httpCookie = defaults.httpCookie;
    	      this.httpHeader = defaults.httpHeader;
    	      this.httpHost = defaults.httpHost;
    	      this.httpReferer = defaults.httpReferer;
    	      this.httpReply = defaults.httpReply;
    	      this.httpSetCookie = defaults.httpSetCookie;
    	      this.httpUri = defaults.httpUri;
    	      this.ifile = defaults.ifile;
    	      this.insert = defaults.insert;
    	      this.internalVirtual = defaults.internalVirtual;
    	      this.ipAddress = defaults.ipAddress;
    	      this.key = defaults.key;
    	      this.l7dos = defaults.l7dos;
    	      this.length = defaults.length;
    	      this.location = defaults.location;
    	      this.log = defaults.log;
    	      this.ltmPolicy = defaults.ltmPolicy;
    	      this.member = defaults.member;
    	      this.message = defaults.message;
    	      this.netmask = defaults.netmask;
    	      this.nexthop = defaults.nexthop;
    	      this.node = defaults.node;
    	      this.offset = defaults.offset;
    	      this.path = defaults.path;
    	      this.pem = defaults.pem;
    	      this.persist = defaults.persist;
    	      this.pin = defaults.pin;
    	      this.policy = defaults.policy;
    	      this.pool = defaults.pool;
    	      this.port = defaults.port;
    	      this.priority = defaults.priority;
    	      this.profile = defaults.profile;
    	      this.protocol = defaults.protocol;
    	      this.queryString = defaults.queryString;
    	      this.rateclass = defaults.rateclass;
    	      this.redirect = defaults.redirect;
    	      this.remove = defaults.remove;
    	      this.replace = defaults.replace;
    	      this.request = defaults.request;
    	      this.requestAdapt = defaults.requestAdapt;
    	      this.reset = defaults.reset;
    	      this.response = defaults.response;
    	      this.responseAdapt = defaults.responseAdapt;
    	      this.scheme = defaults.scheme;
    	      this.script = defaults.script;
    	      this.select = defaults.select;
    	      this.serverSsl = defaults.serverSsl;
    	      this.setVariable = defaults.setVariable;
    	      this.shutdown = defaults.shutdown;
    	      this.snat = defaults.snat;
    	      this.snatpool = defaults.snatpool;
    	      this.sourceAddress = defaults.sourceAddress;
    	      this.sslClientHello = defaults.sslClientHello;
    	      this.sslServerHandshake = defaults.sslServerHandshake;
    	      this.sslServerHello = defaults.sslServerHello;
    	      this.sslSessionId = defaults.sslSessionId;
    	      this.status = defaults.status;
    	      this.tcl = defaults.tcl;
    	      this.tcpNagle = defaults.tcpNagle;
    	      this.text = defaults.text;
    	      this.timeout = defaults.timeout;
    	      this.tmName = defaults.tmName;
    	      this.uie = defaults.uie;
    	      this.universal = defaults.universal;
    	      this.value = defaults.value;
    	      this.virtual = defaults.virtual;
    	      this.vlan = defaults.vlan;
    	      this.vlanId = defaults.vlanId;
    	      this.wam = defaults.wam;
    	      this.write = defaults.write;
        }

        @CustomType.Setter
        public Builder appService(@Nullable String appService) {
            this.appService = appService;
            return this;
        }
        @CustomType.Setter
        public Builder application(@Nullable String application) {
            this.application = application;
            return this;
        }
        @CustomType.Setter
        public Builder asm(@Nullable Boolean asm) {
            this.asm = asm;
            return this;
        }
        @CustomType.Setter
        public Builder avr(@Nullable Boolean avr) {
            this.avr = avr;
            return this;
        }
        @CustomType.Setter
        public Builder cache(@Nullable Boolean cache) {
            this.cache = cache;
            return this;
        }
        @CustomType.Setter
        public Builder carp(@Nullable Boolean carp) {
            this.carp = carp;
            return this;
        }
        @CustomType.Setter
        public Builder category(@Nullable String category) {
            this.category = category;
            return this;
        }
        @CustomType.Setter
        public Builder classify(@Nullable Boolean classify) {
            this.classify = classify;
            return this;
        }
        @CustomType.Setter
        public Builder clonePool(@Nullable String clonePool) {
            this.clonePool = clonePool;
            return this;
        }
        @CustomType.Setter
        public Builder code(@Nullable Integer code) {
            this.code = code;
            return this;
        }
        @CustomType.Setter
        public Builder compress(@Nullable Boolean compress) {
            this.compress = compress;
            return this;
        }
        @CustomType.Setter
        public Builder connection(@Nullable Boolean connection) {
            this.connection = connection;
            return this;
        }
        @CustomType.Setter
        public Builder content(@Nullable String content) {
            this.content = content;
            return this;
        }
        @CustomType.Setter
        public Builder cookieHash(@Nullable Boolean cookieHash) {
            this.cookieHash = cookieHash;
            return this;
        }
        @CustomType.Setter
        public Builder cookieInsert(@Nullable Boolean cookieInsert) {
            this.cookieInsert = cookieInsert;
            return this;
        }
        @CustomType.Setter
        public Builder cookiePassive(@Nullable Boolean cookiePassive) {
            this.cookiePassive = cookiePassive;
            return this;
        }
        @CustomType.Setter
        public Builder cookieRewrite(@Nullable Boolean cookieRewrite) {
            this.cookieRewrite = cookieRewrite;
            return this;
        }
        @CustomType.Setter
        public Builder decompress(@Nullable Boolean decompress) {
            this.decompress = decompress;
            return this;
        }
        @CustomType.Setter
        public Builder defer(@Nullable Boolean defer) {
            this.defer = defer;
            return this;
        }
        @CustomType.Setter
        public Builder destinationAddress(@Nullable Boolean destinationAddress) {
            this.destinationAddress = destinationAddress;
            return this;
        }
        @CustomType.Setter
        public Builder disable(@Nullable Boolean disable) {
            this.disable = disable;
            return this;
        }
        @CustomType.Setter
        public Builder domain(@Nullable String domain) {
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder enable(@Nullable Boolean enable) {
            this.enable = enable;
            return this;
        }
        @CustomType.Setter
        public Builder expiry(@Nullable String expiry) {
            this.expiry = expiry;
            return this;
        }
        @CustomType.Setter
        public Builder expirySecs(@Nullable Integer expirySecs) {
            this.expirySecs = expirySecs;
            return this;
        }
        @CustomType.Setter
        public Builder expression(@Nullable String expression) {
            this.expression = expression;
            return this;
        }
        @CustomType.Setter
        public Builder extension(@Nullable String extension) {
            this.extension = extension;
            return this;
        }
        @CustomType.Setter
        public Builder facility(@Nullable String facility) {
            this.facility = facility;
            return this;
        }
        @CustomType.Setter
        public Builder forward(@Nullable Boolean forward) {
            this.forward = forward;
            return this;
        }
        @CustomType.Setter
        public Builder fromProfile(@Nullable String fromProfile) {
            this.fromProfile = fromProfile;
            return this;
        }
        @CustomType.Setter
        public Builder hash(@Nullable Boolean hash) {
            this.hash = hash;
            return this;
        }
        @CustomType.Setter
        public Builder host(@Nullable String host) {
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder http(@Nullable Boolean http) {
            this.http = http;
            return this;
        }
        @CustomType.Setter
        public Builder httpBasicAuth(@Nullable Boolean httpBasicAuth) {
            this.httpBasicAuth = httpBasicAuth;
            return this;
        }
        @CustomType.Setter
        public Builder httpCookie(@Nullable Boolean httpCookie) {
            this.httpCookie = httpCookie;
            return this;
        }
        @CustomType.Setter
        public Builder httpHeader(@Nullable Boolean httpHeader) {
            this.httpHeader = httpHeader;
            return this;
        }
        @CustomType.Setter
        public Builder httpHost(@Nullable Boolean httpHost) {
            this.httpHost = httpHost;
            return this;
        }
        @CustomType.Setter
        public Builder httpReferer(@Nullable Boolean httpReferer) {
            this.httpReferer = httpReferer;
            return this;
        }
        @CustomType.Setter
        public Builder httpReply(@Nullable Boolean httpReply) {
            this.httpReply = httpReply;
            return this;
        }
        @CustomType.Setter
        public Builder httpSetCookie(@Nullable Boolean httpSetCookie) {
            this.httpSetCookie = httpSetCookie;
            return this;
        }
        @CustomType.Setter
        public Builder httpUri(@Nullable Boolean httpUri) {
            this.httpUri = httpUri;
            return this;
        }
        @CustomType.Setter
        public Builder ifile(@Nullable String ifile) {
            this.ifile = ifile;
            return this;
        }
        @CustomType.Setter
        public Builder insert(@Nullable Boolean insert) {
            this.insert = insert;
            return this;
        }
        @CustomType.Setter
        public Builder internalVirtual(@Nullable String internalVirtual) {
            this.internalVirtual = internalVirtual;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(@Nullable String ipAddress) {
            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder key(@Nullable String key) {
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder l7dos(@Nullable Boolean l7dos) {
            this.l7dos = l7dos;
            return this;
        }
        @CustomType.Setter
        public Builder length(@Nullable Integer length) {
            this.length = length;
            return this;
        }
        @CustomType.Setter
        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder log(@Nullable Boolean log) {
            this.log = log;
            return this;
        }
        @CustomType.Setter
        public Builder ltmPolicy(@Nullable Boolean ltmPolicy) {
            this.ltmPolicy = ltmPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder member(@Nullable String member) {
            this.member = member;
            return this;
        }
        @CustomType.Setter
        public Builder message(@Nullable String message) {
            this.message = message;
            return this;
        }
        @CustomType.Setter
        public Builder netmask(@Nullable String netmask) {
            this.netmask = netmask;
            return this;
        }
        @CustomType.Setter
        public Builder nexthop(@Nullable String nexthop) {
            this.nexthop = nexthop;
            return this;
        }
        @CustomType.Setter
        public Builder node(@Nullable String node) {
            this.node = node;
            return this;
        }
        @CustomType.Setter
        public Builder offset(@Nullable Integer offset) {
            this.offset = offset;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder pem(@Nullable Boolean pem) {
            this.pem = pem;
            return this;
        }
        @CustomType.Setter
        public Builder persist(@Nullable Boolean persist) {
            this.persist = persist;
            return this;
        }
        @CustomType.Setter
        public Builder pin(@Nullable Boolean pin) {
            this.pin = pin;
            return this;
        }
        @CustomType.Setter
        public Builder policy(@Nullable String policy) {
            this.policy = policy;
            return this;
        }
        @CustomType.Setter
        public Builder pool(@Nullable String pool) {
            this.pool = pool;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder priority(@Nullable String priority) {
            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder profile(@Nullable String profile) {
            this.profile = profile;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(@Nullable String protocol) {
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder queryString(@Nullable String queryString) {
            this.queryString = queryString;
            return this;
        }
        @CustomType.Setter
        public Builder rateclass(@Nullable String rateclass) {
            this.rateclass = rateclass;
            return this;
        }
        @CustomType.Setter
        public Builder redirect(@Nullable Boolean redirect) {
            this.redirect = redirect;
            return this;
        }
        @CustomType.Setter
        public Builder remove(@Nullable Boolean remove) {
            this.remove = remove;
            return this;
        }
        @CustomType.Setter
        public Builder replace(@Nullable Boolean replace) {
            this.replace = replace;
            return this;
        }
        @CustomType.Setter
        public Builder request(@Nullable Boolean request) {
            this.request = request;
            return this;
        }
        @CustomType.Setter
        public Builder requestAdapt(@Nullable Boolean requestAdapt) {
            this.requestAdapt = requestAdapt;
            return this;
        }
        @CustomType.Setter
        public Builder reset(@Nullable Boolean reset) {
            this.reset = reset;
            return this;
        }
        @CustomType.Setter
        public Builder response(@Nullable Boolean response) {
            this.response = response;
            return this;
        }
        @CustomType.Setter
        public Builder responseAdapt(@Nullable Boolean responseAdapt) {
            this.responseAdapt = responseAdapt;
            return this;
        }
        @CustomType.Setter
        public Builder scheme(@Nullable String scheme) {
            this.scheme = scheme;
            return this;
        }
        @CustomType.Setter
        public Builder script(@Nullable String script) {
            this.script = script;
            return this;
        }
        @CustomType.Setter
        public Builder select(@Nullable Boolean select) {
            this.select = select;
            return this;
        }
        @CustomType.Setter
        public Builder serverSsl(@Nullable Boolean serverSsl) {
            this.serverSsl = serverSsl;
            return this;
        }
        @CustomType.Setter
        public Builder setVariable(@Nullable Boolean setVariable) {
            this.setVariable = setVariable;
            return this;
        }
        @CustomType.Setter
        public Builder shutdown(@Nullable Boolean shutdown) {
            this.shutdown = shutdown;
            return this;
        }
        @CustomType.Setter
        public Builder snat(@Nullable String snat) {
            this.snat = snat;
            return this;
        }
        @CustomType.Setter
        public Builder snatpool(@Nullable String snatpool) {
            this.snatpool = snatpool;
            return this;
        }
        @CustomType.Setter
        public Builder sourceAddress(@Nullable Boolean sourceAddress) {
            this.sourceAddress = sourceAddress;
            return this;
        }
        @CustomType.Setter
        public Builder sslClientHello(@Nullable Boolean sslClientHello) {
            this.sslClientHello = sslClientHello;
            return this;
        }
        @CustomType.Setter
        public Builder sslServerHandshake(@Nullable Boolean sslServerHandshake) {
            this.sslServerHandshake = sslServerHandshake;
            return this;
        }
        @CustomType.Setter
        public Builder sslServerHello(@Nullable Boolean sslServerHello) {
            this.sslServerHello = sslServerHello;
            return this;
        }
        @CustomType.Setter
        public Builder sslSessionId(@Nullable Boolean sslSessionId) {
            this.sslSessionId = sslSessionId;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable Integer status) {
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tcl(@Nullable Boolean tcl) {
            this.tcl = tcl;
            return this;
        }
        @CustomType.Setter
        public Builder tcpNagle(@Nullable Boolean tcpNagle) {
            this.tcpNagle = tcpNagle;
            return this;
        }
        @CustomType.Setter
        public Builder text(@Nullable String text) {
            this.text = text;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(@Nullable Integer timeout) {
            this.timeout = timeout;
            return this;
        }
        @CustomType.Setter
        public Builder tmName(@Nullable String tmName) {
            this.tmName = tmName;
            return this;
        }
        @CustomType.Setter
        public Builder uie(@Nullable Boolean uie) {
            this.uie = uie;
            return this;
        }
        @CustomType.Setter
        public Builder universal(@Nullable Boolean universal) {
            this.universal = universal;
            return this;
        }
        @CustomType.Setter
        public Builder value(@Nullable String value) {
            this.value = value;
            return this;
        }
        @CustomType.Setter
        public Builder virtual(@Nullable String virtual) {
            this.virtual = virtual;
            return this;
        }
        @CustomType.Setter
        public Builder vlan(@Nullable String vlan) {
            this.vlan = vlan;
            return this;
        }
        @CustomType.Setter
        public Builder vlanId(@Nullable Integer vlanId) {
            this.vlanId = vlanId;
            return this;
        }
        @CustomType.Setter
        public Builder wam(@Nullable Boolean wam) {
            this.wam = wam;
            return this;
        }
        @CustomType.Setter
        public Builder write(@Nullable Boolean write) {
            this.write = write;
            return this;
        }
        public PolicyRuleAction build() {
            final var o = new PolicyRuleAction();
            o.appService = appService;
            o.application = application;
            o.asm = asm;
            o.avr = avr;
            o.cache = cache;
            o.carp = carp;
            o.category = category;
            o.classify = classify;
            o.clonePool = clonePool;
            o.code = code;
            o.compress = compress;
            o.connection = connection;
            o.content = content;
            o.cookieHash = cookieHash;
            o.cookieInsert = cookieInsert;
            o.cookiePassive = cookiePassive;
            o.cookieRewrite = cookieRewrite;
            o.decompress = decompress;
            o.defer = defer;
            o.destinationAddress = destinationAddress;
            o.disable = disable;
            o.domain = domain;
            o.enable = enable;
            o.expiry = expiry;
            o.expirySecs = expirySecs;
            o.expression = expression;
            o.extension = extension;
            o.facility = facility;
            o.forward = forward;
            o.fromProfile = fromProfile;
            o.hash = hash;
            o.host = host;
            o.http = http;
            o.httpBasicAuth = httpBasicAuth;
            o.httpCookie = httpCookie;
            o.httpHeader = httpHeader;
            o.httpHost = httpHost;
            o.httpReferer = httpReferer;
            o.httpReply = httpReply;
            o.httpSetCookie = httpSetCookie;
            o.httpUri = httpUri;
            o.ifile = ifile;
            o.insert = insert;
            o.internalVirtual = internalVirtual;
            o.ipAddress = ipAddress;
            o.key = key;
            o.l7dos = l7dos;
            o.length = length;
            o.location = location;
            o.log = log;
            o.ltmPolicy = ltmPolicy;
            o.member = member;
            o.message = message;
            o.netmask = netmask;
            o.nexthop = nexthop;
            o.node = node;
            o.offset = offset;
            o.path = path;
            o.pem = pem;
            o.persist = persist;
            o.pin = pin;
            o.policy = policy;
            o.pool = pool;
            o.port = port;
            o.priority = priority;
            o.profile = profile;
            o.protocol = protocol;
            o.queryString = queryString;
            o.rateclass = rateclass;
            o.redirect = redirect;
            o.remove = remove;
            o.replace = replace;
            o.request = request;
            o.requestAdapt = requestAdapt;
            o.reset = reset;
            o.response = response;
            o.responseAdapt = responseAdapt;
            o.scheme = scheme;
            o.script = script;
            o.select = select;
            o.serverSsl = serverSsl;
            o.setVariable = setVariable;
            o.shutdown = shutdown;
            o.snat = snat;
            o.snatpool = snatpool;
            o.sourceAddress = sourceAddress;
            o.sslClientHello = sslClientHello;
            o.sslServerHandshake = sslServerHandshake;
            o.sslServerHello = sslServerHello;
            o.sslSessionId = sslSessionId;
            o.status = status;
            o.tcl = tcl;
            o.tcpNagle = tcpNagle;
            o.text = text;
            o.timeout = timeout;
            o.tmName = tmName;
            o.uie = uie;
            o.universal = universal;
            o.value = value;
            o.virtual = virtual;
            o.vlan = vlan;
            o.vlanId = vlanId;
            o.wam = wam;
            o.write = write;
            return o;
        }
    }
}
