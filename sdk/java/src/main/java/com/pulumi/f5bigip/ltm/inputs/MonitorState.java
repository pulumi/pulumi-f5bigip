// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MonitorState extends com.pulumi.resources.ResourceArgs {

    public static final MonitorState Empty = new MonitorState();

    /**
     * Specifies whether adaptive response time monitoring is enabled for this monitor. The default is `disabled`.
     * 
     */
    @Import(name="adaptive")
    private @Nullable Output<String> adaptive;

    /**
     * @return Specifies whether adaptive response time monitoring is enabled for this monitor. The default is `disabled`.
     * 
     */
    public Optional<Output<String>> adaptive() {
        return Optional.ofNullable(this.adaptive);
    }

    /**
     * Specifies the absolute number of milliseconds that may not be exceeded by a monitor probe, regardless of Allowed Divergence.
     * 
     */
    @Import(name="adaptiveLimit")
    private @Nullable Output<Integer> adaptiveLimit;

    /**
     * @return Specifies the absolute number of milliseconds that may not be exceeded by a monitor probe, regardless of Allowed Divergence.
     * 
     */
    public Optional<Output<Integer>> adaptiveLimit() {
        return Optional.ofNullable(this.adaptiveLimit);
    }

    /**
     * Specifies the location in the LDAP tree from which the monitor starts the health check
     * 
     */
    @Import(name="base")
    private @Nullable Output<String> base;

    /**
     * @return Specifies the location in the LDAP tree from which the monitor starts the health check
     * 
     */
    public Optional<Output<String>> base() {
        return Optional.ofNullable(this.base);
    }

    /**
     * Specifies whether the system will query the LDAP servers pointed to by any referrals in the query results.
     * 
     */
    @Import(name="chaseReferrals")
    private @Nullable Output<String> chaseReferrals;

    /**
     * @return Specifies whether the system will query the LDAP servers pointed to by any referrals in the query results.
     * 
     */
    public Optional<Output<String>> chaseReferrals() {
        return Optional.ofNullable(this.chaseReferrals);
    }

    /**
     * Specifies, when enabled, that the SSL options setting (in OpenSSL) is set to ALL. Accepts &#39;enabled&#39; or &#39;disabled&#39; values, the default value is &#39;enabled&#39;.
     * 
     */
    @Import(name="compatibility")
    private @Nullable Output<String> compatibility;

    /**
     * @return Specifies, when enabled, that the SSL options setting (in OpenSSL) is set to ALL. Accepts &#39;enabled&#39; or &#39;disabled&#39; values, the default value is &#39;enabled&#39;.
     * 
     */
    public Optional<Output<String>> compatibility() {
        return Optional.ofNullable(this.compatibility);
    }

    /**
     * Custom parent monitor for the system to use for setting initial values for the new monitor.
     * 
     */
    @Import(name="customParent")
    private @Nullable Output<String> customParent;

    /**
     * @return Custom parent monitor for the system to use for setting initial values for the new monitor.
     * 
     */
    public Optional<Output<String>> customParent() {
        return Optional.ofNullable(this.customParent);
    }

    /**
     * Specifies the database in which the user is created
     * 
     */
    @Import(name="database")
    private @Nullable Output<String> database;

    /**
     * @return Specifies the database in which the user is created
     * 
     */
    public Optional<Output<String>> database() {
        return Optional.ofNullable(this.database);
    }

    /**
     * Specify an alias address for monitoring
     * 
     */
    @Import(name="destination")
    private @Nullable Output<String> destination;

    /**
     * @return Specify an alias address for monitoring
     * 
     */
    public Optional<Output<String>> destination() {
        return Optional.ofNullable(this.destination);
    }

    /**
     * Specifies the domain name to check, for example, Domain is allowed only in case of Parent as /Common/smtp.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return Specifies the domain name to check, for example, Domain is allowed only in case of Parent as /Common/smtp.
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * Specifies the full path and file name of the file that the system attempts to download. The health check is successful if the system can download the file.
     * 
     */
    @Import(name="filename")
    private @Nullable Output<String> filename;

    /**
     * @return Specifies the full path and file name of the file that the system attempts to download. The health check is successful if the system can download the file.
     * 
     */
    public Optional<Output<String>> filename() {
        return Optional.ofNullable(this.filename);
    }

    /**
     * Specifies an LDAP key for which the monitor searches
     * 
     */
    @Import(name="filter")
    private @Nullable Output<String> filter;

    /**
     * @return Specifies an LDAP key for which the monitor searches
     * 
     */
    public Optional<Output<String>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * Specifies, in seconds, the frequency at which the system issues the monitor check when either the resource is down or the status of the resource is unknown,value of `interval` should be always less than `timeout`. Default is `5`.
     * 
     */
    @Import(name="interval")
    private @Nullable Output<Integer> interval;

    /**
     * @return Specifies, in seconds, the frequency at which the system issues the monitor check when either the resource is down or the status of the resource is unknown,value of `interval` should be always less than `timeout`. Default is `5`.
     * 
     */
    public Optional<Output<Integer>> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * Displays the differentiated services code point (DSCP).The default is `0 (zero)`.
     * 
     */
    @Import(name="ipDscp")
    private @Nullable Output<Integer> ipDscp;

    /**
     * @return Displays the differentiated services code point (DSCP).The default is `0 (zero)`.
     * 
     */
    public Optional<Output<Integer>> ipDscp() {
        return Optional.ofNullable(this.ipDscp);
    }

    /**
     * Specifies whether the target must include attributes in its response to be considered up. The options are no (Specifies
     * that the system performs only a one-level search (based on the Filter setting), and does not require that the target
     * returns any attributes.) and yes (Specifies that the system performs a sub-tree search, and if the target returns no
     * attributes, the target is considered down.)
     * 
     */
    @Import(name="mandatoryAttributes")
    private @Nullable Output<String> mandatoryAttributes;

    /**
     * @return Specifies whether the target must include attributes in its response to be considered up. The options are no (Specifies
     * that the system performs only a one-level search (based on the Filter setting), and does not require that the target
     * returns any attributes.) and yes (Specifies that the system performs a sub-tree search, and if the target returns no
     * attributes, the target is considered down.)
     * 
     */
    public Optional<Output<String>> mandatoryAttributes() {
        return Optional.ofNullable(this.mandatoryAttributes);
    }

    /**
     * Specifies whether the system automatically changes the status of a resource to Enabled at the next successful monitor check.
     * 
     */
    @Import(name="manualResume")
    private @Nullable Output<String> manualResume;

    /**
     * @return Specifies whether the system automatically changes the status of a resource to Enabled at the next successful monitor check.
     * 
     */
    public Optional<Output<String>> manualResume() {
        return Optional.ofNullable(this.manualResume);
    }

    /**
     * Specifies the data transfer process (DTP) mode. The default value is passive. The options are passive (Specifies that the monitor sends a data transfer request to the FTP server. When the FTP server receives the request, the FTP server then initiates and establishes the data connection.) and active (Specifies that the monitor initiates and establishes the data connection with the FTP server.).
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return Specifies the data transfer process (DTP) mode. The default value is passive. The options are passive (Specifies that the monitor sends a data transfer request to the FTP server. When the FTP server receives the request, the FTP server then initiates and establishes the data connection.) and active (Specifies that the monitor initiates and establishes the data connection with the FTP server.).
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Specifies the Name of the LTM Monitor.Name of Monitor should be full path,full path is the combination of the `partition + monitor name`,For ex:`/Common/test-ltm-monitor`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the Name of the LTM Monitor.Name of Monitor should be full path,full path is the combination of the `partition + monitor name`,For ex:`/Common/test-ltm-monitor`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Parent monitor for the system to use for setting initial values for the new monitor.
     * 
     */
    @Import(name="parent")
    private @Nullable Output<String> parent;

    /**
     * @return Parent monitor for the system to use for setting initial values for the new monitor.
     * 
     */
    public Optional<Output<String>> parent() {
        return Optional.ofNullable(this.parent);
    }

    /**
     * Specifies the password if the monitored target requires authentication
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Specifies the password if the monitored target requires authentication
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Specifies the regular expression representing the text string that the monitor looks for in the returned resource.
     * 
     */
    @Import(name="receive")
    private @Nullable Output<String> receive;

    /**
     * @return Specifies the regular expression representing the text string that the monitor looks for in the returned resource.
     * 
     */
    public Optional<Output<String>> receive() {
        return Optional.ofNullable(this.receive);
    }

    /**
     * The system marks the node or pool member disabled when its response matches Receive Disable String but not Receive String.
     * 
     */
    @Import(name="receiveDisable")
    private @Nullable Output<String> receiveDisable;

    /**
     * @return The system marks the node or pool member disabled when its response matches Receive Disable String but not Receive String.
     * 
     */
    public Optional<Output<String>> receiveDisable() {
        return Optional.ofNullable(this.receiveDisable);
    }

    /**
     * Instructs the system to mark the target resource down when the test is successful.
     * 
     */
    @Import(name="reverse")
    private @Nullable Output<String> reverse;

    /**
     * @return Instructs the system to mark the target resource down when the test is successful.
     * 
     */
    public Optional<Output<String>> reverse() {
        return Optional.ofNullable(this.reverse);
    }

    /**
     * Specifies the secure communications protocol that the monitor uses to communicate with the target. The options are none
     * (Specifies that the system does not use a security protocol for communications with the target.), ssl (Specifies that
     * the system uses the SSL protocol for communications with the target.), and tls (Specifies that the system uses the TLS
     * protocol for communications with the target.)
     * 
     */
    @Import(name="security")
    private @Nullable Output<String> security;

    /**
     * @return Specifies the secure communications protocol that the monitor uses to communicate with the target. The options are none
     * (Specifies that the system does not use a security protocol for communications with the target.), ssl (Specifies that
     * the system uses the SSL protocol for communications with the target.), and tls (Specifies that the system uses the TLS
     * protocol for communications with the target.)
     * 
     */
    public Optional<Output<String>> security() {
        return Optional.ofNullable(this.security);
    }

    /**
     * Specifies the text string that the monitor sends to the target object.
     * 
     */
    @Import(name="send")
    private @Nullable Output<String> send;

    /**
     * @return Specifies the text string that the monitor sends to the target object.
     * 
     */
    public Optional<Output<String>> send() {
        return Optional.ofNullable(this.send);
    }

    /**
     * Specifies the ssl profile for the monitor. It only makes sense when the parent is `/Common/https`
     * 
     */
    @Import(name="sslProfile")
    private @Nullable Output<String> sslProfile;

    /**
     * @return Specifies the ssl profile for the monitor. It only makes sense when the parent is `/Common/https`
     * 
     */
    public Optional<Output<String>> sslProfile() {
        return Optional.ofNullable(this.sslProfile);
    }

    /**
     * Specifies the number of seconds to wait after a resource first responds correctly to the monitor before setting the resource to up.
     * 
     */
    @Import(name="timeUntilUp")
    private @Nullable Output<Integer> timeUntilUp;

    /**
     * @return Specifies the number of seconds to wait after a resource first responds correctly to the monitor before setting the resource to up.
     * 
     */
    public Optional<Output<Integer>> timeUntilUp() {
        return Optional.ofNullable(this.timeUntilUp);
    }

    /**
     * Specifies the number of seconds the target has in which to respond to the monitor request. The default is `16` seconds
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    /**
     * @return Specifies the number of seconds the target has in which to respond to the monitor request. The default is `16` seconds
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * Specifies whether the monitor operates in transparent mode.
     * 
     */
    @Import(name="transparent")
    private @Nullable Output<String> transparent;

    /**
     * @return Specifies whether the monitor operates in transparent mode.
     * 
     */
    public Optional<Output<String>> transparent() {
        return Optional.ofNullable(this.transparent);
    }

    /**
     * Specifies the interval for the system to use to perform the health check when a resource is up. The default is `0(Disabled)`
     * 
     */
    @Import(name="upInterval")
    private @Nullable Output<Integer> upInterval;

    /**
     * @return Specifies the interval for the system to use to perform the health check when a resource is up. The default is `0(Disabled)`
     * 
     */
    public Optional<Output<Integer>> upInterval() {
        return Optional.ofNullable(this.upInterval);
    }

    /**
     * Specifies the user name if the monitored target requires authentication
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return Specifies the user name if the monitored target requires authentication
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private MonitorState() {}

    private MonitorState(MonitorState $) {
        this.adaptive = $.adaptive;
        this.adaptiveLimit = $.adaptiveLimit;
        this.base = $.base;
        this.chaseReferrals = $.chaseReferrals;
        this.compatibility = $.compatibility;
        this.customParent = $.customParent;
        this.database = $.database;
        this.destination = $.destination;
        this.domain = $.domain;
        this.filename = $.filename;
        this.filter = $.filter;
        this.interval = $.interval;
        this.ipDscp = $.ipDscp;
        this.mandatoryAttributes = $.mandatoryAttributes;
        this.manualResume = $.manualResume;
        this.mode = $.mode;
        this.name = $.name;
        this.parent = $.parent;
        this.password = $.password;
        this.receive = $.receive;
        this.receiveDisable = $.receiveDisable;
        this.reverse = $.reverse;
        this.security = $.security;
        this.send = $.send;
        this.sslProfile = $.sslProfile;
        this.timeUntilUp = $.timeUntilUp;
        this.timeout = $.timeout;
        this.transparent = $.transparent;
        this.upInterval = $.upInterval;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitorState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitorState $;

        public Builder() {
            $ = new MonitorState();
        }

        public Builder(MonitorState defaults) {
            $ = new MonitorState(Objects.requireNonNull(defaults));
        }

        /**
         * @param adaptive Specifies whether adaptive response time monitoring is enabled for this monitor. The default is `disabled`.
         * 
         * @return builder
         * 
         */
        public Builder adaptive(@Nullable Output<String> adaptive) {
            $.adaptive = adaptive;
            return this;
        }

        /**
         * @param adaptive Specifies whether adaptive response time monitoring is enabled for this monitor. The default is `disabled`.
         * 
         * @return builder
         * 
         */
        public Builder adaptive(String adaptive) {
            return adaptive(Output.of(adaptive));
        }

        /**
         * @param adaptiveLimit Specifies the absolute number of milliseconds that may not be exceeded by a monitor probe, regardless of Allowed Divergence.
         * 
         * @return builder
         * 
         */
        public Builder adaptiveLimit(@Nullable Output<Integer> adaptiveLimit) {
            $.adaptiveLimit = adaptiveLimit;
            return this;
        }

        /**
         * @param adaptiveLimit Specifies the absolute number of milliseconds that may not be exceeded by a monitor probe, regardless of Allowed Divergence.
         * 
         * @return builder
         * 
         */
        public Builder adaptiveLimit(Integer adaptiveLimit) {
            return adaptiveLimit(Output.of(adaptiveLimit));
        }

        /**
         * @param base Specifies the location in the LDAP tree from which the monitor starts the health check
         * 
         * @return builder
         * 
         */
        public Builder base(@Nullable Output<String> base) {
            $.base = base;
            return this;
        }

        /**
         * @param base Specifies the location in the LDAP tree from which the monitor starts the health check
         * 
         * @return builder
         * 
         */
        public Builder base(String base) {
            return base(Output.of(base));
        }

        /**
         * @param chaseReferrals Specifies whether the system will query the LDAP servers pointed to by any referrals in the query results.
         * 
         * @return builder
         * 
         */
        public Builder chaseReferrals(@Nullable Output<String> chaseReferrals) {
            $.chaseReferrals = chaseReferrals;
            return this;
        }

        /**
         * @param chaseReferrals Specifies whether the system will query the LDAP servers pointed to by any referrals in the query results.
         * 
         * @return builder
         * 
         */
        public Builder chaseReferrals(String chaseReferrals) {
            return chaseReferrals(Output.of(chaseReferrals));
        }

        /**
         * @param compatibility Specifies, when enabled, that the SSL options setting (in OpenSSL) is set to ALL. Accepts &#39;enabled&#39; or &#39;disabled&#39; values, the default value is &#39;enabled&#39;.
         * 
         * @return builder
         * 
         */
        public Builder compatibility(@Nullable Output<String> compatibility) {
            $.compatibility = compatibility;
            return this;
        }

        /**
         * @param compatibility Specifies, when enabled, that the SSL options setting (in OpenSSL) is set to ALL. Accepts &#39;enabled&#39; or &#39;disabled&#39; values, the default value is &#39;enabled&#39;.
         * 
         * @return builder
         * 
         */
        public Builder compatibility(String compatibility) {
            return compatibility(Output.of(compatibility));
        }

        /**
         * @param customParent Custom parent monitor for the system to use for setting initial values for the new monitor.
         * 
         * @return builder
         * 
         */
        public Builder customParent(@Nullable Output<String> customParent) {
            $.customParent = customParent;
            return this;
        }

        /**
         * @param customParent Custom parent monitor for the system to use for setting initial values for the new monitor.
         * 
         * @return builder
         * 
         */
        public Builder customParent(String customParent) {
            return customParent(Output.of(customParent));
        }

        /**
         * @param database Specifies the database in which the user is created
         * 
         * @return builder
         * 
         */
        public Builder database(@Nullable Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database Specifies the database in which the user is created
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param destination Specify an alias address for monitoring
         * 
         * @return builder
         * 
         */
        public Builder destination(@Nullable Output<String> destination) {
            $.destination = destination;
            return this;
        }

        /**
         * @param destination Specify an alias address for monitoring
         * 
         * @return builder
         * 
         */
        public Builder destination(String destination) {
            return destination(Output.of(destination));
        }

        /**
         * @param domain Specifies the domain name to check, for example, Domain is allowed only in case of Parent as /Common/smtp.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain Specifies the domain name to check, for example, Domain is allowed only in case of Parent as /Common/smtp.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param filename Specifies the full path and file name of the file that the system attempts to download. The health check is successful if the system can download the file.
         * 
         * @return builder
         * 
         */
        public Builder filename(@Nullable Output<String> filename) {
            $.filename = filename;
            return this;
        }

        /**
         * @param filename Specifies the full path and file name of the file that the system attempts to download. The health check is successful if the system can download the file.
         * 
         * @return builder
         * 
         */
        public Builder filename(String filename) {
            return filename(Output.of(filename));
        }

        /**
         * @param filter Specifies an LDAP key for which the monitor searches
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable Output<String> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter Specifies an LDAP key for which the monitor searches
         * 
         * @return builder
         * 
         */
        public Builder filter(String filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param interval Specifies, in seconds, the frequency at which the system issues the monitor check when either the resource is down or the status of the resource is unknown,value of `interval` should be always less than `timeout`. Default is `5`.
         * 
         * @return builder
         * 
         */
        public Builder interval(@Nullable Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval Specifies, in seconds, the frequency at which the system issues the monitor check when either the resource is down or the status of the resource is unknown,value of `interval` should be always less than `timeout`. Default is `5`.
         * 
         * @return builder
         * 
         */
        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param ipDscp Displays the differentiated services code point (DSCP).The default is `0 (zero)`.
         * 
         * @return builder
         * 
         */
        public Builder ipDscp(@Nullable Output<Integer> ipDscp) {
            $.ipDscp = ipDscp;
            return this;
        }

        /**
         * @param ipDscp Displays the differentiated services code point (DSCP).The default is `0 (zero)`.
         * 
         * @return builder
         * 
         */
        public Builder ipDscp(Integer ipDscp) {
            return ipDscp(Output.of(ipDscp));
        }

        /**
         * @param mandatoryAttributes Specifies whether the target must include attributes in its response to be considered up. The options are no (Specifies
         * that the system performs only a one-level search (based on the Filter setting), and does not require that the target
         * returns any attributes.) and yes (Specifies that the system performs a sub-tree search, and if the target returns no
         * attributes, the target is considered down.)
         * 
         * @return builder
         * 
         */
        public Builder mandatoryAttributes(@Nullable Output<String> mandatoryAttributes) {
            $.mandatoryAttributes = mandatoryAttributes;
            return this;
        }

        /**
         * @param mandatoryAttributes Specifies whether the target must include attributes in its response to be considered up. The options are no (Specifies
         * that the system performs only a one-level search (based on the Filter setting), and does not require that the target
         * returns any attributes.) and yes (Specifies that the system performs a sub-tree search, and if the target returns no
         * attributes, the target is considered down.)
         * 
         * @return builder
         * 
         */
        public Builder mandatoryAttributes(String mandatoryAttributes) {
            return mandatoryAttributes(Output.of(mandatoryAttributes));
        }

        /**
         * @param manualResume Specifies whether the system automatically changes the status of a resource to Enabled at the next successful monitor check.
         * 
         * @return builder
         * 
         */
        public Builder manualResume(@Nullable Output<String> manualResume) {
            $.manualResume = manualResume;
            return this;
        }

        /**
         * @param manualResume Specifies whether the system automatically changes the status of a resource to Enabled at the next successful monitor check.
         * 
         * @return builder
         * 
         */
        public Builder manualResume(String manualResume) {
            return manualResume(Output.of(manualResume));
        }

        /**
         * @param mode Specifies the data transfer process (DTP) mode. The default value is passive. The options are passive (Specifies that the monitor sends a data transfer request to the FTP server. When the FTP server receives the request, the FTP server then initiates and establishes the data connection.) and active (Specifies that the monitor initiates and establishes the data connection with the FTP server.).
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Specifies the data transfer process (DTP) mode. The default value is passive. The options are passive (Specifies that the monitor sends a data transfer request to the FTP server. When the FTP server receives the request, the FTP server then initiates and establishes the data connection.) and active (Specifies that the monitor initiates and establishes the data connection with the FTP server.).
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param name Specifies the Name of the LTM Monitor.Name of Monitor should be full path,full path is the combination of the `partition + monitor name`,For ex:`/Common/test-ltm-monitor`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the Name of the LTM Monitor.Name of Monitor should be full path,full path is the combination of the `partition + monitor name`,For ex:`/Common/test-ltm-monitor`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parent Parent monitor for the system to use for setting initial values for the new monitor.
         * 
         * @return builder
         * 
         */
        public Builder parent(@Nullable Output<String> parent) {
            $.parent = parent;
            return this;
        }

        /**
         * @param parent Parent monitor for the system to use for setting initial values for the new monitor.
         * 
         * @return builder
         * 
         */
        public Builder parent(String parent) {
            return parent(Output.of(parent));
        }

        /**
         * @param password Specifies the password if the monitored target requires authentication
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Specifies the password if the monitored target requires authentication
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param receive Specifies the regular expression representing the text string that the monitor looks for in the returned resource.
         * 
         * @return builder
         * 
         */
        public Builder receive(@Nullable Output<String> receive) {
            $.receive = receive;
            return this;
        }

        /**
         * @param receive Specifies the regular expression representing the text string that the monitor looks for in the returned resource.
         * 
         * @return builder
         * 
         */
        public Builder receive(String receive) {
            return receive(Output.of(receive));
        }

        /**
         * @param receiveDisable The system marks the node or pool member disabled when its response matches Receive Disable String but not Receive String.
         * 
         * @return builder
         * 
         */
        public Builder receiveDisable(@Nullable Output<String> receiveDisable) {
            $.receiveDisable = receiveDisable;
            return this;
        }

        /**
         * @param receiveDisable The system marks the node or pool member disabled when its response matches Receive Disable String but not Receive String.
         * 
         * @return builder
         * 
         */
        public Builder receiveDisable(String receiveDisable) {
            return receiveDisable(Output.of(receiveDisable));
        }

        /**
         * @param reverse Instructs the system to mark the target resource down when the test is successful.
         * 
         * @return builder
         * 
         */
        public Builder reverse(@Nullable Output<String> reverse) {
            $.reverse = reverse;
            return this;
        }

        /**
         * @param reverse Instructs the system to mark the target resource down when the test is successful.
         * 
         * @return builder
         * 
         */
        public Builder reverse(String reverse) {
            return reverse(Output.of(reverse));
        }

        /**
         * @param security Specifies the secure communications protocol that the monitor uses to communicate with the target. The options are none
         * (Specifies that the system does not use a security protocol for communications with the target.), ssl (Specifies that
         * the system uses the SSL protocol for communications with the target.), and tls (Specifies that the system uses the TLS
         * protocol for communications with the target.)
         * 
         * @return builder
         * 
         */
        public Builder security(@Nullable Output<String> security) {
            $.security = security;
            return this;
        }

        /**
         * @param security Specifies the secure communications protocol that the monitor uses to communicate with the target. The options are none
         * (Specifies that the system does not use a security protocol for communications with the target.), ssl (Specifies that
         * the system uses the SSL protocol for communications with the target.), and tls (Specifies that the system uses the TLS
         * protocol for communications with the target.)
         * 
         * @return builder
         * 
         */
        public Builder security(String security) {
            return security(Output.of(security));
        }

        /**
         * @param send Specifies the text string that the monitor sends to the target object.
         * 
         * @return builder
         * 
         */
        public Builder send(@Nullable Output<String> send) {
            $.send = send;
            return this;
        }

        /**
         * @param send Specifies the text string that the monitor sends to the target object.
         * 
         * @return builder
         * 
         */
        public Builder send(String send) {
            return send(Output.of(send));
        }

        /**
         * @param sslProfile Specifies the ssl profile for the monitor. It only makes sense when the parent is `/Common/https`
         * 
         * @return builder
         * 
         */
        public Builder sslProfile(@Nullable Output<String> sslProfile) {
            $.sslProfile = sslProfile;
            return this;
        }

        /**
         * @param sslProfile Specifies the ssl profile for the monitor. It only makes sense when the parent is `/Common/https`
         * 
         * @return builder
         * 
         */
        public Builder sslProfile(String sslProfile) {
            return sslProfile(Output.of(sslProfile));
        }

        /**
         * @param timeUntilUp Specifies the number of seconds to wait after a resource first responds correctly to the monitor before setting the resource to up.
         * 
         * @return builder
         * 
         */
        public Builder timeUntilUp(@Nullable Output<Integer> timeUntilUp) {
            $.timeUntilUp = timeUntilUp;
            return this;
        }

        /**
         * @param timeUntilUp Specifies the number of seconds to wait after a resource first responds correctly to the monitor before setting the resource to up.
         * 
         * @return builder
         * 
         */
        public Builder timeUntilUp(Integer timeUntilUp) {
            return timeUntilUp(Output.of(timeUntilUp));
        }

        /**
         * @param timeout Specifies the number of seconds the target has in which to respond to the monitor request. The default is `16` seconds
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout Specifies the number of seconds the target has in which to respond to the monitor request. The default is `16` seconds
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param transparent Specifies whether the monitor operates in transparent mode.
         * 
         * @return builder
         * 
         */
        public Builder transparent(@Nullable Output<String> transparent) {
            $.transparent = transparent;
            return this;
        }

        /**
         * @param transparent Specifies whether the monitor operates in transparent mode.
         * 
         * @return builder
         * 
         */
        public Builder transparent(String transparent) {
            return transparent(Output.of(transparent));
        }

        /**
         * @param upInterval Specifies the interval for the system to use to perform the health check when a resource is up. The default is `0(Disabled)`
         * 
         * @return builder
         * 
         */
        public Builder upInterval(@Nullable Output<Integer> upInterval) {
            $.upInterval = upInterval;
            return this;
        }

        /**
         * @param upInterval Specifies the interval for the system to use to perform the health check when a resource is up. The default is `0(Disabled)`
         * 
         * @return builder
         * 
         */
        public Builder upInterval(Integer upInterval) {
            return upInterval(Output.of(upInterval));
        }

        /**
         * @param username Specifies the user name if the monitored target requires authentication
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Specifies the user name if the monitored target requires authentication
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public MonitorState build() {
            return $;
        }
    }

}
