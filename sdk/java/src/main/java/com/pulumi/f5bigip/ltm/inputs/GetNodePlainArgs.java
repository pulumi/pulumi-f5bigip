// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.f5bigip.ltm.inputs.GetNodeFqdn;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetNodePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetNodePlainArgs Empty = new GetNodePlainArgs();

    /**
     * The address of the node.
     * 
     */
    @Import(name="address")
    private @Nullable String address;

    /**
     * @return The address of the node.
     * 
     */
    public Optional<String> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * User defined description of the node.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return User defined description of the node.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="fqdn")
    private @Nullable GetNodeFqdn fqdn;

    public Optional<GetNodeFqdn> fqdn() {
        return Optional.ofNullable(this.fqdn);
    }

    /**
     * Full path of the node (partition and name)
     * 
     */
    @Import(name="fullPath")
    private @Nullable String fullPath;

    /**
     * @return Full path of the node (partition and name)
     * 
     */
    public Optional<String> fullPath() {
        return Optional.ofNullable(this.fullPath);
    }

    /**
     * Name of the node.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Name of the node.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * partition of the node.
     * 
     */
    @Import(name="partition", required=true)
    private String partition;

    /**
     * @return partition of the node.
     * 
     */
    public String partition() {
        return this.partition;
    }

    private GetNodePlainArgs() {}

    private GetNodePlainArgs(GetNodePlainArgs $) {
        this.address = $.address;
        this.description = $.description;
        this.fqdn = $.fqdn;
        this.fullPath = $.fullPath;
        this.name = $.name;
        this.partition = $.partition;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNodePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNodePlainArgs $;

        public Builder() {
            $ = new GetNodePlainArgs();
        }

        public Builder(GetNodePlainArgs defaults) {
            $ = new GetNodePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address The address of the node.
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable String address) {
            $.address = address;
            return this;
        }

        /**
         * @param description User defined description of the node.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder fqdn(@Nullable GetNodeFqdn fqdn) {
            $.fqdn = fqdn;
            return this;
        }

        /**
         * @param fullPath Full path of the node (partition and name)
         * 
         * @return builder
         * 
         */
        public Builder fullPath(@Nullable String fullPath) {
            $.fullPath = fullPath;
            return this;
        }

        /**
         * @param name Name of the node.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param partition partition of the node.
         * 
         * @return builder
         * 
         */
        public Builder partition(String partition) {
            $.partition = partition;
            return this;
        }

        public GetNodePlainArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.partition = Objects.requireNonNull($.partition, "expected parameter 'partition' to be non-null");
            return $;
        }
    }

}
