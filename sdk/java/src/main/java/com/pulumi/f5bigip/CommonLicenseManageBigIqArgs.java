// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CommonLicenseManageBigIqArgs extends com.pulumi.resources.ResourceArgs {

    public static final CommonLicenseManageBigIqArgs Empty = new CommonLicenseManageBigIqArgs();

    /**
     * The type of assignment, which is determined by whether the BIG-IP is unreachable, unmanaged, or managed by BIG-IQ. Possible values: “UNREACHABLE”, “UNMANAGED”, or “MANAGED”.
     * 
     */
    @Import(name="assignmentType", required=true)
    private Output<String> assignmentType;

    /**
     * @return The type of assignment, which is determined by whether the BIG-IP is unreachable, unmanaged, or managed by BIG-IQ. Possible values: “UNREACHABLE”, “UNMANAGED”, or “MANAGED”.
     * 
     */
    public Output<String> assignmentType() {
        return this.assignmentType;
    }

    /**
     * BIGIQ License Manager IP Address, variable type `string`
     * 
     */
    @Import(name="bigiqAddress", required=true)
    private Output<String> bigiqAddress;

    /**
     * @return BIGIQ License Manager IP Address, variable type `string`
     * 
     */
    public Output<String> bigiqAddress() {
        return this.bigiqAddress;
    }

    /**
     * BIGIQ Login reference for token authentication
     * 
     */
    @Import(name="bigiqLoginRef")
    private @Nullable Output<String> bigiqLoginRef;

    /**
     * @return BIGIQ Login reference for token authentication
     * 
     */
    public Optional<Output<String>> bigiqLoginRef() {
        return Optional.ofNullable(this.bigiqLoginRef);
    }

    /**
     * BIGIQ License Manager password.  variable type `string`
     * 
     */
    @Import(name="bigiqPassword", required=true)
    private Output<String> bigiqPassword;

    /**
     * @return BIGIQ License Manager password.  variable type `string`
     * 
     */
    public Output<String> bigiqPassword() {
        return this.bigiqPassword;
    }

    /**
     * type `int`, BIGIQ License Manager Port number, specify if port is other than `443`
     * 
     */
    @Import(name="bigiqPort")
    private @Nullable Output<String> bigiqPort;

    /**
     * @return type `int`, BIGIQ License Manager Port number, specify if port is other than `443`
     * 
     */
    public Optional<Output<String>> bigiqPort() {
        return Optional.ofNullable(this.bigiqPort);
    }

    /**
     * type `bool`, if set to `true` enables Token based Authentication,default is `false`
     * 
     */
    @Import(name="bigiqTokenAuth")
    private @Nullable Output<Boolean> bigiqTokenAuth;

    /**
     * @return type `bool`, if set to `true` enables Token based Authentication,default is `false`
     * 
     */
    public Optional<Output<Boolean>> bigiqTokenAuth() {
        return Optional.ofNullable(this.bigiqTokenAuth);
    }

    /**
     * BIGIQ License Manager username, variable type `string`
     * 
     */
    @Import(name="bigiqUser", required=true)
    private Output<String> bigiqUser;

    /**
     * @return BIGIQ License Manager username, variable type `string`
     * 
     */
    public Output<String> bigiqUser() {
        return this.bigiqUser;
    }

    /**
     * Status of Licence Assignment
     * 
     */
    @Import(name="deviceLicenseStatus")
    private @Nullable Output<String> deviceLicenseStatus;

    /**
     * @return Status of Licence Assignment
     * 
     */
    public Optional<Output<String>> deviceLicenseStatus() {
        return Optional.ofNullable(this.deviceLicenseStatus);
    }

    /**
     * Identifies the platform running the BIG-IP VE. Possible values: “aws”, “azure”, “gce”, “vmware”, “hyperv”, “kvm”, or “xen”. type `string`
     * 
     */
    @Import(name="hypervisor")
    private @Nullable Output<String> hypervisor;

    /**
     * @return Identifies the platform running the BIG-IP VE. Possible values: “aws”, “azure”, “gce”, “vmware”, “hyperv”, “kvm”, or “xen”. type `string`
     * 
     */
    public Optional<Output<String>> hypervisor() {
        return Optional.ofNullable(this.hypervisor);
    }

    /**
     * License Assignment is done with specified `key`, supported only with RegKeypool type License assignement. type `string`
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return License Assignment is done with specified `key`, supported only with RegKeypool type License assignement. type `string`
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * A name given to the license pool. type `string`
     * 
     */
    @Import(name="licensePoolname", required=true)
    private Output<String> licensePoolname;

    /**
     * @return A name given to the license pool. type `string`
     * 
     */
    public Output<String> licensePoolname() {
        return this.licensePoolname;
    }

    /**
     * MAC address of the BIG-IP. type `string`
     * 
     */
    @Import(name="macAddress")
    private @Nullable Output<String> macAddress;

    /**
     * @return MAC address of the BIG-IP. type `string`
     * 
     */
    public Optional<Output<String>> macAddress() {
        return Optional.ofNullable(this.macAddress);
    }

    /**
     * An optional offering name. type `string`
     * 
     */
    @Import(name="skukeyword1")
    private @Nullable Output<String> skukeyword1;

    /**
     * @return An optional offering name. type `string`
     * 
     */
    public Optional<Output<String>> skukeyword1() {
        return Optional.ofNullable(this.skukeyword1);
    }

    /**
     * An optional offering name. type `string`
     * 
     */
    @Import(name="skukeyword2")
    private @Nullable Output<String> skukeyword2;

    /**
     * @return An optional offering name. type `string`
     * 
     */
    public Optional<Output<String>> skukeyword2() {
        return Optional.ofNullable(this.skukeyword2);
    }

    /**
     * For an unreachable BIG-IP, you can provide an optional description for the assignment in this field.
     * 
     */
    @Import(name="tenant")
    private @Nullable Output<String> tenant;

    /**
     * @return For an unreachable BIG-IP, you can provide an optional description for the assignment in this field.
     * 
     */
    public Optional<Output<String>> tenant() {
        return Optional.ofNullable(this.tenant);
    }

    /**
     * The units used to measure billing. For example, “hourly” or “daily”. Type `string`
     * 
     */
    @Import(name="unitOfMeasure")
    private @Nullable Output<String> unitOfMeasure;

    /**
     * @return The units used to measure billing. For example, “hourly” or “daily”. Type `string`
     * 
     */
    public Optional<Output<String>> unitOfMeasure() {
        return Optional.ofNullable(this.unitOfMeasure);
    }

    private CommonLicenseManageBigIqArgs() {}

    private CommonLicenseManageBigIqArgs(CommonLicenseManageBigIqArgs $) {
        this.assignmentType = $.assignmentType;
        this.bigiqAddress = $.bigiqAddress;
        this.bigiqLoginRef = $.bigiqLoginRef;
        this.bigiqPassword = $.bigiqPassword;
        this.bigiqPort = $.bigiqPort;
        this.bigiqTokenAuth = $.bigiqTokenAuth;
        this.bigiqUser = $.bigiqUser;
        this.deviceLicenseStatus = $.deviceLicenseStatus;
        this.hypervisor = $.hypervisor;
        this.key = $.key;
        this.licensePoolname = $.licensePoolname;
        this.macAddress = $.macAddress;
        this.skukeyword1 = $.skukeyword1;
        this.skukeyword2 = $.skukeyword2;
        this.tenant = $.tenant;
        this.unitOfMeasure = $.unitOfMeasure;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CommonLicenseManageBigIqArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CommonLicenseManageBigIqArgs $;

        public Builder() {
            $ = new CommonLicenseManageBigIqArgs();
        }

        public Builder(CommonLicenseManageBigIqArgs defaults) {
            $ = new CommonLicenseManageBigIqArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assignmentType The type of assignment, which is determined by whether the BIG-IP is unreachable, unmanaged, or managed by BIG-IQ. Possible values: “UNREACHABLE”, “UNMANAGED”, or “MANAGED”.
         * 
         * @return builder
         * 
         */
        public Builder assignmentType(Output<String> assignmentType) {
            $.assignmentType = assignmentType;
            return this;
        }

        /**
         * @param assignmentType The type of assignment, which is determined by whether the BIG-IP is unreachable, unmanaged, or managed by BIG-IQ. Possible values: “UNREACHABLE”, “UNMANAGED”, or “MANAGED”.
         * 
         * @return builder
         * 
         */
        public Builder assignmentType(String assignmentType) {
            return assignmentType(Output.of(assignmentType));
        }

        /**
         * @param bigiqAddress BIGIQ License Manager IP Address, variable type `string`
         * 
         * @return builder
         * 
         */
        public Builder bigiqAddress(Output<String> bigiqAddress) {
            $.bigiqAddress = bigiqAddress;
            return this;
        }

        /**
         * @param bigiqAddress BIGIQ License Manager IP Address, variable type `string`
         * 
         * @return builder
         * 
         */
        public Builder bigiqAddress(String bigiqAddress) {
            return bigiqAddress(Output.of(bigiqAddress));
        }

        /**
         * @param bigiqLoginRef BIGIQ Login reference for token authentication
         * 
         * @return builder
         * 
         */
        public Builder bigiqLoginRef(@Nullable Output<String> bigiqLoginRef) {
            $.bigiqLoginRef = bigiqLoginRef;
            return this;
        }

        /**
         * @param bigiqLoginRef BIGIQ Login reference for token authentication
         * 
         * @return builder
         * 
         */
        public Builder bigiqLoginRef(String bigiqLoginRef) {
            return bigiqLoginRef(Output.of(bigiqLoginRef));
        }

        /**
         * @param bigiqPassword BIGIQ License Manager password.  variable type `string`
         * 
         * @return builder
         * 
         */
        public Builder bigiqPassword(Output<String> bigiqPassword) {
            $.bigiqPassword = bigiqPassword;
            return this;
        }

        /**
         * @param bigiqPassword BIGIQ License Manager password.  variable type `string`
         * 
         * @return builder
         * 
         */
        public Builder bigiqPassword(String bigiqPassword) {
            return bigiqPassword(Output.of(bigiqPassword));
        }

        /**
         * @param bigiqPort type `int`, BIGIQ License Manager Port number, specify if port is other than `443`
         * 
         * @return builder
         * 
         */
        public Builder bigiqPort(@Nullable Output<String> bigiqPort) {
            $.bigiqPort = bigiqPort;
            return this;
        }

        /**
         * @param bigiqPort type `int`, BIGIQ License Manager Port number, specify if port is other than `443`
         * 
         * @return builder
         * 
         */
        public Builder bigiqPort(String bigiqPort) {
            return bigiqPort(Output.of(bigiqPort));
        }

        /**
         * @param bigiqTokenAuth type `bool`, if set to `true` enables Token based Authentication,default is `false`
         * 
         * @return builder
         * 
         */
        public Builder bigiqTokenAuth(@Nullable Output<Boolean> bigiqTokenAuth) {
            $.bigiqTokenAuth = bigiqTokenAuth;
            return this;
        }

        /**
         * @param bigiqTokenAuth type `bool`, if set to `true` enables Token based Authentication,default is `false`
         * 
         * @return builder
         * 
         */
        public Builder bigiqTokenAuth(Boolean bigiqTokenAuth) {
            return bigiqTokenAuth(Output.of(bigiqTokenAuth));
        }

        /**
         * @param bigiqUser BIGIQ License Manager username, variable type `string`
         * 
         * @return builder
         * 
         */
        public Builder bigiqUser(Output<String> bigiqUser) {
            $.bigiqUser = bigiqUser;
            return this;
        }

        /**
         * @param bigiqUser BIGIQ License Manager username, variable type `string`
         * 
         * @return builder
         * 
         */
        public Builder bigiqUser(String bigiqUser) {
            return bigiqUser(Output.of(bigiqUser));
        }

        /**
         * @param deviceLicenseStatus Status of Licence Assignment
         * 
         * @return builder
         * 
         */
        public Builder deviceLicenseStatus(@Nullable Output<String> deviceLicenseStatus) {
            $.deviceLicenseStatus = deviceLicenseStatus;
            return this;
        }

        /**
         * @param deviceLicenseStatus Status of Licence Assignment
         * 
         * @return builder
         * 
         */
        public Builder deviceLicenseStatus(String deviceLicenseStatus) {
            return deviceLicenseStatus(Output.of(deviceLicenseStatus));
        }

        /**
         * @param hypervisor Identifies the platform running the BIG-IP VE. Possible values: “aws”, “azure”, “gce”, “vmware”, “hyperv”, “kvm”, or “xen”. type `string`
         * 
         * @return builder
         * 
         */
        public Builder hypervisor(@Nullable Output<String> hypervisor) {
            $.hypervisor = hypervisor;
            return this;
        }

        /**
         * @param hypervisor Identifies the platform running the BIG-IP VE. Possible values: “aws”, “azure”, “gce”, “vmware”, “hyperv”, “kvm”, or “xen”. type `string`
         * 
         * @return builder
         * 
         */
        public Builder hypervisor(String hypervisor) {
            return hypervisor(Output.of(hypervisor));
        }

        /**
         * @param key License Assignment is done with specified `key`, supported only with RegKeypool type License assignement. type `string`
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key License Assignment is done with specified `key`, supported only with RegKeypool type License assignement. type `string`
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param licensePoolname A name given to the license pool. type `string`
         * 
         * @return builder
         * 
         */
        public Builder licensePoolname(Output<String> licensePoolname) {
            $.licensePoolname = licensePoolname;
            return this;
        }

        /**
         * @param licensePoolname A name given to the license pool. type `string`
         * 
         * @return builder
         * 
         */
        public Builder licensePoolname(String licensePoolname) {
            return licensePoolname(Output.of(licensePoolname));
        }

        /**
         * @param macAddress MAC address of the BIG-IP. type `string`
         * 
         * @return builder
         * 
         */
        public Builder macAddress(@Nullable Output<String> macAddress) {
            $.macAddress = macAddress;
            return this;
        }

        /**
         * @param macAddress MAC address of the BIG-IP. type `string`
         * 
         * @return builder
         * 
         */
        public Builder macAddress(String macAddress) {
            return macAddress(Output.of(macAddress));
        }

        /**
         * @param skukeyword1 An optional offering name. type `string`
         * 
         * @return builder
         * 
         */
        public Builder skukeyword1(@Nullable Output<String> skukeyword1) {
            $.skukeyword1 = skukeyword1;
            return this;
        }

        /**
         * @param skukeyword1 An optional offering name. type `string`
         * 
         * @return builder
         * 
         */
        public Builder skukeyword1(String skukeyword1) {
            return skukeyword1(Output.of(skukeyword1));
        }

        /**
         * @param skukeyword2 An optional offering name. type `string`
         * 
         * @return builder
         * 
         */
        public Builder skukeyword2(@Nullable Output<String> skukeyword2) {
            $.skukeyword2 = skukeyword2;
            return this;
        }

        /**
         * @param skukeyword2 An optional offering name. type `string`
         * 
         * @return builder
         * 
         */
        public Builder skukeyword2(String skukeyword2) {
            return skukeyword2(Output.of(skukeyword2));
        }

        /**
         * @param tenant For an unreachable BIG-IP, you can provide an optional description for the assignment in this field.
         * 
         * @return builder
         * 
         */
        public Builder tenant(@Nullable Output<String> tenant) {
            $.tenant = tenant;
            return this;
        }

        /**
         * @param tenant For an unreachable BIG-IP, you can provide an optional description for the assignment in this field.
         * 
         * @return builder
         * 
         */
        public Builder tenant(String tenant) {
            return tenant(Output.of(tenant));
        }

        /**
         * @param unitOfMeasure The units used to measure billing. For example, “hourly” or “daily”. Type `string`
         * 
         * @return builder
         * 
         */
        public Builder unitOfMeasure(@Nullable Output<String> unitOfMeasure) {
            $.unitOfMeasure = unitOfMeasure;
            return this;
        }

        /**
         * @param unitOfMeasure The units used to measure billing. For example, “hourly” or “daily”. Type `string`
         * 
         * @return builder
         * 
         */
        public Builder unitOfMeasure(String unitOfMeasure) {
            return unitOfMeasure(Output.of(unitOfMeasure));
        }

        public CommonLicenseManageBigIqArgs build() {
            $.assignmentType = Objects.requireNonNull($.assignmentType, "expected parameter 'assignmentType' to be non-null");
            $.bigiqAddress = Objects.requireNonNull($.bigiqAddress, "expected parameter 'bigiqAddress' to be non-null");
            $.bigiqPassword = Objects.requireNonNull($.bigiqPassword, "expected parameter 'bigiqPassword' to be non-null");
            $.bigiqUser = Objects.requireNonNull($.bigiqUser, "expected parameter 'bigiqUser' to be non-null");
            $.licensePoolname = Objects.requireNonNull($.licensePoolname, "expected parameter 'licensePoolname' to be non-null");
            return $;
        }
    }

}
