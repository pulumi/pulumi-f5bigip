// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.sys.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SnmpTrapsState extends com.pulumi.resources.ResourceArgs {

    public static final SnmpTrapsState Empty = new SnmpTrapsState();

    /**
     * Encrypted password
     * 
     */
    @Import(name="authPasswordencrypted")
    private @Nullable Output<String> authPasswordencrypted;

    /**
     * @return Encrypted password
     * 
     */
    public Optional<Output<String>> authPasswordencrypted() {
        return Optional.ofNullable(this.authPasswordencrypted);
    }

    /**
     * Specifies the protocol used to authenticate the user.
     * 
     */
    @Import(name="authProtocol")
    private @Nullable Output<String> authProtocol;

    /**
     * @return Specifies the protocol used to authenticate the user.
     * 
     */
    public Optional<Output<String>> authProtocol() {
        return Optional.ofNullable(this.authProtocol);
    }

    /**
     * Specifies the community string used for this trap.
     * 
     */
    @Import(name="community")
    private @Nullable Output<String> community;

    /**
     * @return Specifies the community string used for this trap.
     * 
     */
    public Optional<Output<String>> community() {
        return Optional.ofNullable(this.community);
    }

    /**
     * The port that the trap will be sent to.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The port that the trap will be sent to.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Specifies the authoritative security engine for SNMPv3.
     * 
     */
    @Import(name="engineId")
    private @Nullable Output<String> engineId;

    /**
     * @return Specifies the authoritative security engine for SNMPv3.
     * 
     */
    public Optional<Output<String>> engineId() {
        return Optional.ofNullable(this.engineId);
    }

    /**
     * The host the trap will be sent to.
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return The host the trap will be sent to.
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * Name of the snmp trap.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the snmp trap.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * User defined description.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return User defined description.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Specifies the clear text password used to encrypt traffic. This field will not be displayed.
     * 
     */
    @Import(name="privacyPassword")
    private @Nullable Output<String> privacyPassword;

    /**
     * @return Specifies the clear text password used to encrypt traffic. This field will not be displayed.
     * 
     */
    public Optional<Output<String>> privacyPassword() {
        return Optional.ofNullable(this.privacyPassword);
    }

    /**
     * Specifies the encrypted password used to encrypt traffic.
     * 
     */
    @Import(name="privacyPasswordEncrypted")
    private @Nullable Output<String> privacyPasswordEncrypted;

    /**
     * @return Specifies the encrypted password used to encrypt traffic.
     * 
     */
    public Optional<Output<String>> privacyPasswordEncrypted() {
        return Optional.ofNullable(this.privacyPasswordEncrypted);
    }

    /**
     * Specifies the protocol used to encrypt traffic.
     * 
     */
    @Import(name="privacyProtocol")
    private @Nullable Output<String> privacyProtocol;

    /**
     * @return Specifies the protocol used to encrypt traffic.
     * 
     */
    public Optional<Output<String>> privacyProtocol() {
        return Optional.ofNullable(this.privacyProtocol);
    }

    /**
     * Specifies whether or not traffic is encrypted and whether or not authentication is required.
     * 
     */
    @Import(name="securityLevel")
    private @Nullable Output<String> securityLevel;

    /**
     * @return Specifies whether or not traffic is encrypted and whether or not authentication is required.
     * 
     */
    public Optional<Output<String>> securityLevel() {
        return Optional.ofNullable(this.securityLevel);
    }

    /**
     * Security name used in conjunction with SNMPv3.
     * 
     */
    @Import(name="securityName")
    private @Nullable Output<String> securityName;

    /**
     * @return Security name used in conjunction with SNMPv3.
     * 
     */
    public Optional<Output<String>> securityName() {
        return Optional.ofNullable(this.securityName);
    }

    /**
     * SNMP version used for sending the trap.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return SNMP version used for sending the trap.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private SnmpTrapsState() {}

    private SnmpTrapsState(SnmpTrapsState $) {
        this.authPasswordencrypted = $.authPasswordencrypted;
        this.authProtocol = $.authProtocol;
        this.community = $.community;
        this.description = $.description;
        this.engineId = $.engineId;
        this.host = $.host;
        this.name = $.name;
        this.port = $.port;
        this.privacyPassword = $.privacyPassword;
        this.privacyPasswordEncrypted = $.privacyPasswordEncrypted;
        this.privacyProtocol = $.privacyProtocol;
        this.securityLevel = $.securityLevel;
        this.securityName = $.securityName;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SnmpTrapsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SnmpTrapsState $;

        public Builder() {
            $ = new SnmpTrapsState();
        }

        public Builder(SnmpTrapsState defaults) {
            $ = new SnmpTrapsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param authPasswordencrypted Encrypted password
         * 
         * @return builder
         * 
         */
        public Builder authPasswordencrypted(@Nullable Output<String> authPasswordencrypted) {
            $.authPasswordencrypted = authPasswordencrypted;
            return this;
        }

        /**
         * @param authPasswordencrypted Encrypted password
         * 
         * @return builder
         * 
         */
        public Builder authPasswordencrypted(String authPasswordencrypted) {
            return authPasswordencrypted(Output.of(authPasswordencrypted));
        }

        /**
         * @param authProtocol Specifies the protocol used to authenticate the user.
         * 
         * @return builder
         * 
         */
        public Builder authProtocol(@Nullable Output<String> authProtocol) {
            $.authProtocol = authProtocol;
            return this;
        }

        /**
         * @param authProtocol Specifies the protocol used to authenticate the user.
         * 
         * @return builder
         * 
         */
        public Builder authProtocol(String authProtocol) {
            return authProtocol(Output.of(authProtocol));
        }

        /**
         * @param community Specifies the community string used for this trap.
         * 
         * @return builder
         * 
         */
        public Builder community(@Nullable Output<String> community) {
            $.community = community;
            return this;
        }

        /**
         * @param community Specifies the community string used for this trap.
         * 
         * @return builder
         * 
         */
        public Builder community(String community) {
            return community(Output.of(community));
        }

        /**
         * @param description The port that the trap will be sent to.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The port that the trap will be sent to.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param engineId Specifies the authoritative security engine for SNMPv3.
         * 
         * @return builder
         * 
         */
        public Builder engineId(@Nullable Output<String> engineId) {
            $.engineId = engineId;
            return this;
        }

        /**
         * @param engineId Specifies the authoritative security engine for SNMPv3.
         * 
         * @return builder
         * 
         */
        public Builder engineId(String engineId) {
            return engineId(Output.of(engineId));
        }

        /**
         * @param host The host the trap will be sent to.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The host the trap will be sent to.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param name Name of the snmp trap.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the snmp trap.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param port User defined description.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port User defined description.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param privacyPassword Specifies the clear text password used to encrypt traffic. This field will not be displayed.
         * 
         * @return builder
         * 
         */
        public Builder privacyPassword(@Nullable Output<String> privacyPassword) {
            $.privacyPassword = privacyPassword;
            return this;
        }

        /**
         * @param privacyPassword Specifies the clear text password used to encrypt traffic. This field will not be displayed.
         * 
         * @return builder
         * 
         */
        public Builder privacyPassword(String privacyPassword) {
            return privacyPassword(Output.of(privacyPassword));
        }

        /**
         * @param privacyPasswordEncrypted Specifies the encrypted password used to encrypt traffic.
         * 
         * @return builder
         * 
         */
        public Builder privacyPasswordEncrypted(@Nullable Output<String> privacyPasswordEncrypted) {
            $.privacyPasswordEncrypted = privacyPasswordEncrypted;
            return this;
        }

        /**
         * @param privacyPasswordEncrypted Specifies the encrypted password used to encrypt traffic.
         * 
         * @return builder
         * 
         */
        public Builder privacyPasswordEncrypted(String privacyPasswordEncrypted) {
            return privacyPasswordEncrypted(Output.of(privacyPasswordEncrypted));
        }

        /**
         * @param privacyProtocol Specifies the protocol used to encrypt traffic.
         * 
         * @return builder
         * 
         */
        public Builder privacyProtocol(@Nullable Output<String> privacyProtocol) {
            $.privacyProtocol = privacyProtocol;
            return this;
        }

        /**
         * @param privacyProtocol Specifies the protocol used to encrypt traffic.
         * 
         * @return builder
         * 
         */
        public Builder privacyProtocol(String privacyProtocol) {
            return privacyProtocol(Output.of(privacyProtocol));
        }

        /**
         * @param securityLevel Specifies whether or not traffic is encrypted and whether or not authentication is required.
         * 
         * @return builder
         * 
         */
        public Builder securityLevel(@Nullable Output<String> securityLevel) {
            $.securityLevel = securityLevel;
            return this;
        }

        /**
         * @param securityLevel Specifies whether or not traffic is encrypted and whether or not authentication is required.
         * 
         * @return builder
         * 
         */
        public Builder securityLevel(String securityLevel) {
            return securityLevel(Output.of(securityLevel));
        }

        /**
         * @param securityName Security name used in conjunction with SNMPv3.
         * 
         * @return builder
         * 
         */
        public Builder securityName(@Nullable Output<String> securityName) {
            $.securityName = securityName;
            return this;
        }

        /**
         * @param securityName Security name used in conjunction with SNMPv3.
         * 
         * @return builder
         * 
         */
        public Builder securityName(String securityName) {
            return securityName(Output.of(securityName));
        }

        /**
         * @param version SNMP version used for sending the trap.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version SNMP version used for sending the trap.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public SnmpTrapsState build() {
            return $;
        }
    }

}
