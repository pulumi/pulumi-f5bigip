// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProfileTcpState extends com.pulumi.resources.ResourceArgs {

    public static final ProfileTcpState Empty = new ProfileTcpState();

    /**
     * Specifies the number of seconds that a connection remains in a LAST-ACK state before quitting. A value of 0 represents a term of forever (or until the maxrtx of the FIN state). The default value is 5 seconds.
     * 
     */
    @Import(name="closeWaitTimeout")
    private @Nullable Output<Integer> closeWaitTimeout;

    /**
     * @return Specifies the number of seconds that a connection remains in a LAST-ACK state before quitting. A value of 0 represents a term of forever (or until the maxrtx of the FIN state). The default value is 5 seconds.
     * 
     */
    public Optional<Output<Integer>> closeWaitTimeout() {
        return Optional.ofNullable(this.closeWaitTimeout);
    }

    /**
     * Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
     * 
     */
    @Import(name="defaultsFrom")
    private @Nullable Output<String> defaultsFrom;

    /**
     * @return Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
     * 
     */
    public Optional<Output<String>> defaultsFrom() {
        return Optional.ofNullable(this.defaultsFrom);
    }

    /**
     * Specifies, when enabled, that the system defers allocation of the connection chain context until the client response is received. This option is useful for dealing with 3-way handshake DOS attacks. The default value is disabled.
     * 
     */
    @Import(name="deferredAccept")
    private @Nullable Output<String> deferredAccept;

    /**
     * @return Specifies, when enabled, that the system defers allocation of the connection chain context until the client response is received. This option is useful for dealing with 3-way handshake DOS attacks. The default value is disabled.
     * 
     */
    public Optional<Output<String>> deferredAccept() {
        return Optional.ofNullable(this.deferredAccept);
    }

    /**
     * When enabled, permits TCP Fast Open, allowing properly equipped TCP clients to send data with the SYN packet.
     * 
     */
    @Import(name="fastOpen")
    private @Nullable Output<String> fastOpen;

    /**
     * @return When enabled, permits TCP Fast Open, allowing properly equipped TCP clients to send data with the SYN packet.
     * 
     */
    public Optional<Output<String>> fastOpen() {
        return Optional.ofNullable(this.fastOpen);
    }

    /**
     * Specifies the number of seconds that a connection is in the FIN-WAIT-2 state before quitting. The default value is 300 seconds. A value of 0 (zero) represents a term of forever (or until the maxrtx of the FIN state).
     * 
     */
    @Import(name="finwait2timeout")
    private @Nullable Output<Integer> finwait2timeout;

    /**
     * @return Specifies the number of seconds that a connection is in the FIN-WAIT-2 state before quitting. The default value is 300 seconds. A value of 0 (zero) represents a term of forever (or until the maxrtx of the FIN state).
     * 
     */
    public Optional<Output<Integer>> finwait2timeout() {
        return Optional.ofNullable(this.finwait2timeout);
    }

    /**
     * Specifies the number of seconds that a connection is in the FIN-WAIT-1 or closing state before quitting. The default value is 5 seconds. A value of 0 (zero) represents a term of forever (or until the maxrtx of the FIN state). You can also specify immediate or indefinite.
     * 
     */
    @Import(name="finwaitTimeout")
    private @Nullable Output<Integer> finwaitTimeout;

    /**
     * @return Specifies the number of seconds that a connection is in the FIN-WAIT-1 or closing state before quitting. The default value is 5 seconds. A value of 0 (zero) represents a term of forever (or until the maxrtx of the FIN state). You can also specify immediate or indefinite.
     * 
     */
    public Optional<Output<Integer>> finwaitTimeout() {
        return Optional.ofNullable(this.finwaitTimeout);
    }

    /**
     * Specifies the number of seconds that a connection is idle before the connection is eligible for deletion. The default value is 300 seconds.
     * 
     */
    @Import(name="idleTimeout")
    private @Nullable Output<Integer> idleTimeout;

    /**
     * @return Specifies the number of seconds that a connection is idle before the connection is eligible for deletion. The default value is 300 seconds.
     * 
     */
    public Optional<Output<Integer>> idleTimeout() {
        return Optional.ofNullable(this.idleTimeout);
    }

    /**
     * Specifies the keep alive probe interval, in seconds. The default value is 1800 seconds.
     * 
     */
    @Import(name="keepaliveInterval")
    private @Nullable Output<Integer> keepaliveInterval;

    /**
     * @return Specifies the keep alive probe interval, in seconds. The default value is 1800 seconds.
     * 
     */
    public Optional<Output<Integer>> keepaliveInterval() {
        return Optional.ofNullable(this.keepaliveInterval);
    }

    /**
     * Name of the profile_tcp
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the profile_tcp
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Displays the administrative partition within which this profile resides
     * 
     */
    @Import(name="partition")
    private @Nullable Output<String> partition;

    /**
     * @return Displays the administrative partition within which this profile resides
     * 
     */
    public Optional<Output<String>> partition() {
        return Optional.ofNullable(this.partition);
    }

    private ProfileTcpState() {}

    private ProfileTcpState(ProfileTcpState $) {
        this.closeWaitTimeout = $.closeWaitTimeout;
        this.defaultsFrom = $.defaultsFrom;
        this.deferredAccept = $.deferredAccept;
        this.fastOpen = $.fastOpen;
        this.finwait2timeout = $.finwait2timeout;
        this.finwaitTimeout = $.finwaitTimeout;
        this.idleTimeout = $.idleTimeout;
        this.keepaliveInterval = $.keepaliveInterval;
        this.name = $.name;
        this.partition = $.partition;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProfileTcpState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProfileTcpState $;

        public Builder() {
            $ = new ProfileTcpState();
        }

        public Builder(ProfileTcpState defaults) {
            $ = new ProfileTcpState(Objects.requireNonNull(defaults));
        }

        /**
         * @param closeWaitTimeout Specifies the number of seconds that a connection remains in a LAST-ACK state before quitting. A value of 0 represents a term of forever (or until the maxrtx of the FIN state). The default value is 5 seconds.
         * 
         * @return builder
         * 
         */
        public Builder closeWaitTimeout(@Nullable Output<Integer> closeWaitTimeout) {
            $.closeWaitTimeout = closeWaitTimeout;
            return this;
        }

        /**
         * @param closeWaitTimeout Specifies the number of seconds that a connection remains in a LAST-ACK state before quitting. A value of 0 represents a term of forever (or until the maxrtx of the FIN state). The default value is 5 seconds.
         * 
         * @return builder
         * 
         */
        public Builder closeWaitTimeout(Integer closeWaitTimeout) {
            return closeWaitTimeout(Output.of(closeWaitTimeout));
        }

        /**
         * @param defaultsFrom Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
         * 
         * @return builder
         * 
         */
        public Builder defaultsFrom(@Nullable Output<String> defaultsFrom) {
            $.defaultsFrom = defaultsFrom;
            return this;
        }

        /**
         * @param defaultsFrom Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
         * 
         * @return builder
         * 
         */
        public Builder defaultsFrom(String defaultsFrom) {
            return defaultsFrom(Output.of(defaultsFrom));
        }

        /**
         * @param deferredAccept Specifies, when enabled, that the system defers allocation of the connection chain context until the client response is received. This option is useful for dealing with 3-way handshake DOS attacks. The default value is disabled.
         * 
         * @return builder
         * 
         */
        public Builder deferredAccept(@Nullable Output<String> deferredAccept) {
            $.deferredAccept = deferredAccept;
            return this;
        }

        /**
         * @param deferredAccept Specifies, when enabled, that the system defers allocation of the connection chain context until the client response is received. This option is useful for dealing with 3-way handshake DOS attacks. The default value is disabled.
         * 
         * @return builder
         * 
         */
        public Builder deferredAccept(String deferredAccept) {
            return deferredAccept(Output.of(deferredAccept));
        }

        /**
         * @param fastOpen When enabled, permits TCP Fast Open, allowing properly equipped TCP clients to send data with the SYN packet.
         * 
         * @return builder
         * 
         */
        public Builder fastOpen(@Nullable Output<String> fastOpen) {
            $.fastOpen = fastOpen;
            return this;
        }

        /**
         * @param fastOpen When enabled, permits TCP Fast Open, allowing properly equipped TCP clients to send data with the SYN packet.
         * 
         * @return builder
         * 
         */
        public Builder fastOpen(String fastOpen) {
            return fastOpen(Output.of(fastOpen));
        }

        /**
         * @param finwait2timeout Specifies the number of seconds that a connection is in the FIN-WAIT-2 state before quitting. The default value is 300 seconds. A value of 0 (zero) represents a term of forever (or until the maxrtx of the FIN state).
         * 
         * @return builder
         * 
         */
        public Builder finwait2timeout(@Nullable Output<Integer> finwait2timeout) {
            $.finwait2timeout = finwait2timeout;
            return this;
        }

        /**
         * @param finwait2timeout Specifies the number of seconds that a connection is in the FIN-WAIT-2 state before quitting. The default value is 300 seconds. A value of 0 (zero) represents a term of forever (or until the maxrtx of the FIN state).
         * 
         * @return builder
         * 
         */
        public Builder finwait2timeout(Integer finwait2timeout) {
            return finwait2timeout(Output.of(finwait2timeout));
        }

        /**
         * @param finwaitTimeout Specifies the number of seconds that a connection is in the FIN-WAIT-1 or closing state before quitting. The default value is 5 seconds. A value of 0 (zero) represents a term of forever (or until the maxrtx of the FIN state). You can also specify immediate or indefinite.
         * 
         * @return builder
         * 
         */
        public Builder finwaitTimeout(@Nullable Output<Integer> finwaitTimeout) {
            $.finwaitTimeout = finwaitTimeout;
            return this;
        }

        /**
         * @param finwaitTimeout Specifies the number of seconds that a connection is in the FIN-WAIT-1 or closing state before quitting. The default value is 5 seconds. A value of 0 (zero) represents a term of forever (or until the maxrtx of the FIN state). You can also specify immediate or indefinite.
         * 
         * @return builder
         * 
         */
        public Builder finwaitTimeout(Integer finwaitTimeout) {
            return finwaitTimeout(Output.of(finwaitTimeout));
        }

        /**
         * @param idleTimeout Specifies the number of seconds that a connection is idle before the connection is eligible for deletion. The default value is 300 seconds.
         * 
         * @return builder
         * 
         */
        public Builder idleTimeout(@Nullable Output<Integer> idleTimeout) {
            $.idleTimeout = idleTimeout;
            return this;
        }

        /**
         * @param idleTimeout Specifies the number of seconds that a connection is idle before the connection is eligible for deletion. The default value is 300 seconds.
         * 
         * @return builder
         * 
         */
        public Builder idleTimeout(Integer idleTimeout) {
            return idleTimeout(Output.of(idleTimeout));
        }

        /**
         * @param keepaliveInterval Specifies the keep alive probe interval, in seconds. The default value is 1800 seconds.
         * 
         * @return builder
         * 
         */
        public Builder keepaliveInterval(@Nullable Output<Integer> keepaliveInterval) {
            $.keepaliveInterval = keepaliveInterval;
            return this;
        }

        /**
         * @param keepaliveInterval Specifies the keep alive probe interval, in seconds. The default value is 1800 seconds.
         * 
         * @return builder
         * 
         */
        public Builder keepaliveInterval(Integer keepaliveInterval) {
            return keepaliveInterval(Output.of(keepaliveInterval));
        }

        /**
         * @param name Name of the profile_tcp
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the profile_tcp
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param partition Displays the administrative partition within which this profile resides
         * 
         * @return builder
         * 
         */
        public Builder partition(@Nullable Output<String> partition) {
            $.partition = partition;
            return this;
        }

        /**
         * @param partition Displays the administrative partition within which this profile resides
         * 
         * @return builder
         * 
         */
        public Builder partition(String partition) {
            return partition(Output.of(partition));
        }

        public ProfileTcpState build() {
            return $;
        }
    }

}
