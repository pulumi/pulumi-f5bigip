// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProfileTcpState extends com.pulumi.resources.ResourceArgs {

    public static final ProfileTcpState Empty = new ProfileTcpState();

    /**
     * Specifies the number of seconds that a connection remains in a LAST-ACK state before quitting. A value of 0 represents a term of forever (or until the maxrtx of the FIN state). The default value is 5 seconds.
     * 
     */
    @Import(name="closeWaitTimeout")
    private @Nullable Output<Integer> closeWaitTimeout;

    /**
     * @return Specifies the number of seconds that a connection remains in a LAST-ACK state before quitting. A value of 0 represents a term of forever (or until the maxrtx of the FIN state). The default value is 5 seconds.
     * 
     */
    public Optional<Output<Integer>> closeWaitTimeout() {
        return Optional.ofNullable(this.closeWaitTimeout);
    }

    /**
     * Specifies the algorithm to use to share network resources among competing users to reduce congestion. The default is High Speed.
     * 
     */
    @Import(name="congestionControl")
    private @Nullable Output<String> congestionControl;

    /**
     * @return Specifies the algorithm to use to share network resources among competing users to reduce congestion. The default is High Speed.
     * 
     */
    public Optional<Output<String>> congestionControl() {
        return Optional.ofNullable(this.congestionControl);
    }

    /**
     * Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
     * 
     */
    @Import(name="defaultsFrom")
    private @Nullable Output<String> defaultsFrom;

    /**
     * @return Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
     * 
     */
    public Optional<Output<String>> defaultsFrom() {
        return Optional.ofNullable(this.defaultsFrom);
    }

    /**
     * Specifies, when enabled, that the system defers allocation of the connection chain context until the client response is received. This option is useful for dealing with 3-way handshake DOS attacks. The default value is disabled.
     * 
     */
    @Import(name="deferredAccept")
    private @Nullable Output<String> deferredAccept;

    /**
     * @return Specifies, when enabled, that the system defers allocation of the connection chain context until the client response is received. This option is useful for dealing with 3-way handshake DOS attacks. The default value is disabled.
     * 
     */
    public Optional<Output<String>> deferredAccept() {
        return Optional.ofNullable(this.deferredAccept);
    }

    /**
     * Specifies, when checked (enabled), that the system can send fewer than one ACK (acknowledgment) segment per data segment received. By default, this setting is enabled.
     * 
     */
    @Import(name="delayedAcks")
    private @Nullable Output<String> delayedAcks;

    /**
     * @return Specifies, when checked (enabled), that the system can send fewer than one ACK (acknowledgment) segment per data segment received. By default, this setting is enabled.
     * 
     */
    public Optional<Output<String>> delayedAcks() {
        return Optional.ofNullable(this.delayedAcks);
    }

    /**
     * Enabling this setting allows TCP to assume a packet is lost after fewer than the standard number of duplicate ACKs, if there is no way to send new data and generate more duplicate ACKs.
     * 
     */
    @Import(name="earlyRetransmit")
    private @Nullable Output<String> earlyRetransmit;

    /**
     * @return Enabling this setting allows TCP to assume a packet is lost after fewer than the standard number of duplicate ACKs, if there is no way to send new data and generate more duplicate ACKs.
     * 
     */
    public Optional<Output<String>> earlyRetransmit() {
        return Optional.ofNullable(this.earlyRetransmit);
    }

    /**
     * When enabled, permits TCP Fast Open, allowing properly equipped TCP clients to send data with the SYN packet. Default is `enabled`. If `fastOpen` set to `enabled`, argument `verifiedAccept` can&#39;t be set to `enabled`.
     * 
     */
    @Import(name="fastOpen")
    private @Nullable Output<String> fastOpen;

    /**
     * @return When enabled, permits TCP Fast Open, allowing properly equipped TCP clients to send data with the SYN packet. Default is `enabled`. If `fastOpen` set to `enabled`, argument `verifiedAccept` can&#39;t be set to `enabled`.
     * 
     */
    public Optional<Output<String>> fastOpen() {
        return Optional.ofNullable(this.fastOpen);
    }

    /**
     * Specifies the number of seconds that a connection is in the FIN-WAIT-2 state before quitting. The default value is 300 seconds. A value of 0 (zero) represents a term of forever (or until the maxrtx of the FIN state).
     * 
     */
    @Import(name="finwait2timeout")
    private @Nullable Output<Integer> finwait2timeout;

    /**
     * @return Specifies the number of seconds that a connection is in the FIN-WAIT-2 state before quitting. The default value is 300 seconds. A value of 0 (zero) represents a term of forever (or until the maxrtx of the FIN state).
     * 
     */
    public Optional<Output<Integer>> finwait2timeout() {
        return Optional.ofNullable(this.finwait2timeout);
    }

    /**
     * Specifies the number of seconds that a connection is in the FIN-WAIT-1 or closing state before quitting. The default value is 5 seconds. A value of 0 (zero) represents a term of forever (or until the maxrtx of the FIN state). You can also specify immediate or indefinite.
     * 
     */
    @Import(name="finwaitTimeout")
    private @Nullable Output<Integer> finwaitTimeout;

    /**
     * @return Specifies the number of seconds that a connection is in the FIN-WAIT-1 or closing state before quitting. The default value is 5 seconds. A value of 0 (zero) represents a term of forever (or until the maxrtx of the FIN state). You can also specify immediate or indefinite.
     * 
     */
    public Optional<Output<Integer>> finwaitTimeout() {
        return Optional.ofNullable(this.finwaitTimeout);
    }

    /**
     * Specifies the number of seconds that a connection is idle before the connection is eligible for deletion. The default value is 300 seconds.
     * 
     */
    @Import(name="idleTimeout")
    private @Nullable Output<Integer> idleTimeout;

    /**
     * @return Specifies the number of seconds that a connection is idle before the connection is eligible for deletion. The default value is 300 seconds.
     * 
     */
    public Optional<Output<Integer>> idleTimeout() {
        return Optional.ofNullable(this.idleTimeout);
    }

    /**
     * Specifies the initial congestion window size for connections to this destination. Actual window size is this value multiplied by the MSS (Maximum Segment Size) for the same connection. The default is 10. Valid values range from 0 to 64.
     * 
     */
    @Import(name="initialCongestionWindowsize")
    private @Nullable Output<Integer> initialCongestionWindowsize;

    /**
     * @return Specifies the initial congestion window size for connections to this destination. Actual window size is this value multiplied by the MSS (Maximum Segment Size) for the same connection. The default is 10. Valid values range from 0 to 64.
     * 
     */
    public Optional<Output<Integer>> initialCongestionWindowsize() {
        return Optional.ofNullable(this.initialCongestionWindowsize);
    }

    /**
     * Specifies the keep alive probe interval, in seconds. The default value is 1800 seconds.
     * 
     */
    @Import(name="keepaliveInterval")
    private @Nullable Output<Integer> keepaliveInterval;

    /**
     * @return Specifies the keep alive probe interval, in seconds. The default value is 1800 seconds.
     * 
     */
    public Optional<Output<Integer>> keepaliveInterval() {
        return Optional.ofNullable(this.keepaliveInterval);
    }

    /**
     * Specifies whether the system applies Nagle&#39;s algorithm to reduce the number of short segments on the network.If you select Auto, the system determines whether to use Nagle&#39;s algorithm based on network conditions. By default, this setting is disabled.
     * 
     */
    @Import(name="nagle")
    private @Nullable Output<String> nagle;

    /**
     * @return Specifies whether the system applies Nagle&#39;s algorithm to reduce the number of short segments on the network.If you select Auto, the system determines whether to use Nagle&#39;s algorithm based on network conditions. By default, this setting is disabled.
     * 
     */
    public Optional<Output<String>> nagle() {
        return Optional.ofNullable(this.nagle);
    }

    /**
     * Name of the LTM TCP Profile,name should be `full path`. The full path is the combination of the `partition + name` (example: /Common/my-pool ) or  `partition + directory + name` of the resource  (example: /Common/test/my-pool )
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the LTM TCP Profile,name should be `full path`. The full path is the combination of the `partition + name` (example: /Common/my-pool ) or  `partition + directory + name` of the resource  (example: /Common/test/my-pool )
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * name of partition
     * 
     */
    @Import(name="partition")
    private @Nullable Output<String> partition;

    /**
     * @return name of partition
     * 
     */
    public Optional<Output<String>> partition() {
        return Optional.ofNullable(this.partition);
    }

    /**
     * Specifies the proxy buffer level, in bytes, at which the receive window is closed.
     * 
     */
    @Import(name="proxybufferHigh")
    private @Nullable Output<Integer> proxybufferHigh;

    /**
     * @return Specifies the proxy buffer level, in bytes, at which the receive window is closed.
     * 
     */
    public Optional<Output<Integer>> proxybufferHigh() {
        return Optional.ofNullable(this.proxybufferHigh);
    }

    /**
     * Specifies the maximum advertised RECEIVE window size. This value represents the maximum number of bytes to which the RECEIVE window can scale. The default is 65535 bytes.
     * 
     */
    @Import(name="receiveWindowsize")
    private @Nullable Output<Integer> receiveWindowsize;

    /**
     * @return Specifies the maximum advertised RECEIVE window size. This value represents the maximum number of bytes to which the RECEIVE window can scale. The default is 65535 bytes.
     * 
     */
    public Optional<Output<Integer>> receiveWindowsize() {
        return Optional.ofNullable(this.receiveWindowsize);
    }

    /**
     * Specifies the SEND window size. The default is 131072 bytes.
     * 
     */
    @Import(name="sendBuffersize")
    private @Nullable Output<Integer> sendBuffersize;

    /**
     * @return Specifies the SEND window size. The default is 131072 bytes.
     * 
     */
    public Optional<Output<Integer>> sendBuffersize() {
        return Optional.ofNullable(this.sendBuffersize);
    }

    /**
     * Enabling this setting allows TCP to send a probe segment to trigger fast recovery instead of recovering a loss via a retransmission timeout,By default, this setting is enabled.
     * 
     */
    @Import(name="taillossProbe")
    private @Nullable Output<String> taillossProbe;

    /**
     * @return Enabling this setting allows TCP to send a probe segment to trigger fast recovery instead of recovering a loss via a retransmission timeout,By default, this setting is enabled.
     * 
     */
    public Optional<Output<String>> taillossProbe() {
        return Optional.ofNullable(this.taillossProbe);
    }

    /**
     * Using this setting enabled, the system can recycle a wait-state connection immediately upon receipt of a new connection request instead of having to wait until the connection times out of the wait state. By default, this setting is enabled.
     * 
     */
    @Import(name="timewaitRecycle")
    private @Nullable Output<String> timewaitRecycle;

    /**
     * @return Using this setting enabled, the system can recycle a wait-state connection immediately upon receipt of a new connection request instead of having to wait until the connection times out of the wait state. By default, this setting is enabled.
     * 
     */
    public Optional<Output<String>> timewaitRecycle() {
        return Optional.ofNullable(this.timewaitRecycle);
    }

    /**
     * Specifies, when checked (enabled), that the system can actually communicate with the server before establishing a client connection. To determine this, the system sends the server a SYN packet before responding to the client&#39;s SYN with a SYN-ACK. When unchecked, the system accepts the client connection before selecting a server to talk to. By default, this setting is `disabled`.
     * 
     */
    @Import(name="verifiedAccept")
    private @Nullable Output<String> verifiedAccept;

    /**
     * @return Specifies, when checked (enabled), that the system can actually communicate with the server before establishing a client connection. To determine this, the system sends the server a SYN packet before responding to the client&#39;s SYN with a SYN-ACK. When unchecked, the system accepts the client connection before selecting a server to talk to. By default, this setting is `disabled`.
     * 
     */
    public Optional<Output<String>> verifiedAccept() {
        return Optional.ofNullable(this.verifiedAccept);
    }

    /**
     * Specifies the timeout in milliseconds for terminating a connection with an effective zero length TCP transmit window.
     * 
     */
    @Import(name="zerowindowTimeout")
    private @Nullable Output<Integer> zerowindowTimeout;

    /**
     * @return Specifies the timeout in milliseconds for terminating a connection with an effective zero length TCP transmit window.
     * 
     */
    public Optional<Output<Integer>> zerowindowTimeout() {
        return Optional.ofNullable(this.zerowindowTimeout);
    }

    private ProfileTcpState() {}

    private ProfileTcpState(ProfileTcpState $) {
        this.closeWaitTimeout = $.closeWaitTimeout;
        this.congestionControl = $.congestionControl;
        this.defaultsFrom = $.defaultsFrom;
        this.deferredAccept = $.deferredAccept;
        this.delayedAcks = $.delayedAcks;
        this.earlyRetransmit = $.earlyRetransmit;
        this.fastOpen = $.fastOpen;
        this.finwait2timeout = $.finwait2timeout;
        this.finwaitTimeout = $.finwaitTimeout;
        this.idleTimeout = $.idleTimeout;
        this.initialCongestionWindowsize = $.initialCongestionWindowsize;
        this.keepaliveInterval = $.keepaliveInterval;
        this.nagle = $.nagle;
        this.name = $.name;
        this.partition = $.partition;
        this.proxybufferHigh = $.proxybufferHigh;
        this.receiveWindowsize = $.receiveWindowsize;
        this.sendBuffersize = $.sendBuffersize;
        this.taillossProbe = $.taillossProbe;
        this.timewaitRecycle = $.timewaitRecycle;
        this.verifiedAccept = $.verifiedAccept;
        this.zerowindowTimeout = $.zerowindowTimeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProfileTcpState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProfileTcpState $;

        public Builder() {
            $ = new ProfileTcpState();
        }

        public Builder(ProfileTcpState defaults) {
            $ = new ProfileTcpState(Objects.requireNonNull(defaults));
        }

        /**
         * @param closeWaitTimeout Specifies the number of seconds that a connection remains in a LAST-ACK state before quitting. A value of 0 represents a term of forever (or until the maxrtx of the FIN state). The default value is 5 seconds.
         * 
         * @return builder
         * 
         */
        public Builder closeWaitTimeout(@Nullable Output<Integer> closeWaitTimeout) {
            $.closeWaitTimeout = closeWaitTimeout;
            return this;
        }

        /**
         * @param closeWaitTimeout Specifies the number of seconds that a connection remains in a LAST-ACK state before quitting. A value of 0 represents a term of forever (or until the maxrtx of the FIN state). The default value is 5 seconds.
         * 
         * @return builder
         * 
         */
        public Builder closeWaitTimeout(Integer closeWaitTimeout) {
            return closeWaitTimeout(Output.of(closeWaitTimeout));
        }

        /**
         * @param congestionControl Specifies the algorithm to use to share network resources among competing users to reduce congestion. The default is High Speed.
         * 
         * @return builder
         * 
         */
        public Builder congestionControl(@Nullable Output<String> congestionControl) {
            $.congestionControl = congestionControl;
            return this;
        }

        /**
         * @param congestionControl Specifies the algorithm to use to share network resources among competing users to reduce congestion. The default is High Speed.
         * 
         * @return builder
         * 
         */
        public Builder congestionControl(String congestionControl) {
            return congestionControl(Output.of(congestionControl));
        }

        /**
         * @param defaultsFrom Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
         * 
         * @return builder
         * 
         */
        public Builder defaultsFrom(@Nullable Output<String> defaultsFrom) {
            $.defaultsFrom = defaultsFrom;
            return this;
        }

        /**
         * @param defaultsFrom Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
         * 
         * @return builder
         * 
         */
        public Builder defaultsFrom(String defaultsFrom) {
            return defaultsFrom(Output.of(defaultsFrom));
        }

        /**
         * @param deferredAccept Specifies, when enabled, that the system defers allocation of the connection chain context until the client response is received. This option is useful for dealing with 3-way handshake DOS attacks. The default value is disabled.
         * 
         * @return builder
         * 
         */
        public Builder deferredAccept(@Nullable Output<String> deferredAccept) {
            $.deferredAccept = deferredAccept;
            return this;
        }

        /**
         * @param deferredAccept Specifies, when enabled, that the system defers allocation of the connection chain context until the client response is received. This option is useful for dealing with 3-way handshake DOS attacks. The default value is disabled.
         * 
         * @return builder
         * 
         */
        public Builder deferredAccept(String deferredAccept) {
            return deferredAccept(Output.of(deferredAccept));
        }

        /**
         * @param delayedAcks Specifies, when checked (enabled), that the system can send fewer than one ACK (acknowledgment) segment per data segment received. By default, this setting is enabled.
         * 
         * @return builder
         * 
         */
        public Builder delayedAcks(@Nullable Output<String> delayedAcks) {
            $.delayedAcks = delayedAcks;
            return this;
        }

        /**
         * @param delayedAcks Specifies, when checked (enabled), that the system can send fewer than one ACK (acknowledgment) segment per data segment received. By default, this setting is enabled.
         * 
         * @return builder
         * 
         */
        public Builder delayedAcks(String delayedAcks) {
            return delayedAcks(Output.of(delayedAcks));
        }

        /**
         * @param earlyRetransmit Enabling this setting allows TCP to assume a packet is lost after fewer than the standard number of duplicate ACKs, if there is no way to send new data and generate more duplicate ACKs.
         * 
         * @return builder
         * 
         */
        public Builder earlyRetransmit(@Nullable Output<String> earlyRetransmit) {
            $.earlyRetransmit = earlyRetransmit;
            return this;
        }

        /**
         * @param earlyRetransmit Enabling this setting allows TCP to assume a packet is lost after fewer than the standard number of duplicate ACKs, if there is no way to send new data and generate more duplicate ACKs.
         * 
         * @return builder
         * 
         */
        public Builder earlyRetransmit(String earlyRetransmit) {
            return earlyRetransmit(Output.of(earlyRetransmit));
        }

        /**
         * @param fastOpen When enabled, permits TCP Fast Open, allowing properly equipped TCP clients to send data with the SYN packet. Default is `enabled`. If `fastOpen` set to `enabled`, argument `verifiedAccept` can&#39;t be set to `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder fastOpen(@Nullable Output<String> fastOpen) {
            $.fastOpen = fastOpen;
            return this;
        }

        /**
         * @param fastOpen When enabled, permits TCP Fast Open, allowing properly equipped TCP clients to send data with the SYN packet. Default is `enabled`. If `fastOpen` set to `enabled`, argument `verifiedAccept` can&#39;t be set to `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder fastOpen(String fastOpen) {
            return fastOpen(Output.of(fastOpen));
        }

        /**
         * @param finwait2timeout Specifies the number of seconds that a connection is in the FIN-WAIT-2 state before quitting. The default value is 300 seconds. A value of 0 (zero) represents a term of forever (or until the maxrtx of the FIN state).
         * 
         * @return builder
         * 
         */
        public Builder finwait2timeout(@Nullable Output<Integer> finwait2timeout) {
            $.finwait2timeout = finwait2timeout;
            return this;
        }

        /**
         * @param finwait2timeout Specifies the number of seconds that a connection is in the FIN-WAIT-2 state before quitting. The default value is 300 seconds. A value of 0 (zero) represents a term of forever (or until the maxrtx of the FIN state).
         * 
         * @return builder
         * 
         */
        public Builder finwait2timeout(Integer finwait2timeout) {
            return finwait2timeout(Output.of(finwait2timeout));
        }

        /**
         * @param finwaitTimeout Specifies the number of seconds that a connection is in the FIN-WAIT-1 or closing state before quitting. The default value is 5 seconds. A value of 0 (zero) represents a term of forever (or until the maxrtx of the FIN state). You can also specify immediate or indefinite.
         * 
         * @return builder
         * 
         */
        public Builder finwaitTimeout(@Nullable Output<Integer> finwaitTimeout) {
            $.finwaitTimeout = finwaitTimeout;
            return this;
        }

        /**
         * @param finwaitTimeout Specifies the number of seconds that a connection is in the FIN-WAIT-1 or closing state before quitting. The default value is 5 seconds. A value of 0 (zero) represents a term of forever (or until the maxrtx of the FIN state). You can also specify immediate or indefinite.
         * 
         * @return builder
         * 
         */
        public Builder finwaitTimeout(Integer finwaitTimeout) {
            return finwaitTimeout(Output.of(finwaitTimeout));
        }

        /**
         * @param idleTimeout Specifies the number of seconds that a connection is idle before the connection is eligible for deletion. The default value is 300 seconds.
         * 
         * @return builder
         * 
         */
        public Builder idleTimeout(@Nullable Output<Integer> idleTimeout) {
            $.idleTimeout = idleTimeout;
            return this;
        }

        /**
         * @param idleTimeout Specifies the number of seconds that a connection is idle before the connection is eligible for deletion. The default value is 300 seconds.
         * 
         * @return builder
         * 
         */
        public Builder idleTimeout(Integer idleTimeout) {
            return idleTimeout(Output.of(idleTimeout));
        }

        /**
         * @param initialCongestionWindowsize Specifies the initial congestion window size for connections to this destination. Actual window size is this value multiplied by the MSS (Maximum Segment Size) for the same connection. The default is 10. Valid values range from 0 to 64.
         * 
         * @return builder
         * 
         */
        public Builder initialCongestionWindowsize(@Nullable Output<Integer> initialCongestionWindowsize) {
            $.initialCongestionWindowsize = initialCongestionWindowsize;
            return this;
        }

        /**
         * @param initialCongestionWindowsize Specifies the initial congestion window size for connections to this destination. Actual window size is this value multiplied by the MSS (Maximum Segment Size) for the same connection. The default is 10. Valid values range from 0 to 64.
         * 
         * @return builder
         * 
         */
        public Builder initialCongestionWindowsize(Integer initialCongestionWindowsize) {
            return initialCongestionWindowsize(Output.of(initialCongestionWindowsize));
        }

        /**
         * @param keepaliveInterval Specifies the keep alive probe interval, in seconds. The default value is 1800 seconds.
         * 
         * @return builder
         * 
         */
        public Builder keepaliveInterval(@Nullable Output<Integer> keepaliveInterval) {
            $.keepaliveInterval = keepaliveInterval;
            return this;
        }

        /**
         * @param keepaliveInterval Specifies the keep alive probe interval, in seconds. The default value is 1800 seconds.
         * 
         * @return builder
         * 
         */
        public Builder keepaliveInterval(Integer keepaliveInterval) {
            return keepaliveInterval(Output.of(keepaliveInterval));
        }

        /**
         * @param nagle Specifies whether the system applies Nagle&#39;s algorithm to reduce the number of short segments on the network.If you select Auto, the system determines whether to use Nagle&#39;s algorithm based on network conditions. By default, this setting is disabled.
         * 
         * @return builder
         * 
         */
        public Builder nagle(@Nullable Output<String> nagle) {
            $.nagle = nagle;
            return this;
        }

        /**
         * @param nagle Specifies whether the system applies Nagle&#39;s algorithm to reduce the number of short segments on the network.If you select Auto, the system determines whether to use Nagle&#39;s algorithm based on network conditions. By default, this setting is disabled.
         * 
         * @return builder
         * 
         */
        public Builder nagle(String nagle) {
            return nagle(Output.of(nagle));
        }

        /**
         * @param name Name of the LTM TCP Profile,name should be `full path`. The full path is the combination of the `partition + name` (example: /Common/my-pool ) or  `partition + directory + name` of the resource  (example: /Common/test/my-pool )
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the LTM TCP Profile,name should be `full path`. The full path is the combination of the `partition + name` (example: /Common/my-pool ) or  `partition + directory + name` of the resource  (example: /Common/test/my-pool )
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param partition name of partition
         * 
         * @return builder
         * 
         */
        public Builder partition(@Nullable Output<String> partition) {
            $.partition = partition;
            return this;
        }

        /**
         * @param partition name of partition
         * 
         * @return builder
         * 
         */
        public Builder partition(String partition) {
            return partition(Output.of(partition));
        }

        /**
         * @param proxybufferHigh Specifies the proxy buffer level, in bytes, at which the receive window is closed.
         * 
         * @return builder
         * 
         */
        public Builder proxybufferHigh(@Nullable Output<Integer> proxybufferHigh) {
            $.proxybufferHigh = proxybufferHigh;
            return this;
        }

        /**
         * @param proxybufferHigh Specifies the proxy buffer level, in bytes, at which the receive window is closed.
         * 
         * @return builder
         * 
         */
        public Builder proxybufferHigh(Integer proxybufferHigh) {
            return proxybufferHigh(Output.of(proxybufferHigh));
        }

        /**
         * @param receiveWindowsize Specifies the maximum advertised RECEIVE window size. This value represents the maximum number of bytes to which the RECEIVE window can scale. The default is 65535 bytes.
         * 
         * @return builder
         * 
         */
        public Builder receiveWindowsize(@Nullable Output<Integer> receiveWindowsize) {
            $.receiveWindowsize = receiveWindowsize;
            return this;
        }

        /**
         * @param receiveWindowsize Specifies the maximum advertised RECEIVE window size. This value represents the maximum number of bytes to which the RECEIVE window can scale. The default is 65535 bytes.
         * 
         * @return builder
         * 
         */
        public Builder receiveWindowsize(Integer receiveWindowsize) {
            return receiveWindowsize(Output.of(receiveWindowsize));
        }

        /**
         * @param sendBuffersize Specifies the SEND window size. The default is 131072 bytes.
         * 
         * @return builder
         * 
         */
        public Builder sendBuffersize(@Nullable Output<Integer> sendBuffersize) {
            $.sendBuffersize = sendBuffersize;
            return this;
        }

        /**
         * @param sendBuffersize Specifies the SEND window size. The default is 131072 bytes.
         * 
         * @return builder
         * 
         */
        public Builder sendBuffersize(Integer sendBuffersize) {
            return sendBuffersize(Output.of(sendBuffersize));
        }

        /**
         * @param taillossProbe Enabling this setting allows TCP to send a probe segment to trigger fast recovery instead of recovering a loss via a retransmission timeout,By default, this setting is enabled.
         * 
         * @return builder
         * 
         */
        public Builder taillossProbe(@Nullable Output<String> taillossProbe) {
            $.taillossProbe = taillossProbe;
            return this;
        }

        /**
         * @param taillossProbe Enabling this setting allows TCP to send a probe segment to trigger fast recovery instead of recovering a loss via a retransmission timeout,By default, this setting is enabled.
         * 
         * @return builder
         * 
         */
        public Builder taillossProbe(String taillossProbe) {
            return taillossProbe(Output.of(taillossProbe));
        }

        /**
         * @param timewaitRecycle Using this setting enabled, the system can recycle a wait-state connection immediately upon receipt of a new connection request instead of having to wait until the connection times out of the wait state. By default, this setting is enabled.
         * 
         * @return builder
         * 
         */
        public Builder timewaitRecycle(@Nullable Output<String> timewaitRecycle) {
            $.timewaitRecycle = timewaitRecycle;
            return this;
        }

        /**
         * @param timewaitRecycle Using this setting enabled, the system can recycle a wait-state connection immediately upon receipt of a new connection request instead of having to wait until the connection times out of the wait state. By default, this setting is enabled.
         * 
         * @return builder
         * 
         */
        public Builder timewaitRecycle(String timewaitRecycle) {
            return timewaitRecycle(Output.of(timewaitRecycle));
        }

        /**
         * @param verifiedAccept Specifies, when checked (enabled), that the system can actually communicate with the server before establishing a client connection. To determine this, the system sends the server a SYN packet before responding to the client&#39;s SYN with a SYN-ACK. When unchecked, the system accepts the client connection before selecting a server to talk to. By default, this setting is `disabled`.
         * 
         * @return builder
         * 
         */
        public Builder verifiedAccept(@Nullable Output<String> verifiedAccept) {
            $.verifiedAccept = verifiedAccept;
            return this;
        }

        /**
         * @param verifiedAccept Specifies, when checked (enabled), that the system can actually communicate with the server before establishing a client connection. To determine this, the system sends the server a SYN packet before responding to the client&#39;s SYN with a SYN-ACK. When unchecked, the system accepts the client connection before selecting a server to talk to. By default, this setting is `disabled`.
         * 
         * @return builder
         * 
         */
        public Builder verifiedAccept(String verifiedAccept) {
            return verifiedAccept(Output.of(verifiedAccept));
        }

        /**
         * @param zerowindowTimeout Specifies the timeout in milliseconds for terminating a connection with an effective zero length TCP transmit window.
         * 
         * @return builder
         * 
         */
        public Builder zerowindowTimeout(@Nullable Output<Integer> zerowindowTimeout) {
            $.zerowindowTimeout = zerowindowTimeout;
            return this;
        }

        /**
         * @param zerowindowTimeout Specifies the timeout in milliseconds for terminating a connection with an effective zero length TCP transmit window.
         * 
         * @return builder
         * 
         */
        public Builder zerowindowTimeout(Integer zerowindowTimeout) {
            return zerowindowTimeout(Output.of(zerowindowTimeout));
        }

        public ProfileTcpState build() {
            return $;
        }
    }

}
