// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.f5bigip.SslKeyCertArgs;
import com.pulumi.f5bigip.Utilities;
import com.pulumi.f5bigip.inputs.SslKeyCertState;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * `f5bigip.SslKeyCert` This resource will import SSL certificate and key on BIG-IP LTM.
 * The certificate and the key can be imported from files on the local disk, in PEM format
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.f5bigip.SslKeyCert;
 * import com.pulumi.f5bigip.SslKeyCertArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var testkeycert = new SslKeyCert("testkeycert", SslKeyCertArgs.builder()        
 *             .partition("Common")
 *             .keyName("ssl-test-key")
 *             .keyContent(StdFunctions.file(FileArgs.builder()
 *                 .input("key.pem")
 *                 .build()).result())
 *             .certName("ssl-test-cert")
 *             .certContent(StdFunctions.file(FileArgs.builder()
 *                 .input("certificate.pem")
 *                 .build()).result())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="f5bigip:index/sslKeyCert:SslKeyCert")
public class SslKeyCert extends com.pulumi.resources.CustomResource {
    /**
     * The content of the cert.
     * 
     */
    @Export(name="certContent", refs={String.class}, tree="[0]")
    private Output<String> certContent;

    /**
     * @return The content of the cert.
     * 
     */
    public Output<String> certContent() {
        return this.certContent;
    }
    /**
     * full path of the SSL certificate on the BIGIP.
     * 
     */
    @Export(name="certFullPath", refs={String.class}, tree="[0]")
    private Output<String> certFullPath;

    /**
     * @return full path of the SSL certificate on the BIGIP.
     * 
     */
    public Output<String> certFullPath() {
        return this.certFullPath;
    }
    /**
     * Specifies the type of monitoring used.
     * 
     */
    @Export(name="certMonitoringType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> certMonitoringType;

    /**
     * @return Specifies the type of monitoring used.
     * 
     */
    public Output<Optional<String>> certMonitoringType() {
        return Codegen.optional(this.certMonitoringType);
    }
    /**
     * Name of the SSL certificate to be Imported on to BIGIP.
     * 
     */
    @Export(name="certName", refs={String.class}, tree="[0]")
    private Output<String> certName;

    /**
     * @return Name of the SSL certificate to be Imported on to BIGIP.
     * 
     */
    public Output<String> certName() {
        return this.certName;
    }
    /**
     * Specifies the OCSP responder.
     * 
     */
    @Export(name="certOcsp", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> certOcsp;

    /**
     * @return Specifies the OCSP responder.
     * 
     */
    public Output<Optional<String>> certOcsp() {
        return Codegen.optional(this.certOcsp);
    }
    /**
     * Specifies the issuer certificate.
     * 
     */
    @Export(name="issuerCert", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> issuerCert;

    /**
     * @return Specifies the issuer certificate.
     * 
     */
    public Output<Optional<String>> issuerCert() {
        return Codegen.optional(this.issuerCert);
    }
    /**
     * The content of the key.
     * 
     */
    @Export(name="keyContent", refs={String.class}, tree="[0]")
    private Output<String> keyContent;

    /**
     * @return The content of the key.
     * 
     */
    public Output<String> keyContent() {
        return this.keyContent;
    }
    /**
     * full path of the SSL key on the BIGIP.
     * 
     */
    @Export(name="keyFullPath", refs={String.class}, tree="[0]")
    private Output<String> keyFullPath;

    /**
     * @return full path of the SSL key on the BIGIP.
     * 
     */
    public Output<String> keyFullPath() {
        return this.keyFullPath;
    }
    /**
     * Name of the SSL key to be Imported on to BIGIP.
     * 
     */
    @Export(name="keyName", refs={String.class}, tree="[0]")
    private Output<String> keyName;

    /**
     * @return Name of the SSL key to be Imported on to BIGIP.
     * 
     */
    public Output<String> keyName() {
        return this.keyName;
    }
    /**
     * Partition on to SSL certificate and key to be imported.
     * 
     */
    @Export(name="partition", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> partition;

    /**
     * @return Partition on to SSL certificate and key to be imported.
     * 
     */
    public Output<Optional<String>> partition() {
        return Codegen.optional(this.partition);
    }
    /**
     * Passphrase on the SSL key.
     * 
     */
    @Export(name="passphrase", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> passphrase;

    /**
     * @return Passphrase on the SSL key.
     * 
     */
    public Output<Optional<String>> passphrase() {
        return Codegen.optional(this.passphrase);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SslKeyCert(String name) {
        this(name, SslKeyCertArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SslKeyCert(String name, SslKeyCertArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SslKeyCert(String name, SslKeyCertArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("f5bigip:index/sslKeyCert:SslKeyCert", name, args == null ? SslKeyCertArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SslKeyCert(String name, Output<String> id, @Nullable SslKeyCertState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("f5bigip:index/sslKeyCert:SslKeyCert", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "certContent",
                "keyContent",
                "passphrase"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SslKeyCert get(String name, Output<String> id, @Nullable SslKeyCertState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SslKeyCert(name, id, state, options);
    }
}
