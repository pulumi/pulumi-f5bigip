// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.f5bigip.inputs.FastUdpAppMonitorArgs;
import com.pulumi.f5bigip.inputs.FastUdpAppPoolMemberArgs;
import com.pulumi.f5bigip.inputs.FastUdpAppVirtualServerArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FastUdpAppArgs extends com.pulumi.resources.ResourceArgs {

    public static final FastUdpAppArgs Empty = new FastUdpAppArgs();

    /**
     * Name of the FAST UDP application.
     * 
     */
    @Import(name="application", required=true)
    private Output<String> application;

    /**
     * @return Name of the FAST UDP application.
     * 
     */
    public Output<String> application() {
        return this.application;
    }

    /**
     * Enables use of FastL4 profiles.
     * 
     */
    @Import(name="enableFastl4")
    private @Nullable Output<Boolean> enableFastl4;

    /**
     * @return Enables use of FastL4 profiles.
     * 
     */
    public Optional<Output<Boolean>> enableFastl4() {
        return Optional.ofNullable(this.enableFastl4);
    }

    /**
     * Name of an existing BIG-IP UDP pool monitor. Monitors are used to determine the health of the application on each server.
     * 
     */
    @Import(name="existingMonitor")
    private @Nullable Output<String> existingMonitor;

    /**
     * @return Name of an existing BIG-IP UDP pool monitor. Monitors are used to determine the health of the application on each server.
     * 
     */
    public Optional<Output<String>> existingMonitor() {
        return Optional.ofNullable(this.existingMonitor);
    }

    /**
     * Name of an existing BIG-IP pool.
     * 
     */
    @Import(name="existingPool")
    private @Nullable Output<String> existingPool;

    /**
     * @return Name of an existing BIG-IP pool.
     * 
     */
    public Optional<Output<String>> existingPool() {
        return Optional.ofNullable(this.existingPool);
    }

    /**
     * Name of an existing BIG-IP FastL4 or UDP profile.
     * 
     */
    @Import(name="existingProfile")
    private @Nullable Output<String> existingProfile;

    /**
     * @return Name of an existing BIG-IP FastL4 or UDP profile.
     * 
     */
    public Optional<Output<String>> existingProfile() {
        return Optional.ofNullable(this.existingProfile);
    }

    /**
     * Name of an existing BIG-IP SNAT pool.
     * 
     */
    @Import(name="existingSnatPool")
    private @Nullable Output<String> existingSnatPool;

    /**
     * @return Name of an existing BIG-IP SNAT pool.
     * 
     */
    public Optional<Output<String>> existingSnatPool() {
        return Optional.ofNullable(this.existingSnatPool);
    }

    /**
     * Type of fallback persistence record to be created for each new client connection.
     * 
     */
    @Import(name="fallbackPersistence")
    private @Nullable Output<String> fallbackPersistence;

    /**
     * @return Type of fallback persistence record to be created for each new client connection.
     * 
     */
    public Optional<Output<String>> fallbackPersistence() {
        return Optional.ofNullable(this.fallbackPersistence);
    }

    /**
     * Irules to attach to Virtual Server.
     * 
     */
    @Import(name="irules")
    private @Nullable Output<List<String>> irules;

    /**
     * @return Irules to attach to Virtual Server.
     * 
     */
    public Optional<Output<List<String>>> irules() {
        return Optional.ofNullable(this.irules);
    }

    /**
     * A `load balancing method` is an algorithm that the BIG-IP system uses to select a pool member for processing a request. F5 recommends the Least Connections load balancing method
     * 
     */
    @Import(name="loadBalancingMode")
    private @Nullable Output<String> loadBalancingMode;

    /**
     * @return A `load balancing method` is an algorithm that the BIG-IP system uses to select a pool member for processing a request. F5 recommends the Least Connections load balancing method
     * 
     */
    public Optional<Output<String>> loadBalancingMode() {
        return Optional.ofNullable(this.loadBalancingMode);
    }

    /**
     * block takes input for FAST-Generated Pool Monitor.
     * See Pool Monitor below for more details.
     * 
     */
    @Import(name="monitor")
    private @Nullable Output<FastUdpAppMonitorArgs> monitor;

    /**
     * @return block takes input for FAST-Generated Pool Monitor.
     * See Pool Monitor below for more details.
     * 
     */
    public Optional<Output<FastUdpAppMonitorArgs>> monitor() {
        return Optional.ofNullable(this.monitor);
    }

    /**
     * Name of an existing BIG-IP persistence profile to be used.
     * 
     */
    @Import(name="persistenceProfile")
    private @Nullable Output<String> persistenceProfile;

    /**
     * @return Name of an existing BIG-IP persistence profile to be used.
     * 
     */
    public Optional<Output<String>> persistenceProfile() {
        return Optional.ofNullable(this.persistenceProfile);
    }

    /**
     * Type of persistence profile to be created. Using this option will enable use of FAST generated persistence profiles.
     * 
     */
    @Import(name="persistenceType")
    private @Nullable Output<String> persistenceType;

    /**
     * @return Type of persistence profile to be created. Using this option will enable use of FAST generated persistence profiles.
     * 
     */
    public Optional<Output<String>> persistenceType() {
        return Optional.ofNullable(this.persistenceType);
    }

    /**
     * block takes input for FAST-Generated Pool.
     * See Pool Members below for more details.
     * 
     */
    @Import(name="poolMembers")
    private @Nullable Output<List<FastUdpAppPoolMemberArgs>> poolMembers;

    /**
     * @return block takes input for FAST-Generated Pool.
     * See Pool Members below for more details.
     * 
     */
    public Optional<Output<List<FastUdpAppPoolMemberArgs>>> poolMembers() {
        return Optional.ofNullable(this.poolMembers);
    }

    /**
     * Existing security log profiles to enable.
     * 
     */
    @Import(name="securityLogProfiles")
    private @Nullable Output<List<String>> securityLogProfiles;

    /**
     * @return Existing security log profiles to enable.
     * 
     */
    public Optional<Output<List<String>>> securityLogProfiles() {
        return Optional.ofNullable(this.securityLogProfiles);
    }

    /**
     * Slow ramp temporarily throttles the number of connections to a new pool member. The recommended value is 300 seconds
     * 
     */
    @Import(name="slowRampTime")
    private @Nullable Output<Integer> slowRampTime;

    /**
     * @return Slow ramp temporarily throttles the number of connections to a new pool member. The recommended value is 300 seconds
     * 
     */
    public Optional<Output<Integer>> slowRampTime() {
        return Optional.ofNullable(this.slowRampTime);
    }

    /**
     * List of address to be used for FAST-Generated SNAT Pool.
     * 
     */
    @Import(name="snatPoolAddresses")
    private @Nullable Output<List<String>> snatPoolAddresses;

    /**
     * @return List of address to be used for FAST-Generated SNAT Pool.
     * 
     */
    public Optional<Output<List<String>>> snatPoolAddresses() {
        return Optional.ofNullable(this.snatPoolAddresses);
    }

    /**
     * Name of the FAST UDP application tenant.
     * 
     */
    @Import(name="tenant", required=true)
    private Output<String> tenant;

    /**
     * @return Name of the FAST UDP application tenant.
     * 
     */
    public Output<String> tenant() {
        return this.tenant;
    }

    /**
     * block will provide `ip` and `port` options to be used for virtual server.
     * See virtual server below for more details.
     * 
     */
    @Import(name="virtualServer")
    private @Nullable Output<FastUdpAppVirtualServerArgs> virtualServer;

    /**
     * @return block will provide `ip` and `port` options to be used for virtual server.
     * See virtual server below for more details.
     * 
     */
    public Optional<Output<FastUdpAppVirtualServerArgs>> virtualServer() {
        return Optional.ofNullable(this.virtualServer);
    }

    /**
     * Names of existing VLANs to allow.
     * 
     */
    @Import(name="vlansAlloweds")
    private @Nullable Output<List<String>> vlansAlloweds;

    /**
     * @return Names of existing VLANs to allow.
     * 
     */
    public Optional<Output<List<String>>> vlansAlloweds() {
        return Optional.ofNullable(this.vlansAlloweds);
    }

    /**
     * Names of existing VLANs to reject.
     * 
     */
    @Import(name="vlansRejecteds")
    private @Nullable Output<List<String>> vlansRejecteds;

    /**
     * @return Names of existing VLANs to reject.
     * 
     */
    public Optional<Output<List<String>>> vlansRejecteds() {
        return Optional.ofNullable(this.vlansRejecteds);
    }

    private FastUdpAppArgs() {}

    private FastUdpAppArgs(FastUdpAppArgs $) {
        this.application = $.application;
        this.enableFastl4 = $.enableFastl4;
        this.existingMonitor = $.existingMonitor;
        this.existingPool = $.existingPool;
        this.existingProfile = $.existingProfile;
        this.existingSnatPool = $.existingSnatPool;
        this.fallbackPersistence = $.fallbackPersistence;
        this.irules = $.irules;
        this.loadBalancingMode = $.loadBalancingMode;
        this.monitor = $.monitor;
        this.persistenceProfile = $.persistenceProfile;
        this.persistenceType = $.persistenceType;
        this.poolMembers = $.poolMembers;
        this.securityLogProfiles = $.securityLogProfiles;
        this.slowRampTime = $.slowRampTime;
        this.snatPoolAddresses = $.snatPoolAddresses;
        this.tenant = $.tenant;
        this.virtualServer = $.virtualServer;
        this.vlansAlloweds = $.vlansAlloweds;
        this.vlansRejecteds = $.vlansRejecteds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FastUdpAppArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FastUdpAppArgs $;

        public Builder() {
            $ = new FastUdpAppArgs();
        }

        public Builder(FastUdpAppArgs defaults) {
            $ = new FastUdpAppArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param application Name of the FAST UDP application.
         * 
         * @return builder
         * 
         */
        public Builder application(Output<String> application) {
            $.application = application;
            return this;
        }

        /**
         * @param application Name of the FAST UDP application.
         * 
         * @return builder
         * 
         */
        public Builder application(String application) {
            return application(Output.of(application));
        }

        /**
         * @param enableFastl4 Enables use of FastL4 profiles.
         * 
         * @return builder
         * 
         */
        public Builder enableFastl4(@Nullable Output<Boolean> enableFastl4) {
            $.enableFastl4 = enableFastl4;
            return this;
        }

        /**
         * @param enableFastl4 Enables use of FastL4 profiles.
         * 
         * @return builder
         * 
         */
        public Builder enableFastl4(Boolean enableFastl4) {
            return enableFastl4(Output.of(enableFastl4));
        }

        /**
         * @param existingMonitor Name of an existing BIG-IP UDP pool monitor. Monitors are used to determine the health of the application on each server.
         * 
         * @return builder
         * 
         */
        public Builder existingMonitor(@Nullable Output<String> existingMonitor) {
            $.existingMonitor = existingMonitor;
            return this;
        }

        /**
         * @param existingMonitor Name of an existing BIG-IP UDP pool monitor. Monitors are used to determine the health of the application on each server.
         * 
         * @return builder
         * 
         */
        public Builder existingMonitor(String existingMonitor) {
            return existingMonitor(Output.of(existingMonitor));
        }

        /**
         * @param existingPool Name of an existing BIG-IP pool.
         * 
         * @return builder
         * 
         */
        public Builder existingPool(@Nullable Output<String> existingPool) {
            $.existingPool = existingPool;
            return this;
        }

        /**
         * @param existingPool Name of an existing BIG-IP pool.
         * 
         * @return builder
         * 
         */
        public Builder existingPool(String existingPool) {
            return existingPool(Output.of(existingPool));
        }

        /**
         * @param existingProfile Name of an existing BIG-IP FastL4 or UDP profile.
         * 
         * @return builder
         * 
         */
        public Builder existingProfile(@Nullable Output<String> existingProfile) {
            $.existingProfile = existingProfile;
            return this;
        }

        /**
         * @param existingProfile Name of an existing BIG-IP FastL4 or UDP profile.
         * 
         * @return builder
         * 
         */
        public Builder existingProfile(String existingProfile) {
            return existingProfile(Output.of(existingProfile));
        }

        /**
         * @param existingSnatPool Name of an existing BIG-IP SNAT pool.
         * 
         * @return builder
         * 
         */
        public Builder existingSnatPool(@Nullable Output<String> existingSnatPool) {
            $.existingSnatPool = existingSnatPool;
            return this;
        }

        /**
         * @param existingSnatPool Name of an existing BIG-IP SNAT pool.
         * 
         * @return builder
         * 
         */
        public Builder existingSnatPool(String existingSnatPool) {
            return existingSnatPool(Output.of(existingSnatPool));
        }

        /**
         * @param fallbackPersistence Type of fallback persistence record to be created for each new client connection.
         * 
         * @return builder
         * 
         */
        public Builder fallbackPersistence(@Nullable Output<String> fallbackPersistence) {
            $.fallbackPersistence = fallbackPersistence;
            return this;
        }

        /**
         * @param fallbackPersistence Type of fallback persistence record to be created for each new client connection.
         * 
         * @return builder
         * 
         */
        public Builder fallbackPersistence(String fallbackPersistence) {
            return fallbackPersistence(Output.of(fallbackPersistence));
        }

        /**
         * @param irules Irules to attach to Virtual Server.
         * 
         * @return builder
         * 
         */
        public Builder irules(@Nullable Output<List<String>> irules) {
            $.irules = irules;
            return this;
        }

        /**
         * @param irules Irules to attach to Virtual Server.
         * 
         * @return builder
         * 
         */
        public Builder irules(List<String> irules) {
            return irules(Output.of(irules));
        }

        /**
         * @param irules Irules to attach to Virtual Server.
         * 
         * @return builder
         * 
         */
        public Builder irules(String... irules) {
            return irules(List.of(irules));
        }

        /**
         * @param loadBalancingMode A `load balancing method` is an algorithm that the BIG-IP system uses to select a pool member for processing a request. F5 recommends the Least Connections load balancing method
         * 
         * @return builder
         * 
         */
        public Builder loadBalancingMode(@Nullable Output<String> loadBalancingMode) {
            $.loadBalancingMode = loadBalancingMode;
            return this;
        }

        /**
         * @param loadBalancingMode A `load balancing method` is an algorithm that the BIG-IP system uses to select a pool member for processing a request. F5 recommends the Least Connections load balancing method
         * 
         * @return builder
         * 
         */
        public Builder loadBalancingMode(String loadBalancingMode) {
            return loadBalancingMode(Output.of(loadBalancingMode));
        }

        /**
         * @param monitor block takes input for FAST-Generated Pool Monitor.
         * See Pool Monitor below for more details.
         * 
         * @return builder
         * 
         */
        public Builder monitor(@Nullable Output<FastUdpAppMonitorArgs> monitor) {
            $.monitor = monitor;
            return this;
        }

        /**
         * @param monitor block takes input for FAST-Generated Pool Monitor.
         * See Pool Monitor below for more details.
         * 
         * @return builder
         * 
         */
        public Builder monitor(FastUdpAppMonitorArgs monitor) {
            return monitor(Output.of(monitor));
        }

        /**
         * @param persistenceProfile Name of an existing BIG-IP persistence profile to be used.
         * 
         * @return builder
         * 
         */
        public Builder persistenceProfile(@Nullable Output<String> persistenceProfile) {
            $.persistenceProfile = persistenceProfile;
            return this;
        }

        /**
         * @param persistenceProfile Name of an existing BIG-IP persistence profile to be used.
         * 
         * @return builder
         * 
         */
        public Builder persistenceProfile(String persistenceProfile) {
            return persistenceProfile(Output.of(persistenceProfile));
        }

        /**
         * @param persistenceType Type of persistence profile to be created. Using this option will enable use of FAST generated persistence profiles.
         * 
         * @return builder
         * 
         */
        public Builder persistenceType(@Nullable Output<String> persistenceType) {
            $.persistenceType = persistenceType;
            return this;
        }

        /**
         * @param persistenceType Type of persistence profile to be created. Using this option will enable use of FAST generated persistence profiles.
         * 
         * @return builder
         * 
         */
        public Builder persistenceType(String persistenceType) {
            return persistenceType(Output.of(persistenceType));
        }

        /**
         * @param poolMembers block takes input for FAST-Generated Pool.
         * See Pool Members below for more details.
         * 
         * @return builder
         * 
         */
        public Builder poolMembers(@Nullable Output<List<FastUdpAppPoolMemberArgs>> poolMembers) {
            $.poolMembers = poolMembers;
            return this;
        }

        /**
         * @param poolMembers block takes input for FAST-Generated Pool.
         * See Pool Members below for more details.
         * 
         * @return builder
         * 
         */
        public Builder poolMembers(List<FastUdpAppPoolMemberArgs> poolMembers) {
            return poolMembers(Output.of(poolMembers));
        }

        /**
         * @param poolMembers block takes input for FAST-Generated Pool.
         * See Pool Members below for more details.
         * 
         * @return builder
         * 
         */
        public Builder poolMembers(FastUdpAppPoolMemberArgs... poolMembers) {
            return poolMembers(List.of(poolMembers));
        }

        /**
         * @param securityLogProfiles Existing security log profiles to enable.
         * 
         * @return builder
         * 
         */
        public Builder securityLogProfiles(@Nullable Output<List<String>> securityLogProfiles) {
            $.securityLogProfiles = securityLogProfiles;
            return this;
        }

        /**
         * @param securityLogProfiles Existing security log profiles to enable.
         * 
         * @return builder
         * 
         */
        public Builder securityLogProfiles(List<String> securityLogProfiles) {
            return securityLogProfiles(Output.of(securityLogProfiles));
        }

        /**
         * @param securityLogProfiles Existing security log profiles to enable.
         * 
         * @return builder
         * 
         */
        public Builder securityLogProfiles(String... securityLogProfiles) {
            return securityLogProfiles(List.of(securityLogProfiles));
        }

        /**
         * @param slowRampTime Slow ramp temporarily throttles the number of connections to a new pool member. The recommended value is 300 seconds
         * 
         * @return builder
         * 
         */
        public Builder slowRampTime(@Nullable Output<Integer> slowRampTime) {
            $.slowRampTime = slowRampTime;
            return this;
        }

        /**
         * @param slowRampTime Slow ramp temporarily throttles the number of connections to a new pool member. The recommended value is 300 seconds
         * 
         * @return builder
         * 
         */
        public Builder slowRampTime(Integer slowRampTime) {
            return slowRampTime(Output.of(slowRampTime));
        }

        /**
         * @param snatPoolAddresses List of address to be used for FAST-Generated SNAT Pool.
         * 
         * @return builder
         * 
         */
        public Builder snatPoolAddresses(@Nullable Output<List<String>> snatPoolAddresses) {
            $.snatPoolAddresses = snatPoolAddresses;
            return this;
        }

        /**
         * @param snatPoolAddresses List of address to be used for FAST-Generated SNAT Pool.
         * 
         * @return builder
         * 
         */
        public Builder snatPoolAddresses(List<String> snatPoolAddresses) {
            return snatPoolAddresses(Output.of(snatPoolAddresses));
        }

        /**
         * @param snatPoolAddresses List of address to be used for FAST-Generated SNAT Pool.
         * 
         * @return builder
         * 
         */
        public Builder snatPoolAddresses(String... snatPoolAddresses) {
            return snatPoolAddresses(List.of(snatPoolAddresses));
        }

        /**
         * @param tenant Name of the FAST UDP application tenant.
         * 
         * @return builder
         * 
         */
        public Builder tenant(Output<String> tenant) {
            $.tenant = tenant;
            return this;
        }

        /**
         * @param tenant Name of the FAST UDP application tenant.
         * 
         * @return builder
         * 
         */
        public Builder tenant(String tenant) {
            return tenant(Output.of(tenant));
        }

        /**
         * @param virtualServer block will provide `ip` and `port` options to be used for virtual server.
         * See virtual server below for more details.
         * 
         * @return builder
         * 
         */
        public Builder virtualServer(@Nullable Output<FastUdpAppVirtualServerArgs> virtualServer) {
            $.virtualServer = virtualServer;
            return this;
        }

        /**
         * @param virtualServer block will provide `ip` and `port` options to be used for virtual server.
         * See virtual server below for more details.
         * 
         * @return builder
         * 
         */
        public Builder virtualServer(FastUdpAppVirtualServerArgs virtualServer) {
            return virtualServer(Output.of(virtualServer));
        }

        /**
         * @param vlansAlloweds Names of existing VLANs to allow.
         * 
         * @return builder
         * 
         */
        public Builder vlansAlloweds(@Nullable Output<List<String>> vlansAlloweds) {
            $.vlansAlloweds = vlansAlloweds;
            return this;
        }

        /**
         * @param vlansAlloweds Names of existing VLANs to allow.
         * 
         * @return builder
         * 
         */
        public Builder vlansAlloweds(List<String> vlansAlloweds) {
            return vlansAlloweds(Output.of(vlansAlloweds));
        }

        /**
         * @param vlansAlloweds Names of existing VLANs to allow.
         * 
         * @return builder
         * 
         */
        public Builder vlansAlloweds(String... vlansAlloweds) {
            return vlansAlloweds(List.of(vlansAlloweds));
        }

        /**
         * @param vlansRejecteds Names of existing VLANs to reject.
         * 
         * @return builder
         * 
         */
        public Builder vlansRejecteds(@Nullable Output<List<String>> vlansRejecteds) {
            $.vlansRejecteds = vlansRejecteds;
            return this;
        }

        /**
         * @param vlansRejecteds Names of existing VLANs to reject.
         * 
         * @return builder
         * 
         */
        public Builder vlansRejecteds(List<String> vlansRejecteds) {
            return vlansRejecteds(Output.of(vlansRejecteds));
        }

        /**
         * @param vlansRejecteds Names of existing VLANs to reject.
         * 
         * @return builder
         * 
         */
        public Builder vlansRejecteds(String... vlansRejecteds) {
            return vlansRejecteds(List.of(vlansRejecteds));
        }

        public FastUdpAppArgs build() {
            $.application = Objects.requireNonNull($.application, "expected parameter 'application' to be non-null");
            $.tenant = Objects.requireNonNull($.tenant, "expected parameter 'tenant' to be non-null");
            return $;
        }
    }

}
