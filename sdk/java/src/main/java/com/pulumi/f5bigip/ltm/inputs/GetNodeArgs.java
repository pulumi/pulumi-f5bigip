// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.f5bigip.ltm.inputs.GetNodeFqdnArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetNodeArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetNodeArgs Empty = new GetNodeArgs();

    /**
     * The address of the node.
     * 
     */
    @Import(name="address")
    private @Nullable Output<String> address;

    /**
     * @return The address of the node.
     * 
     */
    public Optional<Output<String>> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * User defined description of the node.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return User defined description of the node.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="fqdn")
    private @Nullable Output<GetNodeFqdnArgs> fqdn;

    public Optional<Output<GetNodeFqdnArgs>> fqdn() {
        return Optional.ofNullable(this.fqdn);
    }

    /**
     * Full path of the node (partition and name)
     * 
     */
    @Import(name="fullPath")
    private @Nullable Output<String> fullPath;

    /**
     * @return Full path of the node (partition and name)
     * 
     */
    public Optional<Output<String>> fullPath() {
        return Optional.ofNullable(this.fullPath);
    }

    /**
     * Name of the node.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the node.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * partition of the node.
     * 
     */
    @Import(name="partition", required=true)
    private Output<String> partition;

    /**
     * @return partition of the node.
     * 
     */
    public Output<String> partition() {
        return this.partition;
    }

    private GetNodeArgs() {}

    private GetNodeArgs(GetNodeArgs $) {
        this.address = $.address;
        this.description = $.description;
        this.fqdn = $.fqdn;
        this.fullPath = $.fullPath;
        this.name = $.name;
        this.partition = $.partition;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNodeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNodeArgs $;

        public Builder() {
            $ = new GetNodeArgs();
        }

        public Builder(GetNodeArgs defaults) {
            $ = new GetNodeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address The address of the node.
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address The address of the node.
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param description User defined description of the node.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description User defined description of the node.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder fqdn(@Nullable Output<GetNodeFqdnArgs> fqdn) {
            $.fqdn = fqdn;
            return this;
        }

        public Builder fqdn(GetNodeFqdnArgs fqdn) {
            return fqdn(Output.of(fqdn));
        }

        /**
         * @param fullPath Full path of the node (partition and name)
         * 
         * @return builder
         * 
         */
        public Builder fullPath(@Nullable Output<String> fullPath) {
            $.fullPath = fullPath;
            return this;
        }

        /**
         * @param fullPath Full path of the node (partition and name)
         * 
         * @return builder
         * 
         */
        public Builder fullPath(String fullPath) {
            return fullPath(Output.of(fullPath));
        }

        /**
         * @param name Name of the node.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the node.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param partition partition of the node.
         * 
         * @return builder
         * 
         */
        public Builder partition(Output<String> partition) {
            $.partition = partition;
            return this;
        }

        /**
         * @param partition partition of the node.
         * 
         * @return builder
         * 
         */
        public Builder partition(String partition) {
            return partition(Output.of(partition));
        }

        public GetNodeArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.partition = Objects.requireNonNull($.partition, "expected parameter 'partition' to be non-null");
            return $;
        }
    }

}
