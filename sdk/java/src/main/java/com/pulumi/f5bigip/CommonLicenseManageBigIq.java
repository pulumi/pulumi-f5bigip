// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.f5bigip.CommonLicenseManageBigIqArgs;
import com.pulumi.f5bigip.Utilities;
import com.pulumi.f5bigip.inputs.CommonLicenseManageBigIqState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * `f5bigip.CommonLicenseManageBigIq` This Resource is used for BIGIP/Provider License Management from BIGIQ
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.f5bigip.CommonLicenseManageBigIq;
 * import com.pulumi.f5bigip.CommonLicenseManageBigIqArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var testExampleCommonLicenseManageBigIq = new CommonLicenseManageBigIq(&#34;testExampleCommonLicenseManageBigIq&#34;, CommonLicenseManageBigIqArgs.builder()        
 *             .bigiqAddress(var_.bigiq())
 *             .bigiqUser(var_.bigiq_un())
 *             .bigiqPassword(var_.bigiq_pw())
 *             .licensePoolname(&#34;regkeypool_name&#34;)
 *             .assignmentType(&#34;MANAGED&#34;)
 *             .build());
 * 
 *         var testExampleIndex_commonLicenseManageBigIqCommonLicenseManageBigIq = new CommonLicenseManageBigIq(&#34;testExampleIndex/commonLicenseManageBigIqCommonLicenseManageBigIq&#34;, CommonLicenseManageBigIqArgs.builder()        
 *             .bigiqAddress(var_.bigiq())
 *             .bigiqUser(var_.bigiq_un())
 *             .bigiqPassword(var_.bigiq_pw())
 *             .licensePoolname(&#34;regkeypool_name&#34;)
 *             .assignmentType(&#34;UNMANAGED&#34;)
 *             .build());
 * 
 *         var testExampleF5bigipIndex_commonLicenseManageBigIqCommonLicenseManageBigIq = new CommonLicenseManageBigIq(&#34;testExampleF5bigipIndex/commonLicenseManageBigIqCommonLicenseManageBigIq&#34;, CommonLicenseManageBigIqArgs.builder()        
 *             .bigiqAddress(var_.bigiq())
 *             .bigiqUser(var_.bigiq_un())
 *             .bigiqPassword(var_.bigiq_pw())
 *             .licensePoolname(&#34;utilitypool_name&#34;)
 *             .assignmentType(&#34;UNMANAGED&#34;)
 *             .unitOfMeasure(&#34;yearly&#34;)
 *             .skukeyword1(&#34;BTHSM200M&#34;)
 *             .build());
 * 
 *         var testExampleF5bigipIndex_commonLicenseManageBigIqCommonLicenseManageBigIq1 = new CommonLicenseManageBigIq(&#34;testExampleF5bigipIndex/commonLicenseManageBigIqCommonLicenseManageBigIq1&#34;, CommonLicenseManageBigIqArgs.builder()        
 *             .bigiqAddress(&#34;xxx.xxx.xxx.xxx&#34;)
 *             .bigiqUser(&#34;xxxx&#34;)
 *             .bigiqPassword(&#34;xxxxx&#34;)
 *             .licensePoolname(&#34;regkey_pool_name&#34;)
 *             .assignmentType(&#34;UNREACHABLE&#34;)
 *             .macAddress(&#34;FA:16:3E:1B:6D:32&#34;)
 *             .hypervisor(&#34;azure&#34;)
 *             .build());
 * 
 *         var testExampleF5bigipIndex_commonLicenseManageBigIqCommonLicenseManageBigIq2 = new CommonLicenseManageBigIq(&#34;testExampleF5bigipIndex/commonLicenseManageBigIqCommonLicenseManageBigIq2&#34;, CommonLicenseManageBigIqArgs.builder()        
 *             .bigiqAddress(var_.bigiq())
 *             .bigiqUser(var_.bigiq_un())
 *             .bigiqPassword(var_.bigiq_pw())
 *             .licensePoolname(&#34;purchased_pool_name&#34;)
 *             .assignmentType(&#34;MANAGED&#34;)
 *             .build());
 * 
 *         var testExampleF5bigipIndex_commonLicenseManageBigIqCommonLicenseManageBigIq3 = new CommonLicenseManageBigIq(&#34;testExampleF5bigipIndex/commonLicenseManageBigIqCommonLicenseManageBigIq3&#34;, CommonLicenseManageBigIqArgs.builder()        
 *             .bigiqAddress(var_.bigiq())
 *             .bigiqUser(var_.bigiq_un())
 *             .bigiqPassword(var_.bigiq_pw())
 *             .licensePoolname(&#34;purchased_pool_name&#34;)
 *             .assignmentType(&#34;UNMANAGED&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="f5bigip:index/commonLicenseManageBigIq:CommonLicenseManageBigIq")
public class CommonLicenseManageBigIq extends com.pulumi.resources.CustomResource {
    /**
     * The type of assignment, which is determined by whether the BIG-IP is unreachable, unmanaged, or managed by BIG-IQ. Possible values: “UNREACHABLE”, “UNMANAGED”, or “MANAGED”.
     * 
     */
    @Export(name="assignmentType", type=String.class, parameters={})
    private Output<String> assignmentType;

    /**
     * @return The type of assignment, which is determined by whether the BIG-IP is unreachable, unmanaged, or managed by BIG-IQ. Possible values: “UNREACHABLE”, “UNMANAGED”, or “MANAGED”.
     * 
     */
    public Output<String> assignmentType() {
        return this.assignmentType;
    }
    /**
     * BIGIQ License Manager IP Address, variable type `string`
     * 
     */
    @Export(name="bigiqAddress", type=String.class, parameters={})
    private Output<String> bigiqAddress;

    /**
     * @return BIGIQ License Manager IP Address, variable type `string`
     * 
     */
    public Output<String> bigiqAddress() {
        return this.bigiqAddress;
    }
    /**
     * BIGIQ Login reference for token authentication
     * 
     */
    @Export(name="bigiqLoginRef", type=String.class, parameters={})
    private Output</* @Nullable */ String> bigiqLoginRef;

    /**
     * @return BIGIQ Login reference for token authentication
     * 
     */
    public Output<Optional<String>> bigiqLoginRef() {
        return Codegen.optional(this.bigiqLoginRef);
    }
    /**
     * BIGIQ License Manager password.  variable type `string`
     * 
     */
    @Export(name="bigiqPassword", type=String.class, parameters={})
    private Output<String> bigiqPassword;

    /**
     * @return BIGIQ License Manager password.  variable type `string`
     * 
     */
    public Output<String> bigiqPassword() {
        return this.bigiqPassword;
    }
    /**
     * type `int`, BIGIQ License Manager Port number, specify if port is other than `443`
     * 
     */
    @Export(name="bigiqPort", type=String.class, parameters={})
    private Output</* @Nullable */ String> bigiqPort;

    /**
     * @return type `int`, BIGIQ License Manager Port number, specify if port is other than `443`
     * 
     */
    public Output<Optional<String>> bigiqPort() {
        return Codegen.optional(this.bigiqPort);
    }
    /**
     * type `bool`, if set to `true` enables Token based Authentication,default is `false`
     * 
     */
    @Export(name="bigiqTokenAuth", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> bigiqTokenAuth;

    /**
     * @return type `bool`, if set to `true` enables Token based Authentication,default is `false`
     * 
     */
    public Output<Optional<Boolean>> bigiqTokenAuth() {
        return Codegen.optional(this.bigiqTokenAuth);
    }
    /**
     * BIGIQ License Manager username, variable type `string`
     * 
     */
    @Export(name="bigiqUser", type=String.class, parameters={})
    private Output<String> bigiqUser;

    /**
     * @return BIGIQ License Manager username, variable type `string`
     * 
     */
    public Output<String> bigiqUser() {
        return this.bigiqUser;
    }
    /**
     * Status of Licence Assignment
     * 
     */
    @Export(name="deviceLicenseStatus", type=String.class, parameters={})
    private Output<String> deviceLicenseStatus;

    /**
     * @return Status of Licence Assignment
     * 
     */
    public Output<String> deviceLicenseStatus() {
        return this.deviceLicenseStatus;
    }
    /**
     * Identifies the platform running the BIG-IP VE. Possible values: “aws”, “azure”, “gce”, “vmware”, “hyperv”, “kvm”, or “xen”. type `string`
     * 
     */
    @Export(name="hypervisor", type=String.class, parameters={})
    private Output</* @Nullable */ String> hypervisor;

    /**
     * @return Identifies the platform running the BIG-IP VE. Possible values: “aws”, “azure”, “gce”, “vmware”, “hyperv”, “kvm”, or “xen”. type `string`
     * 
     */
    public Output<Optional<String>> hypervisor() {
        return Codegen.optional(this.hypervisor);
    }
    /**
     * License Assignment is done with specified `key`, supported only with RegKeypool type License assignement. type `string`
     * 
     */
    @Export(name="key", type=String.class, parameters={})
    private Output</* @Nullable */ String> key;

    /**
     * @return License Assignment is done with specified `key`, supported only with RegKeypool type License assignement. type `string`
     * 
     */
    public Output<Optional<String>> key() {
        return Codegen.optional(this.key);
    }
    /**
     * A name given to the license pool. type `string`
     * 
     */
    @Export(name="licensePoolname", type=String.class, parameters={})
    private Output<String> licensePoolname;

    /**
     * @return A name given to the license pool. type `string`
     * 
     */
    public Output<String> licensePoolname() {
        return this.licensePoolname;
    }
    /**
     * MAC address of the BIG-IP. type `string`
     * 
     */
    @Export(name="macAddress", type=String.class, parameters={})
    private Output</* @Nullable */ String> macAddress;

    /**
     * @return MAC address of the BIG-IP. type `string`
     * 
     */
    public Output<Optional<String>> macAddress() {
        return Codegen.optional(this.macAddress);
    }
    /**
     * An optional offering name. type `string`
     * 
     */
    @Export(name="skukeyword1", type=String.class, parameters={})
    private Output</* @Nullable */ String> skukeyword1;

    /**
     * @return An optional offering name. type `string`
     * 
     */
    public Output<Optional<String>> skukeyword1() {
        return Codegen.optional(this.skukeyword1);
    }
    /**
     * An optional offering name. type `string`
     * 
     */
    @Export(name="skukeyword2", type=String.class, parameters={})
    private Output</* @Nullable */ String> skukeyword2;

    /**
     * @return An optional offering name. type `string`
     * 
     */
    public Output<Optional<String>> skukeyword2() {
        return Codegen.optional(this.skukeyword2);
    }
    /**
     * For an unreachable BIG-IP, you can provide an optional description for the assignment in this field.
     * 
     */
    @Export(name="tenant", type=String.class, parameters={})
    private Output</* @Nullable */ String> tenant;

    /**
     * @return For an unreachable BIG-IP, you can provide an optional description for the assignment in this field.
     * 
     */
    public Output<Optional<String>> tenant() {
        return Codegen.optional(this.tenant);
    }
    /**
     * The units used to measure billing. For example, “hourly” or “daily”. Type `string`
     * 
     */
    @Export(name="unitOfMeasure", type=String.class, parameters={})
    private Output</* @Nullable */ String> unitOfMeasure;

    /**
     * @return The units used to measure billing. For example, “hourly” or “daily”. Type `string`
     * 
     */
    public Output<Optional<String>> unitOfMeasure() {
        return Codegen.optional(this.unitOfMeasure);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CommonLicenseManageBigIq(String name) {
        this(name, CommonLicenseManageBigIqArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CommonLicenseManageBigIq(String name, CommonLicenseManageBigIqArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CommonLicenseManageBigIq(String name, CommonLicenseManageBigIqArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("f5bigip:index/commonLicenseManageBigIq:CommonLicenseManageBigIq", name, args == null ? CommonLicenseManageBigIqArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private CommonLicenseManageBigIq(String name, Output<String> id, @Nullable CommonLicenseManageBigIqState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("f5bigip:index/commonLicenseManageBigIq:CommonLicenseManageBigIq", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CommonLicenseManageBigIq get(String name, Output<String> id, @Nullable CommonLicenseManageBigIqState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CommonLicenseManageBigIq(name, id, state, options);
    }
}
