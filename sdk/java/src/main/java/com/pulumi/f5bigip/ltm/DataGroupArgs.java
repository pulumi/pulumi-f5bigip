// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.f5bigip.ltm.inputs.DataGroupRecordArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataGroupArgs Empty = new DataGroupArgs();

    /**
     * Set `false` if you want to Create External Datagroups. default is `true`,means creates internal datagroup.
     * 
     */
    @Import(name="internal")
    private @Nullable Output<Boolean> internal;

    /**
     * @return Set `false` if you want to Create External Datagroups. default is `true`,means creates internal datagroup.
     * 
     */
    public Optional<Output<Boolean>> internal() {
        return Optional.ofNullable(this.internal);
    }

    /**
     * , sets the value of the record&#39;s `name` attribute, must be of type defined in `type` attribute
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return , sets the value of the record&#39;s `name` attribute, must be of type defined in `type` attribute
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * a set of `name` and `data` attributes, name must be of type specified by the `type` attributed (`string`, `ip` and `integer`), data is optional and can take any value, multiple `record` sets can be specified as needed.
     * 
     */
    @Import(name="records")
    private @Nullable Output<List<DataGroupRecordArgs>> records;

    /**
     * @return a set of `name` and `data` attributes, name must be of type specified by the `type` attributed (`string`, `ip` and `integer`), data is optional and can take any value, multiple `record` sets can be specified as needed.
     * 
     */
    public Optional<Output<List<DataGroupRecordArgs>>> records() {
        return Optional.ofNullable(this.records);
    }

    /**
     * Path to a file with records in it,The file should be well-formed,it includes records, one per line,that resemble the following format &#34;key separator value&#34;. For example, `foo := bar`.
     * This should be used in conjunction with `internal` attribute set `false`
     * 
     */
    @Import(name="recordsSrc")
    private @Nullable Output<String> recordsSrc;

    /**
     * @return Path to a file with records in it,The file should be well-formed,it includes records, one per line,that resemble the following format &#34;key separator value&#34;. For example, `foo := bar`.
     * This should be used in conjunction with `internal` attribute set `false`
     * 
     */
    public Optional<Output<String>> recordsSrc() {
        return Optional.ofNullable(this.recordsSrc);
    }

    /**
     * datagroup type (applies to the `name` field of the record), supports: `string`, `ip` or `integer`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return datagroup type (applies to the `name` field of the record), supports: `string`, `ip` or `integer`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private DataGroupArgs() {}

    private DataGroupArgs(DataGroupArgs $) {
        this.internal = $.internal;
        this.name = $.name;
        this.records = $.records;
        this.recordsSrc = $.recordsSrc;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataGroupArgs $;

        public Builder() {
            $ = new DataGroupArgs();
        }

        public Builder(DataGroupArgs defaults) {
            $ = new DataGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param internal Set `false` if you want to Create External Datagroups. default is `true`,means creates internal datagroup.
         * 
         * @return builder
         * 
         */
        public Builder internal(@Nullable Output<Boolean> internal) {
            $.internal = internal;
            return this;
        }

        /**
         * @param internal Set `false` if you want to Create External Datagroups. default is `true`,means creates internal datagroup.
         * 
         * @return builder
         * 
         */
        public Builder internal(Boolean internal) {
            return internal(Output.of(internal));
        }

        /**
         * @param name , sets the value of the record&#39;s `name` attribute, must be of type defined in `type` attribute
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name , sets the value of the record&#39;s `name` attribute, must be of type defined in `type` attribute
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param records a set of `name` and `data` attributes, name must be of type specified by the `type` attributed (`string`, `ip` and `integer`), data is optional and can take any value, multiple `record` sets can be specified as needed.
         * 
         * @return builder
         * 
         */
        public Builder records(@Nullable Output<List<DataGroupRecordArgs>> records) {
            $.records = records;
            return this;
        }

        /**
         * @param records a set of `name` and `data` attributes, name must be of type specified by the `type` attributed (`string`, `ip` and `integer`), data is optional and can take any value, multiple `record` sets can be specified as needed.
         * 
         * @return builder
         * 
         */
        public Builder records(List<DataGroupRecordArgs> records) {
            return records(Output.of(records));
        }

        /**
         * @param records a set of `name` and `data` attributes, name must be of type specified by the `type` attributed (`string`, `ip` and `integer`), data is optional and can take any value, multiple `record` sets can be specified as needed.
         * 
         * @return builder
         * 
         */
        public Builder records(DataGroupRecordArgs... records) {
            return records(List.of(records));
        }

        /**
         * @param recordsSrc Path to a file with records in it,The file should be well-formed,it includes records, one per line,that resemble the following format &#34;key separator value&#34;. For example, `foo := bar`.
         * This should be used in conjunction with `internal` attribute set `false`
         * 
         * @return builder
         * 
         */
        public Builder recordsSrc(@Nullable Output<String> recordsSrc) {
            $.recordsSrc = recordsSrc;
            return this;
        }

        /**
         * @param recordsSrc Path to a file with records in it,The file should be well-formed,it includes records, one per line,that resemble the following format &#34;key separator value&#34;. For example, `foo := bar`.
         * This should be used in conjunction with `internal` attribute set `false`
         * 
         * @return builder
         * 
         */
        public Builder recordsSrc(String recordsSrc) {
            return recordsSrc(Output.of(recordsSrc));
        }

        /**
         * @param type datagroup type (applies to the `name` field of the record), supports: `string`, `ip` or `integer`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type datagroup type (applies to the `name` field of the record), supports: `string`, `ip` or `integer`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DataGroupArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("DataGroupArgs", "name");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("DataGroupArgs", "type");
            }
            return $;
        }
    }

}
