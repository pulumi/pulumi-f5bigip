// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPolicyRuleActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetPolicyRuleActionArgs Empty = new GetPolicyRuleActionArgs();

    @Import(name="appService", required=true)
    private Output<String> appService;

    public Output<String> appService() {
        return this.appService;
    }

    @Import(name="application", required=true)
    private Output<String> application;

    public Output<String> application() {
        return this.application;
    }

    @Import(name="asm", required=true)
    private Output<Boolean> asm;

    public Output<Boolean> asm() {
        return this.asm;
    }

    @Import(name="avr", required=true)
    private Output<Boolean> avr;

    public Output<Boolean> avr() {
        return this.avr;
    }

    @Import(name="cache", required=true)
    private Output<Boolean> cache;

    public Output<Boolean> cache() {
        return this.cache;
    }

    @Import(name="carp", required=true)
    private Output<Boolean> carp;

    public Output<Boolean> carp() {
        return this.carp;
    }

    @Import(name="category", required=true)
    private Output<String> category;

    public Output<String> category() {
        return this.category;
    }

    @Import(name="classify", required=true)
    private Output<Boolean> classify;

    public Output<Boolean> classify() {
        return this.classify;
    }

    @Import(name="clonePool", required=true)
    private Output<String> clonePool;

    public Output<String> clonePool() {
        return this.clonePool;
    }

    @Import(name="code", required=true)
    private Output<Integer> code;

    public Output<Integer> code() {
        return this.code;
    }

    @Import(name="compress", required=true)
    private Output<Boolean> compress;

    public Output<Boolean> compress() {
        return this.compress;
    }

    @Import(name="connection", required=true)
    private Output<Boolean> connection;

    public Output<Boolean> connection() {
        return this.connection;
    }

    @Import(name="content", required=true)
    private Output<String> content;

    public Output<String> content() {
        return this.content;
    }

    @Import(name="cookieHash", required=true)
    private Output<Boolean> cookieHash;

    public Output<Boolean> cookieHash() {
        return this.cookieHash;
    }

    @Import(name="cookieInsert", required=true)
    private Output<Boolean> cookieInsert;

    public Output<Boolean> cookieInsert() {
        return this.cookieInsert;
    }

    @Import(name="cookiePassive", required=true)
    private Output<Boolean> cookiePassive;

    public Output<Boolean> cookiePassive() {
        return this.cookiePassive;
    }

    @Import(name="cookieRewrite", required=true)
    private Output<Boolean> cookieRewrite;

    public Output<Boolean> cookieRewrite() {
        return this.cookieRewrite;
    }

    @Import(name="decompress", required=true)
    private Output<Boolean> decompress;

    public Output<Boolean> decompress() {
        return this.decompress;
    }

    @Import(name="defer", required=true)
    private Output<Boolean> defer;

    public Output<Boolean> defer() {
        return this.defer;
    }

    @Import(name="destinationAddress", required=true)
    private Output<Boolean> destinationAddress;

    public Output<Boolean> destinationAddress() {
        return this.destinationAddress;
    }

    @Import(name="disable", required=true)
    private Output<Boolean> disable;

    public Output<Boolean> disable() {
        return this.disable;
    }

    @Import(name="domain", required=true)
    private Output<String> domain;

    public Output<String> domain() {
        return this.domain;
    }

    @Import(name="enable", required=true)
    private Output<Boolean> enable;

    public Output<Boolean> enable() {
        return this.enable;
    }

    @Import(name="expiry", required=true)
    private Output<String> expiry;

    public Output<String> expiry() {
        return this.expiry;
    }

    @Import(name="expirySecs", required=true)
    private Output<Integer> expirySecs;

    public Output<Integer> expirySecs() {
        return this.expirySecs;
    }

    @Import(name="expression", required=true)
    private Output<String> expression;

    public Output<String> expression() {
        return this.expression;
    }

    @Import(name="extension", required=true)
    private Output<String> extension;

    public Output<String> extension() {
        return this.extension;
    }

    @Import(name="facility", required=true)
    private Output<String> facility;

    public Output<String> facility() {
        return this.facility;
    }

    @Import(name="forward")
    private @Nullable Output<Boolean> forward;

    public Optional<Output<Boolean>> forward() {
        return Optional.ofNullable(this.forward);
    }

    @Import(name="fromProfile", required=true)
    private Output<String> fromProfile;

    public Output<String> fromProfile() {
        return this.fromProfile;
    }

    @Import(name="hash", required=true)
    private Output<Boolean> hash;

    public Output<Boolean> hash() {
        return this.hash;
    }

    @Import(name="host", required=true)
    private Output<String> host;

    public Output<String> host() {
        return this.host;
    }

    @Import(name="http", required=true)
    private Output<Boolean> http;

    public Output<Boolean> http() {
        return this.http;
    }

    @Import(name="httpBasicAuth", required=true)
    private Output<Boolean> httpBasicAuth;

    public Output<Boolean> httpBasicAuth() {
        return this.httpBasicAuth;
    }

    @Import(name="httpCookie", required=true)
    private Output<Boolean> httpCookie;

    public Output<Boolean> httpCookie() {
        return this.httpCookie;
    }

    @Import(name="httpHeader", required=true)
    private Output<Boolean> httpHeader;

    public Output<Boolean> httpHeader() {
        return this.httpHeader;
    }

    @Import(name="httpHost")
    private @Nullable Output<Boolean> httpHost;

    public Optional<Output<Boolean>> httpHost() {
        return Optional.ofNullable(this.httpHost);
    }

    @Import(name="httpReferer", required=true)
    private Output<Boolean> httpReferer;

    public Output<Boolean> httpReferer() {
        return this.httpReferer;
    }

    @Import(name="httpReply", required=true)
    private Output<Boolean> httpReply;

    public Output<Boolean> httpReply() {
        return this.httpReply;
    }

    @Import(name="httpSetCookie", required=true)
    private Output<Boolean> httpSetCookie;

    public Output<Boolean> httpSetCookie() {
        return this.httpSetCookie;
    }

    @Import(name="httpUri", required=true)
    private Output<Boolean> httpUri;

    public Output<Boolean> httpUri() {
        return this.httpUri;
    }

    @Import(name="ifile", required=true)
    private Output<String> ifile;

    public Output<String> ifile() {
        return this.ifile;
    }

    @Import(name="insert", required=true)
    private Output<Boolean> insert;

    public Output<Boolean> insert() {
        return this.insert;
    }

    @Import(name="internalVirtual", required=true)
    private Output<String> internalVirtual;

    public Output<String> internalVirtual() {
        return this.internalVirtual;
    }

    @Import(name="ipAddress", required=true)
    private Output<String> ipAddress;

    public Output<String> ipAddress() {
        return this.ipAddress;
    }

    @Import(name="key", required=true)
    private Output<String> key;

    public Output<String> key() {
        return this.key;
    }

    @Import(name="l7dos", required=true)
    private Output<Boolean> l7dos;

    public Output<Boolean> l7dos() {
        return this.l7dos;
    }

    @Import(name="length", required=true)
    private Output<Integer> length;

    public Output<Integer> length() {
        return this.length;
    }

    @Import(name="location", required=true)
    private Output<String> location;

    public Output<String> location() {
        return this.location;
    }

    @Import(name="log", required=true)
    private Output<Boolean> log;

    public Output<Boolean> log() {
        return this.log;
    }

    @Import(name="ltmPolicy", required=true)
    private Output<Boolean> ltmPolicy;

    public Output<Boolean> ltmPolicy() {
        return this.ltmPolicy;
    }

    @Import(name="member", required=true)
    private Output<String> member;

    public Output<String> member() {
        return this.member;
    }

    @Import(name="message", required=true)
    private Output<String> message;

    public Output<String> message() {
        return this.message;
    }

    @Import(name="netmask", required=true)
    private Output<String> netmask;

    public Output<String> netmask() {
        return this.netmask;
    }

    @Import(name="nexthop", required=true)
    private Output<String> nexthop;

    public Output<String> nexthop() {
        return this.nexthop;
    }

    @Import(name="node", required=true)
    private Output<String> node;

    public Output<String> node() {
        return this.node;
    }

    @Import(name="offset", required=true)
    private Output<Integer> offset;

    public Output<Integer> offset() {
        return this.offset;
    }

    @Import(name="path", required=true)
    private Output<String> path;

    public Output<String> path() {
        return this.path;
    }

    @Import(name="pem", required=true)
    private Output<Boolean> pem;

    public Output<Boolean> pem() {
        return this.pem;
    }

    @Import(name="persist", required=true)
    private Output<Boolean> persist;

    public Output<Boolean> persist() {
        return this.persist;
    }

    @Import(name="pin", required=true)
    private Output<Boolean> pin;

    public Output<Boolean> pin() {
        return this.pin;
    }

    @Import(name="policy", required=true)
    private Output<String> policy;

    public Output<String> policy() {
        return this.policy;
    }

    @Import(name="pool", required=true)
    private Output<String> pool;

    public Output<String> pool() {
        return this.pool;
    }

    @Import(name="port", required=true)
    private Output<Integer> port;

    public Output<Integer> port() {
        return this.port;
    }

    @Import(name="priority", required=true)
    private Output<String> priority;

    public Output<String> priority() {
        return this.priority;
    }

    @Import(name="profile", required=true)
    private Output<String> profile;

    public Output<String> profile() {
        return this.profile;
    }

    @Import(name="protocol", required=true)
    private Output<String> protocol;

    public Output<String> protocol() {
        return this.protocol;
    }

    @Import(name="queryString", required=true)
    private Output<String> queryString;

    public Output<String> queryString() {
        return this.queryString;
    }

    @Import(name="rateclass", required=true)
    private Output<String> rateclass;

    public Output<String> rateclass() {
        return this.rateclass;
    }

    @Import(name="redirect", required=true)
    private Output<Boolean> redirect;

    public Output<Boolean> redirect() {
        return this.redirect;
    }

    @Import(name="remove", required=true)
    private Output<Boolean> remove;

    public Output<Boolean> remove() {
        return this.remove;
    }

    @Import(name="replace", required=true)
    private Output<Boolean> replace;

    public Output<Boolean> replace() {
        return this.replace;
    }

    @Import(name="request", required=true)
    private Output<Boolean> request;

    public Output<Boolean> request() {
        return this.request;
    }

    @Import(name="requestAdapt", required=true)
    private Output<Boolean> requestAdapt;

    public Output<Boolean> requestAdapt() {
        return this.requestAdapt;
    }

    @Import(name="reset", required=true)
    private Output<Boolean> reset;

    public Output<Boolean> reset() {
        return this.reset;
    }

    @Import(name="response", required=true)
    private Output<Boolean> response;

    public Output<Boolean> response() {
        return this.response;
    }

    @Import(name="responseAdapt", required=true)
    private Output<Boolean> responseAdapt;

    public Output<Boolean> responseAdapt() {
        return this.responseAdapt;
    }

    @Import(name="scheme", required=true)
    private Output<String> scheme;

    public Output<String> scheme() {
        return this.scheme;
    }

    @Import(name="script", required=true)
    private Output<String> script;

    public Output<String> script() {
        return this.script;
    }

    @Import(name="select", required=true)
    private Output<Boolean> select;

    public Output<Boolean> select() {
        return this.select;
    }

    @Import(name="serverSsl", required=true)
    private Output<Boolean> serverSsl;

    public Output<Boolean> serverSsl() {
        return this.serverSsl;
    }

    @Import(name="setVariable", required=true)
    private Output<Boolean> setVariable;

    public Output<Boolean> setVariable() {
        return this.setVariable;
    }

    @Import(name="shutdown", required=true)
    private Output<Boolean> shutdown;

    public Output<Boolean> shutdown() {
        return this.shutdown;
    }

    @Import(name="snat", required=true)
    private Output<String> snat;

    public Output<String> snat() {
        return this.snat;
    }

    @Import(name="snatpool", required=true)
    private Output<String> snatpool;

    public Output<String> snatpool() {
        return this.snatpool;
    }

    @Import(name="sourceAddress", required=true)
    private Output<Boolean> sourceAddress;

    public Output<Boolean> sourceAddress() {
        return this.sourceAddress;
    }

    @Import(name="sslClientHello", required=true)
    private Output<Boolean> sslClientHello;

    public Output<Boolean> sslClientHello() {
        return this.sslClientHello;
    }

    @Import(name="sslServerHandshake", required=true)
    private Output<Boolean> sslServerHandshake;

    public Output<Boolean> sslServerHandshake() {
        return this.sslServerHandshake;
    }

    @Import(name="sslServerHello", required=true)
    private Output<Boolean> sslServerHello;

    public Output<Boolean> sslServerHello() {
        return this.sslServerHello;
    }

    @Import(name="sslSessionId", required=true)
    private Output<Boolean> sslSessionId;

    public Output<Boolean> sslSessionId() {
        return this.sslSessionId;
    }

    @Import(name="status", required=true)
    private Output<Integer> status;

    public Output<Integer> status() {
        return this.status;
    }

    @Import(name="tcl", required=true)
    private Output<Boolean> tcl;

    public Output<Boolean> tcl() {
        return this.tcl;
    }

    @Import(name="tcpNagle", required=true)
    private Output<Boolean> tcpNagle;

    public Output<Boolean> tcpNagle() {
        return this.tcpNagle;
    }

    @Import(name="text", required=true)
    private Output<String> text;

    public Output<String> text() {
        return this.text;
    }

    @Import(name="timeout", required=true)
    private Output<Integer> timeout;

    public Output<Integer> timeout() {
        return this.timeout;
    }

    @Import(name="tmName", required=true)
    private Output<String> tmName;

    public Output<String> tmName() {
        return this.tmName;
    }

    @Import(name="uie", required=true)
    private Output<Boolean> uie;

    public Output<Boolean> uie() {
        return this.uie;
    }

    @Import(name="universal", required=true)
    private Output<Boolean> universal;

    public Output<Boolean> universal() {
        return this.universal;
    }

    @Import(name="value", required=true)
    private Output<String> value;

    public Output<String> value() {
        return this.value;
    }

    @Import(name="virtual", required=true)
    private Output<String> virtual;

    public Output<String> virtual() {
        return this.virtual;
    }

    @Import(name="vlan", required=true)
    private Output<String> vlan;

    public Output<String> vlan() {
        return this.vlan;
    }

    @Import(name="vlanId", required=true)
    private Output<Integer> vlanId;

    public Output<Integer> vlanId() {
        return this.vlanId;
    }

    @Import(name="wam", required=true)
    private Output<Boolean> wam;

    public Output<Boolean> wam() {
        return this.wam;
    }

    @Import(name="write", required=true)
    private Output<Boolean> write;

    public Output<Boolean> write() {
        return this.write;
    }

    private GetPolicyRuleActionArgs() {}

    private GetPolicyRuleActionArgs(GetPolicyRuleActionArgs $) {
        this.appService = $.appService;
        this.application = $.application;
        this.asm = $.asm;
        this.avr = $.avr;
        this.cache = $.cache;
        this.carp = $.carp;
        this.category = $.category;
        this.classify = $.classify;
        this.clonePool = $.clonePool;
        this.code = $.code;
        this.compress = $.compress;
        this.connection = $.connection;
        this.content = $.content;
        this.cookieHash = $.cookieHash;
        this.cookieInsert = $.cookieInsert;
        this.cookiePassive = $.cookiePassive;
        this.cookieRewrite = $.cookieRewrite;
        this.decompress = $.decompress;
        this.defer = $.defer;
        this.destinationAddress = $.destinationAddress;
        this.disable = $.disable;
        this.domain = $.domain;
        this.enable = $.enable;
        this.expiry = $.expiry;
        this.expirySecs = $.expirySecs;
        this.expression = $.expression;
        this.extension = $.extension;
        this.facility = $.facility;
        this.forward = $.forward;
        this.fromProfile = $.fromProfile;
        this.hash = $.hash;
        this.host = $.host;
        this.http = $.http;
        this.httpBasicAuth = $.httpBasicAuth;
        this.httpCookie = $.httpCookie;
        this.httpHeader = $.httpHeader;
        this.httpHost = $.httpHost;
        this.httpReferer = $.httpReferer;
        this.httpReply = $.httpReply;
        this.httpSetCookie = $.httpSetCookie;
        this.httpUri = $.httpUri;
        this.ifile = $.ifile;
        this.insert = $.insert;
        this.internalVirtual = $.internalVirtual;
        this.ipAddress = $.ipAddress;
        this.key = $.key;
        this.l7dos = $.l7dos;
        this.length = $.length;
        this.location = $.location;
        this.log = $.log;
        this.ltmPolicy = $.ltmPolicy;
        this.member = $.member;
        this.message = $.message;
        this.netmask = $.netmask;
        this.nexthop = $.nexthop;
        this.node = $.node;
        this.offset = $.offset;
        this.path = $.path;
        this.pem = $.pem;
        this.persist = $.persist;
        this.pin = $.pin;
        this.policy = $.policy;
        this.pool = $.pool;
        this.port = $.port;
        this.priority = $.priority;
        this.profile = $.profile;
        this.protocol = $.protocol;
        this.queryString = $.queryString;
        this.rateclass = $.rateclass;
        this.redirect = $.redirect;
        this.remove = $.remove;
        this.replace = $.replace;
        this.request = $.request;
        this.requestAdapt = $.requestAdapt;
        this.reset = $.reset;
        this.response = $.response;
        this.responseAdapt = $.responseAdapt;
        this.scheme = $.scheme;
        this.script = $.script;
        this.select = $.select;
        this.serverSsl = $.serverSsl;
        this.setVariable = $.setVariable;
        this.shutdown = $.shutdown;
        this.snat = $.snat;
        this.snatpool = $.snatpool;
        this.sourceAddress = $.sourceAddress;
        this.sslClientHello = $.sslClientHello;
        this.sslServerHandshake = $.sslServerHandshake;
        this.sslServerHello = $.sslServerHello;
        this.sslSessionId = $.sslSessionId;
        this.status = $.status;
        this.tcl = $.tcl;
        this.tcpNagle = $.tcpNagle;
        this.text = $.text;
        this.timeout = $.timeout;
        this.tmName = $.tmName;
        this.uie = $.uie;
        this.universal = $.universal;
        this.value = $.value;
        this.virtual = $.virtual;
        this.vlan = $.vlan;
        this.vlanId = $.vlanId;
        this.wam = $.wam;
        this.write = $.write;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPolicyRuleActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPolicyRuleActionArgs $;

        public Builder() {
            $ = new GetPolicyRuleActionArgs();
        }

        public Builder(GetPolicyRuleActionArgs defaults) {
            $ = new GetPolicyRuleActionArgs(Objects.requireNonNull(defaults));
        }

        public Builder appService(Output<String> appService) {
            $.appService = appService;
            return this;
        }

        public Builder appService(String appService) {
            return appService(Output.of(appService));
        }

        public Builder application(Output<String> application) {
            $.application = application;
            return this;
        }

        public Builder application(String application) {
            return application(Output.of(application));
        }

        public Builder asm(Output<Boolean> asm) {
            $.asm = asm;
            return this;
        }

        public Builder asm(Boolean asm) {
            return asm(Output.of(asm));
        }

        public Builder avr(Output<Boolean> avr) {
            $.avr = avr;
            return this;
        }

        public Builder avr(Boolean avr) {
            return avr(Output.of(avr));
        }

        public Builder cache(Output<Boolean> cache) {
            $.cache = cache;
            return this;
        }

        public Builder cache(Boolean cache) {
            return cache(Output.of(cache));
        }

        public Builder carp(Output<Boolean> carp) {
            $.carp = carp;
            return this;
        }

        public Builder carp(Boolean carp) {
            return carp(Output.of(carp));
        }

        public Builder category(Output<String> category) {
            $.category = category;
            return this;
        }

        public Builder category(String category) {
            return category(Output.of(category));
        }

        public Builder classify(Output<Boolean> classify) {
            $.classify = classify;
            return this;
        }

        public Builder classify(Boolean classify) {
            return classify(Output.of(classify));
        }

        public Builder clonePool(Output<String> clonePool) {
            $.clonePool = clonePool;
            return this;
        }

        public Builder clonePool(String clonePool) {
            return clonePool(Output.of(clonePool));
        }

        public Builder code(Output<Integer> code) {
            $.code = code;
            return this;
        }

        public Builder code(Integer code) {
            return code(Output.of(code));
        }

        public Builder compress(Output<Boolean> compress) {
            $.compress = compress;
            return this;
        }

        public Builder compress(Boolean compress) {
            return compress(Output.of(compress));
        }

        public Builder connection(Output<Boolean> connection) {
            $.connection = connection;
            return this;
        }

        public Builder connection(Boolean connection) {
            return connection(Output.of(connection));
        }

        public Builder content(Output<String> content) {
            $.content = content;
            return this;
        }

        public Builder content(String content) {
            return content(Output.of(content));
        }

        public Builder cookieHash(Output<Boolean> cookieHash) {
            $.cookieHash = cookieHash;
            return this;
        }

        public Builder cookieHash(Boolean cookieHash) {
            return cookieHash(Output.of(cookieHash));
        }

        public Builder cookieInsert(Output<Boolean> cookieInsert) {
            $.cookieInsert = cookieInsert;
            return this;
        }

        public Builder cookieInsert(Boolean cookieInsert) {
            return cookieInsert(Output.of(cookieInsert));
        }

        public Builder cookiePassive(Output<Boolean> cookiePassive) {
            $.cookiePassive = cookiePassive;
            return this;
        }

        public Builder cookiePassive(Boolean cookiePassive) {
            return cookiePassive(Output.of(cookiePassive));
        }

        public Builder cookieRewrite(Output<Boolean> cookieRewrite) {
            $.cookieRewrite = cookieRewrite;
            return this;
        }

        public Builder cookieRewrite(Boolean cookieRewrite) {
            return cookieRewrite(Output.of(cookieRewrite));
        }

        public Builder decompress(Output<Boolean> decompress) {
            $.decompress = decompress;
            return this;
        }

        public Builder decompress(Boolean decompress) {
            return decompress(Output.of(decompress));
        }

        public Builder defer(Output<Boolean> defer) {
            $.defer = defer;
            return this;
        }

        public Builder defer(Boolean defer) {
            return defer(Output.of(defer));
        }

        public Builder destinationAddress(Output<Boolean> destinationAddress) {
            $.destinationAddress = destinationAddress;
            return this;
        }

        public Builder destinationAddress(Boolean destinationAddress) {
            return destinationAddress(Output.of(destinationAddress));
        }

        public Builder disable(Output<Boolean> disable) {
            $.disable = disable;
            return this;
        }

        public Builder disable(Boolean disable) {
            return disable(Output.of(disable));
        }

        public Builder domain(Output<String> domain) {
            $.domain = domain;
            return this;
        }

        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        public Builder enable(Output<Boolean> enable) {
            $.enable = enable;
            return this;
        }

        public Builder enable(Boolean enable) {
            return enable(Output.of(enable));
        }

        public Builder expiry(Output<String> expiry) {
            $.expiry = expiry;
            return this;
        }

        public Builder expiry(String expiry) {
            return expiry(Output.of(expiry));
        }

        public Builder expirySecs(Output<Integer> expirySecs) {
            $.expirySecs = expirySecs;
            return this;
        }

        public Builder expirySecs(Integer expirySecs) {
            return expirySecs(Output.of(expirySecs));
        }

        public Builder expression(Output<String> expression) {
            $.expression = expression;
            return this;
        }

        public Builder expression(String expression) {
            return expression(Output.of(expression));
        }

        public Builder extension(Output<String> extension) {
            $.extension = extension;
            return this;
        }

        public Builder extension(String extension) {
            return extension(Output.of(extension));
        }

        public Builder facility(Output<String> facility) {
            $.facility = facility;
            return this;
        }

        public Builder facility(String facility) {
            return facility(Output.of(facility));
        }

        public Builder forward(@Nullable Output<Boolean> forward) {
            $.forward = forward;
            return this;
        }

        public Builder forward(Boolean forward) {
            return forward(Output.of(forward));
        }

        public Builder fromProfile(Output<String> fromProfile) {
            $.fromProfile = fromProfile;
            return this;
        }

        public Builder fromProfile(String fromProfile) {
            return fromProfile(Output.of(fromProfile));
        }

        public Builder hash(Output<Boolean> hash) {
            $.hash = hash;
            return this;
        }

        public Builder hash(Boolean hash) {
            return hash(Output.of(hash));
        }

        public Builder host(Output<String> host) {
            $.host = host;
            return this;
        }

        public Builder host(String host) {
            return host(Output.of(host));
        }

        public Builder http(Output<Boolean> http) {
            $.http = http;
            return this;
        }

        public Builder http(Boolean http) {
            return http(Output.of(http));
        }

        public Builder httpBasicAuth(Output<Boolean> httpBasicAuth) {
            $.httpBasicAuth = httpBasicAuth;
            return this;
        }

        public Builder httpBasicAuth(Boolean httpBasicAuth) {
            return httpBasicAuth(Output.of(httpBasicAuth));
        }

        public Builder httpCookie(Output<Boolean> httpCookie) {
            $.httpCookie = httpCookie;
            return this;
        }

        public Builder httpCookie(Boolean httpCookie) {
            return httpCookie(Output.of(httpCookie));
        }

        public Builder httpHeader(Output<Boolean> httpHeader) {
            $.httpHeader = httpHeader;
            return this;
        }

        public Builder httpHeader(Boolean httpHeader) {
            return httpHeader(Output.of(httpHeader));
        }

        public Builder httpHost(@Nullable Output<Boolean> httpHost) {
            $.httpHost = httpHost;
            return this;
        }

        public Builder httpHost(Boolean httpHost) {
            return httpHost(Output.of(httpHost));
        }

        public Builder httpReferer(Output<Boolean> httpReferer) {
            $.httpReferer = httpReferer;
            return this;
        }

        public Builder httpReferer(Boolean httpReferer) {
            return httpReferer(Output.of(httpReferer));
        }

        public Builder httpReply(Output<Boolean> httpReply) {
            $.httpReply = httpReply;
            return this;
        }

        public Builder httpReply(Boolean httpReply) {
            return httpReply(Output.of(httpReply));
        }

        public Builder httpSetCookie(Output<Boolean> httpSetCookie) {
            $.httpSetCookie = httpSetCookie;
            return this;
        }

        public Builder httpSetCookie(Boolean httpSetCookie) {
            return httpSetCookie(Output.of(httpSetCookie));
        }

        public Builder httpUri(Output<Boolean> httpUri) {
            $.httpUri = httpUri;
            return this;
        }

        public Builder httpUri(Boolean httpUri) {
            return httpUri(Output.of(httpUri));
        }

        public Builder ifile(Output<String> ifile) {
            $.ifile = ifile;
            return this;
        }

        public Builder ifile(String ifile) {
            return ifile(Output.of(ifile));
        }

        public Builder insert(Output<Boolean> insert) {
            $.insert = insert;
            return this;
        }

        public Builder insert(Boolean insert) {
            return insert(Output.of(insert));
        }

        public Builder internalVirtual(Output<String> internalVirtual) {
            $.internalVirtual = internalVirtual;
            return this;
        }

        public Builder internalVirtual(String internalVirtual) {
            return internalVirtual(Output.of(internalVirtual));
        }

        public Builder ipAddress(Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        public Builder key(String key) {
            return key(Output.of(key));
        }

        public Builder l7dos(Output<Boolean> l7dos) {
            $.l7dos = l7dos;
            return this;
        }

        public Builder l7dos(Boolean l7dos) {
            return l7dos(Output.of(l7dos));
        }

        public Builder length(Output<Integer> length) {
            $.length = length;
            return this;
        }

        public Builder length(Integer length) {
            return length(Output.of(length));
        }

        public Builder location(Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder log(Output<Boolean> log) {
            $.log = log;
            return this;
        }

        public Builder log(Boolean log) {
            return log(Output.of(log));
        }

        public Builder ltmPolicy(Output<Boolean> ltmPolicy) {
            $.ltmPolicy = ltmPolicy;
            return this;
        }

        public Builder ltmPolicy(Boolean ltmPolicy) {
            return ltmPolicy(Output.of(ltmPolicy));
        }

        public Builder member(Output<String> member) {
            $.member = member;
            return this;
        }

        public Builder member(String member) {
            return member(Output.of(member));
        }

        public Builder message(Output<String> message) {
            $.message = message;
            return this;
        }

        public Builder message(String message) {
            return message(Output.of(message));
        }

        public Builder netmask(Output<String> netmask) {
            $.netmask = netmask;
            return this;
        }

        public Builder netmask(String netmask) {
            return netmask(Output.of(netmask));
        }

        public Builder nexthop(Output<String> nexthop) {
            $.nexthop = nexthop;
            return this;
        }

        public Builder nexthop(String nexthop) {
            return nexthop(Output.of(nexthop));
        }

        public Builder node(Output<String> node) {
            $.node = node;
            return this;
        }

        public Builder node(String node) {
            return node(Output.of(node));
        }

        public Builder offset(Output<Integer> offset) {
            $.offset = offset;
            return this;
        }

        public Builder offset(Integer offset) {
            return offset(Output.of(offset));
        }

        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        public Builder path(String path) {
            return path(Output.of(path));
        }

        public Builder pem(Output<Boolean> pem) {
            $.pem = pem;
            return this;
        }

        public Builder pem(Boolean pem) {
            return pem(Output.of(pem));
        }

        public Builder persist(Output<Boolean> persist) {
            $.persist = persist;
            return this;
        }

        public Builder persist(Boolean persist) {
            return persist(Output.of(persist));
        }

        public Builder pin(Output<Boolean> pin) {
            $.pin = pin;
            return this;
        }

        public Builder pin(Boolean pin) {
            return pin(Output.of(pin));
        }

        public Builder policy(Output<String> policy) {
            $.policy = policy;
            return this;
        }

        public Builder policy(String policy) {
            return policy(Output.of(policy));
        }

        public Builder pool(Output<String> pool) {
            $.pool = pool;
            return this;
        }

        public Builder pool(String pool) {
            return pool(Output.of(pool));
        }

        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        public Builder priority(Output<String> priority) {
            $.priority = priority;
            return this;
        }

        public Builder priority(String priority) {
            return priority(Output.of(priority));
        }

        public Builder profile(Output<String> profile) {
            $.profile = profile;
            return this;
        }

        public Builder profile(String profile) {
            return profile(Output.of(profile));
        }

        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        public Builder queryString(Output<String> queryString) {
            $.queryString = queryString;
            return this;
        }

        public Builder queryString(String queryString) {
            return queryString(Output.of(queryString));
        }

        public Builder rateclass(Output<String> rateclass) {
            $.rateclass = rateclass;
            return this;
        }

        public Builder rateclass(String rateclass) {
            return rateclass(Output.of(rateclass));
        }

        public Builder redirect(Output<Boolean> redirect) {
            $.redirect = redirect;
            return this;
        }

        public Builder redirect(Boolean redirect) {
            return redirect(Output.of(redirect));
        }

        public Builder remove(Output<Boolean> remove) {
            $.remove = remove;
            return this;
        }

        public Builder remove(Boolean remove) {
            return remove(Output.of(remove));
        }

        public Builder replace(Output<Boolean> replace) {
            $.replace = replace;
            return this;
        }

        public Builder replace(Boolean replace) {
            return replace(Output.of(replace));
        }

        public Builder request(Output<Boolean> request) {
            $.request = request;
            return this;
        }

        public Builder request(Boolean request) {
            return request(Output.of(request));
        }

        public Builder requestAdapt(Output<Boolean> requestAdapt) {
            $.requestAdapt = requestAdapt;
            return this;
        }

        public Builder requestAdapt(Boolean requestAdapt) {
            return requestAdapt(Output.of(requestAdapt));
        }

        public Builder reset(Output<Boolean> reset) {
            $.reset = reset;
            return this;
        }

        public Builder reset(Boolean reset) {
            return reset(Output.of(reset));
        }

        public Builder response(Output<Boolean> response) {
            $.response = response;
            return this;
        }

        public Builder response(Boolean response) {
            return response(Output.of(response));
        }

        public Builder responseAdapt(Output<Boolean> responseAdapt) {
            $.responseAdapt = responseAdapt;
            return this;
        }

        public Builder responseAdapt(Boolean responseAdapt) {
            return responseAdapt(Output.of(responseAdapt));
        }

        public Builder scheme(Output<String> scheme) {
            $.scheme = scheme;
            return this;
        }

        public Builder scheme(String scheme) {
            return scheme(Output.of(scheme));
        }

        public Builder script(Output<String> script) {
            $.script = script;
            return this;
        }

        public Builder script(String script) {
            return script(Output.of(script));
        }

        public Builder select(Output<Boolean> select) {
            $.select = select;
            return this;
        }

        public Builder select(Boolean select) {
            return select(Output.of(select));
        }

        public Builder serverSsl(Output<Boolean> serverSsl) {
            $.serverSsl = serverSsl;
            return this;
        }

        public Builder serverSsl(Boolean serverSsl) {
            return serverSsl(Output.of(serverSsl));
        }

        public Builder setVariable(Output<Boolean> setVariable) {
            $.setVariable = setVariable;
            return this;
        }

        public Builder setVariable(Boolean setVariable) {
            return setVariable(Output.of(setVariable));
        }

        public Builder shutdown(Output<Boolean> shutdown) {
            $.shutdown = shutdown;
            return this;
        }

        public Builder shutdown(Boolean shutdown) {
            return shutdown(Output.of(shutdown));
        }

        public Builder snat(Output<String> snat) {
            $.snat = snat;
            return this;
        }

        public Builder snat(String snat) {
            return snat(Output.of(snat));
        }

        public Builder snatpool(Output<String> snatpool) {
            $.snatpool = snatpool;
            return this;
        }

        public Builder snatpool(String snatpool) {
            return snatpool(Output.of(snatpool));
        }

        public Builder sourceAddress(Output<Boolean> sourceAddress) {
            $.sourceAddress = sourceAddress;
            return this;
        }

        public Builder sourceAddress(Boolean sourceAddress) {
            return sourceAddress(Output.of(sourceAddress));
        }

        public Builder sslClientHello(Output<Boolean> sslClientHello) {
            $.sslClientHello = sslClientHello;
            return this;
        }

        public Builder sslClientHello(Boolean sslClientHello) {
            return sslClientHello(Output.of(sslClientHello));
        }

        public Builder sslServerHandshake(Output<Boolean> sslServerHandshake) {
            $.sslServerHandshake = sslServerHandshake;
            return this;
        }

        public Builder sslServerHandshake(Boolean sslServerHandshake) {
            return sslServerHandshake(Output.of(sslServerHandshake));
        }

        public Builder sslServerHello(Output<Boolean> sslServerHello) {
            $.sslServerHello = sslServerHello;
            return this;
        }

        public Builder sslServerHello(Boolean sslServerHello) {
            return sslServerHello(Output.of(sslServerHello));
        }

        public Builder sslSessionId(Output<Boolean> sslSessionId) {
            $.sslSessionId = sslSessionId;
            return this;
        }

        public Builder sslSessionId(Boolean sslSessionId) {
            return sslSessionId(Output.of(sslSessionId));
        }

        public Builder status(Output<Integer> status) {
            $.status = status;
            return this;
        }

        public Builder status(Integer status) {
            return status(Output.of(status));
        }

        public Builder tcl(Output<Boolean> tcl) {
            $.tcl = tcl;
            return this;
        }

        public Builder tcl(Boolean tcl) {
            return tcl(Output.of(tcl));
        }

        public Builder tcpNagle(Output<Boolean> tcpNagle) {
            $.tcpNagle = tcpNagle;
            return this;
        }

        public Builder tcpNagle(Boolean tcpNagle) {
            return tcpNagle(Output.of(tcpNagle));
        }

        public Builder text(Output<String> text) {
            $.text = text;
            return this;
        }

        public Builder text(String text) {
            return text(Output.of(text));
        }

        public Builder timeout(Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        public Builder tmName(Output<String> tmName) {
            $.tmName = tmName;
            return this;
        }

        public Builder tmName(String tmName) {
            return tmName(Output.of(tmName));
        }

        public Builder uie(Output<Boolean> uie) {
            $.uie = uie;
            return this;
        }

        public Builder uie(Boolean uie) {
            return uie(Output.of(uie));
        }

        public Builder universal(Output<Boolean> universal) {
            $.universal = universal;
            return this;
        }

        public Builder universal(Boolean universal) {
            return universal(Output.of(universal));
        }

        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        public Builder value(String value) {
            return value(Output.of(value));
        }

        public Builder virtual(Output<String> virtual) {
            $.virtual = virtual;
            return this;
        }

        public Builder virtual(String virtual) {
            return virtual(Output.of(virtual));
        }

        public Builder vlan(Output<String> vlan) {
            $.vlan = vlan;
            return this;
        }

        public Builder vlan(String vlan) {
            return vlan(Output.of(vlan));
        }

        public Builder vlanId(Output<Integer> vlanId) {
            $.vlanId = vlanId;
            return this;
        }

        public Builder vlanId(Integer vlanId) {
            return vlanId(Output.of(vlanId));
        }

        public Builder wam(Output<Boolean> wam) {
            $.wam = wam;
            return this;
        }

        public Builder wam(Boolean wam) {
            return wam(Output.of(wam));
        }

        public Builder write(Output<Boolean> write) {
            $.write = write;
            return this;
        }

        public Builder write(Boolean write) {
            return write(Output.of(write));
        }

        public GetPolicyRuleActionArgs build() {
            $.appService = Objects.requireNonNull($.appService, "expected parameter 'appService' to be non-null");
            $.application = Objects.requireNonNull($.application, "expected parameter 'application' to be non-null");
            $.asm = Objects.requireNonNull($.asm, "expected parameter 'asm' to be non-null");
            $.avr = Objects.requireNonNull($.avr, "expected parameter 'avr' to be non-null");
            $.cache = Objects.requireNonNull($.cache, "expected parameter 'cache' to be non-null");
            $.carp = Objects.requireNonNull($.carp, "expected parameter 'carp' to be non-null");
            $.category = Objects.requireNonNull($.category, "expected parameter 'category' to be non-null");
            $.classify = Objects.requireNonNull($.classify, "expected parameter 'classify' to be non-null");
            $.clonePool = Objects.requireNonNull($.clonePool, "expected parameter 'clonePool' to be non-null");
            $.code = Objects.requireNonNull($.code, "expected parameter 'code' to be non-null");
            $.compress = Objects.requireNonNull($.compress, "expected parameter 'compress' to be non-null");
            $.connection = Objects.requireNonNull($.connection, "expected parameter 'connection' to be non-null");
            $.content = Objects.requireNonNull($.content, "expected parameter 'content' to be non-null");
            $.cookieHash = Objects.requireNonNull($.cookieHash, "expected parameter 'cookieHash' to be non-null");
            $.cookieInsert = Objects.requireNonNull($.cookieInsert, "expected parameter 'cookieInsert' to be non-null");
            $.cookiePassive = Objects.requireNonNull($.cookiePassive, "expected parameter 'cookiePassive' to be non-null");
            $.cookieRewrite = Objects.requireNonNull($.cookieRewrite, "expected parameter 'cookieRewrite' to be non-null");
            $.decompress = Objects.requireNonNull($.decompress, "expected parameter 'decompress' to be non-null");
            $.defer = Objects.requireNonNull($.defer, "expected parameter 'defer' to be non-null");
            $.destinationAddress = Objects.requireNonNull($.destinationAddress, "expected parameter 'destinationAddress' to be non-null");
            $.disable = Objects.requireNonNull($.disable, "expected parameter 'disable' to be non-null");
            $.domain = Objects.requireNonNull($.domain, "expected parameter 'domain' to be non-null");
            $.enable = Objects.requireNonNull($.enable, "expected parameter 'enable' to be non-null");
            $.expiry = Objects.requireNonNull($.expiry, "expected parameter 'expiry' to be non-null");
            $.expirySecs = Objects.requireNonNull($.expirySecs, "expected parameter 'expirySecs' to be non-null");
            $.expression = Objects.requireNonNull($.expression, "expected parameter 'expression' to be non-null");
            $.extension = Objects.requireNonNull($.extension, "expected parameter 'extension' to be non-null");
            $.facility = Objects.requireNonNull($.facility, "expected parameter 'facility' to be non-null");
            $.fromProfile = Objects.requireNonNull($.fromProfile, "expected parameter 'fromProfile' to be non-null");
            $.hash = Objects.requireNonNull($.hash, "expected parameter 'hash' to be non-null");
            $.host = Objects.requireNonNull($.host, "expected parameter 'host' to be non-null");
            $.http = Objects.requireNonNull($.http, "expected parameter 'http' to be non-null");
            $.httpBasicAuth = Objects.requireNonNull($.httpBasicAuth, "expected parameter 'httpBasicAuth' to be non-null");
            $.httpCookie = Objects.requireNonNull($.httpCookie, "expected parameter 'httpCookie' to be non-null");
            $.httpHeader = Objects.requireNonNull($.httpHeader, "expected parameter 'httpHeader' to be non-null");
            $.httpReferer = Objects.requireNonNull($.httpReferer, "expected parameter 'httpReferer' to be non-null");
            $.httpReply = Objects.requireNonNull($.httpReply, "expected parameter 'httpReply' to be non-null");
            $.httpSetCookie = Objects.requireNonNull($.httpSetCookie, "expected parameter 'httpSetCookie' to be non-null");
            $.httpUri = Objects.requireNonNull($.httpUri, "expected parameter 'httpUri' to be non-null");
            $.ifile = Objects.requireNonNull($.ifile, "expected parameter 'ifile' to be non-null");
            $.insert = Objects.requireNonNull($.insert, "expected parameter 'insert' to be non-null");
            $.internalVirtual = Objects.requireNonNull($.internalVirtual, "expected parameter 'internalVirtual' to be non-null");
            $.ipAddress = Objects.requireNonNull($.ipAddress, "expected parameter 'ipAddress' to be non-null");
            $.key = Objects.requireNonNull($.key, "expected parameter 'key' to be non-null");
            $.l7dos = Objects.requireNonNull($.l7dos, "expected parameter 'l7dos' to be non-null");
            $.length = Objects.requireNonNull($.length, "expected parameter 'length' to be non-null");
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            $.log = Objects.requireNonNull($.log, "expected parameter 'log' to be non-null");
            $.ltmPolicy = Objects.requireNonNull($.ltmPolicy, "expected parameter 'ltmPolicy' to be non-null");
            $.member = Objects.requireNonNull($.member, "expected parameter 'member' to be non-null");
            $.message = Objects.requireNonNull($.message, "expected parameter 'message' to be non-null");
            $.netmask = Objects.requireNonNull($.netmask, "expected parameter 'netmask' to be non-null");
            $.nexthop = Objects.requireNonNull($.nexthop, "expected parameter 'nexthop' to be non-null");
            $.node = Objects.requireNonNull($.node, "expected parameter 'node' to be non-null");
            $.offset = Objects.requireNonNull($.offset, "expected parameter 'offset' to be non-null");
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            $.pem = Objects.requireNonNull($.pem, "expected parameter 'pem' to be non-null");
            $.persist = Objects.requireNonNull($.persist, "expected parameter 'persist' to be non-null");
            $.pin = Objects.requireNonNull($.pin, "expected parameter 'pin' to be non-null");
            $.policy = Objects.requireNonNull($.policy, "expected parameter 'policy' to be non-null");
            $.pool = Objects.requireNonNull($.pool, "expected parameter 'pool' to be non-null");
            $.port = Objects.requireNonNull($.port, "expected parameter 'port' to be non-null");
            $.priority = Objects.requireNonNull($.priority, "expected parameter 'priority' to be non-null");
            $.profile = Objects.requireNonNull($.profile, "expected parameter 'profile' to be non-null");
            $.protocol = Objects.requireNonNull($.protocol, "expected parameter 'protocol' to be non-null");
            $.queryString = Objects.requireNonNull($.queryString, "expected parameter 'queryString' to be non-null");
            $.rateclass = Objects.requireNonNull($.rateclass, "expected parameter 'rateclass' to be non-null");
            $.redirect = Objects.requireNonNull($.redirect, "expected parameter 'redirect' to be non-null");
            $.remove = Objects.requireNonNull($.remove, "expected parameter 'remove' to be non-null");
            $.replace = Objects.requireNonNull($.replace, "expected parameter 'replace' to be non-null");
            $.request = Objects.requireNonNull($.request, "expected parameter 'request' to be non-null");
            $.requestAdapt = Objects.requireNonNull($.requestAdapt, "expected parameter 'requestAdapt' to be non-null");
            $.reset = Objects.requireNonNull($.reset, "expected parameter 'reset' to be non-null");
            $.response = Objects.requireNonNull($.response, "expected parameter 'response' to be non-null");
            $.responseAdapt = Objects.requireNonNull($.responseAdapt, "expected parameter 'responseAdapt' to be non-null");
            $.scheme = Objects.requireNonNull($.scheme, "expected parameter 'scheme' to be non-null");
            $.script = Objects.requireNonNull($.script, "expected parameter 'script' to be non-null");
            $.select = Objects.requireNonNull($.select, "expected parameter 'select' to be non-null");
            $.serverSsl = Objects.requireNonNull($.serverSsl, "expected parameter 'serverSsl' to be non-null");
            $.setVariable = Objects.requireNonNull($.setVariable, "expected parameter 'setVariable' to be non-null");
            $.shutdown = Objects.requireNonNull($.shutdown, "expected parameter 'shutdown' to be non-null");
            $.snat = Objects.requireNonNull($.snat, "expected parameter 'snat' to be non-null");
            $.snatpool = Objects.requireNonNull($.snatpool, "expected parameter 'snatpool' to be non-null");
            $.sourceAddress = Objects.requireNonNull($.sourceAddress, "expected parameter 'sourceAddress' to be non-null");
            $.sslClientHello = Objects.requireNonNull($.sslClientHello, "expected parameter 'sslClientHello' to be non-null");
            $.sslServerHandshake = Objects.requireNonNull($.sslServerHandshake, "expected parameter 'sslServerHandshake' to be non-null");
            $.sslServerHello = Objects.requireNonNull($.sslServerHello, "expected parameter 'sslServerHello' to be non-null");
            $.sslSessionId = Objects.requireNonNull($.sslSessionId, "expected parameter 'sslSessionId' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            $.tcl = Objects.requireNonNull($.tcl, "expected parameter 'tcl' to be non-null");
            $.tcpNagle = Objects.requireNonNull($.tcpNagle, "expected parameter 'tcpNagle' to be non-null");
            $.text = Objects.requireNonNull($.text, "expected parameter 'text' to be non-null");
            $.timeout = Objects.requireNonNull($.timeout, "expected parameter 'timeout' to be non-null");
            $.tmName = Objects.requireNonNull($.tmName, "expected parameter 'tmName' to be non-null");
            $.uie = Objects.requireNonNull($.uie, "expected parameter 'uie' to be non-null");
            $.universal = Objects.requireNonNull($.universal, "expected parameter 'universal' to be non-null");
            $.value = Objects.requireNonNull($.value, "expected parameter 'value' to be non-null");
            $.virtual = Objects.requireNonNull($.virtual, "expected parameter 'virtual' to be non-null");
            $.vlan = Objects.requireNonNull($.vlan, "expected parameter 'vlan' to be non-null");
            $.vlanId = Objects.requireNonNull($.vlanId, "expected parameter 'vlanId' to be non-null");
            $.wam = Objects.requireNonNull($.wam, "expected parameter 'wam' to be non-null");
            $.write = Objects.requireNonNull($.write, "expected parameter 'write' to be non-null");
            return $;
        }
    }

}
