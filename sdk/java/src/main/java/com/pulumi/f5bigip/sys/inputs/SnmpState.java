// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.sys.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SnmpState extends com.pulumi.resources.ResourceArgs {

    public static final SnmpState Empty = new SnmpState();

    /**
     * Configures hosts or networks from which snmpd can accept traffic. Entries go directly into hosts.allow.
     * 
     */
    @Import(name="allowedaddresses")
    private @Nullable Output<List<String>> allowedaddresses;

    /**
     * @return Configures hosts or networks from which snmpd can accept traffic. Entries go directly into hosts.allow.
     * 
     */
    public Optional<Output<List<String>>> allowedaddresses() {
        return Optional.ofNullable(this.allowedaddresses);
    }

    /**
     * Specifies the contact information for the system administrator.
     * 
     */
    @Import(name="sysContact")
    private @Nullable Output<String> sysContact;

    /**
     * @return Specifies the contact information for the system administrator.
     * 
     */
    public Optional<Output<String>> sysContact() {
        return Optional.ofNullable(this.sysContact);
    }

    /**
     * Describes the system&#39;s physical location.
     * 
     */
    @Import(name="sysLocation")
    private @Nullable Output<String> sysLocation;

    /**
     * @return Describes the system&#39;s physical location.
     * 
     */
    public Optional<Output<String>> sysLocation() {
        return Optional.ofNullable(this.sysLocation);
    }

    private SnmpState() {}

    private SnmpState(SnmpState $) {
        this.allowedaddresses = $.allowedaddresses;
        this.sysContact = $.sysContact;
        this.sysLocation = $.sysLocation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SnmpState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SnmpState $;

        public Builder() {
            $ = new SnmpState();
        }

        public Builder(SnmpState defaults) {
            $ = new SnmpState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedaddresses Configures hosts or networks from which snmpd can accept traffic. Entries go directly into hosts.allow.
         * 
         * @return builder
         * 
         */
        public Builder allowedaddresses(@Nullable Output<List<String>> allowedaddresses) {
            $.allowedaddresses = allowedaddresses;
            return this;
        }

        /**
         * @param allowedaddresses Configures hosts or networks from which snmpd can accept traffic. Entries go directly into hosts.allow.
         * 
         * @return builder
         * 
         */
        public Builder allowedaddresses(List<String> allowedaddresses) {
            return allowedaddresses(Output.of(allowedaddresses));
        }

        /**
         * @param allowedaddresses Configures hosts or networks from which snmpd can accept traffic. Entries go directly into hosts.allow.
         * 
         * @return builder
         * 
         */
        public Builder allowedaddresses(String... allowedaddresses) {
            return allowedaddresses(List.of(allowedaddresses));
        }

        /**
         * @param sysContact Specifies the contact information for the system administrator.
         * 
         * @return builder
         * 
         */
        public Builder sysContact(@Nullable Output<String> sysContact) {
            $.sysContact = sysContact;
            return this;
        }

        /**
         * @param sysContact Specifies the contact information for the system administrator.
         * 
         * @return builder
         * 
         */
        public Builder sysContact(String sysContact) {
            return sysContact(Output.of(sysContact));
        }

        /**
         * @param sysLocation Describes the system&#39;s physical location.
         * 
         * @return builder
         * 
         */
        public Builder sysLocation(@Nullable Output<String> sysLocation) {
            $.sysLocation = sysLocation;
            return this;
        }

        /**
         * @param sysLocation Describes the system&#39;s physical location.
         * 
         * @return builder
         * 
         */
        public Builder sysLocation(String sysLocation) {
            return sysLocation(Output.of(sysLocation));
        }

        public SnmpState build() {
            return $;
        }
    }

}
