// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.f5bigip.Utilities;
import com.pulumi.f5bigip.ltm.ProfileHttp2Args;
import com.pulumi.f5bigip.ltm.inputs.ProfileHttp2State;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * `f5bigip.ltm.ProfileHttp2` Configures a custom profile_http2 for use by health checks.
 * 
 * For resources should be named with their &#34;full path&#34;. The full path is the combination of the partition + name of the resource. For example /Common/my-pool.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.f5bigip.ltm.ProfileHttp2;
 * import com.pulumi.f5bigip.ltm.ProfileHttp2Args;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var nyhttp2 = new ProfileHttp2(&#34;nyhttp2&#34;, ProfileHttp2Args.builder()        
 *             .name(&#34;/Common/test-profile-http2&#34;)
 *             .frameSize(2021)
 *             .receiveWindow(31)
 *             .writeSize(16380)
 *             .headerTableSize(4092)
 *             .includeContentLength(&#34;enabled&#34;)
 *             .enforceTlsRequirements(&#34;enabled&#34;)
 *             .insertHeader(&#34;disabled&#34;)
 *             .concurrentStreamsPerConnection(30)
 *             .connectionIdleTimeout(100)
 *             .activationModes(&#34;always&#34;)
 *             .build());
 * 
 *         var nyhttp2_child = new ProfileHttp2(&#34;nyhttp2-child&#34;, ProfileHttp2Args.builder()        
 *             .name(&#34;/Common/test-profile-http2-child&#34;)
 *             .defaultsFrom(nyhttp2.name())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="f5bigip:ltm/profileHttp2:ProfileHttp2")
public class ProfileHttp2 extends com.pulumi.resources.CustomResource {
    /**
     * This setting specifies the condition that will cause the BIG-IP system to handle an incoming connection as an HTTP/2 connection, Allowed values : `[“alpn”]` (or) `[“always”]`.
     * 
     */
    @Export(name="activationModes", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> activationModes;

    /**
     * @return This setting specifies the condition that will cause the BIG-IP system to handle an incoming connection as an HTTP/2 connection, Allowed values : `[“alpn”]` (or) `[“always”]`.
     * 
     */
    public Output<List<String>> activationModes() {
        return this.activationModes;
    }
    /**
     * Specifies how many concurrent requests are allowed to be outstanding on a single HTTP/2 connection.
     * 
     */
    @Export(name="concurrentStreamsPerConnection", refs={Integer.class}, tree="[0]")
    private Output<Integer> concurrentStreamsPerConnection;

    /**
     * @return Specifies how many concurrent requests are allowed to be outstanding on a single HTTP/2 connection.
     * 
     */
    public Output<Integer> concurrentStreamsPerConnection() {
        return this.concurrentStreamsPerConnection;
    }
    /**
     * Specifies the number of seconds that a connection is idle before the connection is eligible for deletion.
     * 
     */
    @Export(name="connectionIdleTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> connectionIdleTimeout;

    /**
     * @return Specifies the number of seconds that a connection is idle before the connection is eligible for deletion.
     * 
     */
    public Output<Integer> connectionIdleTimeout() {
        return this.connectionIdleTimeout;
    }
    /**
     * Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
     * 
     */
    @Export(name="defaultsFrom", refs={String.class}, tree="[0]")
    private Output<String> defaultsFrom;

    /**
     * @return Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
     * 
     */
    public Output<String> defaultsFrom() {
        return this.defaultsFrom;
    }
    /**
     * Enable or disable enforcement of TLS requirements,Allowed Values : `&#34;enabled&#34;/&#34;disabled&#34;` [Default:`&#34;enabled&#34;`].
     * 
     */
    @Export(name="enforceTlsRequirements", refs={String.class}, tree="[0]")
    private Output<String> enforceTlsRequirements;

    /**
     * @return Enable or disable enforcement of TLS requirements,Allowed Values : `&#34;enabled&#34;/&#34;disabled&#34;` [Default:`&#34;enabled&#34;`].
     * 
     */
    public Output<String> enforceTlsRequirements() {
        return this.enforceTlsRequirements;
    }
    /**
     * The size of the data frames, in bytes, that the HTTP/2 protocol sends to the client. `Default: 2048`.
     * 
     */
    @Export(name="frameSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> frameSize;

    /**
     * @return The size of the data frames, in bytes, that the HTTP/2 protocol sends to the client. `Default: 2048`.
     * 
     */
    public Output<Integer> frameSize() {
        return this.frameSize;
    }
    /**
     * The size of the header table, in KB, for the HTTP headers that the HTTP/2 protocol compresses to save bandwidth.
     * 
     */
    @Export(name="headerTableSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> headerTableSize;

    /**
     * @return The size of the header table, in KB, for the HTTP headers that the HTTP/2 protocol compresses to save bandwidth.
     * 
     */
    public Output<Integer> headerTableSize() {
        return this.headerTableSize;
    }
    /**
     * Enable to include content-length in HTTP/2 headers,Default : disabled
     * 
     */
    @Export(name="includeContentLength", refs={String.class}, tree="[0]")
    private Output<String> includeContentLength;

    /**
     * @return Enable to include content-length in HTTP/2 headers,Default : disabled
     * 
     */
    public Output<String> includeContentLength() {
        return this.includeContentLength;
    }
    /**
     * This setting specifies whether the BIG-IP system should add an HTTP header to the HTTP request to show that the request was received over HTTP/2, Allowed Values : `&#34;enabled&#34;/&#34;disabled&#34;` [ Default: `&#34;disabled&#34;`].
     * 
     */
    @Export(name="insertHeader", refs={String.class}, tree="[0]")
    private Output<String> insertHeader;

    /**
     * @return This setting specifies whether the BIG-IP system should add an HTTP header to the HTTP request to show that the request was received over HTTP/2, Allowed Values : `&#34;enabled&#34;/&#34;disabled&#34;` [ Default: `&#34;disabled&#34;`].
     * 
     */
    public Output<String> insertHeader() {
        return this.insertHeader;
    }
    /**
     * This setting specifies the name of the header that the BIG-IP system will add to the HTTP request when the Insert Header is enabled.
     * 
     */
    @Export(name="insertHeaderName", refs={String.class}, tree="[0]")
    private Output<String> insertHeaderName;

    /**
     * @return This setting specifies the name of the header that the BIG-IP system will add to the HTTP request when the Insert Header is enabled.
     * 
     */
    public Output<String> insertHeaderName() {
        return this.insertHeaderName;
    }
    /**
     * Name of Profile should be full path.The full path is the combination of the `partition + profile name`,For example `/Common/test-http2-profile`.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of Profile should be full path.The full path is the combination of the `partition + profile name`,For example `/Common/test-http2-profile`.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The flow-control size for upload streams, in KB. `Default: 32`.
     * 
     */
    @Export(name="receiveWindow", refs={Integer.class}, tree="[0]")
    private Output<Integer> receiveWindow;

    /**
     * @return The flow-control size for upload streams, in KB. `Default: 32`.
     * 
     */
    public Output<Integer> receiveWindow() {
        return this.receiveWindow;
    }
    /**
     * The total size of combined data frames, in bytes, that the HTTP/2 protocol sends in a single write function. `Default: 16384`&#34;.
     * 
     */
    @Export(name="writeSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> writeSize;

    /**
     * @return The total size of combined data frames, in bytes, that the HTTP/2 protocol sends in a single write function. `Default: 16384`&#34;.
     * 
     */
    public Output<Integer> writeSize() {
        return this.writeSize;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ProfileHttp2(String name) {
        this(name, ProfileHttp2Args.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ProfileHttp2(String name, ProfileHttp2Args args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ProfileHttp2(String name, ProfileHttp2Args args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("f5bigip:ltm/profileHttp2:ProfileHttp2", name, args == null ? ProfileHttp2Args.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ProfileHttp2(String name, Output<String> id, @Nullable ProfileHttp2State state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("f5bigip:ltm/profileHttp2:ProfileHttp2", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ProfileHttp2 get(String name, Output<String> id, @Nullable ProfileHttp2State state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ProfileHttp2(name, id, state, options);
    }
}
