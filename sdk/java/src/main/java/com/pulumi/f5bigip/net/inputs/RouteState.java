// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.net.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouteState extends com.pulumi.resources.ResourceArgs {

    public static final RouteState Empty = new RouteState();

    /**
     * Specifies a gateway address for the route.
     * 
     */
    @Import(name="gw")
    private @Nullable Output<String> gw;

    /**
     * @return Specifies a gateway address for the route.
     * 
     */
    public Optional<Output<String>> gw() {
        return Optional.ofNullable(this.gw);
    }

    /**
     * Name of the route.Name of Route should be full path,full path is the combination of the `partition + route name`,For ex: `/Common/test-net-route`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the route.Name of Route should be full path,full path is the combination of the `partition + route name`,For ex: `/Common/test-net-route`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The destination subnet and netmask for the route.
     * 
     */
    @Import(name="network")
    private @Nullable Output<String> network;

    /**
     * @return The destination subnet and netmask for the route.
     * 
     */
    public Optional<Output<String>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * reject route
     * 
     */
    @Import(name="reject")
    private @Nullable Output<Boolean> reject;

    /**
     * @return reject route
     * 
     */
    public Optional<Output<Boolean>> reject() {
        return Optional.ofNullable(this.reject);
    }

    /**
     * tunnel_ref to route traffic
     * 
     */
    @Import(name="tunnelRef")
    private @Nullable Output<String> tunnelRef;

    /**
     * @return tunnel_ref to route traffic
     * 
     */
    public Optional<Output<String>> tunnelRef() {
        return Optional.ofNullable(this.tunnelRef);
    }

    private RouteState() {}

    private RouteState(RouteState $) {
        this.gw = $.gw;
        this.name = $.name;
        this.network = $.network;
        this.reject = $.reject;
        this.tunnelRef = $.tunnelRef;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouteState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouteState $;

        public Builder() {
            $ = new RouteState();
        }

        public Builder(RouteState defaults) {
            $ = new RouteState(Objects.requireNonNull(defaults));
        }

        /**
         * @param gw Specifies a gateway address for the route.
         * 
         * @return builder
         * 
         */
        public Builder gw(@Nullable Output<String> gw) {
            $.gw = gw;
            return this;
        }

        /**
         * @param gw Specifies a gateway address for the route.
         * 
         * @return builder
         * 
         */
        public Builder gw(String gw) {
            return gw(Output.of(gw));
        }

        /**
         * @param name Name of the route.Name of Route should be full path,full path is the combination of the `partition + route name`,For ex: `/Common/test-net-route`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the route.Name of Route should be full path,full path is the combination of the `partition + route name`,For ex: `/Common/test-net-route`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param network The destination subnet and netmask for the route.
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<String> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network The destination subnet and netmask for the route.
         * 
         * @return builder
         * 
         */
        public Builder network(String network) {
            return network(Output.of(network));
        }

        /**
         * @param reject reject route
         * 
         * @return builder
         * 
         */
        public Builder reject(@Nullable Output<Boolean> reject) {
            $.reject = reject;
            return this;
        }

        /**
         * @param reject reject route
         * 
         * @return builder
         * 
         */
        public Builder reject(Boolean reject) {
            return reject(Output.of(reject));
        }

        /**
         * @param tunnelRef tunnel_ref to route traffic
         * 
         * @return builder
         * 
         */
        public Builder tunnelRef(@Nullable Output<String> tunnelRef) {
            $.tunnelRef = tunnelRef;
            return this;
        }

        /**
         * @param tunnelRef tunnel_ref to route traffic
         * 
         * @return builder
         * 
         */
        public Builder tunnelRef(String tunnelRef) {
            return tunnelRef(Output.of(tunnelRef));
        }

        public RouteState build() {
            return $;
        }
    }

}
