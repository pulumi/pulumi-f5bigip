// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.fast.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetGceServiceDiscoveryPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetGceServiceDiscoveryPlainArgs Empty = new GetGceServiceDiscoveryPlainArgs();

    /**
     * (`optional`,type `string`)Specifies whether to look for public or private IP addresses,default `private`.
     * 
     */
    @Import(name="addressRealm")
    private @Nullable String addressRealm;

    /**
     * @return (`optional`,type `string`)Specifies whether to look for public or private IP addresses,default `private`.
     * 
     */
    public Optional<String> addressRealm() {
        return Optional.ofNullable(this.addressRealm);
    }

    /**
     * (`optional`,type `bool`) Specifies whether you are updating your credentials,default `false`.
     * 
     */
    @Import(name="credentialUpdate")
    private @Nullable Boolean credentialUpdate;

    /**
     * @return (`optional`,type `bool`) Specifies whether you are updating your credentials,default `false`.
     * 
     */
    public Optional<Boolean> credentialUpdate() {
        return Optional.ofNullable(this.credentialUpdate);
    }

    /**
     * (`optional`,type `string`)Base 64 encoded service account credentials JSON.
     * 
     */
    @Import(name="encodedCredentials")
    private @Nullable String encodedCredentials;

    /**
     * @return (`optional`,type `string`)Base 64 encoded service account credentials JSON.
     * 
     */
    public Optional<String> encodedCredentials() {
        return Optional.ofNullable(this.encodedCredentials);
    }

    /**
     * (`optional`,type `string`)Member is down when fewer than minimum monitors report it healthy.
     * 
     */
    @Import(name="minimumMonitors")
    private @Nullable String minimumMonitors;

    /**
     * @return (`optional`,type `string`)Member is down when fewer than minimum monitors report it healthy.
     * 
     */
    public Optional<String> minimumMonitors() {
        return Optional.ofNullable(this.minimumMonitors);
    }

    /**
     * (`optional`,type `int`)Port to be used for AWS service discovery,default `80`.
     * 
     */
    @Import(name="port")
    private @Nullable Integer port;

    /**
     * @return (`optional`,type `int`)Port to be used for AWS service discovery,default `80`.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * (`optional`,type `string`)For Google Cloud Engine (GCE) only: The ID of the project in which the members are located.
     * 
     */
    @Import(name="projectId")
    private @Nullable String projectId;

    /**
     * @return (`optional`,type `string`)For Google Cloud Engine (GCE) only: The ID of the project in which the members are located.
     * 
     */
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * (`Required`,type `string`) GCE region in which ADC is running.
     * 
     */
    @Import(name="region", required=true)
    private String region;

    /**
     * @return (`Required`,type `string`) GCE region in which ADC is running.
     * 
     */
    public String region() {
        return this.region;
    }

    /**
     * (`Required`,type `string`) The tag key associated with the node to add to this pool.
     * 
     */
    @Import(name="tagKey", required=true)
    private String tagKey;

    /**
     * @return (`Required`,type `string`) The tag key associated with the node to add to this pool.
     * 
     */
    public String tagKey() {
        return this.tagKey;
    }

    /**
     * (`Required`,type `string`) The tag value associated with the node to add to this pool.
     * 
     */
    @Import(name="tagValue", required=true)
    private String tagValue;

    /**
     * @return (`Required`,type `string`) The tag value associated with the node to add to this pool.
     * 
     */
    public String tagValue() {
        return this.tagValue;
    }

    @Import(name="type")
    private @Nullable String type;

    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * (`optional`,type `string`)Action to take when node cannot be detected,default `remove`.
     * 
     */
    @Import(name="undetectableAction")
    private @Nullable String undetectableAction;

    /**
     * @return (`optional`,type `string`)Action to take when node cannot be detected,default `remove`.
     * 
     */
    public Optional<String> undetectableAction() {
        return Optional.ofNullable(this.undetectableAction);
    }

    /**
     * (`optional`,type `string`)Update interval for service discovery.
     * 
     */
    @Import(name="updateInterval")
    private @Nullable String updateInterval;

    /**
     * @return (`optional`,type `string`)Update interval for service discovery.
     * 
     */
    public Optional<String> updateInterval() {
        return Optional.ofNullable(this.updateInterval);
    }

    private GetGceServiceDiscoveryPlainArgs() {}

    private GetGceServiceDiscoveryPlainArgs(GetGceServiceDiscoveryPlainArgs $) {
        this.addressRealm = $.addressRealm;
        this.credentialUpdate = $.credentialUpdate;
        this.encodedCredentials = $.encodedCredentials;
        this.minimumMonitors = $.minimumMonitors;
        this.port = $.port;
        this.projectId = $.projectId;
        this.region = $.region;
        this.tagKey = $.tagKey;
        this.tagValue = $.tagValue;
        this.type = $.type;
        this.undetectableAction = $.undetectableAction;
        this.updateInterval = $.updateInterval;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGceServiceDiscoveryPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGceServiceDiscoveryPlainArgs $;

        public Builder() {
            $ = new GetGceServiceDiscoveryPlainArgs();
        }

        public Builder(GetGceServiceDiscoveryPlainArgs defaults) {
            $ = new GetGceServiceDiscoveryPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addressRealm (`optional`,type `string`)Specifies whether to look for public or private IP addresses,default `private`.
         * 
         * @return builder
         * 
         */
        public Builder addressRealm(@Nullable String addressRealm) {
            $.addressRealm = addressRealm;
            return this;
        }

        /**
         * @param credentialUpdate (`optional`,type `bool`) Specifies whether you are updating your credentials,default `false`.
         * 
         * @return builder
         * 
         */
        public Builder credentialUpdate(@Nullable Boolean credentialUpdate) {
            $.credentialUpdate = credentialUpdate;
            return this;
        }

        /**
         * @param encodedCredentials (`optional`,type `string`)Base 64 encoded service account credentials JSON.
         * 
         * @return builder
         * 
         */
        public Builder encodedCredentials(@Nullable String encodedCredentials) {
            $.encodedCredentials = encodedCredentials;
            return this;
        }

        /**
         * @param minimumMonitors (`optional`,type `string`)Member is down when fewer than minimum monitors report it healthy.
         * 
         * @return builder
         * 
         */
        public Builder minimumMonitors(@Nullable String minimumMonitors) {
            $.minimumMonitors = minimumMonitors;
            return this;
        }

        /**
         * @param port (`optional`,type `int`)Port to be used for AWS service discovery,default `80`.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Integer port) {
            $.port = port;
            return this;
        }

        /**
         * @param projectId (`optional`,type `string`)For Google Cloud Engine (GCE) only: The ID of the project in which the members are located.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable String projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param region (`Required`,type `string`) GCE region in which ADC is running.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            $.region = region;
            return this;
        }

        /**
         * @param tagKey (`Required`,type `string`) The tag key associated with the node to add to this pool.
         * 
         * @return builder
         * 
         */
        public Builder tagKey(String tagKey) {
            $.tagKey = tagKey;
            return this;
        }

        /**
         * @param tagValue (`Required`,type `string`) The tag value associated with the node to add to this pool.
         * 
         * @return builder
         * 
         */
        public Builder tagValue(String tagValue) {
            $.tagValue = tagValue;
            return this;
        }

        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        /**
         * @param undetectableAction (`optional`,type `string`)Action to take when node cannot be detected,default `remove`.
         * 
         * @return builder
         * 
         */
        public Builder undetectableAction(@Nullable String undetectableAction) {
            $.undetectableAction = undetectableAction;
            return this;
        }

        /**
         * @param updateInterval (`optional`,type `string`)Update interval for service discovery.
         * 
         * @return builder
         * 
         */
        public Builder updateInterval(@Nullable String updateInterval) {
            $.updateInterval = updateInterval;
            return this;
        }

        public GetGceServiceDiscoveryPlainArgs build() {
            $.region = Objects.requireNonNull($.region, "expected parameter 'region' to be non-null");
            $.tagKey = Objects.requireNonNull($.tagKey, "expected parameter 'tagKey' to be non-null");
            $.tagValue = Objects.requireNonNull($.tagValue, "expected parameter 'tagValue' to be non-null");
            return $;
        }
    }

}
