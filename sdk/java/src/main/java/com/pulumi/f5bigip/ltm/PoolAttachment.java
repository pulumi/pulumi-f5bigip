// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.f5bigip.Utilities;
import com.pulumi.f5bigip.ltm.PoolAttachmentArgs;
import com.pulumi.f5bigip.ltm.inputs.PoolAttachmentState;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * `f5bigip.ltm.PoolAttachment` Manages nodes membership in pools
 * 
 * ## Example Usage
 * 
 * There are two ways to use ltm_pool_attachment resource, where we can take node reference from ltm_node or we can specify node directly with ip:port/fqdn:port which will also create node and atach to pool.
 * ### Pool attachment with node directly taking  `ip:port` / `fqdn:port`
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.f5bigip.ltm.Monitor;
 * import com.pulumi.f5bigip.ltm.MonitorArgs;
 * import com.pulumi.f5bigip.ltm.Pool;
 * import com.pulumi.f5bigip.ltm.PoolArgs;
 * import com.pulumi.f5bigip.ltm.PoolAttachment;
 * import com.pulumi.f5bigip.ltm.PoolAttachmentArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var monitor = new Monitor(&#34;monitor&#34;, MonitorArgs.builder()        
 *             .name(&#34;/Common/terraform_monitor&#34;)
 *             .parent(&#34;/Common/http&#34;)
 *             .send(&#34;&#34;&#34;
 * GET /some/path
 *             &#34;&#34;&#34;)
 *             .timeout(&#34;999&#34;)
 *             .interval(&#34;998&#34;)
 *             .build());
 * 
 *         var pool = new Pool(&#34;pool&#34;, PoolArgs.builder()        
 *             .name(&#34;/Common/terraform-pool&#34;)
 *             .loadBalancingMode(&#34;round-robin&#34;)
 *             .monitors(monitor.name())
 *             .allowSnat(&#34;yes&#34;)
 *             .allowNat(&#34;yes&#34;)
 *             .build());
 * 
 *         var attachNode = new PoolAttachment(&#34;attachNode&#34;, PoolAttachmentArgs.builder()        
 *             .pool(pool.name())
 *             .node(&#34;1.1.1.1:80&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Pool attachment with node referenced from `f5bigip.ltm.Node`
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.f5bigip.ltm.Monitor;
 * import com.pulumi.f5bigip.ltm.MonitorArgs;
 * import com.pulumi.f5bigip.ltm.Pool;
 * import com.pulumi.f5bigip.ltm.PoolArgs;
 * import com.pulumi.f5bigip.ltm.Node;
 * import com.pulumi.f5bigip.ltm.NodeArgs;
 * import com.pulumi.f5bigip.ltm.PoolAttachment;
 * import com.pulumi.f5bigip.ltm.PoolAttachmentArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var monitor = new Monitor(&#34;monitor&#34;, MonitorArgs.builder()        
 *             .name(&#34;/Common/terraform_monitor&#34;)
 *             .parent(&#34;/Common/http&#34;)
 *             .send(&#34;&#34;&#34;
 * GET /some/path
 *             &#34;&#34;&#34;)
 *             .timeout(&#34;999&#34;)
 *             .interval(&#34;998&#34;)
 *             .build());
 * 
 *         var pool = new Pool(&#34;pool&#34;, PoolArgs.builder()        
 *             .name(&#34;/Common/terraform-pool&#34;)
 *             .loadBalancingMode(&#34;round-robin&#34;)
 *             .monitors(monitor.name())
 *             .allowSnat(&#34;yes&#34;)
 *             .allowNat(&#34;yes&#34;)
 *             .build());
 * 
 *         var node = new Node(&#34;node&#34;, NodeArgs.builder()        
 *             .name(&#34;/Common/terraform_node&#34;)
 *             .address(&#34;192.168.30.2&#34;)
 *             .build());
 * 
 *         var attachNode = new PoolAttachment(&#34;attachNode&#34;, PoolAttachmentArgs.builder()        
 *             .pool(pool.name())
 *             .node(node.name().applyValue(name -&gt; String.format(&#34;%s:80&#34;, name)))
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="f5bigip:ltm/poolAttachment:PoolAttachment")
public class PoolAttachment extends com.pulumi.resources.CustomResource {
    /**
     * Specifies a maximum established connection limit for a pool member or node.The default is 0, meaning that there is no limit to the number of connections.
     * 
     */
    @Export(name="connectionLimit", type=Integer.class, parameters={})
    private Output<Integer> connectionLimit;

    /**
     * @return Specifies a maximum established connection limit for a pool member or node.The default is 0, meaning that there is no limit to the number of connections.
     * 
     */
    public Output<Integer> connectionLimit() {
        return this.connectionLimit;
    }
    /**
     * Specifies the maximum number of connections-per-second allowed for a pool member,The default is 0.
     * 
     */
    @Export(name="connectionRateLimit", type=String.class, parameters={})
    private Output<String> connectionRateLimit;

    /**
     * @return Specifies the maximum number of connections-per-second allowed for a pool member,The default is 0.
     * 
     */
    public Output<String> connectionRateLimit() {
        return this.connectionRateLimit;
    }
    /**
     * Specifies the fixed ratio value used for a node during ratio load balancing.
     * 
     */
    @Export(name="dynamicRatio", type=Integer.class, parameters={})
    private Output<Integer> dynamicRatio;

    /**
     * @return Specifies the fixed ratio value used for a node during ratio load balancing.
     * 
     */
    public Output<Integer> dynamicRatio() {
        return this.dynamicRatio;
    }
    /**
     * Specifies whether the system automatically creates ephemeral nodes using the IP addresses returned by the resolution of a DNS query for a node defined by an FQDN. The default is enabled
     * 
     */
    @Export(name="fqdnAutopopulate", type=String.class, parameters={})
    private Output</* @Nullable */ String> fqdnAutopopulate;

    /**
     * @return Specifies whether the system automatically creates ephemeral nodes using the IP addresses returned by the resolution of a DNS query for a node defined by an FQDN. The default is enabled
     * 
     */
    public Output<Optional<String>> fqdnAutopopulate() {
        return Codegen.optional(this.fqdnAutopopulate);
    }
    /**
     * Pool member address/fqdn with service port, (ex: `1.1.1.1:80/www.google.com:80`). (Note: Member will be in same partition of Pool)
     * 
     */
    @Export(name="node", type=String.class, parameters={})
    private Output<String> node;

    /**
     * @return Pool member address/fqdn with service port, (ex: `1.1.1.1:80/www.google.com:80`). (Note: Member will be in same partition of Pool)
     * 
     */
    public Output<String> node() {
        return this.node;
    }
    /**
     * Name of the pool to which members should be attached,it should be &#34;full path&#34;.The full path is the combination of the partition + name of the pool.(For example `/Common/my-pool`) or partition + directory + name of the pool (For example `/Common/test/my-pool`).When including directory in fullpath we have to make sure it is created in the given partition before using it.
     * 
     */
    @Export(name="pool", type=String.class, parameters={})
    private Output<String> pool;

    /**
     * @return Name of the pool to which members should be attached,it should be &#34;full path&#34;.The full path is the combination of the partition + name of the pool.(For example `/Common/my-pool`) or partition + directory + name of the pool (For example `/Common/test/my-pool`).When including directory in fullpath we have to make sure it is created in the given partition before using it.
     * 
     */
    public Output<String> pool() {
        return this.pool;
    }
    /**
     * Specifies a number representing the priority group for the pool member. The default is 0, meaning that the member has no priority
     * 
     */
    @Export(name="priorityGroup", type=Integer.class, parameters={})
    private Output<Integer> priorityGroup;

    /**
     * @return Specifies a number representing the priority group for the pool member. The default is 0, meaning that the member has no priority
     * 
     */
    public Output<Integer> priorityGroup() {
        return this.priorityGroup;
    }
    /**
     * &#34;Specifies the ratio weight to assign to the pool member. Valid values range from 1 through 65535. The default is 1, which means that each pool member has an equal ratio proportion.&#34;.
     * 
     */
    @Export(name="ratio", type=Integer.class, parameters={})
    private Output<Integer> ratio;

    /**
     * @return &#34;Specifies the ratio weight to assign to the pool member. Valid values range from 1 through 65535. The default is 1, which means that each pool member has an equal ratio proportion.&#34;.
     * 
     */
    public Output<Integer> ratio() {
        return this.ratio;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PoolAttachment(String name) {
        this(name, PoolAttachmentArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PoolAttachment(String name, PoolAttachmentArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PoolAttachment(String name, PoolAttachmentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("f5bigip:ltm/poolAttachment:PoolAttachment", name, args == null ? PoolAttachmentArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private PoolAttachment(String name, Output<String> id, @Nullable PoolAttachmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("f5bigip:ltm/poolAttachment:PoolAttachment", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PoolAttachment get(String name, Output<String> id, @Nullable PoolAttachmentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new PoolAttachment(name, id, state, options);
    }
}
