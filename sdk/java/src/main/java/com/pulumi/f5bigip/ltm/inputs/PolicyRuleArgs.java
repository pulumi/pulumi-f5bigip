// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.f5bigip.ltm.inputs.PolicyRuleActionArgs;
import com.pulumi.f5bigip.ltm.inputs.PolicyRuleConditionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyRuleArgs Empty = new PolicyRuleArgs();

    /**
     * Block type. See action block for more details.
     * 
     */
    @Import(name="actions")
    private @Nullable Output<List<PolicyRuleActionArgs>> actions;

    /**
     * @return Block type. See action block for more details.
     * 
     */
    public Optional<Output<List<PolicyRuleActionArgs>>> actions() {
        return Optional.ofNullable(this.actions);
    }

    /**
     * Block type. See condition block for more details.
     * 
     */
    @Import(name="conditions")
    private @Nullable Output<List<PolicyRuleConditionArgs>> conditions;

    /**
     * @return Block type. See condition block for more details.
     * 
     */
    public Optional<Output<List<PolicyRuleConditionArgs>>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * Name of Rule to be applied in policy.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of Rule to be applied in policy.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private PolicyRuleArgs() {}

    private PolicyRuleArgs(PolicyRuleArgs $) {
        this.actions = $.actions;
        this.conditions = $.conditions;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyRuleArgs $;

        public Builder() {
            $ = new PolicyRuleArgs();
        }

        public Builder(PolicyRuleArgs defaults) {
            $ = new PolicyRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actions Block type. See action block for more details.
         * 
         * @return builder
         * 
         */
        public Builder actions(@Nullable Output<List<PolicyRuleActionArgs>> actions) {
            $.actions = actions;
            return this;
        }

        /**
         * @param actions Block type. See action block for more details.
         * 
         * @return builder
         * 
         */
        public Builder actions(List<PolicyRuleActionArgs> actions) {
            return actions(Output.of(actions));
        }

        /**
         * @param actions Block type. See action block for more details.
         * 
         * @return builder
         * 
         */
        public Builder actions(PolicyRuleActionArgs... actions) {
            return actions(List.of(actions));
        }

        /**
         * @param conditions Block type. See condition block for more details.
         * 
         * @return builder
         * 
         */
        public Builder conditions(@Nullable Output<List<PolicyRuleConditionArgs>> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions Block type. See condition block for more details.
         * 
         * @return builder
         * 
         */
        public Builder conditions(List<PolicyRuleConditionArgs> conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param conditions Block type. See condition block for more details.
         * 
         * @return builder
         * 
         */
        public Builder conditions(PolicyRuleConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }

        /**
         * @param name Name of Rule to be applied in policy.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of Rule to be applied in policy.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public PolicyRuleArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
