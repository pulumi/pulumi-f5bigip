// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.f5bigip.FastTcpAppArgs;
import com.pulumi.f5bigip.Utilities;
import com.pulumi.f5bigip.inputs.FastTcpAppState;
import com.pulumi.f5bigip.outputs.FastTcpAppMonitor;
import com.pulumi.f5bigip.outputs.FastTcpAppPoolMember;
import com.pulumi.f5bigip.outputs.FastTcpAppVirtualServer;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * `f5bigip.FastTcpApp` This resource will create and manage FAST TCP applications on BIG-IP from provided JSON declaration.
 * 
 */
@ResourceType(type="f5bigip:index/fastTcpApp:FastTcpApp")
public class FastTcpApp extends com.pulumi.resources.CustomResource {
    /**
     * Name of the FAST TCP application.
     * 
     */
    @Export(name="application", refs={String.class}, tree="[0]")
    private Output<String> application;

    /**
     * @return Name of the FAST TCP application.
     * 
     */
    public Output<String> application() {
        return this.application;
    }
    /**
     * Name of an existing BIG-IP HTTPS pool monitor. Monitors are used to determine the health of the application on each server.
     * 
     */
    @Export(name="existingMonitor", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> existingMonitor;

    /**
     * @return Name of an existing BIG-IP HTTPS pool monitor. Monitors are used to determine the health of the application on each server.
     * 
     */
    public Output<Optional<String>> existingMonitor() {
        return Codegen.optional(this.existingMonitor);
    }
    /**
     * Name of an existing BIG-IP pool.
     * 
     */
    @Export(name="existingPool", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> existingPool;

    /**
     * @return Name of an existing BIG-IP pool.
     * 
     */
    public Output<Optional<String>> existingPool() {
        return Codegen.optional(this.existingPool);
    }
    /**
     * Name of an existing BIG-IP SNAT pool.
     * 
     */
    @Export(name="existingSnatPool", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> existingSnatPool;

    /**
     * @return Name of an existing BIG-IP SNAT pool.
     * 
     */
    public Output<Optional<String>> existingSnatPool() {
        return Codegen.optional(this.existingSnatPool);
    }
    /**
     * Type of fallback persistence record to be created for each new client connection.
     * 
     */
    @Export(name="fallbackPersistence", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> fallbackPersistence;

    /**
     * @return Type of fallback persistence record to be created for each new client connection.
     * 
     */
    public Output<Optional<String>> fallbackPersistence() {
        return Codegen.optional(this.fallbackPersistence);
    }
    /**
     * Json payload for FAST TCP application.
     * 
     */
    @Export(name="fastTcpJson", refs={String.class}, tree="[0]")
    private Output<String> fastTcpJson;

    /**
     * @return Json payload for FAST TCP application.
     * 
     */
    public Output<String> fastTcpJson() {
        return this.fastTcpJson;
    }
    /**
     * A `load balancing method` is an algorithm that the BIG-IP system uses to select a pool member for processing a request. F5 recommends the Least Connections load balancing method
     * 
     */
    @Export(name="loadBalancingMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> loadBalancingMode;

    /**
     * @return A `load balancing method` is an algorithm that the BIG-IP system uses to select a pool member for processing a request. F5 recommends the Least Connections load balancing method
     * 
     */
    public Output<Optional<String>> loadBalancingMode() {
        return Codegen.optional(this.loadBalancingMode);
    }
    /**
     * `monitor` block takes input for FAST-Generated Pool Monitor.
     * See Pool Monitor below for more details.
     * 
     */
    @Export(name="monitor", refs={FastTcpAppMonitor.class}, tree="[0]")
    private Output</* @Nullable */ FastTcpAppMonitor> monitor;

    /**
     * @return `monitor` block takes input for FAST-Generated Pool Monitor.
     * See Pool Monitor below for more details.
     * 
     */
    public Output<Optional<FastTcpAppMonitor>> monitor() {
        return Codegen.optional(this.monitor);
    }
    /**
     * Name of an existing BIG-IP persistence profile to be used.
     * 
     */
    @Export(name="persistenceProfile", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> persistenceProfile;

    /**
     * @return Name of an existing BIG-IP persistence profile to be used.
     * 
     */
    public Output<Optional<String>> persistenceProfile() {
        return Codegen.optional(this.persistenceProfile);
    }
    /**
     * Type of persistence profile to be created. Using this option will enable use of FAST generated persistence profiles.
     * 
     */
    @Export(name="persistenceType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> persistenceType;

    /**
     * @return Type of persistence profile to be created. Using this option will enable use of FAST generated persistence profiles.
     * 
     */
    public Output<Optional<String>> persistenceType() {
        return Codegen.optional(this.persistenceType);
    }
    /**
     * `poolMembers` block takes input for FAST-Generated Pool.
     * See Pool Members below for more details.
     * 
     */
    @Export(name="poolMembers", refs={List.class,FastTcpAppPoolMember.class}, tree="[0,1]")
    private Output</* @Nullable */ List<FastTcpAppPoolMember>> poolMembers;

    /**
     * @return `poolMembers` block takes input for FAST-Generated Pool.
     * See Pool Members below for more details.
     * 
     */
    public Output<Optional<List<FastTcpAppPoolMember>>> poolMembers() {
        return Codegen.optional(this.poolMembers);
    }
    /**
     * Slow ramp temporarily throttles the number of connections to a new pool member. The recommended value is 300 seconds
     * 
     */
    @Export(name="slowRampTime", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> slowRampTime;

    /**
     * @return Slow ramp temporarily throttles the number of connections to a new pool member. The recommended value is 300 seconds
     * 
     */
    public Output<Optional<Integer>> slowRampTime() {
        return Codegen.optional(this.slowRampTime);
    }
    /**
     * List of address to be used for FAST-Generated SNAT Pool.
     * 
     */
    @Export(name="snatPoolAddresses", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> snatPoolAddresses;

    /**
     * @return List of address to be used for FAST-Generated SNAT Pool.
     * 
     */
    public Output<Optional<List<String>>> snatPoolAddresses() {
        return Codegen.optional(this.snatPoolAddresses);
    }
    /**
     * Name of the FAST TCP application tenant.
     * 
     */
    @Export(name="tenant", refs={String.class}, tree="[0]")
    private Output<String> tenant;

    /**
     * @return Name of the FAST TCP application tenant.
     * 
     */
    public Output<String> tenant() {
        return this.tenant;
    }
    /**
     * `virtualServer` block will provide `ip` and `port` options to be used for virtual server.
     * See virtual server below for more details.
     * 
     */
    @Export(name="virtualServer", refs={FastTcpAppVirtualServer.class}, tree="[0]")
    private Output</* @Nullable */ FastTcpAppVirtualServer> virtualServer;

    /**
     * @return `virtualServer` block will provide `ip` and `port` options to be used for virtual server.
     * See virtual server below for more details.
     * 
     */
    public Output<Optional<FastTcpAppVirtualServer>> virtualServer() {
        return Codegen.optional(this.virtualServer);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public FastTcpApp(java.lang.String name) {
        this(name, FastTcpAppArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public FastTcpApp(java.lang.String name, FastTcpAppArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public FastTcpApp(java.lang.String name, FastTcpAppArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("f5bigip:index/fastTcpApp:FastTcpApp", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private FastTcpApp(java.lang.String name, Output<java.lang.String> id, @Nullable FastTcpAppState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("f5bigip:index/fastTcpApp:FastTcpApp", name, state, makeResourceOptions(options, id), false);
    }

    private static FastTcpAppArgs makeArgs(FastTcpAppArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? FastTcpAppArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static FastTcpApp get(java.lang.String name, Output<java.lang.String> id, @Nullable FastTcpAppState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new FastTcpApp(name, id, state, options);
    }
}
