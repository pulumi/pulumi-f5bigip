// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetPolicyRuleCondition {
    private Boolean address;
    private Boolean all;
    private String appService;
    private Boolean browserType;
    private Boolean browserVersion;
    private Boolean caseInsensitive;
    private Boolean caseSensitive;
    private Boolean cipher;
    private Boolean cipherBits;
    private Boolean clientSsl;
    private Boolean code;
    private Boolean commonName;
    private Boolean contains;
    private Boolean continent;
    private Boolean countryCode;
    private Boolean countryName;
    private Boolean cpuUsage;
    private String datagroup;
    private Boolean deviceMake;
    private Boolean deviceModel;
    private Boolean domain;
    private Boolean endsWith;
    private Boolean equals;
    private Boolean expiry;
    private Boolean extension;
    private Boolean external;
    private Boolean geoip;
    private Boolean greater;
    private Boolean greaterOrEqual;
    private Boolean host;
    private Boolean httpBasicAuth;
    private Boolean httpCookie;
    private Boolean httpHeader;
    private Boolean httpHost;
    private Boolean httpMethod;
    private Boolean httpReferer;
    private Boolean httpSetCookie;
    private Boolean httpStatus;
    private Boolean httpUri;
    private Boolean httpUserAgent;
    private Boolean httpVersion;
    private Integer index;
    private Boolean internal;
    private Boolean isp;
    private Boolean last15secs;
    private Boolean last1min;
    private Boolean last5mins;
    private Boolean less;
    private Boolean lessOrEqual;
    private Boolean local;
    private Boolean major;
    private Boolean matches;
    private Boolean minor;
    private Boolean missing;
    private Boolean mss;
    private Boolean not;
    private Boolean org;
    private Boolean password;
    private Boolean path;
    private Boolean pathSegment;
    private Boolean port;
    private Boolean present;
    private Boolean protocol;
    private Boolean queryParameter;
    private Boolean queryString;
    private Boolean regionCode;
    private Boolean regionName;
    private Boolean remote;
    private Boolean request;
    private Boolean response;
    private Boolean routeDomain;
    private Boolean rtt;
    private Boolean scheme;
    private Boolean serverName;
    private Boolean sslCert;
    private Boolean sslClientHello;
    private Boolean sslExtension;
    private Boolean sslServerHandshake;
    private Boolean sslServerHello;
    private Boolean startsWith;
    private Boolean tcp;
    private Boolean text;
    private String tmName;
    private Boolean unnamedQueryParameter;
    private Boolean userAgentToken;
    private Boolean username;
    private Boolean value;
    private List<String> values;
    private Boolean version;
    private Boolean vlan;
    private Boolean vlanId;

    private GetPolicyRuleCondition() {}
    public Boolean address() {
        return this.address;
    }
    public Boolean all() {
        return this.all;
    }
    public String appService() {
        return this.appService;
    }
    public Boolean browserType() {
        return this.browserType;
    }
    public Boolean browserVersion() {
        return this.browserVersion;
    }
    public Boolean caseInsensitive() {
        return this.caseInsensitive;
    }
    public Boolean caseSensitive() {
        return this.caseSensitive;
    }
    public Boolean cipher() {
        return this.cipher;
    }
    public Boolean cipherBits() {
        return this.cipherBits;
    }
    public Boolean clientSsl() {
        return this.clientSsl;
    }
    public Boolean code() {
        return this.code;
    }
    public Boolean commonName() {
        return this.commonName;
    }
    public Boolean contains() {
        return this.contains;
    }
    public Boolean continent() {
        return this.continent;
    }
    public Boolean countryCode() {
        return this.countryCode;
    }
    public Boolean countryName() {
        return this.countryName;
    }
    public Boolean cpuUsage() {
        return this.cpuUsage;
    }
    public String datagroup() {
        return this.datagroup;
    }
    public Boolean deviceMake() {
        return this.deviceMake;
    }
    public Boolean deviceModel() {
        return this.deviceModel;
    }
    public Boolean domain() {
        return this.domain;
    }
    public Boolean endsWith() {
        return this.endsWith;
    }
    public Boolean equals_() {
        return this.equals;
    }
    public Boolean expiry() {
        return this.expiry;
    }
    public Boolean extension() {
        return this.extension;
    }
    public Boolean external() {
        return this.external;
    }
    public Boolean geoip() {
        return this.geoip;
    }
    public Boolean greater() {
        return this.greater;
    }
    public Boolean greaterOrEqual() {
        return this.greaterOrEqual;
    }
    public Boolean host() {
        return this.host;
    }
    public Boolean httpBasicAuth() {
        return this.httpBasicAuth;
    }
    public Boolean httpCookie() {
        return this.httpCookie;
    }
    public Boolean httpHeader() {
        return this.httpHeader;
    }
    public Boolean httpHost() {
        return this.httpHost;
    }
    public Boolean httpMethod() {
        return this.httpMethod;
    }
    public Boolean httpReferer() {
        return this.httpReferer;
    }
    public Boolean httpSetCookie() {
        return this.httpSetCookie;
    }
    public Boolean httpStatus() {
        return this.httpStatus;
    }
    public Boolean httpUri() {
        return this.httpUri;
    }
    public Boolean httpUserAgent() {
        return this.httpUserAgent;
    }
    public Boolean httpVersion() {
        return this.httpVersion;
    }
    public Integer index() {
        return this.index;
    }
    public Boolean internal() {
        return this.internal;
    }
    public Boolean isp() {
        return this.isp;
    }
    public Boolean last15secs() {
        return this.last15secs;
    }
    public Boolean last1min() {
        return this.last1min;
    }
    public Boolean last5mins() {
        return this.last5mins;
    }
    public Boolean less() {
        return this.less;
    }
    public Boolean lessOrEqual() {
        return this.lessOrEqual;
    }
    public Boolean local() {
        return this.local;
    }
    public Boolean major() {
        return this.major;
    }
    public Boolean matches() {
        return this.matches;
    }
    public Boolean minor() {
        return this.minor;
    }
    public Boolean missing() {
        return this.missing;
    }
    public Boolean mss() {
        return this.mss;
    }
    public Boolean not() {
        return this.not;
    }
    public Boolean org() {
        return this.org;
    }
    public Boolean password() {
        return this.password;
    }
    public Boolean path() {
        return this.path;
    }
    public Boolean pathSegment() {
        return this.pathSegment;
    }
    public Boolean port() {
        return this.port;
    }
    public Boolean present() {
        return this.present;
    }
    public Boolean protocol() {
        return this.protocol;
    }
    public Boolean queryParameter() {
        return this.queryParameter;
    }
    public Boolean queryString() {
        return this.queryString;
    }
    public Boolean regionCode() {
        return this.regionCode;
    }
    public Boolean regionName() {
        return this.regionName;
    }
    public Boolean remote() {
        return this.remote;
    }
    public Boolean request() {
        return this.request;
    }
    public Boolean response() {
        return this.response;
    }
    public Boolean routeDomain() {
        return this.routeDomain;
    }
    public Boolean rtt() {
        return this.rtt;
    }
    public Boolean scheme() {
        return this.scheme;
    }
    public Boolean serverName() {
        return this.serverName;
    }
    public Boolean sslCert() {
        return this.sslCert;
    }
    public Boolean sslClientHello() {
        return this.sslClientHello;
    }
    public Boolean sslExtension() {
        return this.sslExtension;
    }
    public Boolean sslServerHandshake() {
        return this.sslServerHandshake;
    }
    public Boolean sslServerHello() {
        return this.sslServerHello;
    }
    public Boolean startsWith() {
        return this.startsWith;
    }
    public Boolean tcp() {
        return this.tcp;
    }
    public Boolean text() {
        return this.text;
    }
    public String tmName() {
        return this.tmName;
    }
    public Boolean unnamedQueryParameter() {
        return this.unnamedQueryParameter;
    }
    public Boolean userAgentToken() {
        return this.userAgentToken;
    }
    public Boolean username() {
        return this.username;
    }
    public Boolean value() {
        return this.value;
    }
    public List<String> values() {
        return this.values;
    }
    public Boolean version() {
        return this.version;
    }
    public Boolean vlan() {
        return this.vlan;
    }
    public Boolean vlanId() {
        return this.vlanId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPolicyRuleCondition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean address;
        private Boolean all;
        private String appService;
        private Boolean browserType;
        private Boolean browserVersion;
        private Boolean caseInsensitive;
        private Boolean caseSensitive;
        private Boolean cipher;
        private Boolean cipherBits;
        private Boolean clientSsl;
        private Boolean code;
        private Boolean commonName;
        private Boolean contains;
        private Boolean continent;
        private Boolean countryCode;
        private Boolean countryName;
        private Boolean cpuUsage;
        private String datagroup;
        private Boolean deviceMake;
        private Boolean deviceModel;
        private Boolean domain;
        private Boolean endsWith;
        private Boolean equals;
        private Boolean expiry;
        private Boolean extension;
        private Boolean external;
        private Boolean geoip;
        private Boolean greater;
        private Boolean greaterOrEqual;
        private Boolean host;
        private Boolean httpBasicAuth;
        private Boolean httpCookie;
        private Boolean httpHeader;
        private Boolean httpHost;
        private Boolean httpMethod;
        private Boolean httpReferer;
        private Boolean httpSetCookie;
        private Boolean httpStatus;
        private Boolean httpUri;
        private Boolean httpUserAgent;
        private Boolean httpVersion;
        private Integer index;
        private Boolean internal;
        private Boolean isp;
        private Boolean last15secs;
        private Boolean last1min;
        private Boolean last5mins;
        private Boolean less;
        private Boolean lessOrEqual;
        private Boolean local;
        private Boolean major;
        private Boolean matches;
        private Boolean minor;
        private Boolean missing;
        private Boolean mss;
        private Boolean not;
        private Boolean org;
        private Boolean password;
        private Boolean path;
        private Boolean pathSegment;
        private Boolean port;
        private Boolean present;
        private Boolean protocol;
        private Boolean queryParameter;
        private Boolean queryString;
        private Boolean regionCode;
        private Boolean regionName;
        private Boolean remote;
        private Boolean request;
        private Boolean response;
        private Boolean routeDomain;
        private Boolean rtt;
        private Boolean scheme;
        private Boolean serverName;
        private Boolean sslCert;
        private Boolean sslClientHello;
        private Boolean sslExtension;
        private Boolean sslServerHandshake;
        private Boolean sslServerHello;
        private Boolean startsWith;
        private Boolean tcp;
        private Boolean text;
        private String tmName;
        private Boolean unnamedQueryParameter;
        private Boolean userAgentToken;
        private Boolean username;
        private Boolean value;
        private List<String> values;
        private Boolean version;
        private Boolean vlan;
        private Boolean vlanId;
        public Builder() {}
        public Builder(GetPolicyRuleCondition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.all = defaults.all;
    	      this.appService = defaults.appService;
    	      this.browserType = defaults.browserType;
    	      this.browserVersion = defaults.browserVersion;
    	      this.caseInsensitive = defaults.caseInsensitive;
    	      this.caseSensitive = defaults.caseSensitive;
    	      this.cipher = defaults.cipher;
    	      this.cipherBits = defaults.cipherBits;
    	      this.clientSsl = defaults.clientSsl;
    	      this.code = defaults.code;
    	      this.commonName = defaults.commonName;
    	      this.contains = defaults.contains;
    	      this.continent = defaults.continent;
    	      this.countryCode = defaults.countryCode;
    	      this.countryName = defaults.countryName;
    	      this.cpuUsage = defaults.cpuUsage;
    	      this.datagroup = defaults.datagroup;
    	      this.deviceMake = defaults.deviceMake;
    	      this.deviceModel = defaults.deviceModel;
    	      this.domain = defaults.domain;
    	      this.endsWith = defaults.endsWith;
    	      this.equals = defaults.equals;
    	      this.expiry = defaults.expiry;
    	      this.extension = defaults.extension;
    	      this.external = defaults.external;
    	      this.geoip = defaults.geoip;
    	      this.greater = defaults.greater;
    	      this.greaterOrEqual = defaults.greaterOrEqual;
    	      this.host = defaults.host;
    	      this.httpBasicAuth = defaults.httpBasicAuth;
    	      this.httpCookie = defaults.httpCookie;
    	      this.httpHeader = defaults.httpHeader;
    	      this.httpHost = defaults.httpHost;
    	      this.httpMethod = defaults.httpMethod;
    	      this.httpReferer = defaults.httpReferer;
    	      this.httpSetCookie = defaults.httpSetCookie;
    	      this.httpStatus = defaults.httpStatus;
    	      this.httpUri = defaults.httpUri;
    	      this.httpUserAgent = defaults.httpUserAgent;
    	      this.httpVersion = defaults.httpVersion;
    	      this.index = defaults.index;
    	      this.internal = defaults.internal;
    	      this.isp = defaults.isp;
    	      this.last15secs = defaults.last15secs;
    	      this.last1min = defaults.last1min;
    	      this.last5mins = defaults.last5mins;
    	      this.less = defaults.less;
    	      this.lessOrEqual = defaults.lessOrEqual;
    	      this.local = defaults.local;
    	      this.major = defaults.major;
    	      this.matches = defaults.matches;
    	      this.minor = defaults.minor;
    	      this.missing = defaults.missing;
    	      this.mss = defaults.mss;
    	      this.not = defaults.not;
    	      this.org = defaults.org;
    	      this.password = defaults.password;
    	      this.path = defaults.path;
    	      this.pathSegment = defaults.pathSegment;
    	      this.port = defaults.port;
    	      this.present = defaults.present;
    	      this.protocol = defaults.protocol;
    	      this.queryParameter = defaults.queryParameter;
    	      this.queryString = defaults.queryString;
    	      this.regionCode = defaults.regionCode;
    	      this.regionName = defaults.regionName;
    	      this.remote = defaults.remote;
    	      this.request = defaults.request;
    	      this.response = defaults.response;
    	      this.routeDomain = defaults.routeDomain;
    	      this.rtt = defaults.rtt;
    	      this.scheme = defaults.scheme;
    	      this.serverName = defaults.serverName;
    	      this.sslCert = defaults.sslCert;
    	      this.sslClientHello = defaults.sslClientHello;
    	      this.sslExtension = defaults.sslExtension;
    	      this.sslServerHandshake = defaults.sslServerHandshake;
    	      this.sslServerHello = defaults.sslServerHello;
    	      this.startsWith = defaults.startsWith;
    	      this.tcp = defaults.tcp;
    	      this.text = defaults.text;
    	      this.tmName = defaults.tmName;
    	      this.unnamedQueryParameter = defaults.unnamedQueryParameter;
    	      this.userAgentToken = defaults.userAgentToken;
    	      this.username = defaults.username;
    	      this.value = defaults.value;
    	      this.values = defaults.values;
    	      this.version = defaults.version;
    	      this.vlan = defaults.vlan;
    	      this.vlanId = defaults.vlanId;
        }

        @CustomType.Setter
        public Builder address(Boolean address) {
            if (address == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "address");
            }
            this.address = address;
            return this;
        }
        @CustomType.Setter
        public Builder all(Boolean all) {
            if (all == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "all");
            }
            this.all = all;
            return this;
        }
        @CustomType.Setter
        public Builder appService(String appService) {
            if (appService == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "appService");
            }
            this.appService = appService;
            return this;
        }
        @CustomType.Setter
        public Builder browserType(Boolean browserType) {
            if (browserType == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "browserType");
            }
            this.browserType = browserType;
            return this;
        }
        @CustomType.Setter
        public Builder browserVersion(Boolean browserVersion) {
            if (browserVersion == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "browserVersion");
            }
            this.browserVersion = browserVersion;
            return this;
        }
        @CustomType.Setter
        public Builder caseInsensitive(Boolean caseInsensitive) {
            if (caseInsensitive == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "caseInsensitive");
            }
            this.caseInsensitive = caseInsensitive;
            return this;
        }
        @CustomType.Setter
        public Builder caseSensitive(Boolean caseSensitive) {
            if (caseSensitive == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "caseSensitive");
            }
            this.caseSensitive = caseSensitive;
            return this;
        }
        @CustomType.Setter
        public Builder cipher(Boolean cipher) {
            if (cipher == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "cipher");
            }
            this.cipher = cipher;
            return this;
        }
        @CustomType.Setter
        public Builder cipherBits(Boolean cipherBits) {
            if (cipherBits == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "cipherBits");
            }
            this.cipherBits = cipherBits;
            return this;
        }
        @CustomType.Setter
        public Builder clientSsl(Boolean clientSsl) {
            if (clientSsl == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "clientSsl");
            }
            this.clientSsl = clientSsl;
            return this;
        }
        @CustomType.Setter
        public Builder code(Boolean code) {
            if (code == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "code");
            }
            this.code = code;
            return this;
        }
        @CustomType.Setter
        public Builder commonName(Boolean commonName) {
            if (commonName == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "commonName");
            }
            this.commonName = commonName;
            return this;
        }
        @CustomType.Setter
        public Builder contains(Boolean contains) {
            if (contains == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "contains");
            }
            this.contains = contains;
            return this;
        }
        @CustomType.Setter
        public Builder continent(Boolean continent) {
            if (continent == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "continent");
            }
            this.continent = continent;
            return this;
        }
        @CustomType.Setter
        public Builder countryCode(Boolean countryCode) {
            if (countryCode == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "countryCode");
            }
            this.countryCode = countryCode;
            return this;
        }
        @CustomType.Setter
        public Builder countryName(Boolean countryName) {
            if (countryName == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "countryName");
            }
            this.countryName = countryName;
            return this;
        }
        @CustomType.Setter
        public Builder cpuUsage(Boolean cpuUsage) {
            if (cpuUsage == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "cpuUsage");
            }
            this.cpuUsage = cpuUsage;
            return this;
        }
        @CustomType.Setter
        public Builder datagroup(String datagroup) {
            if (datagroup == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "datagroup");
            }
            this.datagroup = datagroup;
            return this;
        }
        @CustomType.Setter
        public Builder deviceMake(Boolean deviceMake) {
            if (deviceMake == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "deviceMake");
            }
            this.deviceMake = deviceMake;
            return this;
        }
        @CustomType.Setter
        public Builder deviceModel(Boolean deviceModel) {
            if (deviceModel == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "deviceModel");
            }
            this.deviceModel = deviceModel;
            return this;
        }
        @CustomType.Setter
        public Builder domain(Boolean domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder endsWith(Boolean endsWith) {
            if (endsWith == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "endsWith");
            }
            this.endsWith = endsWith;
            return this;
        }
        @CustomType.Setter("equals")
        public Builder equals_(Boolean equals) {
            if (equals == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "equals");
            }
            this.equals = equals;
            return this;
        }
        @CustomType.Setter
        public Builder expiry(Boolean expiry) {
            if (expiry == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "expiry");
            }
            this.expiry = expiry;
            return this;
        }
        @CustomType.Setter
        public Builder extension(Boolean extension) {
            if (extension == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "extension");
            }
            this.extension = extension;
            return this;
        }
        @CustomType.Setter
        public Builder external(Boolean external) {
            if (external == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "external");
            }
            this.external = external;
            return this;
        }
        @CustomType.Setter
        public Builder geoip(Boolean geoip) {
            if (geoip == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "geoip");
            }
            this.geoip = geoip;
            return this;
        }
        @CustomType.Setter
        public Builder greater(Boolean greater) {
            if (greater == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "greater");
            }
            this.greater = greater;
            return this;
        }
        @CustomType.Setter
        public Builder greaterOrEqual(Boolean greaterOrEqual) {
            if (greaterOrEqual == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "greaterOrEqual");
            }
            this.greaterOrEqual = greaterOrEqual;
            return this;
        }
        @CustomType.Setter
        public Builder host(Boolean host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder httpBasicAuth(Boolean httpBasicAuth) {
            if (httpBasicAuth == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "httpBasicAuth");
            }
            this.httpBasicAuth = httpBasicAuth;
            return this;
        }
        @CustomType.Setter
        public Builder httpCookie(Boolean httpCookie) {
            if (httpCookie == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "httpCookie");
            }
            this.httpCookie = httpCookie;
            return this;
        }
        @CustomType.Setter
        public Builder httpHeader(Boolean httpHeader) {
            if (httpHeader == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "httpHeader");
            }
            this.httpHeader = httpHeader;
            return this;
        }
        @CustomType.Setter
        public Builder httpHost(Boolean httpHost) {
            if (httpHost == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "httpHost");
            }
            this.httpHost = httpHost;
            return this;
        }
        @CustomType.Setter
        public Builder httpMethod(Boolean httpMethod) {
            if (httpMethod == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "httpMethod");
            }
            this.httpMethod = httpMethod;
            return this;
        }
        @CustomType.Setter
        public Builder httpReferer(Boolean httpReferer) {
            if (httpReferer == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "httpReferer");
            }
            this.httpReferer = httpReferer;
            return this;
        }
        @CustomType.Setter
        public Builder httpSetCookie(Boolean httpSetCookie) {
            if (httpSetCookie == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "httpSetCookie");
            }
            this.httpSetCookie = httpSetCookie;
            return this;
        }
        @CustomType.Setter
        public Builder httpStatus(Boolean httpStatus) {
            if (httpStatus == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "httpStatus");
            }
            this.httpStatus = httpStatus;
            return this;
        }
        @CustomType.Setter
        public Builder httpUri(Boolean httpUri) {
            if (httpUri == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "httpUri");
            }
            this.httpUri = httpUri;
            return this;
        }
        @CustomType.Setter
        public Builder httpUserAgent(Boolean httpUserAgent) {
            if (httpUserAgent == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "httpUserAgent");
            }
            this.httpUserAgent = httpUserAgent;
            return this;
        }
        @CustomType.Setter
        public Builder httpVersion(Boolean httpVersion) {
            if (httpVersion == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "httpVersion");
            }
            this.httpVersion = httpVersion;
            return this;
        }
        @CustomType.Setter
        public Builder index(Integer index) {
            if (index == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "index");
            }
            this.index = index;
            return this;
        }
        @CustomType.Setter
        public Builder internal(Boolean internal) {
            if (internal == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "internal");
            }
            this.internal = internal;
            return this;
        }
        @CustomType.Setter
        public Builder isp(Boolean isp) {
            if (isp == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "isp");
            }
            this.isp = isp;
            return this;
        }
        @CustomType.Setter
        public Builder last15secs(Boolean last15secs) {
            if (last15secs == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "last15secs");
            }
            this.last15secs = last15secs;
            return this;
        }
        @CustomType.Setter
        public Builder last1min(Boolean last1min) {
            if (last1min == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "last1min");
            }
            this.last1min = last1min;
            return this;
        }
        @CustomType.Setter
        public Builder last5mins(Boolean last5mins) {
            if (last5mins == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "last5mins");
            }
            this.last5mins = last5mins;
            return this;
        }
        @CustomType.Setter
        public Builder less(Boolean less) {
            if (less == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "less");
            }
            this.less = less;
            return this;
        }
        @CustomType.Setter
        public Builder lessOrEqual(Boolean lessOrEqual) {
            if (lessOrEqual == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "lessOrEqual");
            }
            this.lessOrEqual = lessOrEqual;
            return this;
        }
        @CustomType.Setter
        public Builder local(Boolean local) {
            if (local == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "local");
            }
            this.local = local;
            return this;
        }
        @CustomType.Setter
        public Builder major(Boolean major) {
            if (major == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "major");
            }
            this.major = major;
            return this;
        }
        @CustomType.Setter
        public Builder matches(Boolean matches) {
            if (matches == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "matches");
            }
            this.matches = matches;
            return this;
        }
        @CustomType.Setter
        public Builder minor(Boolean minor) {
            if (minor == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "minor");
            }
            this.minor = minor;
            return this;
        }
        @CustomType.Setter
        public Builder missing(Boolean missing) {
            if (missing == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "missing");
            }
            this.missing = missing;
            return this;
        }
        @CustomType.Setter
        public Builder mss(Boolean mss) {
            if (mss == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "mss");
            }
            this.mss = mss;
            return this;
        }
        @CustomType.Setter
        public Builder not(Boolean not) {
            if (not == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "not");
            }
            this.not = not;
            return this;
        }
        @CustomType.Setter
        public Builder org(Boolean org) {
            if (org == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "org");
            }
            this.org = org;
            return this;
        }
        @CustomType.Setter
        public Builder password(Boolean password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder path(Boolean path) {
            if (path == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "path");
            }
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder pathSegment(Boolean pathSegment) {
            if (pathSegment == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "pathSegment");
            }
            this.pathSegment = pathSegment;
            return this;
        }
        @CustomType.Setter
        public Builder port(Boolean port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder present(Boolean present) {
            if (present == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "present");
            }
            this.present = present;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(Boolean protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder queryParameter(Boolean queryParameter) {
            if (queryParameter == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "queryParameter");
            }
            this.queryParameter = queryParameter;
            return this;
        }
        @CustomType.Setter
        public Builder queryString(Boolean queryString) {
            if (queryString == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "queryString");
            }
            this.queryString = queryString;
            return this;
        }
        @CustomType.Setter
        public Builder regionCode(Boolean regionCode) {
            if (regionCode == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "regionCode");
            }
            this.regionCode = regionCode;
            return this;
        }
        @CustomType.Setter
        public Builder regionName(Boolean regionName) {
            if (regionName == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "regionName");
            }
            this.regionName = regionName;
            return this;
        }
        @CustomType.Setter
        public Builder remote(Boolean remote) {
            if (remote == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "remote");
            }
            this.remote = remote;
            return this;
        }
        @CustomType.Setter
        public Builder request(Boolean request) {
            if (request == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "request");
            }
            this.request = request;
            return this;
        }
        @CustomType.Setter
        public Builder response(Boolean response) {
            if (response == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "response");
            }
            this.response = response;
            return this;
        }
        @CustomType.Setter
        public Builder routeDomain(Boolean routeDomain) {
            if (routeDomain == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "routeDomain");
            }
            this.routeDomain = routeDomain;
            return this;
        }
        @CustomType.Setter
        public Builder rtt(Boolean rtt) {
            if (rtt == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "rtt");
            }
            this.rtt = rtt;
            return this;
        }
        @CustomType.Setter
        public Builder scheme(Boolean scheme) {
            if (scheme == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "scheme");
            }
            this.scheme = scheme;
            return this;
        }
        @CustomType.Setter
        public Builder serverName(Boolean serverName) {
            if (serverName == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "serverName");
            }
            this.serverName = serverName;
            return this;
        }
        @CustomType.Setter
        public Builder sslCert(Boolean sslCert) {
            if (sslCert == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "sslCert");
            }
            this.sslCert = sslCert;
            return this;
        }
        @CustomType.Setter
        public Builder sslClientHello(Boolean sslClientHello) {
            if (sslClientHello == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "sslClientHello");
            }
            this.sslClientHello = sslClientHello;
            return this;
        }
        @CustomType.Setter
        public Builder sslExtension(Boolean sslExtension) {
            if (sslExtension == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "sslExtension");
            }
            this.sslExtension = sslExtension;
            return this;
        }
        @CustomType.Setter
        public Builder sslServerHandshake(Boolean sslServerHandshake) {
            if (sslServerHandshake == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "sslServerHandshake");
            }
            this.sslServerHandshake = sslServerHandshake;
            return this;
        }
        @CustomType.Setter
        public Builder sslServerHello(Boolean sslServerHello) {
            if (sslServerHello == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "sslServerHello");
            }
            this.sslServerHello = sslServerHello;
            return this;
        }
        @CustomType.Setter
        public Builder startsWith(Boolean startsWith) {
            if (startsWith == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "startsWith");
            }
            this.startsWith = startsWith;
            return this;
        }
        @CustomType.Setter
        public Builder tcp(Boolean tcp) {
            if (tcp == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "tcp");
            }
            this.tcp = tcp;
            return this;
        }
        @CustomType.Setter
        public Builder text(Boolean text) {
            if (text == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "text");
            }
            this.text = text;
            return this;
        }
        @CustomType.Setter
        public Builder tmName(String tmName) {
            if (tmName == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "tmName");
            }
            this.tmName = tmName;
            return this;
        }
        @CustomType.Setter
        public Builder unnamedQueryParameter(Boolean unnamedQueryParameter) {
            if (unnamedQueryParameter == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "unnamedQueryParameter");
            }
            this.unnamedQueryParameter = unnamedQueryParameter;
            return this;
        }
        @CustomType.Setter
        public Builder userAgentToken(Boolean userAgentToken) {
            if (userAgentToken == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "userAgentToken");
            }
            this.userAgentToken = userAgentToken;
            return this;
        }
        @CustomType.Setter
        public Builder username(Boolean username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "username");
            }
            this.username = username;
            return this;
        }
        @CustomType.Setter
        public Builder value(Boolean value) {
            if (value == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "value");
            }
            this.value = value;
            return this;
        }
        @CustomType.Setter
        public Builder values(List<String> values) {
            if (values == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "values");
            }
            this.values = values;
            return this;
        }
        public Builder values(String... values) {
            return values(List.of(values));
        }
        @CustomType.Setter
        public Builder version(Boolean version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "version");
            }
            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder vlan(Boolean vlan) {
            if (vlan == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "vlan");
            }
            this.vlan = vlan;
            return this;
        }
        @CustomType.Setter
        public Builder vlanId(Boolean vlanId) {
            if (vlanId == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleCondition", "vlanId");
            }
            this.vlanId = vlanId;
            return this;
        }
        public GetPolicyRuleCondition build() {
            final var _resultValue = new GetPolicyRuleCondition();
            _resultValue.address = address;
            _resultValue.all = all;
            _resultValue.appService = appService;
            _resultValue.browserType = browserType;
            _resultValue.browserVersion = browserVersion;
            _resultValue.caseInsensitive = caseInsensitive;
            _resultValue.caseSensitive = caseSensitive;
            _resultValue.cipher = cipher;
            _resultValue.cipherBits = cipherBits;
            _resultValue.clientSsl = clientSsl;
            _resultValue.code = code;
            _resultValue.commonName = commonName;
            _resultValue.contains = contains;
            _resultValue.continent = continent;
            _resultValue.countryCode = countryCode;
            _resultValue.countryName = countryName;
            _resultValue.cpuUsage = cpuUsage;
            _resultValue.datagroup = datagroup;
            _resultValue.deviceMake = deviceMake;
            _resultValue.deviceModel = deviceModel;
            _resultValue.domain = domain;
            _resultValue.endsWith = endsWith;
            _resultValue.equals = equals;
            _resultValue.expiry = expiry;
            _resultValue.extension = extension;
            _resultValue.external = external;
            _resultValue.geoip = geoip;
            _resultValue.greater = greater;
            _resultValue.greaterOrEqual = greaterOrEqual;
            _resultValue.host = host;
            _resultValue.httpBasicAuth = httpBasicAuth;
            _resultValue.httpCookie = httpCookie;
            _resultValue.httpHeader = httpHeader;
            _resultValue.httpHost = httpHost;
            _resultValue.httpMethod = httpMethod;
            _resultValue.httpReferer = httpReferer;
            _resultValue.httpSetCookie = httpSetCookie;
            _resultValue.httpStatus = httpStatus;
            _resultValue.httpUri = httpUri;
            _resultValue.httpUserAgent = httpUserAgent;
            _resultValue.httpVersion = httpVersion;
            _resultValue.index = index;
            _resultValue.internal = internal;
            _resultValue.isp = isp;
            _resultValue.last15secs = last15secs;
            _resultValue.last1min = last1min;
            _resultValue.last5mins = last5mins;
            _resultValue.less = less;
            _resultValue.lessOrEqual = lessOrEqual;
            _resultValue.local = local;
            _resultValue.major = major;
            _resultValue.matches = matches;
            _resultValue.minor = minor;
            _resultValue.missing = missing;
            _resultValue.mss = mss;
            _resultValue.not = not;
            _resultValue.org = org;
            _resultValue.password = password;
            _resultValue.path = path;
            _resultValue.pathSegment = pathSegment;
            _resultValue.port = port;
            _resultValue.present = present;
            _resultValue.protocol = protocol;
            _resultValue.queryParameter = queryParameter;
            _resultValue.queryString = queryString;
            _resultValue.regionCode = regionCode;
            _resultValue.regionName = regionName;
            _resultValue.remote = remote;
            _resultValue.request = request;
            _resultValue.response = response;
            _resultValue.routeDomain = routeDomain;
            _resultValue.rtt = rtt;
            _resultValue.scheme = scheme;
            _resultValue.serverName = serverName;
            _resultValue.sslCert = sslCert;
            _resultValue.sslClientHello = sslClientHello;
            _resultValue.sslExtension = sslExtension;
            _resultValue.sslServerHandshake = sslServerHandshake;
            _resultValue.sslServerHello = sslServerHello;
            _resultValue.startsWith = startsWith;
            _resultValue.tcp = tcp;
            _resultValue.text = text;
            _resultValue.tmName = tmName;
            _resultValue.unnamedQueryParameter = unnamedQueryParameter;
            _resultValue.userAgentToken = userAgentToken;
            _resultValue.username = username;
            _resultValue.value = value;
            _resultValue.values = values;
            _resultValue.version = version;
            _resultValue.vlan = vlan;
            _resultValue.vlanId = vlanId;
            return _resultValue;
        }
    }
}
