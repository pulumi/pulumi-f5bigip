// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    /**
     * Domain name/IP of the BigIP
     * 
     */
    @Import(name="address")
    private @Nullable Output<String> address;

    /**
     * @return Domain name/IP of the BigIP
     * 
     */
    public Optional<Output<String>> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * Login reference for token authentication (see BIG-IP REST docs for details)
     * 
     */
    @Import(name="loginRef")
    private @Nullable Output<String> loginRef;

    /**
     * @return Login reference for token authentication (see BIG-IP REST docs for details)
     * 
     */
    public Optional<Output<String>> loginRef() {
        return Optional.ofNullable(this.loginRef);
    }

    /**
     * The user&#39;s password. Leave empty if using token_value
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The user&#39;s password. Leave empty if using token_value
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Management Port to connect to Bigip
     * 
     */
    @Import(name="port")
    private @Nullable Output<String> port;

    /**
     * @return Management Port to connect to Bigip
     * 
     */
    public Optional<Output<String>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * If this flag set to true,sending telemetry data to TEEM will be disabled
     * 
     */
    @Import(name="teemDisable", json=true)
    private @Nullable Output<Boolean> teemDisable;

    /**
     * @return If this flag set to true,sending telemetry data to TEEM will be disabled
     * 
     */
    public Optional<Output<Boolean>> teemDisable() {
        return Optional.ofNullable(this.teemDisable);
    }

    /**
     * Enable to use an external authentication source (LDAP, TACACS, etc)
     * 
     */
    @Import(name="tokenAuth", json=true)
    private @Nullable Output<Boolean> tokenAuth;

    /**
     * @return Enable to use an external authentication source (LDAP, TACACS, etc)
     * 
     */
    public Optional<Output<Boolean>> tokenAuth() {
        return Optional.ofNullable(this.tokenAuth);
    }

    /**
     * A token generated outside the provider, in place of password
     * 
     */
    @Import(name="tokenValue")
    private @Nullable Output<String> tokenValue;

    /**
     * @return A token generated outside the provider, in place of password
     * 
     */
    public Optional<Output<String>> tokenValue() {
        return Optional.ofNullable(this.tokenValue);
    }

    /**
     * Valid Trusted Certificate path
     * 
     */
    @Import(name="trustedCertPath")
    private @Nullable Output<String> trustedCertPath;

    /**
     * @return Valid Trusted Certificate path
     * 
     */
    public Optional<Output<String>> trustedCertPath() {
        return Optional.ofNullable(this.trustedCertPath);
    }

    /**
     * Username with API access to the BigIP
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return Username with API access to the BigIP
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    /**
     * If set to true, Disables TLS certificate check on BIG-IP. Default : True
     * 
     */
    @Import(name="validateCertsDisable", json=true)
    private @Nullable Output<Boolean> validateCertsDisable;

    /**
     * @return If set to true, Disables TLS certificate check on BIG-IP. Default : True
     * 
     */
    public Optional<Output<Boolean>> validateCertsDisable() {
        return Optional.ofNullable(this.validateCertsDisable);
    }

    private ProviderArgs() {}

    private ProviderArgs(ProviderArgs $) {
        this.address = $.address;
        this.loginRef = $.loginRef;
        this.password = $.password;
        this.port = $.port;
        this.teemDisable = $.teemDisable;
        this.tokenAuth = $.tokenAuth;
        this.tokenValue = $.tokenValue;
        this.trustedCertPath = $.trustedCertPath;
        this.username = $.username;
        this.validateCertsDisable = $.validateCertsDisable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderArgs $;

        public Builder() {
            $ = new ProviderArgs();
        }

        public Builder(ProviderArgs defaults) {
            $ = new ProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address Domain name/IP of the BigIP
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address Domain name/IP of the BigIP
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param loginRef Login reference for token authentication (see BIG-IP REST docs for details)
         * 
         * @return builder
         * 
         */
        public Builder loginRef(@Nullable Output<String> loginRef) {
            $.loginRef = loginRef;
            return this;
        }

        /**
         * @param loginRef Login reference for token authentication (see BIG-IP REST docs for details)
         * 
         * @return builder
         * 
         */
        public Builder loginRef(String loginRef) {
            return loginRef(Output.of(loginRef));
        }

        /**
         * @param password The user&#39;s password. Leave empty if using token_value
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The user&#39;s password. Leave empty if using token_value
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param port Management Port to connect to Bigip
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<String> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Management Port to connect to Bigip
         * 
         * @return builder
         * 
         */
        public Builder port(String port) {
            return port(Output.of(port));
        }

        /**
         * @param teemDisable If this flag set to true,sending telemetry data to TEEM will be disabled
         * 
         * @return builder
         * 
         */
        public Builder teemDisable(@Nullable Output<Boolean> teemDisable) {
            $.teemDisable = teemDisable;
            return this;
        }

        /**
         * @param teemDisable If this flag set to true,sending telemetry data to TEEM will be disabled
         * 
         * @return builder
         * 
         */
        public Builder teemDisable(Boolean teemDisable) {
            return teemDisable(Output.of(teemDisable));
        }

        /**
         * @param tokenAuth Enable to use an external authentication source (LDAP, TACACS, etc)
         * 
         * @return builder
         * 
         */
        public Builder tokenAuth(@Nullable Output<Boolean> tokenAuth) {
            $.tokenAuth = tokenAuth;
            return this;
        }

        /**
         * @param tokenAuth Enable to use an external authentication source (LDAP, TACACS, etc)
         * 
         * @return builder
         * 
         */
        public Builder tokenAuth(Boolean tokenAuth) {
            return tokenAuth(Output.of(tokenAuth));
        }

        /**
         * @param tokenValue A token generated outside the provider, in place of password
         * 
         * @return builder
         * 
         */
        public Builder tokenValue(@Nullable Output<String> tokenValue) {
            $.tokenValue = tokenValue;
            return this;
        }

        /**
         * @param tokenValue A token generated outside the provider, in place of password
         * 
         * @return builder
         * 
         */
        public Builder tokenValue(String tokenValue) {
            return tokenValue(Output.of(tokenValue));
        }

        /**
         * @param trustedCertPath Valid Trusted Certificate path
         * 
         * @return builder
         * 
         */
        public Builder trustedCertPath(@Nullable Output<String> trustedCertPath) {
            $.trustedCertPath = trustedCertPath;
            return this;
        }

        /**
         * @param trustedCertPath Valid Trusted Certificate path
         * 
         * @return builder
         * 
         */
        public Builder trustedCertPath(String trustedCertPath) {
            return trustedCertPath(Output.of(trustedCertPath));
        }

        /**
         * @param username Username with API access to the BigIP
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Username with API access to the BigIP
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        /**
         * @param validateCertsDisable If set to true, Disables TLS certificate check on BIG-IP. Default : True
         * 
         * @return builder
         * 
         */
        public Builder validateCertsDisable(@Nullable Output<Boolean> validateCertsDisable) {
            $.validateCertsDisable = validateCertsDisable;
            return this;
        }

        /**
         * @param validateCertsDisable If set to true, Disables TLS certificate check on BIG-IP. Default : True
         * 
         * @return builder
         * 
         */
        public Builder validateCertsDisable(Boolean validateCertsDisable) {
            return validateCertsDisable(Output.of(validateCertsDisable));
        }

        public ProviderArgs build() {
            return $;
        }
    }

}
