// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetIkePeerArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetIkePeerArgs Empty = new NetIkePeerArgs();

    /**
     * The application service that the object belongs to
     * 
     */
    @Import(name="appService")
    private @Nullable Output<String> appService;

    /**
     * @return The application service that the object belongs to
     * 
     */
    public Optional<Output<String>> appService() {
        return Optional.ofNullable(this.appService);
    }

    /**
     * the trusted root and intermediate certificate authorities
     * 
     */
    @Import(name="caCertFile")
    private @Nullable Output<String> caCertFile;

    /**
     * @return the trusted root and intermediate certificate authorities
     * 
     */
    public Optional<Output<String>> caCertFile() {
        return Optional.ofNullable(this.caCertFile);
    }

    /**
     * Specifies the file name of the Certificate Revocation List. Only supported in IKEv1
     * 
     */
    @Import(name="crlFile")
    private @Nullable Output<String> crlFile;

    /**
     * @return Specifies the file name of the Certificate Revocation List. Only supported in IKEv1
     * 
     */
    public Optional<Output<String>> crlFile() {
        return Optional.ofNullable(this.crlFile);
    }

    /**
     * User defined description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return User defined description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Specifies the number of seconds between Dead Peer Detection messages
     * 
     */
    @Import(name="dpdDelay")
    private @Nullable Output<Integer> dpdDelay;

    /**
     * @return Specifies the number of seconds between Dead Peer Detection messages
     * 
     */
    public Optional<Output<Integer>> dpdDelay() {
        return Optional.ofNullable(this.dpdDelay);
    }

    /**
     * Enable or disable the generation of Security Policy Database entries(SPD) when the device is the responder of the IKE remote node
     * 
     */
    @Import(name="generatePolicy")
    private @Nullable Output<String> generatePolicy;

    /**
     * @return Enable or disable the generation of Security Policy Database entries(SPD) when the device is the responder of the IKE remote node
     * 
     */
    public Optional<Output<String>> generatePolicy() {
        return Optional.ofNullable(this.generatePolicy);
    }

    /**
     * Defines the lifetime in minutes of an IKE SA which will be proposed in the phase 1 negotiations
     * 
     */
    @Import(name="lifetime")
    private @Nullable Output<Integer> lifetime;

    /**
     * @return Defines the lifetime in minutes of an IKE SA which will be proposed in the phase 1 negotiations
     * 
     */
    public Optional<Output<Integer>> lifetime() {
        return Optional.ofNullable(this.lifetime);
    }

    /**
     * Defines the exchange mode for phase 1 when racoon is the initiator, or the acceptable exchange mode when racoon is the responder
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return Defines the exchange mode for phase 1 when racoon is the initiator, or the acceptable exchange mode when racoon is the responder
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Specifies the name of the certificate file object
     * 
     */
    @Import(name="myCertFile")
    private @Nullable Output<String> myCertFile;

    /**
     * @return Specifies the name of the certificate file object
     * 
     */
    public Optional<Output<String>> myCertFile() {
        return Optional.ofNullable(this.myCertFile);
    }

    /**
     * Specifies the name of the certificate key file object
     * 
     */
    @Import(name="myCertKeyFile")
    private @Nullable Output<String> myCertKeyFile;

    /**
     * @return Specifies the name of the certificate key file object
     * 
     */
    public Optional<Output<String>> myCertKeyFile() {
        return Optional.ofNullable(this.myCertKeyFile);
    }

    /**
     * Specifies the passphrase of the key used for my-cert-key-file
     * 
     */
    @Import(name="myCertKeyPassphrase")
    private @Nullable Output<String> myCertKeyPassphrase;

    /**
     * @return Specifies the passphrase of the key used for my-cert-key-file
     * 
     */
    public Optional<Output<String>> myCertKeyPassphrase() {
        return Optional.ofNullable(this.myCertKeyPassphrase);
    }

    /**
     * Specifies the identifier type sent to the remote host to use in the phase 1 negotiation
     * 
     */
    @Import(name="myIdType")
    private @Nullable Output<String> myIdType;

    /**
     * @return Specifies the identifier type sent to the remote host to use in the phase 1 negotiation
     * 
     */
    public Optional<Output<String>> myIdType() {
        return Optional.ofNullable(this.myIdType);
    }

    /**
     * Specifies the identifier value sent to the remote host in the phase 1 negotiation
     * 
     */
    @Import(name="myIdValue")
    private @Nullable Output<String> myIdValue;

    /**
     * @return Specifies the identifier value sent to the remote host in the phase 1 negotiation
     * 
     */
    public Optional<Output<String>> myIdValue() {
        return Optional.ofNullable(this.myIdValue);
    }

    /**
     * Name of the ike_peer
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the ike_peer
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Enables use of the NAT-Traversal IPsec extension
     * 
     */
    @Import(name="natTraversal")
    private @Nullable Output<String> natTraversal;

    /**
     * @return Enables use of the NAT-Traversal IPsec extension
     * 
     */
    public Optional<Output<String>> natTraversal() {
        return Optional.ofNullable(this.natTraversal);
    }

    /**
     * Specifies whether the local IKE agent can be the initiator of the IKE negotiation with this ike-peer
     * 
     */
    @Import(name="passive")
    private @Nullable Output<String> passive;

    /**
     * @return Specifies whether the local IKE agent can be the initiator of the IKE negotiation with this ike-peer
     * 
     */
    public Optional<Output<String>> passive() {
        return Optional.ofNullable(this.passive);
    }

    /**
     * Specifies the peer’s certificate for authentication
     * 
     */
    @Import(name="peersCertFile")
    private @Nullable Output<String> peersCertFile;

    /**
     * @return Specifies the peer’s certificate for authentication
     * 
     */
    public Optional<Output<String>> peersCertFile() {
        return Optional.ofNullable(this.peersCertFile);
    }

    /**
     * Specifies that the only peers-cert-type supported is certfile
     * 
     */
    @Import(name="peersCertType")
    private @Nullable Output<String> peersCertType;

    /**
     * @return Specifies that the only peers-cert-type supported is certfile
     * 
     */
    public Optional<Output<String>> peersCertType() {
        return Optional.ofNullable(this.peersCertType);
    }

    /**
     * Specifies which of address, fqdn, asn1dn, user-fqdn or keyid-tag types to use as peers-id-type
     * 
     */
    @Import(name="peersIdType")
    private @Nullable Output<String> peersIdType;

    /**
     * @return Specifies which of address, fqdn, asn1dn, user-fqdn or keyid-tag types to use as peers-id-type
     * 
     */
    public Optional<Output<String>> peersIdType() {
        return Optional.ofNullable(this.peersIdType);
    }

    /**
     * Specifies the peer’s identifier to be received
     * 
     */
    @Import(name="peersIdValue")
    private @Nullable Output<String> peersIdValue;

    /**
     * @return Specifies the peer’s identifier to be received
     * 
     */
    public Optional<Output<String>> peersIdValue() {
        return Optional.ofNullable(this.peersIdValue);
    }

    /**
     * Specifies the authentication method used for phase 1 negotiation
     * 
     */
    @Import(name="phase1AuthMethod")
    private @Nullable Output<String> phase1AuthMethod;

    /**
     * @return Specifies the authentication method used for phase 1 negotiation
     * 
     */
    public Optional<Output<String>> phase1AuthMethod() {
        return Optional.ofNullable(this.phase1AuthMethod);
    }

    /**
     * Specifies the encryption algorithm used for the isakmp phase 1 negotiation
     * 
     */
    @Import(name="phase1EncryptAlgorithm")
    private @Nullable Output<String> phase1EncryptAlgorithm;

    /**
     * @return Specifies the encryption algorithm used for the isakmp phase 1 negotiation
     * 
     */
    public Optional<Output<String>> phase1EncryptAlgorithm() {
        return Optional.ofNullable(this.phase1EncryptAlgorithm);
    }

    /**
     * Defines the hash algorithm used for the isakmp phase 1 negotiation
     * 
     */
    @Import(name="phase1HashAlgorithm")
    private @Nullable Output<String> phase1HashAlgorithm;

    /**
     * @return Defines the hash algorithm used for the isakmp phase 1 negotiation
     * 
     */
    public Optional<Output<String>> phase1HashAlgorithm() {
        return Optional.ofNullable(this.phase1HashAlgorithm);
    }

    /**
     * Defines the Diffie-Hellman group for key exchange to provide perfect forward secrecy
     * 
     */
    @Import(name="phase1PerfectForwardSecrecy")
    private @Nullable Output<String> phase1PerfectForwardSecrecy;

    /**
     * @return Defines the Diffie-Hellman group for key exchange to provide perfect forward secrecy
     * 
     */
    public Optional<Output<String>> phase1PerfectForwardSecrecy() {
        return Optional.ofNullable(this.phase1PerfectForwardSecrecy);
    }

    /**
     * Specifies the preshared key for ISAKMP SAs
     * 
     */
    @Import(name="presharedKey")
    private @Nullable Output<String> presharedKey;

    /**
     * @return Specifies the preshared key for ISAKMP SAs
     * 
     */
    public Optional<Output<String>> presharedKey() {
        return Optional.ofNullable(this.presharedKey);
    }

    /**
     * Display the encrypted preshared-key for the IKE remote node
     * 
     */
    @Import(name="presharedKeyEncrypted")
    private @Nullable Output<String> presharedKeyEncrypted;

    /**
     * @return Display the encrypted preshared-key for the IKE remote node
     * 
     */
    public Optional<Output<String>> presharedKeyEncrypted() {
        return Optional.ofNullable(this.presharedKeyEncrypted);
    }

    /**
     * Specifies the pseudo-random function used to derive keying material for all cryptographic operations
     * 
     */
    @Import(name="prf")
    private @Nullable Output<String> prf;

    /**
     * @return Specifies the pseudo-random function used to derive keying material for all cryptographic operations
     * 
     */
    public Optional<Output<String>> prf() {
        return Optional.ofNullable(this.prf);
    }

    /**
     * If this value is enabled, both values of ID payloads in the phase 2 exchange are used as the addresses of end-point of IPsec-SAs
     * 
     */
    @Import(name="proxySupport")
    private @Nullable Output<String> proxySupport;

    /**
     * @return If this value is enabled, both values of ID payloads in the phase 2 exchange are used as the addresses of end-point of IPsec-SAs
     * 
     */
    public Optional<Output<String>> proxySupport() {
        return Optional.ofNullable(this.proxySupport);
    }

    /**
     * Specifies the IP address of the IKE remote node
     * 
     */
    @Import(name="remoteAddress", required=true)
    private Output<String> remoteAddress;

    /**
     * @return Specifies the IP address of the IKE remote node
     * 
     */
    public Output<String> remoteAddress() {
        return this.remoteAddress;
    }

    /**
     * Specifies the replay window size of the IPsec SAs negotiated with the IKE remote node
     * 
     */
    @Import(name="replayWindowSize")
    private @Nullable Output<Integer> replayWindowSize;

    /**
     * @return Specifies the replay window size of the IPsec SAs negotiated with the IKE remote node
     * 
     */
    public Optional<Output<Integer>> replayWindowSize() {
        return Optional.ofNullable(this.replayWindowSize);
    }

    /**
     * Enables or disables this IKE remote node
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Enables or disables this IKE remote node
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Specifies the names of the traffic-selector objects associated with this ike-peer
     * 
     */
    @Import(name="trafficSelectors")
    private @Nullable Output<List<String>> trafficSelectors;

    /**
     * @return Specifies the names of the traffic-selector objects associated with this ike-peer
     * 
     */
    public Optional<Output<List<String>>> trafficSelectors() {
        return Optional.ofNullable(this.trafficSelectors);
    }

    /**
     * Specifies whether to verify the certificate chain of the remote peer based on the trusted certificates in ca-cert-file
     * 
     */
    @Import(name="verifyCert")
    private @Nullable Output<String> verifyCert;

    /**
     * @return Specifies whether to verify the certificate chain of the remote peer based on the trusted certificates in ca-cert-file
     * 
     */
    public Optional<Output<String>> verifyCert() {
        return Optional.ofNullable(this.verifyCert);
    }

    /**
     * Specifies which version of IKE to be used
     * 
     */
    @Import(name="versions")
    private @Nullable Output<List<String>> versions;

    /**
     * @return Specifies which version of IKE to be used
     * 
     */
    public Optional<Output<List<String>>> versions() {
        return Optional.ofNullable(this.versions);
    }

    private NetIkePeerArgs() {}

    private NetIkePeerArgs(NetIkePeerArgs $) {
        this.appService = $.appService;
        this.caCertFile = $.caCertFile;
        this.crlFile = $.crlFile;
        this.description = $.description;
        this.dpdDelay = $.dpdDelay;
        this.generatePolicy = $.generatePolicy;
        this.lifetime = $.lifetime;
        this.mode = $.mode;
        this.myCertFile = $.myCertFile;
        this.myCertKeyFile = $.myCertKeyFile;
        this.myCertKeyPassphrase = $.myCertKeyPassphrase;
        this.myIdType = $.myIdType;
        this.myIdValue = $.myIdValue;
        this.name = $.name;
        this.natTraversal = $.natTraversal;
        this.passive = $.passive;
        this.peersCertFile = $.peersCertFile;
        this.peersCertType = $.peersCertType;
        this.peersIdType = $.peersIdType;
        this.peersIdValue = $.peersIdValue;
        this.phase1AuthMethod = $.phase1AuthMethod;
        this.phase1EncryptAlgorithm = $.phase1EncryptAlgorithm;
        this.phase1HashAlgorithm = $.phase1HashAlgorithm;
        this.phase1PerfectForwardSecrecy = $.phase1PerfectForwardSecrecy;
        this.presharedKey = $.presharedKey;
        this.presharedKeyEncrypted = $.presharedKeyEncrypted;
        this.prf = $.prf;
        this.proxySupport = $.proxySupport;
        this.remoteAddress = $.remoteAddress;
        this.replayWindowSize = $.replayWindowSize;
        this.state = $.state;
        this.trafficSelectors = $.trafficSelectors;
        this.verifyCert = $.verifyCert;
        this.versions = $.versions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetIkePeerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetIkePeerArgs $;

        public Builder() {
            $ = new NetIkePeerArgs();
        }

        public Builder(NetIkePeerArgs defaults) {
            $ = new NetIkePeerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appService The application service that the object belongs to
         * 
         * @return builder
         * 
         */
        public Builder appService(@Nullable Output<String> appService) {
            $.appService = appService;
            return this;
        }

        /**
         * @param appService The application service that the object belongs to
         * 
         * @return builder
         * 
         */
        public Builder appService(String appService) {
            return appService(Output.of(appService));
        }

        /**
         * @param caCertFile the trusted root and intermediate certificate authorities
         * 
         * @return builder
         * 
         */
        public Builder caCertFile(@Nullable Output<String> caCertFile) {
            $.caCertFile = caCertFile;
            return this;
        }

        /**
         * @param caCertFile the trusted root and intermediate certificate authorities
         * 
         * @return builder
         * 
         */
        public Builder caCertFile(String caCertFile) {
            return caCertFile(Output.of(caCertFile));
        }

        /**
         * @param crlFile Specifies the file name of the Certificate Revocation List. Only supported in IKEv1
         * 
         * @return builder
         * 
         */
        public Builder crlFile(@Nullable Output<String> crlFile) {
            $.crlFile = crlFile;
            return this;
        }

        /**
         * @param crlFile Specifies the file name of the Certificate Revocation List. Only supported in IKEv1
         * 
         * @return builder
         * 
         */
        public Builder crlFile(String crlFile) {
            return crlFile(Output.of(crlFile));
        }

        /**
         * @param description User defined description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description User defined description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dpdDelay Specifies the number of seconds between Dead Peer Detection messages
         * 
         * @return builder
         * 
         */
        public Builder dpdDelay(@Nullable Output<Integer> dpdDelay) {
            $.dpdDelay = dpdDelay;
            return this;
        }

        /**
         * @param dpdDelay Specifies the number of seconds between Dead Peer Detection messages
         * 
         * @return builder
         * 
         */
        public Builder dpdDelay(Integer dpdDelay) {
            return dpdDelay(Output.of(dpdDelay));
        }

        /**
         * @param generatePolicy Enable or disable the generation of Security Policy Database entries(SPD) when the device is the responder of the IKE remote node
         * 
         * @return builder
         * 
         */
        public Builder generatePolicy(@Nullable Output<String> generatePolicy) {
            $.generatePolicy = generatePolicy;
            return this;
        }

        /**
         * @param generatePolicy Enable or disable the generation of Security Policy Database entries(SPD) when the device is the responder of the IKE remote node
         * 
         * @return builder
         * 
         */
        public Builder generatePolicy(String generatePolicy) {
            return generatePolicy(Output.of(generatePolicy));
        }

        /**
         * @param lifetime Defines the lifetime in minutes of an IKE SA which will be proposed in the phase 1 negotiations
         * 
         * @return builder
         * 
         */
        public Builder lifetime(@Nullable Output<Integer> lifetime) {
            $.lifetime = lifetime;
            return this;
        }

        /**
         * @param lifetime Defines the lifetime in minutes of an IKE SA which will be proposed in the phase 1 negotiations
         * 
         * @return builder
         * 
         */
        public Builder lifetime(Integer lifetime) {
            return lifetime(Output.of(lifetime));
        }

        /**
         * @param mode Defines the exchange mode for phase 1 when racoon is the initiator, or the acceptable exchange mode when racoon is the responder
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Defines the exchange mode for phase 1 when racoon is the initiator, or the acceptable exchange mode when racoon is the responder
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param myCertFile Specifies the name of the certificate file object
         * 
         * @return builder
         * 
         */
        public Builder myCertFile(@Nullable Output<String> myCertFile) {
            $.myCertFile = myCertFile;
            return this;
        }

        /**
         * @param myCertFile Specifies the name of the certificate file object
         * 
         * @return builder
         * 
         */
        public Builder myCertFile(String myCertFile) {
            return myCertFile(Output.of(myCertFile));
        }

        /**
         * @param myCertKeyFile Specifies the name of the certificate key file object
         * 
         * @return builder
         * 
         */
        public Builder myCertKeyFile(@Nullable Output<String> myCertKeyFile) {
            $.myCertKeyFile = myCertKeyFile;
            return this;
        }

        /**
         * @param myCertKeyFile Specifies the name of the certificate key file object
         * 
         * @return builder
         * 
         */
        public Builder myCertKeyFile(String myCertKeyFile) {
            return myCertKeyFile(Output.of(myCertKeyFile));
        }

        /**
         * @param myCertKeyPassphrase Specifies the passphrase of the key used for my-cert-key-file
         * 
         * @return builder
         * 
         */
        public Builder myCertKeyPassphrase(@Nullable Output<String> myCertKeyPassphrase) {
            $.myCertKeyPassphrase = myCertKeyPassphrase;
            return this;
        }

        /**
         * @param myCertKeyPassphrase Specifies the passphrase of the key used for my-cert-key-file
         * 
         * @return builder
         * 
         */
        public Builder myCertKeyPassphrase(String myCertKeyPassphrase) {
            return myCertKeyPassphrase(Output.of(myCertKeyPassphrase));
        }

        /**
         * @param myIdType Specifies the identifier type sent to the remote host to use in the phase 1 negotiation
         * 
         * @return builder
         * 
         */
        public Builder myIdType(@Nullable Output<String> myIdType) {
            $.myIdType = myIdType;
            return this;
        }

        /**
         * @param myIdType Specifies the identifier type sent to the remote host to use in the phase 1 negotiation
         * 
         * @return builder
         * 
         */
        public Builder myIdType(String myIdType) {
            return myIdType(Output.of(myIdType));
        }

        /**
         * @param myIdValue Specifies the identifier value sent to the remote host in the phase 1 negotiation
         * 
         * @return builder
         * 
         */
        public Builder myIdValue(@Nullable Output<String> myIdValue) {
            $.myIdValue = myIdValue;
            return this;
        }

        /**
         * @param myIdValue Specifies the identifier value sent to the remote host in the phase 1 negotiation
         * 
         * @return builder
         * 
         */
        public Builder myIdValue(String myIdValue) {
            return myIdValue(Output.of(myIdValue));
        }

        /**
         * @param name Name of the ike_peer
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the ike_peer
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param natTraversal Enables use of the NAT-Traversal IPsec extension
         * 
         * @return builder
         * 
         */
        public Builder natTraversal(@Nullable Output<String> natTraversal) {
            $.natTraversal = natTraversal;
            return this;
        }

        /**
         * @param natTraversal Enables use of the NAT-Traversal IPsec extension
         * 
         * @return builder
         * 
         */
        public Builder natTraversal(String natTraversal) {
            return natTraversal(Output.of(natTraversal));
        }

        /**
         * @param passive Specifies whether the local IKE agent can be the initiator of the IKE negotiation with this ike-peer
         * 
         * @return builder
         * 
         */
        public Builder passive(@Nullable Output<String> passive) {
            $.passive = passive;
            return this;
        }

        /**
         * @param passive Specifies whether the local IKE agent can be the initiator of the IKE negotiation with this ike-peer
         * 
         * @return builder
         * 
         */
        public Builder passive(String passive) {
            return passive(Output.of(passive));
        }

        /**
         * @param peersCertFile Specifies the peer’s certificate for authentication
         * 
         * @return builder
         * 
         */
        public Builder peersCertFile(@Nullable Output<String> peersCertFile) {
            $.peersCertFile = peersCertFile;
            return this;
        }

        /**
         * @param peersCertFile Specifies the peer’s certificate for authentication
         * 
         * @return builder
         * 
         */
        public Builder peersCertFile(String peersCertFile) {
            return peersCertFile(Output.of(peersCertFile));
        }

        /**
         * @param peersCertType Specifies that the only peers-cert-type supported is certfile
         * 
         * @return builder
         * 
         */
        public Builder peersCertType(@Nullable Output<String> peersCertType) {
            $.peersCertType = peersCertType;
            return this;
        }

        /**
         * @param peersCertType Specifies that the only peers-cert-type supported is certfile
         * 
         * @return builder
         * 
         */
        public Builder peersCertType(String peersCertType) {
            return peersCertType(Output.of(peersCertType));
        }

        /**
         * @param peersIdType Specifies which of address, fqdn, asn1dn, user-fqdn or keyid-tag types to use as peers-id-type
         * 
         * @return builder
         * 
         */
        public Builder peersIdType(@Nullable Output<String> peersIdType) {
            $.peersIdType = peersIdType;
            return this;
        }

        /**
         * @param peersIdType Specifies which of address, fqdn, asn1dn, user-fqdn or keyid-tag types to use as peers-id-type
         * 
         * @return builder
         * 
         */
        public Builder peersIdType(String peersIdType) {
            return peersIdType(Output.of(peersIdType));
        }

        /**
         * @param peersIdValue Specifies the peer’s identifier to be received
         * 
         * @return builder
         * 
         */
        public Builder peersIdValue(@Nullable Output<String> peersIdValue) {
            $.peersIdValue = peersIdValue;
            return this;
        }

        /**
         * @param peersIdValue Specifies the peer’s identifier to be received
         * 
         * @return builder
         * 
         */
        public Builder peersIdValue(String peersIdValue) {
            return peersIdValue(Output.of(peersIdValue));
        }

        /**
         * @param phase1AuthMethod Specifies the authentication method used for phase 1 negotiation
         * 
         * @return builder
         * 
         */
        public Builder phase1AuthMethod(@Nullable Output<String> phase1AuthMethod) {
            $.phase1AuthMethod = phase1AuthMethod;
            return this;
        }

        /**
         * @param phase1AuthMethod Specifies the authentication method used for phase 1 negotiation
         * 
         * @return builder
         * 
         */
        public Builder phase1AuthMethod(String phase1AuthMethod) {
            return phase1AuthMethod(Output.of(phase1AuthMethod));
        }

        /**
         * @param phase1EncryptAlgorithm Specifies the encryption algorithm used for the isakmp phase 1 negotiation
         * 
         * @return builder
         * 
         */
        public Builder phase1EncryptAlgorithm(@Nullable Output<String> phase1EncryptAlgorithm) {
            $.phase1EncryptAlgorithm = phase1EncryptAlgorithm;
            return this;
        }

        /**
         * @param phase1EncryptAlgorithm Specifies the encryption algorithm used for the isakmp phase 1 negotiation
         * 
         * @return builder
         * 
         */
        public Builder phase1EncryptAlgorithm(String phase1EncryptAlgorithm) {
            return phase1EncryptAlgorithm(Output.of(phase1EncryptAlgorithm));
        }

        /**
         * @param phase1HashAlgorithm Defines the hash algorithm used for the isakmp phase 1 negotiation
         * 
         * @return builder
         * 
         */
        public Builder phase1HashAlgorithm(@Nullable Output<String> phase1HashAlgorithm) {
            $.phase1HashAlgorithm = phase1HashAlgorithm;
            return this;
        }

        /**
         * @param phase1HashAlgorithm Defines the hash algorithm used for the isakmp phase 1 negotiation
         * 
         * @return builder
         * 
         */
        public Builder phase1HashAlgorithm(String phase1HashAlgorithm) {
            return phase1HashAlgorithm(Output.of(phase1HashAlgorithm));
        }

        /**
         * @param phase1PerfectForwardSecrecy Defines the Diffie-Hellman group for key exchange to provide perfect forward secrecy
         * 
         * @return builder
         * 
         */
        public Builder phase1PerfectForwardSecrecy(@Nullable Output<String> phase1PerfectForwardSecrecy) {
            $.phase1PerfectForwardSecrecy = phase1PerfectForwardSecrecy;
            return this;
        }

        /**
         * @param phase1PerfectForwardSecrecy Defines the Diffie-Hellman group for key exchange to provide perfect forward secrecy
         * 
         * @return builder
         * 
         */
        public Builder phase1PerfectForwardSecrecy(String phase1PerfectForwardSecrecy) {
            return phase1PerfectForwardSecrecy(Output.of(phase1PerfectForwardSecrecy));
        }

        /**
         * @param presharedKey Specifies the preshared key for ISAKMP SAs
         * 
         * @return builder
         * 
         */
        public Builder presharedKey(@Nullable Output<String> presharedKey) {
            $.presharedKey = presharedKey;
            return this;
        }

        /**
         * @param presharedKey Specifies the preshared key for ISAKMP SAs
         * 
         * @return builder
         * 
         */
        public Builder presharedKey(String presharedKey) {
            return presharedKey(Output.of(presharedKey));
        }

        /**
         * @param presharedKeyEncrypted Display the encrypted preshared-key for the IKE remote node
         * 
         * @return builder
         * 
         */
        public Builder presharedKeyEncrypted(@Nullable Output<String> presharedKeyEncrypted) {
            $.presharedKeyEncrypted = presharedKeyEncrypted;
            return this;
        }

        /**
         * @param presharedKeyEncrypted Display the encrypted preshared-key for the IKE remote node
         * 
         * @return builder
         * 
         */
        public Builder presharedKeyEncrypted(String presharedKeyEncrypted) {
            return presharedKeyEncrypted(Output.of(presharedKeyEncrypted));
        }

        /**
         * @param prf Specifies the pseudo-random function used to derive keying material for all cryptographic operations
         * 
         * @return builder
         * 
         */
        public Builder prf(@Nullable Output<String> prf) {
            $.prf = prf;
            return this;
        }

        /**
         * @param prf Specifies the pseudo-random function used to derive keying material for all cryptographic operations
         * 
         * @return builder
         * 
         */
        public Builder prf(String prf) {
            return prf(Output.of(prf));
        }

        /**
         * @param proxySupport If this value is enabled, both values of ID payloads in the phase 2 exchange are used as the addresses of end-point of IPsec-SAs
         * 
         * @return builder
         * 
         */
        public Builder proxySupport(@Nullable Output<String> proxySupport) {
            $.proxySupport = proxySupport;
            return this;
        }

        /**
         * @param proxySupport If this value is enabled, both values of ID payloads in the phase 2 exchange are used as the addresses of end-point of IPsec-SAs
         * 
         * @return builder
         * 
         */
        public Builder proxySupport(String proxySupport) {
            return proxySupport(Output.of(proxySupport));
        }

        /**
         * @param remoteAddress Specifies the IP address of the IKE remote node
         * 
         * @return builder
         * 
         */
        public Builder remoteAddress(Output<String> remoteAddress) {
            $.remoteAddress = remoteAddress;
            return this;
        }

        /**
         * @param remoteAddress Specifies the IP address of the IKE remote node
         * 
         * @return builder
         * 
         */
        public Builder remoteAddress(String remoteAddress) {
            return remoteAddress(Output.of(remoteAddress));
        }

        /**
         * @param replayWindowSize Specifies the replay window size of the IPsec SAs negotiated with the IKE remote node
         * 
         * @return builder
         * 
         */
        public Builder replayWindowSize(@Nullable Output<Integer> replayWindowSize) {
            $.replayWindowSize = replayWindowSize;
            return this;
        }

        /**
         * @param replayWindowSize Specifies the replay window size of the IPsec SAs negotiated with the IKE remote node
         * 
         * @return builder
         * 
         */
        public Builder replayWindowSize(Integer replayWindowSize) {
            return replayWindowSize(Output.of(replayWindowSize));
        }

        /**
         * @param state Enables or disables this IKE remote node
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Enables or disables this IKE remote node
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param trafficSelectors Specifies the names of the traffic-selector objects associated with this ike-peer
         * 
         * @return builder
         * 
         */
        public Builder trafficSelectors(@Nullable Output<List<String>> trafficSelectors) {
            $.trafficSelectors = trafficSelectors;
            return this;
        }

        /**
         * @param trafficSelectors Specifies the names of the traffic-selector objects associated with this ike-peer
         * 
         * @return builder
         * 
         */
        public Builder trafficSelectors(List<String> trafficSelectors) {
            return trafficSelectors(Output.of(trafficSelectors));
        }

        /**
         * @param trafficSelectors Specifies the names of the traffic-selector objects associated with this ike-peer
         * 
         * @return builder
         * 
         */
        public Builder trafficSelectors(String... trafficSelectors) {
            return trafficSelectors(List.of(trafficSelectors));
        }

        /**
         * @param verifyCert Specifies whether to verify the certificate chain of the remote peer based on the trusted certificates in ca-cert-file
         * 
         * @return builder
         * 
         */
        public Builder verifyCert(@Nullable Output<String> verifyCert) {
            $.verifyCert = verifyCert;
            return this;
        }

        /**
         * @param verifyCert Specifies whether to verify the certificate chain of the remote peer based on the trusted certificates in ca-cert-file
         * 
         * @return builder
         * 
         */
        public Builder verifyCert(String verifyCert) {
            return verifyCert(Output.of(verifyCert));
        }

        /**
         * @param versions Specifies which version of IKE to be used
         * 
         * @return builder
         * 
         */
        public Builder versions(@Nullable Output<List<String>> versions) {
            $.versions = versions;
            return this;
        }

        /**
         * @param versions Specifies which version of IKE to be used
         * 
         * @return builder
         * 
         */
        public Builder versions(List<String> versions) {
            return versions(Output.of(versions));
        }

        /**
         * @param versions Specifies which version of IKE to be used
         * 
         * @return builder
         * 
         */
        public Builder versions(String... versions) {
            return versions(List.of(versions));
        }

        public NetIkePeerArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.remoteAddress = Objects.requireNonNull($.remoteAddress, "expected parameter 'remoteAddress' to be non-null");
            return $;
        }
    }

}
