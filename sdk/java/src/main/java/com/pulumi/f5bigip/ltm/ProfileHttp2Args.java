// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProfileHttp2Args extends com.pulumi.resources.ResourceArgs {

    public static final ProfileHttp2Args Empty = new ProfileHttp2Args();

    /**
     * This setting specifies the condition that will cause the BIG-IP system to handle an incoming connection as an HTTP/2 connection, Allowed values : `[“alpn”]` (or) `[“always”]`.
     * 
     */
    @Import(name="activationModes")
    private @Nullable Output<List<String>> activationModes;

    /**
     * @return This setting specifies the condition that will cause the BIG-IP system to handle an incoming connection as an HTTP/2 connection, Allowed values : `[“alpn”]` (or) `[“always”]`.
     * 
     */
    public Optional<Output<List<String>>> activationModes() {
        return Optional.ofNullable(this.activationModes);
    }

    /**
     * Specifies how many concurrent requests are allowed to be outstanding on a single HTTP/2 connection.
     * 
     */
    @Import(name="concurrentStreamsPerConnection")
    private @Nullable Output<Integer> concurrentStreamsPerConnection;

    /**
     * @return Specifies how many concurrent requests are allowed to be outstanding on a single HTTP/2 connection.
     * 
     */
    public Optional<Output<Integer>> concurrentStreamsPerConnection() {
        return Optional.ofNullable(this.concurrentStreamsPerConnection);
    }

    /**
     * Specifies the number of seconds that a connection is idle before the connection is eligible for deletion.
     * 
     */
    @Import(name="connectionIdleTimeout")
    private @Nullable Output<Integer> connectionIdleTimeout;

    /**
     * @return Specifies the number of seconds that a connection is idle before the connection is eligible for deletion.
     * 
     */
    public Optional<Output<Integer>> connectionIdleTimeout() {
        return Optional.ofNullable(this.connectionIdleTimeout);
    }

    /**
     * Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
     * 
     */
    @Import(name="defaultsFrom")
    private @Nullable Output<String> defaultsFrom;

    /**
     * @return Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
     * 
     */
    public Optional<Output<String>> defaultsFrom() {
        return Optional.ofNullable(this.defaultsFrom);
    }

    /**
     * Enable or disable enforcement of TLS requirements,Allowed Values : `&#34;enabled&#34;/&#34;disabled&#34;` [Default:`&#34;enabled&#34;`].
     * 
     */
    @Import(name="enforceTlsRequirements")
    private @Nullable Output<String> enforceTlsRequirements;

    /**
     * @return Enable or disable enforcement of TLS requirements,Allowed Values : `&#34;enabled&#34;/&#34;disabled&#34;` [Default:`&#34;enabled&#34;`].
     * 
     */
    public Optional<Output<String>> enforceTlsRequirements() {
        return Optional.ofNullable(this.enforceTlsRequirements);
    }

    /**
     * The size of the data frames, in bytes, that the HTTP/2 protocol sends to the client. `Default: 2048`.
     * 
     */
    @Import(name="frameSize")
    private @Nullable Output<Integer> frameSize;

    /**
     * @return The size of the data frames, in bytes, that the HTTP/2 protocol sends to the client. `Default: 2048`.
     * 
     */
    public Optional<Output<Integer>> frameSize() {
        return Optional.ofNullable(this.frameSize);
    }

    /**
     * The size of the header table, in KB, for the HTTP headers that the HTTP/2 protocol compresses to save bandwidth.
     * 
     */
    @Import(name="headerTableSize")
    private @Nullable Output<Integer> headerTableSize;

    /**
     * @return The size of the header table, in KB, for the HTTP headers that the HTTP/2 protocol compresses to save bandwidth.
     * 
     */
    public Optional<Output<Integer>> headerTableSize() {
        return Optional.ofNullable(this.headerTableSize);
    }

    /**
     * Enable to include content-length in HTTP/2 headers,Default : disabled
     * 
     */
    @Import(name="includeContentLength")
    private @Nullable Output<String> includeContentLength;

    /**
     * @return Enable to include content-length in HTTP/2 headers,Default : disabled
     * 
     */
    public Optional<Output<String>> includeContentLength() {
        return Optional.ofNullable(this.includeContentLength);
    }

    /**
     * This setting specifies whether the BIG-IP system should add an HTTP header to the HTTP request to show that the request was received over HTTP/2, Allowed Values : `&#34;enabled&#34;/&#34;disabled&#34;` [ Default: `&#34;disabled&#34;`].
     * 
     */
    @Import(name="insertHeader")
    private @Nullable Output<String> insertHeader;

    /**
     * @return This setting specifies whether the BIG-IP system should add an HTTP header to the HTTP request to show that the request was received over HTTP/2, Allowed Values : `&#34;enabled&#34;/&#34;disabled&#34;` [ Default: `&#34;disabled&#34;`].
     * 
     */
    public Optional<Output<String>> insertHeader() {
        return Optional.ofNullable(this.insertHeader);
    }

    /**
     * This setting specifies the name of the header that the BIG-IP system will add to the HTTP request when the Insert Header is enabled.
     * 
     */
    @Import(name="insertHeaderName")
    private @Nullable Output<String> insertHeaderName;

    /**
     * @return This setting specifies the name of the header that the BIG-IP system will add to the HTTP request when the Insert Header is enabled.
     * 
     */
    public Optional<Output<String>> insertHeaderName() {
        return Optional.ofNullable(this.insertHeaderName);
    }

    /**
     * Name of Profile should be full path.The full path is the combination of the `partition + profile name`,For example `/Common/test-http2-profile`.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of Profile should be full path.The full path is the combination of the `partition + profile name`,For example `/Common/test-http2-profile`.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The flow-control size for upload streams, in KB. `Default: 32`.
     * 
     */
    @Import(name="receiveWindow")
    private @Nullable Output<Integer> receiveWindow;

    /**
     * @return The flow-control size for upload streams, in KB. `Default: 32`.
     * 
     */
    public Optional<Output<Integer>> receiveWindow() {
        return Optional.ofNullable(this.receiveWindow);
    }

    /**
     * The total size of combined data frames, in bytes, that the HTTP/2 protocol sends in a single write function. `Default: 16384`&#34;.
     * 
     */
    @Import(name="writeSize")
    private @Nullable Output<Integer> writeSize;

    /**
     * @return The total size of combined data frames, in bytes, that the HTTP/2 protocol sends in a single write function. `Default: 16384`&#34;.
     * 
     */
    public Optional<Output<Integer>> writeSize() {
        return Optional.ofNullable(this.writeSize);
    }

    private ProfileHttp2Args() {}

    private ProfileHttp2Args(ProfileHttp2Args $) {
        this.activationModes = $.activationModes;
        this.concurrentStreamsPerConnection = $.concurrentStreamsPerConnection;
        this.connectionIdleTimeout = $.connectionIdleTimeout;
        this.defaultsFrom = $.defaultsFrom;
        this.enforceTlsRequirements = $.enforceTlsRequirements;
        this.frameSize = $.frameSize;
        this.headerTableSize = $.headerTableSize;
        this.includeContentLength = $.includeContentLength;
        this.insertHeader = $.insertHeader;
        this.insertHeaderName = $.insertHeaderName;
        this.name = $.name;
        this.receiveWindow = $.receiveWindow;
        this.writeSize = $.writeSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProfileHttp2Args defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProfileHttp2Args $;

        public Builder() {
            $ = new ProfileHttp2Args();
        }

        public Builder(ProfileHttp2Args defaults) {
            $ = new ProfileHttp2Args(Objects.requireNonNull(defaults));
        }

        /**
         * @param activationModes This setting specifies the condition that will cause the BIG-IP system to handle an incoming connection as an HTTP/2 connection, Allowed values : `[“alpn”]` (or) `[“always”]`.
         * 
         * @return builder
         * 
         */
        public Builder activationModes(@Nullable Output<List<String>> activationModes) {
            $.activationModes = activationModes;
            return this;
        }

        /**
         * @param activationModes This setting specifies the condition that will cause the BIG-IP system to handle an incoming connection as an HTTP/2 connection, Allowed values : `[“alpn”]` (or) `[“always”]`.
         * 
         * @return builder
         * 
         */
        public Builder activationModes(List<String> activationModes) {
            return activationModes(Output.of(activationModes));
        }

        /**
         * @param activationModes This setting specifies the condition that will cause the BIG-IP system to handle an incoming connection as an HTTP/2 connection, Allowed values : `[“alpn”]` (or) `[“always”]`.
         * 
         * @return builder
         * 
         */
        public Builder activationModes(String... activationModes) {
            return activationModes(List.of(activationModes));
        }

        /**
         * @param concurrentStreamsPerConnection Specifies how many concurrent requests are allowed to be outstanding on a single HTTP/2 connection.
         * 
         * @return builder
         * 
         */
        public Builder concurrentStreamsPerConnection(@Nullable Output<Integer> concurrentStreamsPerConnection) {
            $.concurrentStreamsPerConnection = concurrentStreamsPerConnection;
            return this;
        }

        /**
         * @param concurrentStreamsPerConnection Specifies how many concurrent requests are allowed to be outstanding on a single HTTP/2 connection.
         * 
         * @return builder
         * 
         */
        public Builder concurrentStreamsPerConnection(Integer concurrentStreamsPerConnection) {
            return concurrentStreamsPerConnection(Output.of(concurrentStreamsPerConnection));
        }

        /**
         * @param connectionIdleTimeout Specifies the number of seconds that a connection is idle before the connection is eligible for deletion.
         * 
         * @return builder
         * 
         */
        public Builder connectionIdleTimeout(@Nullable Output<Integer> connectionIdleTimeout) {
            $.connectionIdleTimeout = connectionIdleTimeout;
            return this;
        }

        /**
         * @param connectionIdleTimeout Specifies the number of seconds that a connection is idle before the connection is eligible for deletion.
         * 
         * @return builder
         * 
         */
        public Builder connectionIdleTimeout(Integer connectionIdleTimeout) {
            return connectionIdleTimeout(Output.of(connectionIdleTimeout));
        }

        /**
         * @param defaultsFrom Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
         * 
         * @return builder
         * 
         */
        public Builder defaultsFrom(@Nullable Output<String> defaultsFrom) {
            $.defaultsFrom = defaultsFrom;
            return this;
        }

        /**
         * @param defaultsFrom Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
         * 
         * @return builder
         * 
         */
        public Builder defaultsFrom(String defaultsFrom) {
            return defaultsFrom(Output.of(defaultsFrom));
        }

        /**
         * @param enforceTlsRequirements Enable or disable enforcement of TLS requirements,Allowed Values : `&#34;enabled&#34;/&#34;disabled&#34;` [Default:`&#34;enabled&#34;`].
         * 
         * @return builder
         * 
         */
        public Builder enforceTlsRequirements(@Nullable Output<String> enforceTlsRequirements) {
            $.enforceTlsRequirements = enforceTlsRequirements;
            return this;
        }

        /**
         * @param enforceTlsRequirements Enable or disable enforcement of TLS requirements,Allowed Values : `&#34;enabled&#34;/&#34;disabled&#34;` [Default:`&#34;enabled&#34;`].
         * 
         * @return builder
         * 
         */
        public Builder enforceTlsRequirements(String enforceTlsRequirements) {
            return enforceTlsRequirements(Output.of(enforceTlsRequirements));
        }

        /**
         * @param frameSize The size of the data frames, in bytes, that the HTTP/2 protocol sends to the client. `Default: 2048`.
         * 
         * @return builder
         * 
         */
        public Builder frameSize(@Nullable Output<Integer> frameSize) {
            $.frameSize = frameSize;
            return this;
        }

        /**
         * @param frameSize The size of the data frames, in bytes, that the HTTP/2 protocol sends to the client. `Default: 2048`.
         * 
         * @return builder
         * 
         */
        public Builder frameSize(Integer frameSize) {
            return frameSize(Output.of(frameSize));
        }

        /**
         * @param headerTableSize The size of the header table, in KB, for the HTTP headers that the HTTP/2 protocol compresses to save bandwidth.
         * 
         * @return builder
         * 
         */
        public Builder headerTableSize(@Nullable Output<Integer> headerTableSize) {
            $.headerTableSize = headerTableSize;
            return this;
        }

        /**
         * @param headerTableSize The size of the header table, in KB, for the HTTP headers that the HTTP/2 protocol compresses to save bandwidth.
         * 
         * @return builder
         * 
         */
        public Builder headerTableSize(Integer headerTableSize) {
            return headerTableSize(Output.of(headerTableSize));
        }

        /**
         * @param includeContentLength Enable to include content-length in HTTP/2 headers,Default : disabled
         * 
         * @return builder
         * 
         */
        public Builder includeContentLength(@Nullable Output<String> includeContentLength) {
            $.includeContentLength = includeContentLength;
            return this;
        }

        /**
         * @param includeContentLength Enable to include content-length in HTTP/2 headers,Default : disabled
         * 
         * @return builder
         * 
         */
        public Builder includeContentLength(String includeContentLength) {
            return includeContentLength(Output.of(includeContentLength));
        }

        /**
         * @param insertHeader This setting specifies whether the BIG-IP system should add an HTTP header to the HTTP request to show that the request was received over HTTP/2, Allowed Values : `&#34;enabled&#34;/&#34;disabled&#34;` [ Default: `&#34;disabled&#34;`].
         * 
         * @return builder
         * 
         */
        public Builder insertHeader(@Nullable Output<String> insertHeader) {
            $.insertHeader = insertHeader;
            return this;
        }

        /**
         * @param insertHeader This setting specifies whether the BIG-IP system should add an HTTP header to the HTTP request to show that the request was received over HTTP/2, Allowed Values : `&#34;enabled&#34;/&#34;disabled&#34;` [ Default: `&#34;disabled&#34;`].
         * 
         * @return builder
         * 
         */
        public Builder insertHeader(String insertHeader) {
            return insertHeader(Output.of(insertHeader));
        }

        /**
         * @param insertHeaderName This setting specifies the name of the header that the BIG-IP system will add to the HTTP request when the Insert Header is enabled.
         * 
         * @return builder
         * 
         */
        public Builder insertHeaderName(@Nullable Output<String> insertHeaderName) {
            $.insertHeaderName = insertHeaderName;
            return this;
        }

        /**
         * @param insertHeaderName This setting specifies the name of the header that the BIG-IP system will add to the HTTP request when the Insert Header is enabled.
         * 
         * @return builder
         * 
         */
        public Builder insertHeaderName(String insertHeaderName) {
            return insertHeaderName(Output.of(insertHeaderName));
        }

        /**
         * @param name Name of Profile should be full path.The full path is the combination of the `partition + profile name`,For example `/Common/test-http2-profile`.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of Profile should be full path.The full path is the combination of the `partition + profile name`,For example `/Common/test-http2-profile`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param receiveWindow The flow-control size for upload streams, in KB. `Default: 32`.
         * 
         * @return builder
         * 
         */
        public Builder receiveWindow(@Nullable Output<Integer> receiveWindow) {
            $.receiveWindow = receiveWindow;
            return this;
        }

        /**
         * @param receiveWindow The flow-control size for upload streams, in KB. `Default: 32`.
         * 
         * @return builder
         * 
         */
        public Builder receiveWindow(Integer receiveWindow) {
            return receiveWindow(Output.of(receiveWindow));
        }

        /**
         * @param writeSize The total size of combined data frames, in bytes, that the HTTP/2 protocol sends in a single write function. `Default: 16384`&#34;.
         * 
         * @return builder
         * 
         */
        public Builder writeSize(@Nullable Output<Integer> writeSize) {
            $.writeSize = writeSize;
            return this;
        }

        /**
         * @param writeSize The total size of combined data frames, in bytes, that the HTTP/2 protocol sends in a single write function. `Default: 16384`&#34;.
         * 
         * @return builder
         * 
         */
        public Builder writeSize(Integer writeSize) {
            return writeSize(Output.of(writeSize));
        }

        public ProfileHttp2Args build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ProfileHttp2Args", "name");
            }
            return $;
        }
    }

}
