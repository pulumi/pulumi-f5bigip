// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.net.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.f5bigip.net.inputs.VlanInterfaceArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VlanState extends com.pulumi.resources.ResourceArgs {

    public static final VlanState Empty = new VlanState();

    /**
     * Specifies how the traffic on the VLAN will be disaggregated. The value selected determines the traffic disaggregation method. possible options: [`default`, `src-ip`, `dst-ip`]
     * 
     */
    @Import(name="cmpHash")
    private @Nullable Output<String> cmpHash;

    /**
     * @return Specifies how the traffic on the VLAN will be disaggregated. The value selected determines the traffic disaggregation method. possible options: [`default`, `src-ip`, `dst-ip`]
     * 
     */
    public Optional<Output<String>> cmpHash() {
        return Optional.ofNullable(this.cmpHash);
    }

    /**
     * Specifies which interfaces you want this VLAN to use for traffic management.
     * 
     */
    @Import(name="interfaces")
    private @Nullable Output<List<VlanInterfaceArgs>> interfaces;

    /**
     * @return Specifies which interfaces you want this VLAN to use for traffic management.
     * 
     */
    public Optional<Output<List<VlanInterfaceArgs>>> interfaces() {
        return Optional.ofNullable(this.interfaces);
    }

    /**
     * Specifies the maximum transmission unit (MTU) for traffic on this VLAN. The default value is `1500`.
     * 
     */
    @Import(name="mtu")
    private @Nullable Output<Integer> mtu;

    /**
     * @return Specifies the maximum transmission unit (MTU) for traffic on this VLAN. The default value is `1500`.
     * 
     */
    public Optional<Output<Integer>> mtu() {
        return Optional.ofNullable(this.mtu);
    }

    /**
     * Name of the vlan
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the vlan
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies a number that the system adds into the header of any frame passing through the VLAN.
     * 
     */
    @Import(name="tag")
    private @Nullable Output<Integer> tag;

    /**
     * @return Specifies a number that the system adds into the header of any frame passing through the VLAN.
     * 
     */
    public Optional<Output<Integer>> tag() {
        return Optional.ofNullable(this.tag);
    }

    private VlanState() {}

    private VlanState(VlanState $) {
        this.cmpHash = $.cmpHash;
        this.interfaces = $.interfaces;
        this.mtu = $.mtu;
        this.name = $.name;
        this.tag = $.tag;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VlanState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VlanState $;

        public Builder() {
            $ = new VlanState();
        }

        public Builder(VlanState defaults) {
            $ = new VlanState(Objects.requireNonNull(defaults));
        }

        /**
         * @param cmpHash Specifies how the traffic on the VLAN will be disaggregated. The value selected determines the traffic disaggregation method. possible options: [`default`, `src-ip`, `dst-ip`]
         * 
         * @return builder
         * 
         */
        public Builder cmpHash(@Nullable Output<String> cmpHash) {
            $.cmpHash = cmpHash;
            return this;
        }

        /**
         * @param cmpHash Specifies how the traffic on the VLAN will be disaggregated. The value selected determines the traffic disaggregation method. possible options: [`default`, `src-ip`, `dst-ip`]
         * 
         * @return builder
         * 
         */
        public Builder cmpHash(String cmpHash) {
            return cmpHash(Output.of(cmpHash));
        }

        /**
         * @param interfaces Specifies which interfaces you want this VLAN to use for traffic management.
         * 
         * @return builder
         * 
         */
        public Builder interfaces(@Nullable Output<List<VlanInterfaceArgs>> interfaces) {
            $.interfaces = interfaces;
            return this;
        }

        /**
         * @param interfaces Specifies which interfaces you want this VLAN to use for traffic management.
         * 
         * @return builder
         * 
         */
        public Builder interfaces(List<VlanInterfaceArgs> interfaces) {
            return interfaces(Output.of(interfaces));
        }

        /**
         * @param interfaces Specifies which interfaces you want this VLAN to use for traffic management.
         * 
         * @return builder
         * 
         */
        public Builder interfaces(VlanInterfaceArgs... interfaces) {
            return interfaces(List.of(interfaces));
        }

        /**
         * @param mtu Specifies the maximum transmission unit (MTU) for traffic on this VLAN. The default value is `1500`.
         * 
         * @return builder
         * 
         */
        public Builder mtu(@Nullable Output<Integer> mtu) {
            $.mtu = mtu;
            return this;
        }

        /**
         * @param mtu Specifies the maximum transmission unit (MTU) for traffic on this VLAN. The default value is `1500`.
         * 
         * @return builder
         * 
         */
        public Builder mtu(Integer mtu) {
            return mtu(Output.of(mtu));
        }

        /**
         * @param name Name of the vlan
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the vlan
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tag Specifies a number that the system adds into the header of any frame passing through the VLAN.
         * 
         * @return builder
         * 
         */
        public Builder tag(@Nullable Output<Integer> tag) {
            $.tag = tag;
            return this;
        }

        /**
         * @param tag Specifies a number that the system adds into the header of any frame passing through the VLAN.
         * 
         * @return builder
         * 
         */
        public Builder tag(Integer tag) {
            return tag(Output.of(tag));
        }

        public VlanState build() {
            return $;
        }
    }

}
