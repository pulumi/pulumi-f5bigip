// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.sys;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.f5bigip.Utilities;
import com.pulumi.f5bigip.sys.IfileArgs;
import com.pulumi.f5bigip.sys.inputs.IfileState;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Import
 * 
 * System iFiles can be imported using their full path:
 * 
 * bash
 * 
 * ```sh
 * $ pulumi import f5bigip:sys/ifile:Ifile example /Common/my-ifile
 * ```
 * 
 * For iFiles with sub-paths:
 * 
 * bash
 * 
 * ```sh
 * $ pulumi import f5bigip:sys/ifile:Ifile example /Common/templates/my-ifile
 * ```
 * 
 */
@ResourceType(type="f5bigip:sys/ifile:Ifile")
public class Ifile extends com.pulumi.resources.CustomResource {
    /**
     * MD5 checksum of the iFile content, automatically calculated by BIG-IP.
     * 
     */
    @Export(name="checksum", refs={String.class}, tree="[0]")
    private Output<String> checksum;

    /**
     * @return MD5 checksum of the iFile content, automatically calculated by BIG-IP.
     * 
     */
    public Output<String> checksum() {
        return this.checksum;
    }
    /**
     * The content of the iFile. This can be inline text, file content loaded with `file()`, or dynamically generated content. This field is marked as sensitive.
     * 
     */
    @Export(name="content", refs={String.class}, tree="[0]")
    private Output<String> content;

    /**
     * @return The content of the iFile. This can be inline text, file content loaded with `file()`, or dynamically generated content. This field is marked as sensitive.
     * 
     */
    public Output<String> content() {
        return this.content;
    }
    /**
     * Name of the system iFile to be created on BIG-IP. Changing this forces a new resource to be created.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the system iFile to be created on BIG-IP. Changing this forces a new resource to be created.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Partition where the iFile will be stored. Defaults to `Common`.
     * 
     */
    @Export(name="partition", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> partition;

    /**
     * @return Partition where the iFile will be stored. Defaults to `Common`.
     * 
     */
    public Output<Optional<String>> partition() {
        return Codegen.optional(this.partition);
    }
    /**
     * Size of the iFile content in bytes.
     * 
     */
    @Export(name="size", refs={Integer.class}, tree="[0]")
    private Output<Integer> size;

    /**
     * @return Size of the iFile content in bytes.
     * 
     */
    public Output<Integer> size() {
        return this.size;
    }
    /**
     * Subdirectory within the partition for organizing iFiles hierarchically.
     * 
     */
    @Export(name="subPath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> subPath;

    /**
     * @return Subdirectory within the partition for organizing iFiles hierarchically.
     * 
     */
    public Output<Optional<String>> subPath() {
        return Codegen.optional(this.subPath);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Ifile(java.lang.String name) {
        this(name, IfileArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Ifile(java.lang.String name, IfileArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Ifile(java.lang.String name, IfileArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("f5bigip:sys/ifile:Ifile", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Ifile(java.lang.String name, Output<java.lang.String> id, @Nullable IfileState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("f5bigip:sys/ifile:Ifile", name, state, makeResourceOptions(options, id), false);
    }

    private static IfileArgs makeArgs(IfileArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? IfileArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "content"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Ifile get(java.lang.String name, Output<java.lang.String> id, @Nullable IfileState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Ifile(name, id, state, options);
    }
}
