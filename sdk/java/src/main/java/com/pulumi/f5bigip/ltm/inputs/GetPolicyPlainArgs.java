// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.f5bigip.ltm.inputs.GetPolicyRule;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPolicyPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPolicyPlainArgs Empty = new GetPolicyPlainArgs();

    /**
     * Specifies the controls.
     * 
     */
    @Import(name="controls")
    private @Nullable List<String> controls;

    /**
     * @return Specifies the controls.
     * 
     */
    public Optional<List<String>> controls() {
        return Optional.ofNullable(this.controls);
    }

    /**
     * Name of the policy which includes partion ( /partition/policy-name )
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Name of the policy which includes partion ( /partition/policy-name )
     * 
     */
    public String name() {
        return this.name;
    }

    @Import(name="publishedCopy")
    private @Nullable String publishedCopy;

    public Optional<String> publishedCopy() {
        return Optional.ofNullable(this.publishedCopy);
    }

    /**
     * Specifies the protocol.
     * 
     */
    @Import(name="requires")
    private @Nullable List<String> requires;

    /**
     * @return Specifies the protocol.
     * 
     */
    public Optional<List<String>> requires() {
        return Optional.ofNullable(this.requires);
    }

    /**
     * Rules defined in the policy.
     * 
     */
    @Import(name="rules")
    private @Nullable List<GetPolicyRule> rules;

    /**
     * @return Rules defined in the policy.
     * 
     */
    public Optional<List<GetPolicyRule>> rules() {
        return Optional.ofNullable(this.rules);
    }

    /**
     * Specifies the match strategy.
     * 
     */
    @Import(name="strategy")
    private @Nullable String strategy;

    /**
     * @return Specifies the match strategy.
     * 
     */
    public Optional<String> strategy() {
        return Optional.ofNullable(this.strategy);
    }

    private GetPolicyPlainArgs() {}

    private GetPolicyPlainArgs(GetPolicyPlainArgs $) {
        this.controls = $.controls;
        this.name = $.name;
        this.publishedCopy = $.publishedCopy;
        this.requires = $.requires;
        this.rules = $.rules;
        this.strategy = $.strategy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPolicyPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPolicyPlainArgs $;

        public Builder() {
            $ = new GetPolicyPlainArgs();
        }

        public Builder(GetPolicyPlainArgs defaults) {
            $ = new GetPolicyPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param controls Specifies the controls.
         * 
         * @return builder
         * 
         */
        public Builder controls(@Nullable List<String> controls) {
            $.controls = controls;
            return this;
        }

        /**
         * @param controls Specifies the controls.
         * 
         * @return builder
         * 
         */
        public Builder controls(String... controls) {
            return controls(List.of(controls));
        }

        /**
         * @param name Name of the policy which includes partion ( /partition/policy-name )
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder publishedCopy(@Nullable String publishedCopy) {
            $.publishedCopy = publishedCopy;
            return this;
        }

        /**
         * @param requires Specifies the protocol.
         * 
         * @return builder
         * 
         */
        public Builder requires(@Nullable List<String> requires) {
            $.requires = requires;
            return this;
        }

        /**
         * @param requires Specifies the protocol.
         * 
         * @return builder
         * 
         */
        public Builder requires(String... requires) {
            return requires(List.of(requires));
        }

        /**
         * @param rules Rules defined in the policy.
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable List<GetPolicyRule> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules Rules defined in the policy.
         * 
         * @return builder
         * 
         */
        public Builder rules(GetPolicyRule... rules) {
            return rules(List.of(rules));
        }

        /**
         * @param strategy Specifies the match strategy.
         * 
         * @return builder
         * 
         */
        public Builder strategy(@Nullable String strategy) {
            $.strategy = strategy;
            return this;
        }

        public GetPolicyPlainArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetPolicyPlainArgs", "name");
            }
            return $;
        }
    }

}
