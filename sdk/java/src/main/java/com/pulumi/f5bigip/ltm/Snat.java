// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.f5bigip.Utilities;
import com.pulumi.f5bigip.ltm.SnatArgs;
import com.pulumi.f5bigip.ltm.inputs.SnatState;
import com.pulumi.f5bigip.ltm.outputs.SnatOrigin;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * `f5bigip.ltm.Snat` Manages a SNAT configuration
 * 
 * For resources should be named with their `full path`. The full path is the combination of the `partition + name` of the resource.For example `/Common/test-snat`.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.f5bigip.ltm.Snat;
 * import com.pulumi.f5bigip.ltm.SnatArgs;
 * import com.pulumi.f5bigip.ltm.inputs.SnatOriginArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test_snat = new Snat(&#34;test-snat&#34;, SnatArgs.builder()        
 *             .name(&#34;/Common/test-snat&#34;)
 *             .origins(SnatOriginArgs.builder()
 *                 .name(&#34;0.0.0.0/0&#34;)
 *                 .build())
 *             .sourceport(&#34;preserve&#34;)
 *             .translation(&#34;/Common/136.1.1.2&#34;)
 *             .vlans(&#34;/Common/internal&#34;)
 *             .vlansdisabled(false)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="f5bigip:ltm/snat:Snat")
public class Snat extends com.pulumi.resources.CustomResource {
    /**
     * Specifies whether to automatically map last hop for pools or not. The default is to use next level&#39;s default.
     * 
     */
    @Export(name="autolasthop", refs={String.class}, tree="[0]")
    private Output<String> autolasthop;

    /**
     * @return Specifies whether to automatically map last hop for pools or not. The default is to use next level&#39;s default.
     * 
     */
    public Output<String> autolasthop() {
        return this.autolasthop;
    }
    /**
     * Fullpath
     * 
     */
    @Export(name="fullPath", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> fullPath;

    /**
     * @return Fullpath
     * 
     */
    public Output<Optional<String>> fullPath() {
        return Codegen.optional(this.fullPath);
    }
    /**
     * Enables or disables mirroring of SNAT connections.
     * 
     */
    @Export(name="mirror", refs={String.class}, tree="[0]")
    private Output<String> mirror;

    /**
     * @return Enables or disables mirroring of SNAT connections.
     * 
     */
    public Output<String> mirror() {
        return this.mirror;
    }
    /**
     * Name of the SNAT, name of SNAT should be full path. Full path is the combination of the `partition + SNAT name`,For example `/Common/test-snat`.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the SNAT, name of SNAT should be full path. Full path is the combination of the `partition + SNAT name`,For example `/Common/test-snat`.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Specifies, for each SNAT that you create, the origin addresses that are to be members of that SNAT. Specify origin addresses by their IP addresses and service ports
     * 
     */
    @Export(name="origins", refs={List.class,SnatOrigin.class}, tree="[0,1]")
    private Output<List<SnatOrigin>> origins;

    /**
     * @return Specifies, for each SNAT that you create, the origin addresses that are to be members of that SNAT. Specify origin addresses by their IP addresses and service ports
     * 
     */
    public Output<List<SnatOrigin>> origins() {
        return this.origins;
    }
    /**
     * Partition or path to which the SNAT belongs
     * 
     */
    @Export(name="partition", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> partition;

    /**
     * @return Partition or path to which the SNAT belongs
     * 
     */
    public Output<Optional<String>> partition() {
        return Codegen.optional(this.partition);
    }
    /**
     * Specifies the name of a SNAT pool. You can only use this option when `automap` and `translation` are not used.
     * 
     */
    @Export(name="snatpool", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> snatpool;

    /**
     * @return Specifies the name of a SNAT pool. You can only use this option when `automap` and `translation` are not used.
     * 
     */
    public Output<Optional<String>> snatpool() {
        return Codegen.optional(this.snatpool);
    }
    /**
     * Specifies how the SNAT object handles the client&#39;s source port. The default is `preserve`.
     * 
     */
    @Export(name="sourceport", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceport;

    /**
     * @return Specifies how the SNAT object handles the client&#39;s source port. The default is `preserve`.
     * 
     */
    public Output<Optional<String>> sourceport() {
        return Codegen.optional(this.sourceport);
    }
    /**
     * Specifies the IP address configured for translation. Note that translated addresses are outside the traffic management system. You can only use this option when `automap` and `snatpool` are not used.
     * 
     */
    @Export(name="translation", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> translation;

    /**
     * @return Specifies the IP address configured for translation. Note that translated addresses are outside the traffic management system. You can only use this option when `automap` and `snatpool` are not used.
     * 
     */
    public Output<Optional<String>> translation() {
        return Codegen.optional(this.translation);
    }
    /**
     * Specifies the available VLANs or tunnels and those for which the SNAT is enabled or disabled.
     * 
     */
    @Export(name="vlans", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> vlans;

    /**
     * @return Specifies the available VLANs or tunnels and those for which the SNAT is enabled or disabled.
     * 
     */
    public Output<Optional<List<String>>> vlans() {
        return Codegen.optional(this.vlans);
    }
    /**
     * Specifies the VLANs or tunnels for which the SNAT is enabled or disabled. The default is `true`, vlandisabled on VLANS specified by `vlans`,if set to `false` vlanEnabled set on VLANS specified by `vlans` .
     * 
     */
    @Export(name="vlansdisabled", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> vlansdisabled;

    /**
     * @return Specifies the VLANs or tunnels for which the SNAT is enabled or disabled. The default is `true`, vlandisabled on VLANS specified by `vlans`,if set to `false` vlanEnabled set on VLANS specified by `vlans` .
     * 
     */
    public Output<Optional<Boolean>> vlansdisabled() {
        return Codegen.optional(this.vlansdisabled);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Snat(String name) {
        this(name, SnatArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Snat(String name, SnatArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Snat(String name, SnatArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("f5bigip:ltm/snat:Snat", name, args == null ? SnatArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Snat(String name, Output<String> id, @Nullable SnatState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("f5bigip:ltm/snat:Snat", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Snat get(String name, Output<String> id, @Nullable SnatState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Snat(name, id, state, options);
    }
}
