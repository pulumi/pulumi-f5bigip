// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.fast.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetConsulServiceDiscoveryArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetConsulServiceDiscoveryArgs Empty = new GetConsulServiceDiscoveryArgs();

    /**
     * (`optional`,type `string`)Specifies whether to look for public or private IP addresses,default `private`.
     * 
     */
    @Import(name="addressRealm")
    private @Nullable Output<String> addressRealm;

    /**
     * @return (`optional`,type `string`)Specifies whether to look for public or private IP addresses,default `private`.
     * 
     */
    public Optional<Output<String>> addressRealm() {
        return Optional.ofNullable(this.addressRealm);
    }

    /**
     * (`optional`,type `bool`) Specifies whether you are updating your credentials,default `false`.
     * 
     */
    @Import(name="credentialUpdate")
    private @Nullable Output<Boolean> credentialUpdate;

    /**
     * @return (`optional`,type `bool`) Specifies whether you are updating your credentials,default `false`.
     * 
     */
    public Optional<Output<Boolean>> credentialUpdate() {
        return Optional.ofNullable(this.credentialUpdate);
    }

    /**
     * (`optional`,type `string`) Base 64 encoded bearer token to make requests to the Consul API. Will be stored in the declaration in an encrypted format.
     * 
     */
    @Import(name="encodedToken")
    private @Nullable Output<String> encodedToken;

    /**
     * @return (`optional`,type `string`) Base 64 encoded bearer token to make requests to the Consul API. Will be stored in the declaration in an encrypted format.
     * 
     */
    public Optional<Output<String>> encodedToken() {
        return Optional.ofNullable(this.encodedToken);
    }

    /**
     * (`optional`,type `string`)Custom JMESPath Query.
     * 
     */
    @Import(name="jmesPathQuery")
    private @Nullable Output<String> jmesPathQuery;

    /**
     * @return (`optional`,type `string`)Custom JMESPath Query.
     * 
     */
    public Optional<Output<String>> jmesPathQuery() {
        return Optional.ofNullable(this.jmesPathQuery);
    }

    /**
     * (`optional`,type `string`)Member is down when fewer than minimum monitors report it healthy.
     * 
     */
    @Import(name="minimumMonitors")
    private @Nullable Output<String> minimumMonitors;

    /**
     * @return (`optional`,type `string`)Member is down when fewer than minimum monitors report it healthy.
     * 
     */
    public Optional<Output<String>> minimumMonitors() {
        return Optional.ofNullable(this.minimumMonitors);
    }

    /**
     * (`optional`,type `int`)Port to be used for AWS service discovery,default `80`.
     * 
     */
    @Import(name="port", required=true)
    private Output<Integer> port;

    /**
     * @return (`optional`,type `int`)Port to be used for AWS service discovery,default `80`.
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }

    /**
     * (`optional`,type `bool`)If true, the server certificate is verified against the list of supplied/default CAs when making requests to the Consul API.
     * 
     */
    @Import(name="rejectUnauthorized")
    private @Nullable Output<Boolean> rejectUnauthorized;

    /**
     * @return (`optional`,type `bool`)If true, the server certificate is verified against the list of supplied/default CAs when making requests to the Consul API.
     * 
     */
    public Optional<Output<Boolean>> rejectUnauthorized() {
        return Optional.ofNullable(this.rejectUnauthorized);
    }

    /**
     * (`optional`,type `string`)CA Bundle to validate server certificates.
     * 
     */
    @Import(name="trustCa")
    private @Nullable Output<String> trustCa;

    /**
     * @return (`optional`,type `string`)CA Bundle to validate server certificates.
     * 
     */
    public Optional<Output<String>> trustCa() {
        return Optional.ofNullable(this.trustCa);
    }

    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * (`optional`,type `string`)Action to take when node cannot be detected,default `remove`.
     * 
     */
    @Import(name="undetectableAction")
    private @Nullable Output<String> undetectableAction;

    /**
     * @return (`optional`,type `string`)Action to take when node cannot be detected,default `remove`.
     * 
     */
    public Optional<Output<String>> undetectableAction() {
        return Optional.ofNullable(this.undetectableAction);
    }

    /**
     * (`optional`,type `string`)Update interval for service discovery.
     * 
     */
    @Import(name="updateInterval")
    private @Nullable Output<String> updateInterval;

    /**
     * @return (`optional`,type `string`)Update interval for service discovery.
     * 
     */
    public Optional<Output<String>> updateInterval() {
        return Optional.ofNullable(this.updateInterval);
    }

    /**
     * (`Required`,type `string`) The location of the node data.
     * 
     */
    @Import(name="uri", required=true)
    private Output<String> uri;

    /**
     * @return (`Required`,type `string`) The location of the node data.
     * 
     */
    public Output<String> uri() {
        return this.uri;
    }

    private GetConsulServiceDiscoveryArgs() {}

    private GetConsulServiceDiscoveryArgs(GetConsulServiceDiscoveryArgs $) {
        this.addressRealm = $.addressRealm;
        this.credentialUpdate = $.credentialUpdate;
        this.encodedToken = $.encodedToken;
        this.jmesPathQuery = $.jmesPathQuery;
        this.minimumMonitors = $.minimumMonitors;
        this.port = $.port;
        this.rejectUnauthorized = $.rejectUnauthorized;
        this.trustCa = $.trustCa;
        this.type = $.type;
        this.undetectableAction = $.undetectableAction;
        this.updateInterval = $.updateInterval;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetConsulServiceDiscoveryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetConsulServiceDiscoveryArgs $;

        public Builder() {
            $ = new GetConsulServiceDiscoveryArgs();
        }

        public Builder(GetConsulServiceDiscoveryArgs defaults) {
            $ = new GetConsulServiceDiscoveryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addressRealm (`optional`,type `string`)Specifies whether to look for public or private IP addresses,default `private`.
         * 
         * @return builder
         * 
         */
        public Builder addressRealm(@Nullable Output<String> addressRealm) {
            $.addressRealm = addressRealm;
            return this;
        }

        /**
         * @param addressRealm (`optional`,type `string`)Specifies whether to look for public or private IP addresses,default `private`.
         * 
         * @return builder
         * 
         */
        public Builder addressRealm(String addressRealm) {
            return addressRealm(Output.of(addressRealm));
        }

        /**
         * @param credentialUpdate (`optional`,type `bool`) Specifies whether you are updating your credentials,default `false`.
         * 
         * @return builder
         * 
         */
        public Builder credentialUpdate(@Nullable Output<Boolean> credentialUpdate) {
            $.credentialUpdate = credentialUpdate;
            return this;
        }

        /**
         * @param credentialUpdate (`optional`,type `bool`) Specifies whether you are updating your credentials,default `false`.
         * 
         * @return builder
         * 
         */
        public Builder credentialUpdate(Boolean credentialUpdate) {
            return credentialUpdate(Output.of(credentialUpdate));
        }

        /**
         * @param encodedToken (`optional`,type `string`) Base 64 encoded bearer token to make requests to the Consul API. Will be stored in the declaration in an encrypted format.
         * 
         * @return builder
         * 
         */
        public Builder encodedToken(@Nullable Output<String> encodedToken) {
            $.encodedToken = encodedToken;
            return this;
        }

        /**
         * @param encodedToken (`optional`,type `string`) Base 64 encoded bearer token to make requests to the Consul API. Will be stored in the declaration in an encrypted format.
         * 
         * @return builder
         * 
         */
        public Builder encodedToken(String encodedToken) {
            return encodedToken(Output.of(encodedToken));
        }

        /**
         * @param jmesPathQuery (`optional`,type `string`)Custom JMESPath Query.
         * 
         * @return builder
         * 
         */
        public Builder jmesPathQuery(@Nullable Output<String> jmesPathQuery) {
            $.jmesPathQuery = jmesPathQuery;
            return this;
        }

        /**
         * @param jmesPathQuery (`optional`,type `string`)Custom JMESPath Query.
         * 
         * @return builder
         * 
         */
        public Builder jmesPathQuery(String jmesPathQuery) {
            return jmesPathQuery(Output.of(jmesPathQuery));
        }

        /**
         * @param minimumMonitors (`optional`,type `string`)Member is down when fewer than minimum monitors report it healthy.
         * 
         * @return builder
         * 
         */
        public Builder minimumMonitors(@Nullable Output<String> minimumMonitors) {
            $.minimumMonitors = minimumMonitors;
            return this;
        }

        /**
         * @param minimumMonitors (`optional`,type `string`)Member is down when fewer than minimum monitors report it healthy.
         * 
         * @return builder
         * 
         */
        public Builder minimumMonitors(String minimumMonitors) {
            return minimumMonitors(Output.of(minimumMonitors));
        }

        /**
         * @param port (`optional`,type `int`)Port to be used for AWS service discovery,default `80`.
         * 
         * @return builder
         * 
         */
        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port (`optional`,type `int`)Port to be used for AWS service discovery,default `80`.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param rejectUnauthorized (`optional`,type `bool`)If true, the server certificate is verified against the list of supplied/default CAs when making requests to the Consul API.
         * 
         * @return builder
         * 
         */
        public Builder rejectUnauthorized(@Nullable Output<Boolean> rejectUnauthorized) {
            $.rejectUnauthorized = rejectUnauthorized;
            return this;
        }

        /**
         * @param rejectUnauthorized (`optional`,type `bool`)If true, the server certificate is verified against the list of supplied/default CAs when making requests to the Consul API.
         * 
         * @return builder
         * 
         */
        public Builder rejectUnauthorized(Boolean rejectUnauthorized) {
            return rejectUnauthorized(Output.of(rejectUnauthorized));
        }

        /**
         * @param trustCa (`optional`,type `string`)CA Bundle to validate server certificates.
         * 
         * @return builder
         * 
         */
        public Builder trustCa(@Nullable Output<String> trustCa) {
            $.trustCa = trustCa;
            return this;
        }

        /**
         * @param trustCa (`optional`,type `string`)CA Bundle to validate server certificates.
         * 
         * @return builder
         * 
         */
        public Builder trustCa(String trustCa) {
            return trustCa(Output.of(trustCa));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param undetectableAction (`optional`,type `string`)Action to take when node cannot be detected,default `remove`.
         * 
         * @return builder
         * 
         */
        public Builder undetectableAction(@Nullable Output<String> undetectableAction) {
            $.undetectableAction = undetectableAction;
            return this;
        }

        /**
         * @param undetectableAction (`optional`,type `string`)Action to take when node cannot be detected,default `remove`.
         * 
         * @return builder
         * 
         */
        public Builder undetectableAction(String undetectableAction) {
            return undetectableAction(Output.of(undetectableAction));
        }

        /**
         * @param updateInterval (`optional`,type `string`)Update interval for service discovery.
         * 
         * @return builder
         * 
         */
        public Builder updateInterval(@Nullable Output<String> updateInterval) {
            $.updateInterval = updateInterval;
            return this;
        }

        /**
         * @param updateInterval (`optional`,type `string`)Update interval for service discovery.
         * 
         * @return builder
         * 
         */
        public Builder updateInterval(String updateInterval) {
            return updateInterval(Output.of(updateInterval));
        }

        /**
         * @param uri (`Required`,type `string`) The location of the node data.
         * 
         * @return builder
         * 
         */
        public Builder uri(Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri (`Required`,type `string`) The location of the node data.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public GetConsulServiceDiscoveryArgs build() {
            $.port = Objects.requireNonNull($.port, "expected parameter 'port' to be non-null");
            $.uri = Objects.requireNonNull($.uri, "expected parameter 'uri' to be non-null");
            return $;
        }
    }

}
