// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FastHttpAppServiceDiscoveryArgs extends com.pulumi.resources.ResourceArgs {

    public static final FastHttpAppServiceDiscoveryArgs Empty = new FastHttpAppServiceDiscoveryArgs();

    /**
     * Specifies whether to look for public or private IP addresses. Default :`private`
     * 
     */
    @Import(name="sdAddressRealm")
    private @Nullable Output<String> sdAddressRealm;

    /**
     * @return Specifies whether to look for public or private IP addresses. Default :`private`
     * 
     */
    public Optional<Output<String>> sdAddressRealm() {
        return Optional.ofNullable(this.sdAddressRealm);
    }

    /**
     * Information for discovering AWS nodes that are not in the same region as your BIG-IP.
     * 
     */
    @Import(name="sdAwsAccessKey")
    private @Nullable Output<String> sdAwsAccessKey;

    /**
     * @return Information for discovering AWS nodes that are not in the same region as your BIG-IP.
     * 
     */
    public Optional<Output<String>> sdAwsAccessKey() {
        return Optional.ofNullable(this.sdAwsAccessKey);
    }

    /**
     * Empty string (default) means region in which ADC is running.
     * 
     */
    @Import(name="sdAwsRegion")
    private @Nullable Output<String> sdAwsRegion;

    /**
     * @return Empty string (default) means region in which ADC is running.
     * 
     */
    public Optional<Output<String>> sdAwsRegion() {
        return Optional.ofNullable(this.sdAwsRegion);
    }

    /**
     * Will be stored in the declaration as an encrypted string.
     * 
     */
    @Import(name="sdAwsSecretAccessKey")
    private @Nullable Output<String> sdAwsSecretAccessKey;

    /**
     * @return Will be stored in the declaration as an encrypted string.
     * 
     */
    public Optional<Output<String>> sdAwsSecretAccessKey() {
        return Optional.ofNullable(this.sdAwsSecretAccessKey);
    }

    /**
     * The tag key associated with the node to add to this pool.
     * 
     */
    @Import(name="sdAwsTagKey")
    private @Nullable Output<String> sdAwsTagKey;

    /**
     * @return The tag key associated with the node to add to this pool.
     * 
     */
    public Optional<Output<String>> sdAwsTagKey() {
        return Optional.ofNullable(this.sdAwsTagKey);
    }

    /**
     * The tag value associated with the node to add to this pool.
     * 
     */
    @Import(name="sdAwsTagVal")
    private @Nullable Output<String> sdAwsTagVal;

    /**
     * @return The tag value associated with the node to add to this pool.
     * 
     */
    public Optional<Output<String>> sdAwsTagVal() {
        return Optional.ofNullable(this.sdAwsTagVal);
    }

    /**
     * Azure Active Directory ID (AKA tenant ID).
     * 
     */
    @Import(name="sdAzureDirectoryId")
    private @Nullable Output<String> sdAzureDirectoryId;

    /**
     * @return Azure Active Directory ID (AKA tenant ID).
     * 
     */
    public Optional<Output<String>> sdAzureDirectoryId() {
        return Optional.ofNullable(this.sdAzureDirectoryId);
    }

    /**
     * Azure Resource Group name.
     * 
     */
    @Import(name="sdAzureResourceGroup")
    private @Nullable Output<String> sdAzureResourceGroup;

    /**
     * @return Azure Resource Group name.
     * 
     */
    public Optional<Output<String>> sdAzureResourceGroup() {
        return Optional.ofNullable(this.sdAzureResourceGroup);
    }

    /**
     * ID of resource to find nodes by.
     * 
     */
    @Import(name="sdAzureResourceId")
    private @Nullable Output<String> sdAzureResourceId;

    /**
     * @return ID of resource to find nodes by.
     * 
     */
    public Optional<Output<String>> sdAzureResourceId() {
        return Optional.ofNullable(this.sdAzureResourceId);
    }

    /**
     * Azure subscription ID.
     * 
     */
    @Import(name="sdAzureSubscriptionId")
    private @Nullable Output<String> sdAzureSubscriptionId;

    /**
     * @return Azure subscription ID.
     * 
     */
    public Optional<Output<String>> sdAzureSubscriptionId() {
        return Optional.ofNullable(this.sdAzureSubscriptionId);
    }

    /**
     * The tag key associated with the node to add to this pool.
     * 
     */
    @Import(name="sdAzureTagKey")
    private @Nullable Output<String> sdAzureTagKey;

    /**
     * @return The tag key associated with the node to add to this pool.
     * 
     */
    public Optional<Output<String>> sdAzureTagKey() {
        return Optional.ofNullable(this.sdAzureTagKey);
    }

    /**
     * The tag value associated with the node to add to this pool.
     * 
     */
    @Import(name="sdAzureTagVal")
    private @Nullable Output<String> sdAzureTagVal;

    /**
     * @return The tag value associated with the node to add to this pool.
     * 
     */
    public Optional<Output<String>> sdAzureTagVal() {
        return Optional.ofNullable(this.sdAzureTagVal);
    }

    /**
     * Empty string (default) means region in which ADC is running.
     * 
     */
    @Import(name="sdGceRegion")
    private @Nullable Output<String> sdGceRegion;

    /**
     * @return Empty string (default) means region in which ADC is running.
     * 
     */
    public Optional<Output<String>> sdGceRegion() {
        return Optional.ofNullable(this.sdGceRegion);
    }

    /**
     * The tag key associated with the node to add to this pool
     * 
     */
    @Import(name="sdGceTagKey")
    private @Nullable Output<String> sdGceTagKey;

    /**
     * @return The tag key associated with the node to add to this pool
     * 
     */
    public Optional<Output<String>> sdGceTagKey() {
        return Optional.ofNullable(this.sdGceTagKey);
    }

    /**
     * The tag value associated with the node to add to this pool.
     * 
     */
    @Import(name="sdGceTagVal")
    private @Nullable Output<String> sdGceTagVal;

    /**
     * @return The tag value associated with the node to add to this pool.
     * 
     */
    public Optional<Output<String>> sdGceTagVal() {
        return Optional.ofNullable(this.sdGceTagVal);
    }

    /**
     * port number of serviceport to be used for FAST-Generated Pool.
     * 
     */
    @Import(name="sdPort", required=true)
    private Output<Integer> sdPort;

    /**
     * @return port number of serviceport to be used for FAST-Generated Pool.
     * 
     */
    public Output<Integer> sdPort() {
        return this.sdPort;
    }

    /**
     * service discovery account type, options [`aws`,`azure`,`gce`]
     * 
     */
    @Import(name="sdType", required=true)
    private Output<String> sdType;

    /**
     * @return service discovery account type, options [`aws`,`azure`,`gce`]
     * 
     */
    public Output<String> sdType() {
        return this.sdType;
    }

    /**
     * Action to take when node cannot be detected. Default `remove`.
     * 
     */
    @Import(name="sdUndetectableAction")
    private @Nullable Output<String> sdUndetectableAction;

    /**
     * @return Action to take when node cannot be detected. Default `remove`.
     * 
     */
    public Optional<Output<String>> sdUndetectableAction() {
        return Optional.ofNullable(this.sdUndetectableAction);
    }

    private FastHttpAppServiceDiscoveryArgs() {}

    private FastHttpAppServiceDiscoveryArgs(FastHttpAppServiceDiscoveryArgs $) {
        this.sdAddressRealm = $.sdAddressRealm;
        this.sdAwsAccessKey = $.sdAwsAccessKey;
        this.sdAwsRegion = $.sdAwsRegion;
        this.sdAwsSecretAccessKey = $.sdAwsSecretAccessKey;
        this.sdAwsTagKey = $.sdAwsTagKey;
        this.sdAwsTagVal = $.sdAwsTagVal;
        this.sdAzureDirectoryId = $.sdAzureDirectoryId;
        this.sdAzureResourceGroup = $.sdAzureResourceGroup;
        this.sdAzureResourceId = $.sdAzureResourceId;
        this.sdAzureSubscriptionId = $.sdAzureSubscriptionId;
        this.sdAzureTagKey = $.sdAzureTagKey;
        this.sdAzureTagVal = $.sdAzureTagVal;
        this.sdGceRegion = $.sdGceRegion;
        this.sdGceTagKey = $.sdGceTagKey;
        this.sdGceTagVal = $.sdGceTagVal;
        this.sdPort = $.sdPort;
        this.sdType = $.sdType;
        this.sdUndetectableAction = $.sdUndetectableAction;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FastHttpAppServiceDiscoveryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FastHttpAppServiceDiscoveryArgs $;

        public Builder() {
            $ = new FastHttpAppServiceDiscoveryArgs();
        }

        public Builder(FastHttpAppServiceDiscoveryArgs defaults) {
            $ = new FastHttpAppServiceDiscoveryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param sdAddressRealm Specifies whether to look for public or private IP addresses. Default :`private`
         * 
         * @return builder
         * 
         */
        public Builder sdAddressRealm(@Nullable Output<String> sdAddressRealm) {
            $.sdAddressRealm = sdAddressRealm;
            return this;
        }

        /**
         * @param sdAddressRealm Specifies whether to look for public or private IP addresses. Default :`private`
         * 
         * @return builder
         * 
         */
        public Builder sdAddressRealm(String sdAddressRealm) {
            return sdAddressRealm(Output.of(sdAddressRealm));
        }

        /**
         * @param sdAwsAccessKey Information for discovering AWS nodes that are not in the same region as your BIG-IP.
         * 
         * @return builder
         * 
         */
        public Builder sdAwsAccessKey(@Nullable Output<String> sdAwsAccessKey) {
            $.sdAwsAccessKey = sdAwsAccessKey;
            return this;
        }

        /**
         * @param sdAwsAccessKey Information for discovering AWS nodes that are not in the same region as your BIG-IP.
         * 
         * @return builder
         * 
         */
        public Builder sdAwsAccessKey(String sdAwsAccessKey) {
            return sdAwsAccessKey(Output.of(sdAwsAccessKey));
        }

        /**
         * @param sdAwsRegion Empty string (default) means region in which ADC is running.
         * 
         * @return builder
         * 
         */
        public Builder sdAwsRegion(@Nullable Output<String> sdAwsRegion) {
            $.sdAwsRegion = sdAwsRegion;
            return this;
        }

        /**
         * @param sdAwsRegion Empty string (default) means region in which ADC is running.
         * 
         * @return builder
         * 
         */
        public Builder sdAwsRegion(String sdAwsRegion) {
            return sdAwsRegion(Output.of(sdAwsRegion));
        }

        /**
         * @param sdAwsSecretAccessKey Will be stored in the declaration as an encrypted string.
         * 
         * @return builder
         * 
         */
        public Builder sdAwsSecretAccessKey(@Nullable Output<String> sdAwsSecretAccessKey) {
            $.sdAwsSecretAccessKey = sdAwsSecretAccessKey;
            return this;
        }

        /**
         * @param sdAwsSecretAccessKey Will be stored in the declaration as an encrypted string.
         * 
         * @return builder
         * 
         */
        public Builder sdAwsSecretAccessKey(String sdAwsSecretAccessKey) {
            return sdAwsSecretAccessKey(Output.of(sdAwsSecretAccessKey));
        }

        /**
         * @param sdAwsTagKey The tag key associated with the node to add to this pool.
         * 
         * @return builder
         * 
         */
        public Builder sdAwsTagKey(@Nullable Output<String> sdAwsTagKey) {
            $.sdAwsTagKey = sdAwsTagKey;
            return this;
        }

        /**
         * @param sdAwsTagKey The tag key associated with the node to add to this pool.
         * 
         * @return builder
         * 
         */
        public Builder sdAwsTagKey(String sdAwsTagKey) {
            return sdAwsTagKey(Output.of(sdAwsTagKey));
        }

        /**
         * @param sdAwsTagVal The tag value associated with the node to add to this pool.
         * 
         * @return builder
         * 
         */
        public Builder sdAwsTagVal(@Nullable Output<String> sdAwsTagVal) {
            $.sdAwsTagVal = sdAwsTagVal;
            return this;
        }

        /**
         * @param sdAwsTagVal The tag value associated with the node to add to this pool.
         * 
         * @return builder
         * 
         */
        public Builder sdAwsTagVal(String sdAwsTagVal) {
            return sdAwsTagVal(Output.of(sdAwsTagVal));
        }

        /**
         * @param sdAzureDirectoryId Azure Active Directory ID (AKA tenant ID).
         * 
         * @return builder
         * 
         */
        public Builder sdAzureDirectoryId(@Nullable Output<String> sdAzureDirectoryId) {
            $.sdAzureDirectoryId = sdAzureDirectoryId;
            return this;
        }

        /**
         * @param sdAzureDirectoryId Azure Active Directory ID (AKA tenant ID).
         * 
         * @return builder
         * 
         */
        public Builder sdAzureDirectoryId(String sdAzureDirectoryId) {
            return sdAzureDirectoryId(Output.of(sdAzureDirectoryId));
        }

        /**
         * @param sdAzureResourceGroup Azure Resource Group name.
         * 
         * @return builder
         * 
         */
        public Builder sdAzureResourceGroup(@Nullable Output<String> sdAzureResourceGroup) {
            $.sdAzureResourceGroup = sdAzureResourceGroup;
            return this;
        }

        /**
         * @param sdAzureResourceGroup Azure Resource Group name.
         * 
         * @return builder
         * 
         */
        public Builder sdAzureResourceGroup(String sdAzureResourceGroup) {
            return sdAzureResourceGroup(Output.of(sdAzureResourceGroup));
        }

        /**
         * @param sdAzureResourceId ID of resource to find nodes by.
         * 
         * @return builder
         * 
         */
        public Builder sdAzureResourceId(@Nullable Output<String> sdAzureResourceId) {
            $.sdAzureResourceId = sdAzureResourceId;
            return this;
        }

        /**
         * @param sdAzureResourceId ID of resource to find nodes by.
         * 
         * @return builder
         * 
         */
        public Builder sdAzureResourceId(String sdAzureResourceId) {
            return sdAzureResourceId(Output.of(sdAzureResourceId));
        }

        /**
         * @param sdAzureSubscriptionId Azure subscription ID.
         * 
         * @return builder
         * 
         */
        public Builder sdAzureSubscriptionId(@Nullable Output<String> sdAzureSubscriptionId) {
            $.sdAzureSubscriptionId = sdAzureSubscriptionId;
            return this;
        }

        /**
         * @param sdAzureSubscriptionId Azure subscription ID.
         * 
         * @return builder
         * 
         */
        public Builder sdAzureSubscriptionId(String sdAzureSubscriptionId) {
            return sdAzureSubscriptionId(Output.of(sdAzureSubscriptionId));
        }

        /**
         * @param sdAzureTagKey The tag key associated with the node to add to this pool.
         * 
         * @return builder
         * 
         */
        public Builder sdAzureTagKey(@Nullable Output<String> sdAzureTagKey) {
            $.sdAzureTagKey = sdAzureTagKey;
            return this;
        }

        /**
         * @param sdAzureTagKey The tag key associated with the node to add to this pool.
         * 
         * @return builder
         * 
         */
        public Builder sdAzureTagKey(String sdAzureTagKey) {
            return sdAzureTagKey(Output.of(sdAzureTagKey));
        }

        /**
         * @param sdAzureTagVal The tag value associated with the node to add to this pool.
         * 
         * @return builder
         * 
         */
        public Builder sdAzureTagVal(@Nullable Output<String> sdAzureTagVal) {
            $.sdAzureTagVal = sdAzureTagVal;
            return this;
        }

        /**
         * @param sdAzureTagVal The tag value associated with the node to add to this pool.
         * 
         * @return builder
         * 
         */
        public Builder sdAzureTagVal(String sdAzureTagVal) {
            return sdAzureTagVal(Output.of(sdAzureTagVal));
        }

        /**
         * @param sdGceRegion Empty string (default) means region in which ADC is running.
         * 
         * @return builder
         * 
         */
        public Builder sdGceRegion(@Nullable Output<String> sdGceRegion) {
            $.sdGceRegion = sdGceRegion;
            return this;
        }

        /**
         * @param sdGceRegion Empty string (default) means region in which ADC is running.
         * 
         * @return builder
         * 
         */
        public Builder sdGceRegion(String sdGceRegion) {
            return sdGceRegion(Output.of(sdGceRegion));
        }

        /**
         * @param sdGceTagKey The tag key associated with the node to add to this pool
         * 
         * @return builder
         * 
         */
        public Builder sdGceTagKey(@Nullable Output<String> sdGceTagKey) {
            $.sdGceTagKey = sdGceTagKey;
            return this;
        }

        /**
         * @param sdGceTagKey The tag key associated with the node to add to this pool
         * 
         * @return builder
         * 
         */
        public Builder sdGceTagKey(String sdGceTagKey) {
            return sdGceTagKey(Output.of(sdGceTagKey));
        }

        /**
         * @param sdGceTagVal The tag value associated with the node to add to this pool.
         * 
         * @return builder
         * 
         */
        public Builder sdGceTagVal(@Nullable Output<String> sdGceTagVal) {
            $.sdGceTagVal = sdGceTagVal;
            return this;
        }

        /**
         * @param sdGceTagVal The tag value associated with the node to add to this pool.
         * 
         * @return builder
         * 
         */
        public Builder sdGceTagVal(String sdGceTagVal) {
            return sdGceTagVal(Output.of(sdGceTagVal));
        }

        /**
         * @param sdPort port number of serviceport to be used for FAST-Generated Pool.
         * 
         * @return builder
         * 
         */
        public Builder sdPort(Output<Integer> sdPort) {
            $.sdPort = sdPort;
            return this;
        }

        /**
         * @param sdPort port number of serviceport to be used for FAST-Generated Pool.
         * 
         * @return builder
         * 
         */
        public Builder sdPort(Integer sdPort) {
            return sdPort(Output.of(sdPort));
        }

        /**
         * @param sdType service discovery account type, options [`aws`,`azure`,`gce`]
         * 
         * @return builder
         * 
         */
        public Builder sdType(Output<String> sdType) {
            $.sdType = sdType;
            return this;
        }

        /**
         * @param sdType service discovery account type, options [`aws`,`azure`,`gce`]
         * 
         * @return builder
         * 
         */
        public Builder sdType(String sdType) {
            return sdType(Output.of(sdType));
        }

        /**
         * @param sdUndetectableAction Action to take when node cannot be detected. Default `remove`.
         * 
         * @return builder
         * 
         */
        public Builder sdUndetectableAction(@Nullable Output<String> sdUndetectableAction) {
            $.sdUndetectableAction = sdUndetectableAction;
            return this;
        }

        /**
         * @param sdUndetectableAction Action to take when node cannot be detected. Default `remove`.
         * 
         * @return builder
         * 
         */
        public Builder sdUndetectableAction(String sdUndetectableAction) {
            return sdUndetectableAction(Output.of(sdUndetectableAction));
        }

        public FastHttpAppServiceDiscoveryArgs build() {
            $.sdPort = Objects.requireNonNull($.sdPort, "expected parameter 'sdPort' to be non-null");
            $.sdType = Objects.requireNonNull($.sdType, "expected parameter 'sdType' to be non-null");
            return $;
        }
    }

}
