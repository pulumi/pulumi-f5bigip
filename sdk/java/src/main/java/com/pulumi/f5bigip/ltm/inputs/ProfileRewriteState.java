// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.f5bigip.ltm.inputs.ProfileRewriteCookieRuleArgs;
import com.pulumi.f5bigip.ltm.inputs.ProfileRewriteRequestArgs;
import com.pulumi.f5bigip.ltm.inputs.ProfileRewriteResponseArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProfileRewriteState extends com.pulumi.resources.ResourceArgs {

    public static final ProfileRewriteState Empty = new ProfileRewriteState();

    /**
     * Specifies a list of URIs to bypass inside a web page when the page is accessed using Portal Access.
     * 
     */
    @Import(name="bypassLists")
    private @Nullable Output<List<String>> bypassLists;

    /**
     * @return Specifies a list of URIs to bypass inside a web page when the page is accessed using Portal Access.
     * 
     */
    public Optional<Output<List<String>>> bypassLists() {
        return Optional.ofNullable(this.bypassLists);
    }

    /**
     * Specifies a CA against which to verify signed Java applets signatures. (name should be in full path which is combination of partition and CA file name )
     * 
     */
    @Import(name="caFile")
    private @Nullable Output<String> caFile;

    /**
     * @return Specifies a CA against which to verify signed Java applets signatures. (name should be in full path which is combination of partition and CA file name )
     * 
     */
    public Optional<Output<String>> caFile() {
        return Optional.ofNullable(this.caFile);
    }

    /**
     * Specifies the type of Client caching. Valid choices are: `cache-css-js, cache-all, no-cache, cache-img-css-js`. Default value: `cache-img-css-js`
     * 
     */
    @Import(name="cacheType")
    private @Nullable Output<String> cacheType;

    /**
     * @return Specifies the type of Client caching. Valid choices are: `cache-css-js, cache-all, no-cache, cache-img-css-js`. Default value: `cache-img-css-js`
     * 
     */
    public Optional<Output<String>> cacheType() {
        return Optional.ofNullable(this.cacheType);
    }

    /**
     * Specifies the cookie rewrite rules. Block type. Each request is block type with following arguments.
     * 
     */
    @Import(name="cookieRules")
    private @Nullable Output<List<ProfileRewriteCookieRuleArgs>> cookieRules;

    /**
     * @return Specifies the cookie rewrite rules. Block type. Each request is block type with following arguments.
     * 
     */
    public Optional<Output<List<ProfileRewriteCookieRuleArgs>>> cookieRules() {
        return Optional.ofNullable(this.cookieRules);
    }

    /**
     * Specifies a CRL against which to verify signed Java applets signature certificates. The default option is `none`.
     * 
     */
    @Import(name="crlFile")
    private @Nullable Output<String> crlFile;

    /**
     * @return Specifies a CRL against which to verify signed Java applets signature certificates. The default option is `none`.
     * 
     */
    public Optional<Output<String>> crlFile() {
        return Optional.ofNullable(this.crlFile);
    }

    /**
     * Specifies the profile from which this profile inherits settings. The default is the system-supplied `rewrite` profile.
     * 
     */
    @Import(name="defaultsFrom")
    private @Nullable Output<String> defaultsFrom;

    /**
     * @return Specifies the profile from which this profile inherits settings. The default is the system-supplied `rewrite` profile.
     * 
     */
    public Optional<Output<String>> defaultsFrom() {
        return Optional.ofNullable(this.defaultsFrom);
    }

    /**
     * Name of the rewrite profile. ( profile name should be in full path which is combination of partition and profile name )
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the rewrite profile. ( profile name should be in full path which is combination of partition and profile name )
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Block type. Each request is block type with following arguments.
     * 
     */
    @Import(name="requests")
    private @Nullable Output<List<ProfileRewriteRequestArgs>> requests;

    /**
     * @return Block type. Each request is block type with following arguments.
     * 
     */
    public Optional<Output<List<ProfileRewriteRequestArgs>>> requests() {
        return Optional.ofNullable(this.requests);
    }

    /**
     * Block type. Each request is block type with following arguments.
     * 
     */
    @Import(name="responses")
    private @Nullable Output<List<ProfileRewriteResponseArgs>> responses;

    /**
     * @return Block type. Each request is block type with following arguments.
     * 
     */
    public Optional<Output<List<ProfileRewriteResponseArgs>>> responses() {
        return Optional.ofNullable(this.responses);
    }

    /**
     * Specifies a list of URIs to rewrite inside a web page when the page is accessed using Portal Access.
     * 
     */
    @Import(name="rewriteLists")
    private @Nullable Output<List<String>> rewriteLists;

    /**
     * @return Specifies a list of URIs to rewrite inside a web page when the page is accessed using Portal Access.
     * 
     */
    public Optional<Output<List<String>>> rewriteLists() {
        return Optional.ofNullable(this.rewriteLists);
    }

    /**
     * Specifies the type of Client caching. Valid choices are: `portal, uri-translation`
     * 
     */
    @Import(name="rewriteMode")
    private @Nullable Output<String> rewriteMode;

    /**
     * @return Specifies the type of Client caching. Valid choices are: `portal, uri-translation`
     * 
     */
    public Optional<Output<String>> rewriteMode() {
        return Optional.ofNullable(this.rewriteMode);
    }

    /**
     * Specifies a certificate to use for re-signing of signed Java applets after patching. (name should be in full path which is combination of partition and certificate name )
     * 
     */
    @Import(name="signingCert")
    private @Nullable Output<String> signingCert;

    /**
     * @return Specifies a certificate to use for re-signing of signed Java applets after patching. (name should be in full path which is combination of partition and certificate name )
     * 
     */
    public Optional<Output<String>> signingCert() {
        return Optional.ofNullable(this.signingCert);
    }

    /**
     * Specifies a certificate to use for re-signing of signed Java applets after patching. (name should be in full path which is combination of partition and key name )
     * 
     */
    @Import(name="signingKey")
    private @Nullable Output<String> signingKey;

    /**
     * @return Specifies a certificate to use for re-signing of signed Java applets after patching. (name should be in full path which is combination of partition and key name )
     * 
     */
    public Optional<Output<String>> signingKey() {
        return Optional.ofNullable(this.signingKey);
    }

    /**
     * Specifies a pass phrase to use for encrypting the private signing key. Since it&#39;s a sensitive entity idempotency will fail in the update call.
     * 
     */
    @Import(name="signingKeyPassword")
    private @Nullable Output<String> signingKeyPassword;

    /**
     * @return Specifies a pass phrase to use for encrypting the private signing key. Since it&#39;s a sensitive entity idempotency will fail in the update call.
     * 
     */
    public Optional<Output<String>> signingKeyPassword() {
        return Optional.ofNullable(this.signingKeyPassword);
    }

    /**
     * Specifies the type of Client caching. Valid choices are: `true, false`
     * 
     */
    @Import(name="splitTunneling")
    private @Nullable Output<String> splitTunneling;

    /**
     * @return Specifies the type of Client caching. Valid choices are: `true, false`
     * 
     */
    public Optional<Output<String>> splitTunneling() {
        return Optional.ofNullable(this.splitTunneling);
    }

    private ProfileRewriteState() {}

    private ProfileRewriteState(ProfileRewriteState $) {
        this.bypassLists = $.bypassLists;
        this.caFile = $.caFile;
        this.cacheType = $.cacheType;
        this.cookieRules = $.cookieRules;
        this.crlFile = $.crlFile;
        this.defaultsFrom = $.defaultsFrom;
        this.name = $.name;
        this.requests = $.requests;
        this.responses = $.responses;
        this.rewriteLists = $.rewriteLists;
        this.rewriteMode = $.rewriteMode;
        this.signingCert = $.signingCert;
        this.signingKey = $.signingKey;
        this.signingKeyPassword = $.signingKeyPassword;
        this.splitTunneling = $.splitTunneling;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProfileRewriteState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProfileRewriteState $;

        public Builder() {
            $ = new ProfileRewriteState();
        }

        public Builder(ProfileRewriteState defaults) {
            $ = new ProfileRewriteState(Objects.requireNonNull(defaults));
        }

        /**
         * @param bypassLists Specifies a list of URIs to bypass inside a web page when the page is accessed using Portal Access.
         * 
         * @return builder
         * 
         */
        public Builder bypassLists(@Nullable Output<List<String>> bypassLists) {
            $.bypassLists = bypassLists;
            return this;
        }

        /**
         * @param bypassLists Specifies a list of URIs to bypass inside a web page when the page is accessed using Portal Access.
         * 
         * @return builder
         * 
         */
        public Builder bypassLists(List<String> bypassLists) {
            return bypassLists(Output.of(bypassLists));
        }

        /**
         * @param bypassLists Specifies a list of URIs to bypass inside a web page when the page is accessed using Portal Access.
         * 
         * @return builder
         * 
         */
        public Builder bypassLists(String... bypassLists) {
            return bypassLists(List.of(bypassLists));
        }

        /**
         * @param caFile Specifies a CA against which to verify signed Java applets signatures. (name should be in full path which is combination of partition and CA file name )
         * 
         * @return builder
         * 
         */
        public Builder caFile(@Nullable Output<String> caFile) {
            $.caFile = caFile;
            return this;
        }

        /**
         * @param caFile Specifies a CA against which to verify signed Java applets signatures. (name should be in full path which is combination of partition and CA file name )
         * 
         * @return builder
         * 
         */
        public Builder caFile(String caFile) {
            return caFile(Output.of(caFile));
        }

        /**
         * @param cacheType Specifies the type of Client caching. Valid choices are: `cache-css-js, cache-all, no-cache, cache-img-css-js`. Default value: `cache-img-css-js`
         * 
         * @return builder
         * 
         */
        public Builder cacheType(@Nullable Output<String> cacheType) {
            $.cacheType = cacheType;
            return this;
        }

        /**
         * @param cacheType Specifies the type of Client caching. Valid choices are: `cache-css-js, cache-all, no-cache, cache-img-css-js`. Default value: `cache-img-css-js`
         * 
         * @return builder
         * 
         */
        public Builder cacheType(String cacheType) {
            return cacheType(Output.of(cacheType));
        }

        /**
         * @param cookieRules Specifies the cookie rewrite rules. Block type. Each request is block type with following arguments.
         * 
         * @return builder
         * 
         */
        public Builder cookieRules(@Nullable Output<List<ProfileRewriteCookieRuleArgs>> cookieRules) {
            $.cookieRules = cookieRules;
            return this;
        }

        /**
         * @param cookieRules Specifies the cookie rewrite rules. Block type. Each request is block type with following arguments.
         * 
         * @return builder
         * 
         */
        public Builder cookieRules(List<ProfileRewriteCookieRuleArgs> cookieRules) {
            return cookieRules(Output.of(cookieRules));
        }

        /**
         * @param cookieRules Specifies the cookie rewrite rules. Block type. Each request is block type with following arguments.
         * 
         * @return builder
         * 
         */
        public Builder cookieRules(ProfileRewriteCookieRuleArgs... cookieRules) {
            return cookieRules(List.of(cookieRules));
        }

        /**
         * @param crlFile Specifies a CRL against which to verify signed Java applets signature certificates. The default option is `none`.
         * 
         * @return builder
         * 
         */
        public Builder crlFile(@Nullable Output<String> crlFile) {
            $.crlFile = crlFile;
            return this;
        }

        /**
         * @param crlFile Specifies a CRL against which to verify signed Java applets signature certificates. The default option is `none`.
         * 
         * @return builder
         * 
         */
        public Builder crlFile(String crlFile) {
            return crlFile(Output.of(crlFile));
        }

        /**
         * @param defaultsFrom Specifies the profile from which this profile inherits settings. The default is the system-supplied `rewrite` profile.
         * 
         * @return builder
         * 
         */
        public Builder defaultsFrom(@Nullable Output<String> defaultsFrom) {
            $.defaultsFrom = defaultsFrom;
            return this;
        }

        /**
         * @param defaultsFrom Specifies the profile from which this profile inherits settings. The default is the system-supplied `rewrite` profile.
         * 
         * @return builder
         * 
         */
        public Builder defaultsFrom(String defaultsFrom) {
            return defaultsFrom(Output.of(defaultsFrom));
        }

        /**
         * @param name Name of the rewrite profile. ( profile name should be in full path which is combination of partition and profile name )
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the rewrite profile. ( profile name should be in full path which is combination of partition and profile name )
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param requests Block type. Each request is block type with following arguments.
         * 
         * @return builder
         * 
         */
        public Builder requests(@Nullable Output<List<ProfileRewriteRequestArgs>> requests) {
            $.requests = requests;
            return this;
        }

        /**
         * @param requests Block type. Each request is block type with following arguments.
         * 
         * @return builder
         * 
         */
        public Builder requests(List<ProfileRewriteRequestArgs> requests) {
            return requests(Output.of(requests));
        }

        /**
         * @param requests Block type. Each request is block type with following arguments.
         * 
         * @return builder
         * 
         */
        public Builder requests(ProfileRewriteRequestArgs... requests) {
            return requests(List.of(requests));
        }

        /**
         * @param responses Block type. Each request is block type with following arguments.
         * 
         * @return builder
         * 
         */
        public Builder responses(@Nullable Output<List<ProfileRewriteResponseArgs>> responses) {
            $.responses = responses;
            return this;
        }

        /**
         * @param responses Block type. Each request is block type with following arguments.
         * 
         * @return builder
         * 
         */
        public Builder responses(List<ProfileRewriteResponseArgs> responses) {
            return responses(Output.of(responses));
        }

        /**
         * @param responses Block type. Each request is block type with following arguments.
         * 
         * @return builder
         * 
         */
        public Builder responses(ProfileRewriteResponseArgs... responses) {
            return responses(List.of(responses));
        }

        /**
         * @param rewriteLists Specifies a list of URIs to rewrite inside a web page when the page is accessed using Portal Access.
         * 
         * @return builder
         * 
         */
        public Builder rewriteLists(@Nullable Output<List<String>> rewriteLists) {
            $.rewriteLists = rewriteLists;
            return this;
        }

        /**
         * @param rewriteLists Specifies a list of URIs to rewrite inside a web page when the page is accessed using Portal Access.
         * 
         * @return builder
         * 
         */
        public Builder rewriteLists(List<String> rewriteLists) {
            return rewriteLists(Output.of(rewriteLists));
        }

        /**
         * @param rewriteLists Specifies a list of URIs to rewrite inside a web page when the page is accessed using Portal Access.
         * 
         * @return builder
         * 
         */
        public Builder rewriteLists(String... rewriteLists) {
            return rewriteLists(List.of(rewriteLists));
        }

        /**
         * @param rewriteMode Specifies the type of Client caching. Valid choices are: `portal, uri-translation`
         * 
         * @return builder
         * 
         */
        public Builder rewriteMode(@Nullable Output<String> rewriteMode) {
            $.rewriteMode = rewriteMode;
            return this;
        }

        /**
         * @param rewriteMode Specifies the type of Client caching. Valid choices are: `portal, uri-translation`
         * 
         * @return builder
         * 
         */
        public Builder rewriteMode(String rewriteMode) {
            return rewriteMode(Output.of(rewriteMode));
        }

        /**
         * @param signingCert Specifies a certificate to use for re-signing of signed Java applets after patching. (name should be in full path which is combination of partition and certificate name )
         * 
         * @return builder
         * 
         */
        public Builder signingCert(@Nullable Output<String> signingCert) {
            $.signingCert = signingCert;
            return this;
        }

        /**
         * @param signingCert Specifies a certificate to use for re-signing of signed Java applets after patching. (name should be in full path which is combination of partition and certificate name )
         * 
         * @return builder
         * 
         */
        public Builder signingCert(String signingCert) {
            return signingCert(Output.of(signingCert));
        }

        /**
         * @param signingKey Specifies a certificate to use for re-signing of signed Java applets after patching. (name should be in full path which is combination of partition and key name )
         * 
         * @return builder
         * 
         */
        public Builder signingKey(@Nullable Output<String> signingKey) {
            $.signingKey = signingKey;
            return this;
        }

        /**
         * @param signingKey Specifies a certificate to use for re-signing of signed Java applets after patching. (name should be in full path which is combination of partition and key name )
         * 
         * @return builder
         * 
         */
        public Builder signingKey(String signingKey) {
            return signingKey(Output.of(signingKey));
        }

        /**
         * @param signingKeyPassword Specifies a pass phrase to use for encrypting the private signing key. Since it&#39;s a sensitive entity idempotency will fail in the update call.
         * 
         * @return builder
         * 
         */
        public Builder signingKeyPassword(@Nullable Output<String> signingKeyPassword) {
            $.signingKeyPassword = signingKeyPassword;
            return this;
        }

        /**
         * @param signingKeyPassword Specifies a pass phrase to use for encrypting the private signing key. Since it&#39;s a sensitive entity idempotency will fail in the update call.
         * 
         * @return builder
         * 
         */
        public Builder signingKeyPassword(String signingKeyPassword) {
            return signingKeyPassword(Output.of(signingKeyPassword));
        }

        /**
         * @param splitTunneling Specifies the type of Client caching. Valid choices are: `true, false`
         * 
         * @return builder
         * 
         */
        public Builder splitTunneling(@Nullable Output<String> splitTunneling) {
            $.splitTunneling = splitTunneling;
            return this;
        }

        /**
         * @param splitTunneling Specifies the type of Client caching. Valid choices are: `true, false`
         * 
         * @return builder
         * 
         */
        public Builder splitTunneling(String splitTunneling) {
            return splitTunneling(Output.of(splitTunneling));
        }

        public ProfileRewriteState build() {
            return $;
        }
    }

}
