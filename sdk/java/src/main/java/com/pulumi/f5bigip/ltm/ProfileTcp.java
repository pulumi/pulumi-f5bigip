// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.f5bigip.Utilities;
import com.pulumi.f5bigip.ltm.ProfileTcpArgs;
import com.pulumi.f5bigip.ltm.inputs.ProfileTcpState;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * `f5bigip.ltm.ProfileTcp` Configures a custom profile_tcp for use by health checks.
 * 
 * Resources should be named with their &#34;full path&#34;. The full path is the combination of the partition + name (example: /Common/my-pool ) or  partition + directory + name of the resource  (example: /Common/test/my-pool )
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.f5bigip.ltm.ProfileTcp;
 * import com.pulumi.f5bigip.ltm.ProfileTcpArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var sanjose_tcp_lan_profile = new ProfileTcp(&#34;sanjose-tcp-lan-profile&#34;, ProfileTcpArgs.builder()        
 *             .closeWaitTimeout(5)
 *             .deferredAccept(&#34;enabled&#34;)
 *             .fastOpen(&#34;enabled&#34;)
 *             .finwait2timeout(5)
 *             .finwaitTimeout(300)
 *             .idleTimeout(200)
 *             .keepaliveInterval(1700)
 *             .name(&#34;/Common/sanjose-tcp-lan-profile&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="f5bigip:ltm/profileTcp:ProfileTcp")
public class ProfileTcp extends com.pulumi.resources.CustomResource {
    /**
     * Specifies the number of seconds that a connection remains in a LAST-ACK state before quitting. A value of 0 represents a term of forever (or until the maxrtx of the FIN state). The default value is 5 seconds.
     * 
     */
    @Export(name="closeWaitTimeout", type=Integer.class, parameters={})
    private Output<Integer> closeWaitTimeout;

    /**
     * @return Specifies the number of seconds that a connection remains in a LAST-ACK state before quitting. A value of 0 represents a term of forever (or until the maxrtx of the FIN state). The default value is 5 seconds.
     * 
     */
    public Output<Integer> closeWaitTimeout() {
        return this.closeWaitTimeout;
    }
    /**
     * Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
     * 
     */
    @Export(name="defaultsFrom", type=String.class, parameters={})
    private Output<String> defaultsFrom;

    /**
     * @return Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
     * 
     */
    public Output<String> defaultsFrom() {
        return this.defaultsFrom;
    }
    /**
     * Specifies, when enabled, that the system defers allocation of the connection chain context until the client response is received. This option is useful for dealing with 3-way handshake DOS attacks. The default value is disabled.
     * 
     */
    @Export(name="deferredAccept", type=String.class, parameters={})
    private Output<String> deferredAccept;

    /**
     * @return Specifies, when enabled, that the system defers allocation of the connection chain context until the client response is received. This option is useful for dealing with 3-way handshake DOS attacks. The default value is disabled.
     * 
     */
    public Output<String> deferredAccept() {
        return this.deferredAccept;
    }
    /**
     * When enabled, permits TCP Fast Open, allowing properly equipped TCP clients to send data with the SYN packet.
     * 
     */
    @Export(name="fastOpen", type=String.class, parameters={})
    private Output<String> fastOpen;

    /**
     * @return When enabled, permits TCP Fast Open, allowing properly equipped TCP clients to send data with the SYN packet.
     * 
     */
    public Output<String> fastOpen() {
        return this.fastOpen;
    }
    /**
     * Specifies the number of seconds that a connection is in the FIN-WAIT-2 state before quitting. The default value is 300 seconds. A value of 0 (zero) represents a term of forever (or until the maxrtx of the FIN state).
     * 
     */
    @Export(name="finwait2timeout", type=Integer.class, parameters={})
    private Output<Integer> finwait2timeout;

    /**
     * @return Specifies the number of seconds that a connection is in the FIN-WAIT-2 state before quitting. The default value is 300 seconds. A value of 0 (zero) represents a term of forever (or until the maxrtx of the FIN state).
     * 
     */
    public Output<Integer> finwait2timeout() {
        return this.finwait2timeout;
    }
    /**
     * Specifies the number of seconds that a connection is in the FIN-WAIT-1 or closing state before quitting. The default value is 5 seconds. A value of 0 (zero) represents a term of forever (or until the maxrtx of the FIN state). You can also specify immediate or indefinite.
     * 
     */
    @Export(name="finwaitTimeout", type=Integer.class, parameters={})
    private Output<Integer> finwaitTimeout;

    /**
     * @return Specifies the number of seconds that a connection is in the FIN-WAIT-1 or closing state before quitting. The default value is 5 seconds. A value of 0 (zero) represents a term of forever (or until the maxrtx of the FIN state). You can also specify immediate or indefinite.
     * 
     */
    public Output<Integer> finwaitTimeout() {
        return this.finwaitTimeout;
    }
    /**
     * Specifies the number of seconds that a connection is idle before the connection is eligible for deletion. The default value is 300 seconds.
     * 
     */
    @Export(name="idleTimeout", type=Integer.class, parameters={})
    private Output<Integer> idleTimeout;

    /**
     * @return Specifies the number of seconds that a connection is idle before the connection is eligible for deletion. The default value is 300 seconds.
     * 
     */
    public Output<Integer> idleTimeout() {
        return this.idleTimeout;
    }
    /**
     * Specifies the keep alive probe interval, in seconds. The default value is 1800 seconds.
     * 
     */
    @Export(name="keepaliveInterval", type=Integer.class, parameters={})
    private Output<Integer> keepaliveInterval;

    /**
     * @return Specifies the keep alive probe interval, in seconds. The default value is 1800 seconds.
     * 
     */
    public Output<Integer> keepaliveInterval() {
        return this.keepaliveInterval;
    }
    /**
     * Name of the profile_tcp
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of the profile_tcp
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Displays the administrative partition within which this profile resides
     * 
     */
    @Export(name="partition", type=String.class, parameters={})
    private Output</* @Nullable */ String> partition;

    /**
     * @return Displays the administrative partition within which this profile resides
     * 
     */
    public Output<Optional<String>> partition() {
        return Codegen.optional(this.partition);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ProfileTcp(String name) {
        this(name, ProfileTcpArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ProfileTcp(String name, ProfileTcpArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ProfileTcp(String name, ProfileTcpArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("f5bigip:ltm/profileTcp:ProfileTcp", name, args == null ? ProfileTcpArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ProfileTcp(String name, Output<String> id, @Nullable ProfileTcpState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("f5bigip:ltm/profileTcp:ProfileTcp", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ProfileTcp get(String name, Output<String> id, @Nullable ProfileTcpState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ProfileTcp(name, id, state, options);
    }
}
