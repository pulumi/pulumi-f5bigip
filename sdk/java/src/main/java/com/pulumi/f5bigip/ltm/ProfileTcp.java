// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.f5bigip.Utilities;
import com.pulumi.f5bigip.ltm.ProfileTcpArgs;
import com.pulumi.f5bigip.ltm.inputs.ProfileTcpState;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * `f5bigip.ltm.ProfileTcp` Configures a custom TCP LTM Profile for use by health checks.
 * 
 * Resources should be named with their `full path`. The full path is the combination of the `partition + name` (example: /Common/my-pool ) or  `partition + directory + name` of the resource  (example: /Common/test/my-pool )
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.f5bigip.ltm.ProfileTcp;
 * import com.pulumi.f5bigip.ltm.ProfileTcpArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var sanjose_tcp_lan_profile = new ProfileTcp(&#34;sanjose-tcp-lan-profile&#34;, ProfileTcpArgs.builder()        
 *             .closeWaitTimeout(5)
 *             .deferredAccept(&#34;enabled&#34;)
 *             .fastOpen(&#34;enabled&#34;)
 *             .finwait2timeout(5)
 *             .finwaitTimeout(300)
 *             .idleTimeout(200)
 *             .keepaliveInterval(1700)
 *             .name(&#34;/Common/sanjose-tcp-lan-profile&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 */
@ResourceType(type="f5bigip:ltm/profileTcp:ProfileTcp")
public class ProfileTcp extends com.pulumi.resources.CustomResource {
    /**
     * Specifies the number of seconds that a connection remains in a LAST-ACK state before quitting. A value of 0 represents a term of forever (or until the maxrtx of the FIN state). The default value is 5 seconds.
     * 
     */
    @Export(name="closeWaitTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> closeWaitTimeout;

    /**
     * @return Specifies the number of seconds that a connection remains in a LAST-ACK state before quitting. A value of 0 represents a term of forever (or until the maxrtx of the FIN state). The default value is 5 seconds.
     * 
     */
    public Output<Integer> closeWaitTimeout() {
        return this.closeWaitTimeout;
    }
    /**
     * Specifies the algorithm to use to share network resources among competing users to reduce congestion. The default is High Speed.
     * 
     */
    @Export(name="congestionControl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> congestionControl;

    /**
     * @return Specifies the algorithm to use to share network resources among competing users to reduce congestion. The default is High Speed.
     * 
     */
    public Output<Optional<String>> congestionControl() {
        return Codegen.optional(this.congestionControl);
    }
    /**
     * Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
     * 
     */
    @Export(name="defaultsFrom", refs={String.class}, tree="[0]")
    private Output<String> defaultsFrom;

    /**
     * @return Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
     * 
     */
    public Output<String> defaultsFrom() {
        return this.defaultsFrom;
    }
    /**
     * Specifies, when enabled, that the system defers allocation of the connection chain context until the client response is received. This option is useful for dealing with 3-way handshake DOS attacks. The default value is disabled.
     * 
     */
    @Export(name="deferredAccept", refs={String.class}, tree="[0]")
    private Output<String> deferredAccept;

    /**
     * @return Specifies, when enabled, that the system defers allocation of the connection chain context until the client response is received. This option is useful for dealing with 3-way handshake DOS attacks. The default value is disabled.
     * 
     */
    public Output<String> deferredAccept() {
        return this.deferredAccept;
    }
    /**
     * Specifies, when checked (enabled), that the system can send fewer than one ACK (acknowledgment) segment per data segment received. By default, this setting is enabled.
     * 
     */
    @Export(name="delayedAcks", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> delayedAcks;

    /**
     * @return Specifies, when checked (enabled), that the system can send fewer than one ACK (acknowledgment) segment per data segment received. By default, this setting is enabled.
     * 
     */
    public Output<Optional<String>> delayedAcks() {
        return Codegen.optional(this.delayedAcks);
    }
    /**
     * Enabling this setting allows TCP to assume a packet is lost after fewer than the standard number of duplicate ACKs, if there is no way to send new data and generate more duplicate ACKs.
     * 
     */
    @Export(name="earlyRetransmit", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> earlyRetransmit;

    /**
     * @return Enabling this setting allows TCP to assume a packet is lost after fewer than the standard number of duplicate ACKs, if there is no way to send new data and generate more duplicate ACKs.
     * 
     */
    public Output<Optional<String>> earlyRetransmit() {
        return Codegen.optional(this.earlyRetransmit);
    }
    /**
     * When enabled, permits TCP Fast Open, allowing properly equipped TCP clients to send data with the SYN packet. Default is `enabled`. If `fast_open` set to `enabled`, argument `verified_accept` can&#39;t be set to `enabled`.
     * 
     */
    @Export(name="fastOpen", refs={String.class}, tree="[0]")
    private Output<String> fastOpen;

    /**
     * @return When enabled, permits TCP Fast Open, allowing properly equipped TCP clients to send data with the SYN packet. Default is `enabled`. If `fast_open` set to `enabled`, argument `verified_accept` can&#39;t be set to `enabled`.
     * 
     */
    public Output<String> fastOpen() {
        return this.fastOpen;
    }
    /**
     * Specifies the number of seconds that a connection is in the FIN-WAIT-2 state before quitting. The default value is 300 seconds. A value of 0 (zero) represents a term of forever (or until the maxrtx of the FIN state).
     * 
     */
    @Export(name="finwait2timeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> finwait2timeout;

    /**
     * @return Specifies the number of seconds that a connection is in the FIN-WAIT-2 state before quitting. The default value is 300 seconds. A value of 0 (zero) represents a term of forever (or until the maxrtx of the FIN state).
     * 
     */
    public Output<Integer> finwait2timeout() {
        return this.finwait2timeout;
    }
    /**
     * Specifies the number of seconds that a connection is in the FIN-WAIT-1 or closing state before quitting. The default value is 5 seconds. A value of 0 (zero) represents a term of forever (or until the maxrtx of the FIN state). You can also specify immediate or indefinite.
     * 
     */
    @Export(name="finwaitTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> finwaitTimeout;

    /**
     * @return Specifies the number of seconds that a connection is in the FIN-WAIT-1 or closing state before quitting. The default value is 5 seconds. A value of 0 (zero) represents a term of forever (or until the maxrtx of the FIN state). You can also specify immediate or indefinite.
     * 
     */
    public Output<Integer> finwaitTimeout() {
        return this.finwaitTimeout;
    }
    /**
     * Specifies the number of seconds that a connection is idle before the connection is eligible for deletion. The default value is 300 seconds.
     * 
     */
    @Export(name="idleTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> idleTimeout;

    /**
     * @return Specifies the number of seconds that a connection is idle before the connection is eligible for deletion. The default value is 300 seconds.
     * 
     */
    public Output<Integer> idleTimeout() {
        return this.idleTimeout;
    }
    /**
     * Specifies the initial congestion window size for connections to this destination. Actual window size is this value multiplied by the MSS (Maximum Segment Size) for the same connection. The default is 10. Valid values range from 0 to 64.
     * 
     */
    @Export(name="initialCongestionWindowsize", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> initialCongestionWindowsize;

    /**
     * @return Specifies the initial congestion window size for connections to this destination. Actual window size is this value multiplied by the MSS (Maximum Segment Size) for the same connection. The default is 10. Valid values range from 0 to 64.
     * 
     */
    public Output<Optional<Integer>> initialCongestionWindowsize() {
        return Codegen.optional(this.initialCongestionWindowsize);
    }
    /**
     * Specifies the keep alive probe interval, in seconds. The default value is 1800 seconds.
     * 
     */
    @Export(name="keepaliveInterval", refs={Integer.class}, tree="[0]")
    private Output<Integer> keepaliveInterval;

    /**
     * @return Specifies the keep alive probe interval, in seconds. The default value is 1800 seconds.
     * 
     */
    public Output<Integer> keepaliveInterval() {
        return this.keepaliveInterval;
    }
    /**
     * Specifies whether the system applies Nagle&#39;s algorithm to reduce the number of short segments on the network.If you select Auto, the system determines whether to use Nagle&#39;s algorithm based on network conditions. By default, this setting is disabled.
     * 
     */
    @Export(name="nagle", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> nagle;

    /**
     * @return Specifies whether the system applies Nagle&#39;s algorithm to reduce the number of short segments on the network.If you select Auto, the system determines whether to use Nagle&#39;s algorithm based on network conditions. By default, this setting is disabled.
     * 
     */
    public Output<Optional<String>> nagle() {
        return Codegen.optional(this.nagle);
    }
    /**
     * Name of the LTM TCP Profile,name should be `full path`. The full path is the combination of the `partition + name` (example: /Common/my-pool ) or  `partition + directory + name` of the resource  (example: /Common/test/my-pool )
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the LTM TCP Profile,name should be `full path`. The full path is the combination of the `partition + name` (example: /Common/my-pool ) or  `partition + directory + name` of the resource  (example: /Common/test/my-pool )
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * name of partition
     * 
     */
    @Export(name="partition", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> partition;

    /**
     * @return name of partition
     * 
     */
    public Output<Optional<String>> partition() {
        return Codegen.optional(this.partition);
    }
    /**
     * Specifies the proxy buffer level, in bytes, at which the receive window is closed.
     * 
     */
    @Export(name="proxybufferHigh", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> proxybufferHigh;

    /**
     * @return Specifies the proxy buffer level, in bytes, at which the receive window is closed.
     * 
     */
    public Output<Optional<Integer>> proxybufferHigh() {
        return Codegen.optional(this.proxybufferHigh);
    }
    /**
     * Specifies the maximum advertised RECEIVE window size. This value represents the maximum number of bytes to which the RECEIVE window can scale. The default is 65535 bytes.
     * 
     */
    @Export(name="receiveWindowsize", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> receiveWindowsize;

    /**
     * @return Specifies the maximum advertised RECEIVE window size. This value represents the maximum number of bytes to which the RECEIVE window can scale. The default is 65535 bytes.
     * 
     */
    public Output<Optional<Integer>> receiveWindowsize() {
        return Codegen.optional(this.receiveWindowsize);
    }
    /**
     * Specifies the SEND window size. The default is 131072 bytes.
     * 
     */
    @Export(name="sendBuffersize", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> sendBuffersize;

    /**
     * @return Specifies the SEND window size. The default is 131072 bytes.
     * 
     */
    public Output<Optional<Integer>> sendBuffersize() {
        return Codegen.optional(this.sendBuffersize);
    }
    /**
     * Enabling this setting allows TCP to send a probe segment to trigger fast recovery instead of recovering a loss via a retransmission timeout,By default, this setting is enabled.
     * 
     */
    @Export(name="taillossProbe", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> taillossProbe;

    /**
     * @return Enabling this setting allows TCP to send a probe segment to trigger fast recovery instead of recovering a loss via a retransmission timeout,By default, this setting is enabled.
     * 
     */
    public Output<Optional<String>> taillossProbe() {
        return Codegen.optional(this.taillossProbe);
    }
    /**
     * Using this setting enabled, the system can recycle a wait-state connection immediately upon receipt of a new connection request instead of having to wait until the connection times out of the wait state. By default, this setting is enabled.
     * 
     */
    @Export(name="timewaitRecycle", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> timewaitRecycle;

    /**
     * @return Using this setting enabled, the system can recycle a wait-state connection immediately upon receipt of a new connection request instead of having to wait until the connection times out of the wait state. By default, this setting is enabled.
     * 
     */
    public Output<Optional<String>> timewaitRecycle() {
        return Codegen.optional(this.timewaitRecycle);
    }
    /**
     * Specifies, when checked (enabled), that the system can actually communicate with the server before establishing a client connection. To determine this, the system sends the server a SYN packet before responding to the client&#39;s SYN with a SYN-ACK. When unchecked, the system accepts the client connection before selecting a server to talk to. By default, this setting is `disabled`.
     * 
     */
    @Export(name="verifiedAccept", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> verifiedAccept;

    /**
     * @return Specifies, when checked (enabled), that the system can actually communicate with the server before establishing a client connection. To determine this, the system sends the server a SYN packet before responding to the client&#39;s SYN with a SYN-ACK. When unchecked, the system accepts the client connection before selecting a server to talk to. By default, this setting is `disabled`.
     * 
     */
    public Output<Optional<String>> verifiedAccept() {
        return Codegen.optional(this.verifiedAccept);
    }
    /**
     * Specifies the timeout in milliseconds for terminating a connection with an effective zero length TCP transmit window.
     * 
     */
    @Export(name="zerowindowTimeout", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> zerowindowTimeout;

    /**
     * @return Specifies the timeout in milliseconds for terminating a connection with an effective zero length TCP transmit window.
     * 
     */
    public Output<Optional<Integer>> zerowindowTimeout() {
        return Codegen.optional(this.zerowindowTimeout);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ProfileTcp(String name) {
        this(name, ProfileTcpArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ProfileTcp(String name, ProfileTcpArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ProfileTcp(String name, ProfileTcpArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("f5bigip:ltm/profileTcp:ProfileTcp", name, args == null ? ProfileTcpArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ProfileTcp(String name, Output<String> id, @Nullable ProfileTcpState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("f5bigip:ltm/profileTcp:ProfileTcp", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ProfileTcp get(String name, Output<String> id, @Nullable ProfileTcpState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ProfileTcp(name, id, state, options);
    }
}
