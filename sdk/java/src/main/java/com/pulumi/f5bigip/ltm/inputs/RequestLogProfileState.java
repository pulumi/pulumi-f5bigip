// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RequestLogProfileState extends com.pulumi.resources.ResourceArgs {

    public static final RequestLogProfileState Empty = new RequestLogProfileState();

    /**
     * Specifies the profile from which this profile inherits settings. The default is the system-supplied `request-log` profile.
     * 
     */
    @Import(name="defaultsFrom")
    private @Nullable Output<String> defaultsFrom;

    /**
     * @return Specifies the profile from which this profile inherits settings. The default is the system-supplied `request-log` profile.
     * 
     */
    public Optional<Output<String>> defaultsFrom() {
        return Optional.ofNullable(this.defaultsFrom);
    }

    /**
     * Specifies user-defined description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Specifies user-defined description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name of the Request Logging profile,name of Profile should be full path. Full path is the combination of the `partition + profile name`,For example `/Common/request-log-profile-tc1`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Request Logging profile,name of Profile should be full path. Full path is the combination of the `partition + profile name`,For example `/Common/request-log-profile-tc1`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Defines the pool associated with logging request errors. The default is None.
     * 
     */
    @Import(name="proxyResponse")
    private @Nullable Output<String> proxyResponse;

    /**
     * @return Defines the pool associated with logging request errors. The default is None.
     * 
     */
    public Optional<Output<String>> proxyResponse() {
        return Optional.ofNullable(this.proxyResponse);
    }

    /**
     * Defines the pool associated with logging request errors. The default is None.
     * 
     */
    @Import(name="proxycloseOnError")
    private @Nullable Output<String> proxycloseOnError;

    /**
     * @return Defines the pool associated with logging request errors. The default is None.
     * 
     */
    public Optional<Output<String>> proxycloseOnError() {
        return Optional.ofNullable(this.proxycloseOnError);
    }

    /**
     * Defines the pool associated with logging request errors. The default is None.
     * 
     */
    @Import(name="proxyrespondOnLoggingerror")
    private @Nullable Output<String> proxyrespondOnLoggingerror;

    /**
     * @return Defines the pool associated with logging request errors. The default is None.
     * 
     */
    public Optional<Output<String>> proxyrespondOnLoggingerror() {
        return Optional.ofNullable(this.proxyrespondOnLoggingerror);
    }

    /**
     * Enables or disables request logging. The default is `disabled`, possible values are `enabled` and `disabled`.
     * 
     */
    @Import(name="requestLogging")
    private @Nullable Output<String> requestLogging;

    /**
     * @return Enables or disables request logging. The default is `disabled`, possible values are `enabled` and `disabled`.
     * 
     */
    public Optional<Output<String>> requestLogging() {
        return Optional.ofNullable(this.requestLogging);
    }

    /**
     * Defines the pool associated with logging request errors. The default is None.
     * 
     */
    @Import(name="requestlogErrorPool")
    private @Nullable Output<String> requestlogErrorPool;

    /**
     * @return Defines the pool associated with logging request errors. The default is None.
     * 
     */
    public Optional<Output<String>> requestlogErrorPool() {
        return Optional.ofNullable(this.requestlogErrorPool);
    }

    /**
     * Specifies the protocol to be used for high-speed logging of request errors. The default is `mds-udp`,possible values are `mds-udp` and `mds-tcp`.
     * 
     */
    @Import(name="requestlogErrorProtocol")
    private @Nullable Output<String> requestlogErrorProtocol;

    /**
     * @return Specifies the protocol to be used for high-speed logging of request errors. The default is `mds-udp`,possible values are `mds-udp` and `mds-tcp`.
     * 
     */
    public Optional<Output<String>> requestlogErrorProtocol() {
        return Optional.ofNullable(this.requestlogErrorProtocol);
    }

    /**
     * Specifies the directives and entries to be logged for request errors.
     * 
     */
    @Import(name="requestlogErrorTemplate")
    private @Nullable Output<String> requestlogErrorTemplate;

    /**
     * @return Specifies the directives and entries to be logged for request errors.
     * 
     */
    public Optional<Output<String>> requestlogErrorTemplate() {
        return Optional.ofNullable(this.requestlogErrorTemplate);
    }

    /**
     * Defines the pool to send logs to. Typically, the pool will contain one or more syslog servers. It is recommended that you create a pool specifically for logging requests. The default is `none`.
     * 
     */
    @Import(name="requestlogPool")
    private @Nullable Output<String> requestlogPool;

    /**
     * @return Defines the pool to send logs to. Typically, the pool will contain one or more syslog servers. It is recommended that you create a pool specifically for logging requests. The default is `none`.
     * 
     */
    public Optional<Output<String>> requestlogPool() {
        return Optional.ofNullable(this.requestlogPool);
    }

    /**
     * Specifies the protocol to be used for high-speed logging of requests. The default is `mds-udp`,possible values are `mds-udp` and `mds-tcp`.
     * 
     */
    @Import(name="requestlogProtocol")
    private @Nullable Output<String> requestlogProtocol;

    /**
     * @return Specifies the protocol to be used for high-speed logging of requests. The default is `mds-udp`,possible values are `mds-udp` and `mds-tcp`.
     * 
     */
    public Optional<Output<String>> requestlogProtocol() {
        return Optional.ofNullable(this.requestlogProtocol);
    }

    /**
     * Specifies the directives and entries to be logged. More infor on requestlog_template can be found [here](https://techdocs.f5.com/en-us/bigip-15-0-0/external-monitoring-of-big-ip-systems-implementations/configuring-request-logging.html). how to use can be find [here](https://my.f5.com/manage/s/article/K00847516).
     * 
     */
    @Import(name="requestlogTemplate")
    private @Nullable Output<String> requestlogTemplate;

    /**
     * @return Specifies the directives and entries to be logged. More infor on requestlog_template can be found [here](https://techdocs.f5.com/en-us/bigip-15-0-0/external-monitoring-of-big-ip-systems-implementations/configuring-request-logging.html). how to use can be find [here](https://my.f5.com/manage/s/article/K00847516).
     * 
     */
    public Optional<Output<String>> requestlogTemplate() {
        return Optional.ofNullable(this.requestlogTemplate);
    }

    /**
     * Enables or disables response logging. The default is `disabled`, possible values are `enabled` and `disabled`.
     * 
     */
    @Import(name="responseLogging")
    private @Nullable Output<String> responseLogging;

    /**
     * @return Enables or disables response logging. The default is `disabled`, possible values are `enabled` and `disabled`.
     * 
     */
    public Optional<Output<String>> responseLogging() {
        return Optional.ofNullable(this.responseLogging);
    }

    /**
     * Defines the pool associated with logging response errors. The default is `none`.
     * 
     */
    @Import(name="responselogErrorPool")
    private @Nullable Output<String> responselogErrorPool;

    /**
     * @return Defines the pool associated with logging response errors. The default is `none`.
     * 
     */
    public Optional<Output<String>> responselogErrorPool() {
        return Optional.ofNullable(this.responselogErrorPool);
    }

    /**
     * Specifies the protocol to be used for high-speed logging of response errors. The default is `mds-udp`,possible values are `mds-udp` and `mds-tcp`.
     * 
     */
    @Import(name="responselogErrorProtocol")
    private @Nullable Output<String> responselogErrorProtocol;

    /**
     * @return Specifies the protocol to be used for high-speed logging of response errors. The default is `mds-udp`,possible values are `mds-udp` and `mds-tcp`.
     * 
     */
    public Optional<Output<String>> responselogErrorProtocol() {
        return Optional.ofNullable(this.responselogErrorProtocol);
    }

    /**
     * Specifies the directives and entries to be logged for request errors.
     * 
     */
    @Import(name="responselogErrorTemplate")
    private @Nullable Output<String> responselogErrorTemplate;

    /**
     * @return Specifies the directives and entries to be logged for request errors.
     * 
     */
    public Optional<Output<String>> responselogErrorTemplate() {
        return Optional.ofNullable(this.responselogErrorTemplate);
    }

    /**
     * Defines the pool to send logs to. Typically, the pool contains one or more syslog servers. It is recommended that you create a pool specifically for logging responses. The default is `none`.
     * 
     */
    @Import(name="responselogPool")
    private @Nullable Output<String> responselogPool;

    /**
     * @return Defines the pool to send logs to. Typically, the pool contains one or more syslog servers. It is recommended that you create a pool specifically for logging responses. The default is `none`.
     * 
     */
    public Optional<Output<String>> responselogPool() {
        return Optional.ofNullable(this.responselogPool);
    }

    /**
     * Specifies the protocol to be used for high-speed logging of responses. The default is `mds-udp`,possible values are `mds-udp` and `mds-tcp`.
     * 
     */
    @Import(name="responselogProtocol")
    private @Nullable Output<String> responselogProtocol;

    /**
     * @return Specifies the protocol to be used for high-speed logging of responses. The default is `mds-udp`,possible values are `mds-udp` and `mds-tcp`.
     * 
     */
    public Optional<Output<String>> responselogProtocol() {
        return Optional.ofNullable(this.responselogProtocol);
    }

    /**
     * Specifies the directives and entries to be logged. More infor on responselog_template can be found [here](https://techdocs.f5.com/en-us/bigip-15-0-0/external-monitoring-of-big-ip-systems-implementations/configuring-request-logging.html). how to use can be find [here](https://my.f5.com/manage/s/article/K00847516).
     * 
     */
    @Import(name="responselogTemplate")
    private @Nullable Output<String> responselogTemplate;

    /**
     * @return Specifies the directives and entries to be logged. More infor on responselog_template can be found [here](https://techdocs.f5.com/en-us/bigip-15-0-0/external-monitoring-of-big-ip-systems-implementations/configuring-request-logging.html). how to use can be find [here](https://my.f5.com/manage/s/article/K00847516).
     * 
     */
    public Optional<Output<String>> responselogTemplate() {
        return Optional.ofNullable(this.responselogTemplate);
    }

    private RequestLogProfileState() {}

    private RequestLogProfileState(RequestLogProfileState $) {
        this.defaultsFrom = $.defaultsFrom;
        this.description = $.description;
        this.name = $.name;
        this.proxyResponse = $.proxyResponse;
        this.proxycloseOnError = $.proxycloseOnError;
        this.proxyrespondOnLoggingerror = $.proxyrespondOnLoggingerror;
        this.requestLogging = $.requestLogging;
        this.requestlogErrorPool = $.requestlogErrorPool;
        this.requestlogErrorProtocol = $.requestlogErrorProtocol;
        this.requestlogErrorTemplate = $.requestlogErrorTemplate;
        this.requestlogPool = $.requestlogPool;
        this.requestlogProtocol = $.requestlogProtocol;
        this.requestlogTemplate = $.requestlogTemplate;
        this.responseLogging = $.responseLogging;
        this.responselogErrorPool = $.responselogErrorPool;
        this.responselogErrorProtocol = $.responselogErrorProtocol;
        this.responselogErrorTemplate = $.responselogErrorTemplate;
        this.responselogPool = $.responselogPool;
        this.responselogProtocol = $.responselogProtocol;
        this.responselogTemplate = $.responselogTemplate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RequestLogProfileState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RequestLogProfileState $;

        public Builder() {
            $ = new RequestLogProfileState();
        }

        public Builder(RequestLogProfileState defaults) {
            $ = new RequestLogProfileState(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultsFrom Specifies the profile from which this profile inherits settings. The default is the system-supplied `request-log` profile.
         * 
         * @return builder
         * 
         */
        public Builder defaultsFrom(@Nullable Output<String> defaultsFrom) {
            $.defaultsFrom = defaultsFrom;
            return this;
        }

        /**
         * @param defaultsFrom Specifies the profile from which this profile inherits settings. The default is the system-supplied `request-log` profile.
         * 
         * @return builder
         * 
         */
        public Builder defaultsFrom(String defaultsFrom) {
            return defaultsFrom(Output.of(defaultsFrom));
        }

        /**
         * @param description Specifies user-defined description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Specifies user-defined description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Name of the Request Logging profile,name of Profile should be full path. Full path is the combination of the `partition + profile name`,For example `/Common/request-log-profile-tc1`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Request Logging profile,name of Profile should be full path. Full path is the combination of the `partition + profile name`,For example `/Common/request-log-profile-tc1`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param proxyResponse Defines the pool associated with logging request errors. The default is None.
         * 
         * @return builder
         * 
         */
        public Builder proxyResponse(@Nullable Output<String> proxyResponse) {
            $.proxyResponse = proxyResponse;
            return this;
        }

        /**
         * @param proxyResponse Defines the pool associated with logging request errors. The default is None.
         * 
         * @return builder
         * 
         */
        public Builder proxyResponse(String proxyResponse) {
            return proxyResponse(Output.of(proxyResponse));
        }

        /**
         * @param proxycloseOnError Defines the pool associated with logging request errors. The default is None.
         * 
         * @return builder
         * 
         */
        public Builder proxycloseOnError(@Nullable Output<String> proxycloseOnError) {
            $.proxycloseOnError = proxycloseOnError;
            return this;
        }

        /**
         * @param proxycloseOnError Defines the pool associated with logging request errors. The default is None.
         * 
         * @return builder
         * 
         */
        public Builder proxycloseOnError(String proxycloseOnError) {
            return proxycloseOnError(Output.of(proxycloseOnError));
        }

        /**
         * @param proxyrespondOnLoggingerror Defines the pool associated with logging request errors. The default is None.
         * 
         * @return builder
         * 
         */
        public Builder proxyrespondOnLoggingerror(@Nullable Output<String> proxyrespondOnLoggingerror) {
            $.proxyrespondOnLoggingerror = proxyrespondOnLoggingerror;
            return this;
        }

        /**
         * @param proxyrespondOnLoggingerror Defines the pool associated with logging request errors. The default is None.
         * 
         * @return builder
         * 
         */
        public Builder proxyrespondOnLoggingerror(String proxyrespondOnLoggingerror) {
            return proxyrespondOnLoggingerror(Output.of(proxyrespondOnLoggingerror));
        }

        /**
         * @param requestLogging Enables or disables request logging. The default is `disabled`, possible values are `enabled` and `disabled`.
         * 
         * @return builder
         * 
         */
        public Builder requestLogging(@Nullable Output<String> requestLogging) {
            $.requestLogging = requestLogging;
            return this;
        }

        /**
         * @param requestLogging Enables or disables request logging. The default is `disabled`, possible values are `enabled` and `disabled`.
         * 
         * @return builder
         * 
         */
        public Builder requestLogging(String requestLogging) {
            return requestLogging(Output.of(requestLogging));
        }

        /**
         * @param requestlogErrorPool Defines the pool associated with logging request errors. The default is None.
         * 
         * @return builder
         * 
         */
        public Builder requestlogErrorPool(@Nullable Output<String> requestlogErrorPool) {
            $.requestlogErrorPool = requestlogErrorPool;
            return this;
        }

        /**
         * @param requestlogErrorPool Defines the pool associated with logging request errors. The default is None.
         * 
         * @return builder
         * 
         */
        public Builder requestlogErrorPool(String requestlogErrorPool) {
            return requestlogErrorPool(Output.of(requestlogErrorPool));
        }

        /**
         * @param requestlogErrorProtocol Specifies the protocol to be used for high-speed logging of request errors. The default is `mds-udp`,possible values are `mds-udp` and `mds-tcp`.
         * 
         * @return builder
         * 
         */
        public Builder requestlogErrorProtocol(@Nullable Output<String> requestlogErrorProtocol) {
            $.requestlogErrorProtocol = requestlogErrorProtocol;
            return this;
        }

        /**
         * @param requestlogErrorProtocol Specifies the protocol to be used for high-speed logging of request errors. The default is `mds-udp`,possible values are `mds-udp` and `mds-tcp`.
         * 
         * @return builder
         * 
         */
        public Builder requestlogErrorProtocol(String requestlogErrorProtocol) {
            return requestlogErrorProtocol(Output.of(requestlogErrorProtocol));
        }

        /**
         * @param requestlogErrorTemplate Specifies the directives and entries to be logged for request errors.
         * 
         * @return builder
         * 
         */
        public Builder requestlogErrorTemplate(@Nullable Output<String> requestlogErrorTemplate) {
            $.requestlogErrorTemplate = requestlogErrorTemplate;
            return this;
        }

        /**
         * @param requestlogErrorTemplate Specifies the directives and entries to be logged for request errors.
         * 
         * @return builder
         * 
         */
        public Builder requestlogErrorTemplate(String requestlogErrorTemplate) {
            return requestlogErrorTemplate(Output.of(requestlogErrorTemplate));
        }

        /**
         * @param requestlogPool Defines the pool to send logs to. Typically, the pool will contain one or more syslog servers. It is recommended that you create a pool specifically for logging requests. The default is `none`.
         * 
         * @return builder
         * 
         */
        public Builder requestlogPool(@Nullable Output<String> requestlogPool) {
            $.requestlogPool = requestlogPool;
            return this;
        }

        /**
         * @param requestlogPool Defines the pool to send logs to. Typically, the pool will contain one or more syslog servers. It is recommended that you create a pool specifically for logging requests. The default is `none`.
         * 
         * @return builder
         * 
         */
        public Builder requestlogPool(String requestlogPool) {
            return requestlogPool(Output.of(requestlogPool));
        }

        /**
         * @param requestlogProtocol Specifies the protocol to be used for high-speed logging of requests. The default is `mds-udp`,possible values are `mds-udp` and `mds-tcp`.
         * 
         * @return builder
         * 
         */
        public Builder requestlogProtocol(@Nullable Output<String> requestlogProtocol) {
            $.requestlogProtocol = requestlogProtocol;
            return this;
        }

        /**
         * @param requestlogProtocol Specifies the protocol to be used for high-speed logging of requests. The default is `mds-udp`,possible values are `mds-udp` and `mds-tcp`.
         * 
         * @return builder
         * 
         */
        public Builder requestlogProtocol(String requestlogProtocol) {
            return requestlogProtocol(Output.of(requestlogProtocol));
        }

        /**
         * @param requestlogTemplate Specifies the directives and entries to be logged. More infor on requestlog_template can be found [here](https://techdocs.f5.com/en-us/bigip-15-0-0/external-monitoring-of-big-ip-systems-implementations/configuring-request-logging.html). how to use can be find [here](https://my.f5.com/manage/s/article/K00847516).
         * 
         * @return builder
         * 
         */
        public Builder requestlogTemplate(@Nullable Output<String> requestlogTemplate) {
            $.requestlogTemplate = requestlogTemplate;
            return this;
        }

        /**
         * @param requestlogTemplate Specifies the directives and entries to be logged. More infor on requestlog_template can be found [here](https://techdocs.f5.com/en-us/bigip-15-0-0/external-monitoring-of-big-ip-systems-implementations/configuring-request-logging.html). how to use can be find [here](https://my.f5.com/manage/s/article/K00847516).
         * 
         * @return builder
         * 
         */
        public Builder requestlogTemplate(String requestlogTemplate) {
            return requestlogTemplate(Output.of(requestlogTemplate));
        }

        /**
         * @param responseLogging Enables or disables response logging. The default is `disabled`, possible values are `enabled` and `disabled`.
         * 
         * @return builder
         * 
         */
        public Builder responseLogging(@Nullable Output<String> responseLogging) {
            $.responseLogging = responseLogging;
            return this;
        }

        /**
         * @param responseLogging Enables or disables response logging. The default is `disabled`, possible values are `enabled` and `disabled`.
         * 
         * @return builder
         * 
         */
        public Builder responseLogging(String responseLogging) {
            return responseLogging(Output.of(responseLogging));
        }

        /**
         * @param responselogErrorPool Defines the pool associated with logging response errors. The default is `none`.
         * 
         * @return builder
         * 
         */
        public Builder responselogErrorPool(@Nullable Output<String> responselogErrorPool) {
            $.responselogErrorPool = responselogErrorPool;
            return this;
        }

        /**
         * @param responselogErrorPool Defines the pool associated with logging response errors. The default is `none`.
         * 
         * @return builder
         * 
         */
        public Builder responselogErrorPool(String responselogErrorPool) {
            return responselogErrorPool(Output.of(responselogErrorPool));
        }

        /**
         * @param responselogErrorProtocol Specifies the protocol to be used for high-speed logging of response errors. The default is `mds-udp`,possible values are `mds-udp` and `mds-tcp`.
         * 
         * @return builder
         * 
         */
        public Builder responselogErrorProtocol(@Nullable Output<String> responselogErrorProtocol) {
            $.responselogErrorProtocol = responselogErrorProtocol;
            return this;
        }

        /**
         * @param responselogErrorProtocol Specifies the protocol to be used for high-speed logging of response errors. The default is `mds-udp`,possible values are `mds-udp` and `mds-tcp`.
         * 
         * @return builder
         * 
         */
        public Builder responselogErrorProtocol(String responselogErrorProtocol) {
            return responselogErrorProtocol(Output.of(responselogErrorProtocol));
        }

        /**
         * @param responselogErrorTemplate Specifies the directives and entries to be logged for request errors.
         * 
         * @return builder
         * 
         */
        public Builder responselogErrorTemplate(@Nullable Output<String> responselogErrorTemplate) {
            $.responselogErrorTemplate = responselogErrorTemplate;
            return this;
        }

        /**
         * @param responselogErrorTemplate Specifies the directives and entries to be logged for request errors.
         * 
         * @return builder
         * 
         */
        public Builder responselogErrorTemplate(String responselogErrorTemplate) {
            return responselogErrorTemplate(Output.of(responselogErrorTemplate));
        }

        /**
         * @param responselogPool Defines the pool to send logs to. Typically, the pool contains one or more syslog servers. It is recommended that you create a pool specifically for logging responses. The default is `none`.
         * 
         * @return builder
         * 
         */
        public Builder responselogPool(@Nullable Output<String> responselogPool) {
            $.responselogPool = responselogPool;
            return this;
        }

        /**
         * @param responselogPool Defines the pool to send logs to. Typically, the pool contains one or more syslog servers. It is recommended that you create a pool specifically for logging responses. The default is `none`.
         * 
         * @return builder
         * 
         */
        public Builder responselogPool(String responselogPool) {
            return responselogPool(Output.of(responselogPool));
        }

        /**
         * @param responselogProtocol Specifies the protocol to be used for high-speed logging of responses. The default is `mds-udp`,possible values are `mds-udp` and `mds-tcp`.
         * 
         * @return builder
         * 
         */
        public Builder responselogProtocol(@Nullable Output<String> responselogProtocol) {
            $.responselogProtocol = responselogProtocol;
            return this;
        }

        /**
         * @param responselogProtocol Specifies the protocol to be used for high-speed logging of responses. The default is `mds-udp`,possible values are `mds-udp` and `mds-tcp`.
         * 
         * @return builder
         * 
         */
        public Builder responselogProtocol(String responselogProtocol) {
            return responselogProtocol(Output.of(responselogProtocol));
        }

        /**
         * @param responselogTemplate Specifies the directives and entries to be logged. More infor on responselog_template can be found [here](https://techdocs.f5.com/en-us/bigip-15-0-0/external-monitoring-of-big-ip-systems-implementations/configuring-request-logging.html). how to use can be find [here](https://my.f5.com/manage/s/article/K00847516).
         * 
         * @return builder
         * 
         */
        public Builder responselogTemplate(@Nullable Output<String> responselogTemplate) {
            $.responselogTemplate = responselogTemplate;
            return this;
        }

        /**
         * @param responselogTemplate Specifies the directives and entries to be logged. More infor on responselog_template can be found [here](https://techdocs.f5.com/en-us/bigip-15-0-0/external-monitoring-of-big-ip-systems-implementations/configuring-request-logging.html). how to use can be find [here](https://my.f5.com/manage/s/article/K00847516).
         * 
         * @return builder
         * 
         */
        public Builder responselogTemplate(String responselogTemplate) {
            return responselogTemplate(Output.of(responselogTemplate));
        }

        public RequestLogProfileState build() {
            return $;
        }
    }

}
