// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WafPolicyFileTypeArgs extends com.pulumi.resources.ResourceArgs {

    public static final WafPolicyFileTypeArgs Empty = new WafPolicyFileTypeArgs();

    /**
     * Determines whether the file type is allowed or disallowed. In either of these cases the VIOL_FILETYPE violation is issued (if enabled) for an incoming request-
     * * No allowed file type matched the file type of the request.
     * * The file type of the request matched a disallowed file type.
     * 
     */
    @Import(name="allowed")
    private @Nullable Output<Boolean> allowed;

    /**
     * @return Determines whether the file type is allowed or disallowed. In either of these cases the VIOL_FILETYPE violation is issued (if enabled) for an incoming request-
     * * No allowed file type matched the file type of the request.
     * * The file type of the request matched a disallowed file type.
     * 
     */
    public Optional<Output<Boolean>> allowed() {
        return Optional.ofNullable(this.allowed);
    }

    /**
     * Specifies the file type name as appearing in the URL extension.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the file type name as appearing in the URL extension.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Determines the type of the name attribute. Only when setting the type to `wildcard` will the special wildcard characters in the name be interpreted as such
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Determines the type of the name attribute. Only when setting the type to `wildcard` will the special wildcard characters in the name be interpreted as such
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private WafPolicyFileTypeArgs() {}

    private WafPolicyFileTypeArgs(WafPolicyFileTypeArgs $) {
        this.allowed = $.allowed;
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WafPolicyFileTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WafPolicyFileTypeArgs $;

        public Builder() {
            $ = new WafPolicyFileTypeArgs();
        }

        public Builder(WafPolicyFileTypeArgs defaults) {
            $ = new WafPolicyFileTypeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowed Determines whether the file type is allowed or disallowed. In either of these cases the VIOL_FILETYPE violation is issued (if enabled) for an incoming request-
         * * No allowed file type matched the file type of the request.
         * * The file type of the request matched a disallowed file type.
         * 
         * @return builder
         * 
         */
        public Builder allowed(@Nullable Output<Boolean> allowed) {
            $.allowed = allowed;
            return this;
        }

        /**
         * @param allowed Determines whether the file type is allowed or disallowed. In either of these cases the VIOL_FILETYPE violation is issued (if enabled) for an incoming request-
         * * No allowed file type matched the file type of the request.
         * * The file type of the request matched a disallowed file type.
         * 
         * @return builder
         * 
         */
        public Builder allowed(Boolean allowed) {
            return allowed(Output.of(allowed));
        }

        /**
         * @param name Specifies the file type name as appearing in the URL extension.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the file type name as appearing in the URL extension.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type Determines the type of the name attribute. Only when setting the type to `wildcard` will the special wildcard characters in the name be interpreted as such
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Determines the type of the name attribute. Only when setting the type to `wildcard` will the special wildcard characters in the name be interpreted as such
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public WafPolicyFileTypeArgs build() {
            return $;
        }
    }

}
