// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.vcmp;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GuestArgs extends com.pulumi.resources.ResourceArgs {

    public static final GuestArgs Empty = new GuestArgs();

    /**
     * Contains those slots to which the guest is allowed to be assigned.
     * 
     */
    @Import(name="allowedSlots")
    private @Nullable Output<List<Integer>> allowedSlots;

    /**
     * @return Contains those slots to which the guest is allowed to be assigned.
     * 
     */
    public Optional<Output<List<Integer>>> allowedSlots() {
        return Optional.ofNullable(this.allowedSlots);
    }

    /**
     * Specifies the number of cores the system allocates to the guest.
     * 
     */
    @Import(name="coresPerSlot")
    private @Nullable Output<Integer> coresPerSlot;

    /**
     * @return Specifies the number of cores the system allocates to the guest.
     * 
     */
    public Optional<Output<Integer>> coresPerSlot() {
        return Optional.ofNullable(this.coresPerSlot);
    }

    /**
     * Indicates if virtual disk associated with vCMP guest should be removed during remove operation.  The default is `true`
     * 
     */
    @Import(name="deleteVirtualDisk")
    private @Nullable Output<Boolean> deleteVirtualDisk;

    /**
     * @return Indicates if virtual disk associated with vCMP guest should be removed during remove operation.  The default is `true`
     * 
     */
    public Optional<Output<Boolean>> deleteVirtualDisk() {
        return Optional.ofNullable(this.deleteVirtualDisk);
    }

    /**
     * Specifies the hotfix ISO image file which is applied on top of the base image.
     * 
     */
    @Import(name="initialHotfix")
    private @Nullable Output<String> initialHotfix;

    /**
     * @return Specifies the hotfix ISO image file which is applied on top of the base image.
     * 
     */
    public Optional<Output<String>> initialHotfix() {
        return Optional.ofNullable(this.initialHotfix);
    }

    /**
     * Specifies the base software release ISO image file for installing the TMOS hypervisor instance.
     * 
     */
    @Import(name="initialImage")
    private @Nullable Output<String> initialImage;

    /**
     * @return Specifies the base software release ISO image file for installing the TMOS hypervisor instance.
     * 
     */
    public Optional<Output<String>> initialImage() {
        return Optional.ofNullable(this.initialImage);
    }

    /**
     * Specifies the IP address and subnet or subnet mask you use to access the guest when you want to manage a module running within the guest.
     * 
     */
    @Import(name="mgmtAddress")
    private @Nullable Output<String> mgmtAddress;

    /**
     * @return Specifies the IP address and subnet or subnet mask you use to access the guest when you want to manage a module running within the guest.
     * 
     */
    public Optional<Output<String>> mgmtAddress() {
        return Optional.ofNullable(this.mgmtAddress);
    }

    /**
     * Specifies the method by which the management address is used in the vCMP guest. options : [`bridged`,`isolated`,`host-only`].
     * 
     */
    @Import(name="mgmtNetwork")
    private @Nullable Output<String> mgmtNetwork;

    /**
     * @return Specifies the method by which the management address is used in the vCMP guest. options : [`bridged`,`isolated`,`host-only`].
     * 
     */
    public Optional<Output<String>> mgmtNetwork() {
        return Optional.ofNullable(this.mgmtNetwork);
    }

    /**
     * Specifies the gateway address for the `mgmtAddress`. Can be set to `none` to remove the value from the configuration.
     * 
     */
    @Import(name="mgmtRoute")
    private @Nullable Output<String> mgmtRoute;

    /**
     * @return Specifies the gateway address for the `mgmtAddress`. Can be set to `none` to remove the value from the configuration.
     * 
     */
    public Optional<Output<String>> mgmtRoute() {
        return Optional.ofNullable(this.mgmtRoute);
    }

    /**
     * Specifies the minimum number of slots the guest must be assigned to in order to deploy.
     * 
     */
    @Import(name="minNumberOfSlots")
    private @Nullable Output<Integer> minNumberOfSlots;

    /**
     * @return Specifies the minimum number of slots the guest must be assigned to in order to deploy.
     * 
     */
    public Optional<Output<Integer>> minNumberOfSlots() {
        return Optional.ofNullable(this.minNumberOfSlots);
    }

    /**
     * Name of the vCMP guest
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the vCMP guest
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Specifies the number of slots for the system to use when creating the guest.
     * 
     */
    @Import(name="numberOfSlots")
    private @Nullable Output<Integer> numberOfSlots;

    /**
     * @return Specifies the number of slots for the system to use when creating the guest.
     * 
     */
    public Optional<Output<Integer>> numberOfSlots() {
        return Optional.ofNullable(this.numberOfSlots);
    }

    /**
     * Specifies the state of the vCMP guest on the system. options : [`configured`,`provisioned`,`deployed`].
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Specifies the state of the vCMP guest on the system. options : [`configured`,`provisioned`,`deployed`].
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Specifies the list of VLANs the vCMP guest uses to communicate with other guests, the host, and with the external network. The naming format must be the combination of the partition + name. For example /Common/my-vlan
     * 
     */
    @Import(name="vlans")
    private @Nullable Output<List<String>> vlans;

    /**
     * @return Specifies the list of VLANs the vCMP guest uses to communicate with other guests, the host, and with the external network. The naming format must be the combination of the partition + name. For example /Common/my-vlan
     * 
     */
    public Optional<Output<List<String>>> vlans() {
        return Optional.ofNullable(this.vlans);
    }

    private GuestArgs() {}

    private GuestArgs(GuestArgs $) {
        this.allowedSlots = $.allowedSlots;
        this.coresPerSlot = $.coresPerSlot;
        this.deleteVirtualDisk = $.deleteVirtualDisk;
        this.initialHotfix = $.initialHotfix;
        this.initialImage = $.initialImage;
        this.mgmtAddress = $.mgmtAddress;
        this.mgmtNetwork = $.mgmtNetwork;
        this.mgmtRoute = $.mgmtRoute;
        this.minNumberOfSlots = $.minNumberOfSlots;
        this.name = $.name;
        this.numberOfSlots = $.numberOfSlots;
        this.state = $.state;
        this.vlans = $.vlans;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GuestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GuestArgs $;

        public Builder() {
            $ = new GuestArgs();
        }

        public Builder(GuestArgs defaults) {
            $ = new GuestArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedSlots Contains those slots to which the guest is allowed to be assigned.
         * 
         * @return builder
         * 
         */
        public Builder allowedSlots(@Nullable Output<List<Integer>> allowedSlots) {
            $.allowedSlots = allowedSlots;
            return this;
        }

        /**
         * @param allowedSlots Contains those slots to which the guest is allowed to be assigned.
         * 
         * @return builder
         * 
         */
        public Builder allowedSlots(List<Integer> allowedSlots) {
            return allowedSlots(Output.of(allowedSlots));
        }

        /**
         * @param allowedSlots Contains those slots to which the guest is allowed to be assigned.
         * 
         * @return builder
         * 
         */
        public Builder allowedSlots(Integer... allowedSlots) {
            return allowedSlots(List.of(allowedSlots));
        }

        /**
         * @param coresPerSlot Specifies the number of cores the system allocates to the guest.
         * 
         * @return builder
         * 
         */
        public Builder coresPerSlot(@Nullable Output<Integer> coresPerSlot) {
            $.coresPerSlot = coresPerSlot;
            return this;
        }

        /**
         * @param coresPerSlot Specifies the number of cores the system allocates to the guest.
         * 
         * @return builder
         * 
         */
        public Builder coresPerSlot(Integer coresPerSlot) {
            return coresPerSlot(Output.of(coresPerSlot));
        }

        /**
         * @param deleteVirtualDisk Indicates if virtual disk associated with vCMP guest should be removed during remove operation.  The default is `true`
         * 
         * @return builder
         * 
         */
        public Builder deleteVirtualDisk(@Nullable Output<Boolean> deleteVirtualDisk) {
            $.deleteVirtualDisk = deleteVirtualDisk;
            return this;
        }

        /**
         * @param deleteVirtualDisk Indicates if virtual disk associated with vCMP guest should be removed during remove operation.  The default is `true`
         * 
         * @return builder
         * 
         */
        public Builder deleteVirtualDisk(Boolean deleteVirtualDisk) {
            return deleteVirtualDisk(Output.of(deleteVirtualDisk));
        }

        /**
         * @param initialHotfix Specifies the hotfix ISO image file which is applied on top of the base image.
         * 
         * @return builder
         * 
         */
        public Builder initialHotfix(@Nullable Output<String> initialHotfix) {
            $.initialHotfix = initialHotfix;
            return this;
        }

        /**
         * @param initialHotfix Specifies the hotfix ISO image file which is applied on top of the base image.
         * 
         * @return builder
         * 
         */
        public Builder initialHotfix(String initialHotfix) {
            return initialHotfix(Output.of(initialHotfix));
        }

        /**
         * @param initialImage Specifies the base software release ISO image file for installing the TMOS hypervisor instance.
         * 
         * @return builder
         * 
         */
        public Builder initialImage(@Nullable Output<String> initialImage) {
            $.initialImage = initialImage;
            return this;
        }

        /**
         * @param initialImage Specifies the base software release ISO image file for installing the TMOS hypervisor instance.
         * 
         * @return builder
         * 
         */
        public Builder initialImage(String initialImage) {
            return initialImage(Output.of(initialImage));
        }

        /**
         * @param mgmtAddress Specifies the IP address and subnet or subnet mask you use to access the guest when you want to manage a module running within the guest.
         * 
         * @return builder
         * 
         */
        public Builder mgmtAddress(@Nullable Output<String> mgmtAddress) {
            $.mgmtAddress = mgmtAddress;
            return this;
        }

        /**
         * @param mgmtAddress Specifies the IP address and subnet or subnet mask you use to access the guest when you want to manage a module running within the guest.
         * 
         * @return builder
         * 
         */
        public Builder mgmtAddress(String mgmtAddress) {
            return mgmtAddress(Output.of(mgmtAddress));
        }

        /**
         * @param mgmtNetwork Specifies the method by which the management address is used in the vCMP guest. options : [`bridged`,`isolated`,`host-only`].
         * 
         * @return builder
         * 
         */
        public Builder mgmtNetwork(@Nullable Output<String> mgmtNetwork) {
            $.mgmtNetwork = mgmtNetwork;
            return this;
        }

        /**
         * @param mgmtNetwork Specifies the method by which the management address is used in the vCMP guest. options : [`bridged`,`isolated`,`host-only`].
         * 
         * @return builder
         * 
         */
        public Builder mgmtNetwork(String mgmtNetwork) {
            return mgmtNetwork(Output.of(mgmtNetwork));
        }

        /**
         * @param mgmtRoute Specifies the gateway address for the `mgmtAddress`. Can be set to `none` to remove the value from the configuration.
         * 
         * @return builder
         * 
         */
        public Builder mgmtRoute(@Nullable Output<String> mgmtRoute) {
            $.mgmtRoute = mgmtRoute;
            return this;
        }

        /**
         * @param mgmtRoute Specifies the gateway address for the `mgmtAddress`. Can be set to `none` to remove the value from the configuration.
         * 
         * @return builder
         * 
         */
        public Builder mgmtRoute(String mgmtRoute) {
            return mgmtRoute(Output.of(mgmtRoute));
        }

        /**
         * @param minNumberOfSlots Specifies the minimum number of slots the guest must be assigned to in order to deploy.
         * 
         * @return builder
         * 
         */
        public Builder minNumberOfSlots(@Nullable Output<Integer> minNumberOfSlots) {
            $.minNumberOfSlots = minNumberOfSlots;
            return this;
        }

        /**
         * @param minNumberOfSlots Specifies the minimum number of slots the guest must be assigned to in order to deploy.
         * 
         * @return builder
         * 
         */
        public Builder minNumberOfSlots(Integer minNumberOfSlots) {
            return minNumberOfSlots(Output.of(minNumberOfSlots));
        }

        /**
         * @param name Name of the vCMP guest
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the vCMP guest
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param numberOfSlots Specifies the number of slots for the system to use when creating the guest.
         * 
         * @return builder
         * 
         */
        public Builder numberOfSlots(@Nullable Output<Integer> numberOfSlots) {
            $.numberOfSlots = numberOfSlots;
            return this;
        }

        /**
         * @param numberOfSlots Specifies the number of slots for the system to use when creating the guest.
         * 
         * @return builder
         * 
         */
        public Builder numberOfSlots(Integer numberOfSlots) {
            return numberOfSlots(Output.of(numberOfSlots));
        }

        /**
         * @param state Specifies the state of the vCMP guest on the system. options : [`configured`,`provisioned`,`deployed`].
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Specifies the state of the vCMP guest on the system. options : [`configured`,`provisioned`,`deployed`].
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param vlans Specifies the list of VLANs the vCMP guest uses to communicate with other guests, the host, and with the external network. The naming format must be the combination of the partition + name. For example /Common/my-vlan
         * 
         * @return builder
         * 
         */
        public Builder vlans(@Nullable Output<List<String>> vlans) {
            $.vlans = vlans;
            return this;
        }

        /**
         * @param vlans Specifies the list of VLANs the vCMP guest uses to communicate with other guests, the host, and with the external network. The naming format must be the combination of the partition + name. For example /Common/my-vlan
         * 
         * @return builder
         * 
         */
        public Builder vlans(List<String> vlans) {
            return vlans(Output.of(vlans));
        }

        /**
         * @param vlans Specifies the list of VLANs the vCMP guest uses to communicate with other guests, the host, and with the external network. The naming format must be the combination of the partition + name. For example /Common/my-vlan
         * 
         * @return builder
         * 
         */
        public Builder vlans(String... vlans) {
            return vlans(List.of(vlans));
        }

        public GuestArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GuestArgs", "name");
            }
            return $;
        }
    }

}
