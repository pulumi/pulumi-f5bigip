// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProfileWebAccelerationState extends com.pulumi.resources.ResourceArgs {

    public static final ProfileWebAccelerationState Empty = new ProfileWebAccelerationState();

    /**
     * Specifies how quickly the system ages a cache entry. The aging rate ranges from 0 (slowest aging) to 10 (fastest aging). The default value is `9`.
     * 
     */
    @Import(name="cacheAgingRate")
    private @Nullable Output<Integer> cacheAgingRate;

    /**
     * @return Specifies how quickly the system ages a cache entry. The aging rate ranges from 0 (slowest aging) to 10 (fastest aging). The default value is `9`.
     * 
     */
    public Optional<Output<Integer>> cacheAgingRate() {
        return Optional.ofNullable(this.cacheAgingRate);
    }

    /**
     * Specifies which cache disabling headers sent by clients the system ignores. The default value is `all`.
     * 
     */
    @Import(name="cacheClientCacheControlMode")
    private @Nullable Output<String> cacheClientCacheControlMode;

    /**
     * @return Specifies which cache disabling headers sent by clients the system ignores. The default value is `all`.
     * 
     */
    public Optional<Output<String>> cacheClientCacheControlMode() {
        return Optional.ofNullable(this.cacheClientCacheControlMode);
    }

    /**
     * Inserts Age and Date headers in the response. The default value is `enabled`.
     * 
     */
    @Import(name="cacheInsertAgeHeader")
    private @Nullable Output<String> cacheInsertAgeHeader;

    /**
     * @return Inserts Age and Date headers in the response. The default value is `enabled`.
     * 
     */
    public Optional<Output<String>> cacheInsertAgeHeader() {
        return Optional.ofNullable(this.cacheInsertAgeHeader);
    }

    /**
     * Specifies how long the system considers the cached content to be valid. The default value is `3600 seconds`.
     * 
     */
    @Import(name="cacheMaxAge")
    private @Nullable Output<Integer> cacheMaxAge;

    /**
     * @return Specifies how long the system considers the cached content to be valid. The default value is `3600 seconds`.
     * 
     */
    public Optional<Output<Integer>> cacheMaxAge() {
        return Optional.ofNullable(this.cacheMaxAge);
    }

    /**
     * Specifies the maximum number of entries that can be in the cache. The default value is `0` (zero), which means that the system does not limit the maximum entries.
     * 
     */
    @Import(name="cacheMaxEntries")
    private @Nullable Output<Integer> cacheMaxEntries;

    /**
     * @return Specifies the maximum number of entries that can be in the cache. The default value is `0` (zero), which means that the system does not limit the maximum entries.
     * 
     */
    public Optional<Output<Integer>> cacheMaxEntries() {
        return Optional.ofNullable(this.cacheMaxEntries);
    }

    /**
     * Specifies the smallest object that the system considers eligible for caching. The default value is `500 bytes`.
     * 
     */
    @Import(name="cacheObjectMaxSize")
    private @Nullable Output<Integer> cacheObjectMaxSize;

    /**
     * @return Specifies the smallest object that the system considers eligible for caching. The default value is `500 bytes`.
     * 
     */
    public Optional<Output<Integer>> cacheObjectMaxSize() {
        return Optional.ofNullable(this.cacheObjectMaxSize);
    }

    /**
     * Specifies the smallest object that the system considers eligible for caching. The default value is `500 bytes`.
     * 
     */
    @Import(name="cacheObjectMinSize")
    private @Nullable Output<Integer> cacheObjectMinSize;

    /**
     * @return Specifies the smallest object that the system considers eligible for caching. The default value is `500 bytes`.
     * 
     */
    public Optional<Output<Integer>> cacheObjectMinSize() {
        return Optional.ofNullable(this.cacheObjectMinSize);
    }

    /**
     * Specifies the maximum size for the cache. When the cache reaches the maximum size, the system starts removing the oldest entries. The default value is `100 megabytes`.
     * 
     */
    @Import(name="cacheSize")
    private @Nullable Output<Integer> cacheSize;

    /**
     * @return Specifies the maximum size for the cache. When the cache reaches the maximum size, the system starts removing the oldest entries. The default value is `100 megabytes`.
     * 
     */
    public Optional<Output<Integer>> cacheSize() {
        return Optional.ofNullable(this.cacheSize);
    }

    /**
     * Configures a list of URIs to exclude from the cache. The default value of `none` specifies no URIs are excluded.
     * 
     */
    @Import(name="cacheUriExcludes")
    private @Nullable Output<List<String>> cacheUriExcludes;

    /**
     * @return Configures a list of URIs to exclude from the cache. The default value of `none` specifies no URIs are excluded.
     * 
     */
    public Optional<Output<List<String>>> cacheUriExcludes() {
        return Optional.ofNullable(this.cacheUriExcludes);
    }

    /**
     * Configures a list of URIs to include in the cache even if they would normally be excluded due to factors like object size or HTTP request type. The default value of none specifies no URIs are to be forced into the cache.
     * 
     */
    @Import(name="cacheUriIncludeOverrides")
    private @Nullable Output<List<String>> cacheUriIncludeOverrides;

    /**
     * @return Configures a list of URIs to include in the cache even if they would normally be excluded due to factors like object size or HTTP request type. The default value of none specifies no URIs are to be forced into the cache.
     * 
     */
    public Optional<Output<List<String>>> cacheUriIncludeOverrides() {
        return Optional.ofNullable(this.cacheUriIncludeOverrides);
    }

    /**
     * Configures a list of URIs to include in the cache. The default value of `.*` specifies that all URIs are cacheable.
     * 
     */
    @Import(name="cacheUriIncludes")
    private @Nullable Output<List<String>> cacheUriIncludes;

    /**
     * @return Configures a list of URIs to include in the cache. The default value of `.*` specifies that all URIs are cacheable.
     * 
     */
    public Optional<Output<List<String>>> cacheUriIncludes() {
        return Optional.ofNullable(this.cacheUriIncludes);
    }

    /**
     * Configures a list of URIs to keep in the cache. The pinning process keeps URIs in cache when they would normally be evicted to make room for more active URIs.
     * 
     */
    @Import(name="cacheUriPinneds")
    private @Nullable Output<List<String>> cacheUriPinneds;

    /**
     * @return Configures a list of URIs to keep in the cache. The pinning process keeps URIs in cache when they would normally be evicted to make room for more active URIs.
     * 
     */
    public Optional<Output<List<String>>> cacheUriPinneds() {
        return Optional.ofNullable(this.cacheUriPinneds);
    }

    /**
     * Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
     * 
     */
    @Import(name="defaultsFrom")
    private @Nullable Output<String> defaultsFrom;

    /**
     * @return Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
     * 
     */
    public Optional<Output<String>> defaultsFrom() {
        return Optional.ofNullable(this.defaultsFrom);
    }

    /**
     * Specifies the name of the web acceleration profile service ,name of Profile should be full path. Full path is the combination of the `partition + web acceleration profile name`,For example `/Common/sample-resource`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the web acceleration profile service ,name of Profile should be full path. Full path is the combination of the `partition + web acceleration profile name`,For example `/Common/sample-resource`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private ProfileWebAccelerationState() {}

    private ProfileWebAccelerationState(ProfileWebAccelerationState $) {
        this.cacheAgingRate = $.cacheAgingRate;
        this.cacheClientCacheControlMode = $.cacheClientCacheControlMode;
        this.cacheInsertAgeHeader = $.cacheInsertAgeHeader;
        this.cacheMaxAge = $.cacheMaxAge;
        this.cacheMaxEntries = $.cacheMaxEntries;
        this.cacheObjectMaxSize = $.cacheObjectMaxSize;
        this.cacheObjectMinSize = $.cacheObjectMinSize;
        this.cacheSize = $.cacheSize;
        this.cacheUriExcludes = $.cacheUriExcludes;
        this.cacheUriIncludeOverrides = $.cacheUriIncludeOverrides;
        this.cacheUriIncludes = $.cacheUriIncludes;
        this.cacheUriPinneds = $.cacheUriPinneds;
        this.defaultsFrom = $.defaultsFrom;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProfileWebAccelerationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProfileWebAccelerationState $;

        public Builder() {
            $ = new ProfileWebAccelerationState();
        }

        public Builder(ProfileWebAccelerationState defaults) {
            $ = new ProfileWebAccelerationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param cacheAgingRate Specifies how quickly the system ages a cache entry. The aging rate ranges from 0 (slowest aging) to 10 (fastest aging). The default value is `9`.
         * 
         * @return builder
         * 
         */
        public Builder cacheAgingRate(@Nullable Output<Integer> cacheAgingRate) {
            $.cacheAgingRate = cacheAgingRate;
            return this;
        }

        /**
         * @param cacheAgingRate Specifies how quickly the system ages a cache entry. The aging rate ranges from 0 (slowest aging) to 10 (fastest aging). The default value is `9`.
         * 
         * @return builder
         * 
         */
        public Builder cacheAgingRate(Integer cacheAgingRate) {
            return cacheAgingRate(Output.of(cacheAgingRate));
        }

        /**
         * @param cacheClientCacheControlMode Specifies which cache disabling headers sent by clients the system ignores. The default value is `all`.
         * 
         * @return builder
         * 
         */
        public Builder cacheClientCacheControlMode(@Nullable Output<String> cacheClientCacheControlMode) {
            $.cacheClientCacheControlMode = cacheClientCacheControlMode;
            return this;
        }

        /**
         * @param cacheClientCacheControlMode Specifies which cache disabling headers sent by clients the system ignores. The default value is `all`.
         * 
         * @return builder
         * 
         */
        public Builder cacheClientCacheControlMode(String cacheClientCacheControlMode) {
            return cacheClientCacheControlMode(Output.of(cacheClientCacheControlMode));
        }

        /**
         * @param cacheInsertAgeHeader Inserts Age and Date headers in the response. The default value is `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder cacheInsertAgeHeader(@Nullable Output<String> cacheInsertAgeHeader) {
            $.cacheInsertAgeHeader = cacheInsertAgeHeader;
            return this;
        }

        /**
         * @param cacheInsertAgeHeader Inserts Age and Date headers in the response. The default value is `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder cacheInsertAgeHeader(String cacheInsertAgeHeader) {
            return cacheInsertAgeHeader(Output.of(cacheInsertAgeHeader));
        }

        /**
         * @param cacheMaxAge Specifies how long the system considers the cached content to be valid. The default value is `3600 seconds`.
         * 
         * @return builder
         * 
         */
        public Builder cacheMaxAge(@Nullable Output<Integer> cacheMaxAge) {
            $.cacheMaxAge = cacheMaxAge;
            return this;
        }

        /**
         * @param cacheMaxAge Specifies how long the system considers the cached content to be valid. The default value is `3600 seconds`.
         * 
         * @return builder
         * 
         */
        public Builder cacheMaxAge(Integer cacheMaxAge) {
            return cacheMaxAge(Output.of(cacheMaxAge));
        }

        /**
         * @param cacheMaxEntries Specifies the maximum number of entries that can be in the cache. The default value is `0` (zero), which means that the system does not limit the maximum entries.
         * 
         * @return builder
         * 
         */
        public Builder cacheMaxEntries(@Nullable Output<Integer> cacheMaxEntries) {
            $.cacheMaxEntries = cacheMaxEntries;
            return this;
        }

        /**
         * @param cacheMaxEntries Specifies the maximum number of entries that can be in the cache. The default value is `0` (zero), which means that the system does not limit the maximum entries.
         * 
         * @return builder
         * 
         */
        public Builder cacheMaxEntries(Integer cacheMaxEntries) {
            return cacheMaxEntries(Output.of(cacheMaxEntries));
        }

        /**
         * @param cacheObjectMaxSize Specifies the smallest object that the system considers eligible for caching. The default value is `500 bytes`.
         * 
         * @return builder
         * 
         */
        public Builder cacheObjectMaxSize(@Nullable Output<Integer> cacheObjectMaxSize) {
            $.cacheObjectMaxSize = cacheObjectMaxSize;
            return this;
        }

        /**
         * @param cacheObjectMaxSize Specifies the smallest object that the system considers eligible for caching. The default value is `500 bytes`.
         * 
         * @return builder
         * 
         */
        public Builder cacheObjectMaxSize(Integer cacheObjectMaxSize) {
            return cacheObjectMaxSize(Output.of(cacheObjectMaxSize));
        }

        /**
         * @param cacheObjectMinSize Specifies the smallest object that the system considers eligible for caching. The default value is `500 bytes`.
         * 
         * @return builder
         * 
         */
        public Builder cacheObjectMinSize(@Nullable Output<Integer> cacheObjectMinSize) {
            $.cacheObjectMinSize = cacheObjectMinSize;
            return this;
        }

        /**
         * @param cacheObjectMinSize Specifies the smallest object that the system considers eligible for caching. The default value is `500 bytes`.
         * 
         * @return builder
         * 
         */
        public Builder cacheObjectMinSize(Integer cacheObjectMinSize) {
            return cacheObjectMinSize(Output.of(cacheObjectMinSize));
        }

        /**
         * @param cacheSize Specifies the maximum size for the cache. When the cache reaches the maximum size, the system starts removing the oldest entries. The default value is `100 megabytes`.
         * 
         * @return builder
         * 
         */
        public Builder cacheSize(@Nullable Output<Integer> cacheSize) {
            $.cacheSize = cacheSize;
            return this;
        }

        /**
         * @param cacheSize Specifies the maximum size for the cache. When the cache reaches the maximum size, the system starts removing the oldest entries. The default value is `100 megabytes`.
         * 
         * @return builder
         * 
         */
        public Builder cacheSize(Integer cacheSize) {
            return cacheSize(Output.of(cacheSize));
        }

        /**
         * @param cacheUriExcludes Configures a list of URIs to exclude from the cache. The default value of `none` specifies no URIs are excluded.
         * 
         * @return builder
         * 
         */
        public Builder cacheUriExcludes(@Nullable Output<List<String>> cacheUriExcludes) {
            $.cacheUriExcludes = cacheUriExcludes;
            return this;
        }

        /**
         * @param cacheUriExcludes Configures a list of URIs to exclude from the cache. The default value of `none` specifies no URIs are excluded.
         * 
         * @return builder
         * 
         */
        public Builder cacheUriExcludes(List<String> cacheUriExcludes) {
            return cacheUriExcludes(Output.of(cacheUriExcludes));
        }

        /**
         * @param cacheUriExcludes Configures a list of URIs to exclude from the cache. The default value of `none` specifies no URIs are excluded.
         * 
         * @return builder
         * 
         */
        public Builder cacheUriExcludes(String... cacheUriExcludes) {
            return cacheUriExcludes(List.of(cacheUriExcludes));
        }

        /**
         * @param cacheUriIncludeOverrides Configures a list of URIs to include in the cache even if they would normally be excluded due to factors like object size or HTTP request type. The default value of none specifies no URIs are to be forced into the cache.
         * 
         * @return builder
         * 
         */
        public Builder cacheUriIncludeOverrides(@Nullable Output<List<String>> cacheUriIncludeOverrides) {
            $.cacheUriIncludeOverrides = cacheUriIncludeOverrides;
            return this;
        }

        /**
         * @param cacheUriIncludeOverrides Configures a list of URIs to include in the cache even if they would normally be excluded due to factors like object size or HTTP request type. The default value of none specifies no URIs are to be forced into the cache.
         * 
         * @return builder
         * 
         */
        public Builder cacheUriIncludeOverrides(List<String> cacheUriIncludeOverrides) {
            return cacheUriIncludeOverrides(Output.of(cacheUriIncludeOverrides));
        }

        /**
         * @param cacheUriIncludeOverrides Configures a list of URIs to include in the cache even if they would normally be excluded due to factors like object size or HTTP request type. The default value of none specifies no URIs are to be forced into the cache.
         * 
         * @return builder
         * 
         */
        public Builder cacheUriIncludeOverrides(String... cacheUriIncludeOverrides) {
            return cacheUriIncludeOverrides(List.of(cacheUriIncludeOverrides));
        }

        /**
         * @param cacheUriIncludes Configures a list of URIs to include in the cache. The default value of `.*` specifies that all URIs are cacheable.
         * 
         * @return builder
         * 
         */
        public Builder cacheUriIncludes(@Nullable Output<List<String>> cacheUriIncludes) {
            $.cacheUriIncludes = cacheUriIncludes;
            return this;
        }

        /**
         * @param cacheUriIncludes Configures a list of URIs to include in the cache. The default value of `.*` specifies that all URIs are cacheable.
         * 
         * @return builder
         * 
         */
        public Builder cacheUriIncludes(List<String> cacheUriIncludes) {
            return cacheUriIncludes(Output.of(cacheUriIncludes));
        }

        /**
         * @param cacheUriIncludes Configures a list of URIs to include in the cache. The default value of `.*` specifies that all URIs are cacheable.
         * 
         * @return builder
         * 
         */
        public Builder cacheUriIncludes(String... cacheUriIncludes) {
            return cacheUriIncludes(List.of(cacheUriIncludes));
        }

        /**
         * @param cacheUriPinneds Configures a list of URIs to keep in the cache. The pinning process keeps URIs in cache when they would normally be evicted to make room for more active URIs.
         * 
         * @return builder
         * 
         */
        public Builder cacheUriPinneds(@Nullable Output<List<String>> cacheUriPinneds) {
            $.cacheUriPinneds = cacheUriPinneds;
            return this;
        }

        /**
         * @param cacheUriPinneds Configures a list of URIs to keep in the cache. The pinning process keeps URIs in cache when they would normally be evicted to make room for more active URIs.
         * 
         * @return builder
         * 
         */
        public Builder cacheUriPinneds(List<String> cacheUriPinneds) {
            return cacheUriPinneds(Output.of(cacheUriPinneds));
        }

        /**
         * @param cacheUriPinneds Configures a list of URIs to keep in the cache. The pinning process keeps URIs in cache when they would normally be evicted to make room for more active URIs.
         * 
         * @return builder
         * 
         */
        public Builder cacheUriPinneds(String... cacheUriPinneds) {
            return cacheUriPinneds(List.of(cacheUriPinneds));
        }

        /**
         * @param defaultsFrom Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
         * 
         * @return builder
         * 
         */
        public Builder defaultsFrom(@Nullable Output<String> defaultsFrom) {
            $.defaultsFrom = defaultsFrom;
            return this;
        }

        /**
         * @param defaultsFrom Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
         * 
         * @return builder
         * 
         */
        public Builder defaultsFrom(String defaultsFrom) {
            return defaultsFrom(Output.of(defaultsFrom));
        }

        /**
         * @param name Specifies the name of the web acceleration profile service ,name of Profile should be full path. Full path is the combination of the `partition + web acceleration profile name`,For example `/Common/sample-resource`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the web acceleration profile service ,name of Profile should be full path. Full path is the combination of the `partition + web acceleration profile name`,For example `/Common/sample-resource`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public ProfileWebAccelerationState build() {
            return $;
        }
    }

}
