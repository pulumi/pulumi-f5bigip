// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.sys;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DnsArgs extends com.pulumi.resources.ResourceArgs {

    public static final DnsArgs Empty = new DnsArgs();

    /**
     * Provide description for your DNS server
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return Provide description for your DNS server
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * Specifies the name servers that the system uses to validate DNS lookups, and resolve host names.
     * 
     */
    @Import(name="nameServers", required=true)
    private Output<List<String>> nameServers;

    /**
     * @return Specifies the name servers that the system uses to validate DNS lookups, and resolve host names.
     * 
     */
    public Output<List<String>> nameServers() {
        return this.nameServers;
    }

    /**
     * Configures the number of dots needed in a name before an initial absolute query will be made.
     * 
     */
    @Import(name="numberOfDots")
    private @Nullable Output<Integer> numberOfDots;

    /**
     * @return Configures the number of dots needed in a name before an initial absolute query will be made.
     * 
     */
    public Optional<Output<Integer>> numberOfDots() {
        return Optional.ofNullable(this.numberOfDots);
    }

    /**
     * Specifies the domains that the system searches for local domain lookups, to resolve local host names.
     * 
     */
    @Import(name="searches")
    private @Nullable Output<List<String>> searches;

    /**
     * @return Specifies the domains that the system searches for local domain lookups, to resolve local host names.
     * 
     */
    public Optional<Output<List<String>>> searches() {
        return Optional.ofNullable(this.searches);
    }

    private DnsArgs() {}

    private DnsArgs(DnsArgs $) {
        this.description = $.description;
        this.nameServers = $.nameServers;
        this.numberOfDots = $.numberOfDots;
        this.searches = $.searches;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DnsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DnsArgs $;

        public Builder() {
            $ = new DnsArgs();
        }

        public Builder(DnsArgs defaults) {
            $ = new DnsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Provide description for your DNS server
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Provide description for your DNS server
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param nameServers Specifies the name servers that the system uses to validate DNS lookups, and resolve host names.
         * 
         * @return builder
         * 
         */
        public Builder nameServers(Output<List<String>> nameServers) {
            $.nameServers = nameServers;
            return this;
        }

        /**
         * @param nameServers Specifies the name servers that the system uses to validate DNS lookups, and resolve host names.
         * 
         * @return builder
         * 
         */
        public Builder nameServers(List<String> nameServers) {
            return nameServers(Output.of(nameServers));
        }

        /**
         * @param nameServers Specifies the name servers that the system uses to validate DNS lookups, and resolve host names.
         * 
         * @return builder
         * 
         */
        public Builder nameServers(String... nameServers) {
            return nameServers(List.of(nameServers));
        }

        /**
         * @param numberOfDots Configures the number of dots needed in a name before an initial absolute query will be made.
         * 
         * @return builder
         * 
         */
        public Builder numberOfDots(@Nullable Output<Integer> numberOfDots) {
            $.numberOfDots = numberOfDots;
            return this;
        }

        /**
         * @param numberOfDots Configures the number of dots needed in a name before an initial absolute query will be made.
         * 
         * @return builder
         * 
         */
        public Builder numberOfDots(Integer numberOfDots) {
            return numberOfDots(Output.of(numberOfDots));
        }

        /**
         * @param searches Specifies the domains that the system searches for local domain lookups, to resolve local host names.
         * 
         * @return builder
         * 
         */
        public Builder searches(@Nullable Output<List<String>> searches) {
            $.searches = searches;
            return this;
        }

        /**
         * @param searches Specifies the domains that the system searches for local domain lookups, to resolve local host names.
         * 
         * @return builder
         * 
         */
        public Builder searches(List<String> searches) {
            return searches(Output.of(searches));
        }

        /**
         * @param searches Specifies the domains that the system searches for local domain lookups, to resolve local host names.
         * 
         * @return builder
         * 
         */
        public Builder searches(String... searches) {
            return searches(List.of(searches));
        }

        public DnsArgs build() {
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.nameServers = Objects.requireNonNull($.nameServers, "expected parameter 'nameServers' to be non-null");
            return $;
        }
    }

}
