// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProfileClientSslCertKeyChainArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProfileClientSslCertKeyChainArgs Empty = new ProfileClientSslCertKeyChainArgs();

    /**
     * Specifies a cert name for use.
     * 
     */
    @Import(name="cert")
    private @Nullable Output<String> cert;

    /**
     * @return Specifies a cert name for use.
     * 
     */
    public Optional<Output<String>> cert() {
        return Optional.ofNullable(this.cert);
    }

    /**
     * Contains a certificate chain that is relevant to the certificate and key mentioned earlier.This key is optional
     * 
     */
    @Import(name="chain")
    private @Nullable Output<String> chain;

    /**
     * @return Contains a certificate chain that is relevant to the certificate and key mentioned earlier.This key is optional
     * 
     */
    public Optional<Output<String>> chain() {
        return Optional.ofNullable(this.chain);
    }

    /**
     * Contains a key name
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return Contains a key name
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * Specifies the name of the profile.Name of Profile should be full path.The full path is the combination of the `partition + profile name`,For example `/Common/test-clientssl-profile`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the profile.Name of Profile should be full path.The full path is the combination of the `partition + profile name`,For example `/Common/test-clientssl-profile`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="passphrase")
    private @Nullable Output<String> passphrase;

    public Optional<Output<String>> passphrase() {
        return Optional.ofNullable(this.passphrase);
    }

    private ProfileClientSslCertKeyChainArgs() {}

    private ProfileClientSslCertKeyChainArgs(ProfileClientSslCertKeyChainArgs $) {
        this.cert = $.cert;
        this.chain = $.chain;
        this.key = $.key;
        this.name = $.name;
        this.passphrase = $.passphrase;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProfileClientSslCertKeyChainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProfileClientSslCertKeyChainArgs $;

        public Builder() {
            $ = new ProfileClientSslCertKeyChainArgs();
        }

        public Builder(ProfileClientSslCertKeyChainArgs defaults) {
            $ = new ProfileClientSslCertKeyChainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cert Specifies a cert name for use.
         * 
         * @return builder
         * 
         */
        public Builder cert(@Nullable Output<String> cert) {
            $.cert = cert;
            return this;
        }

        /**
         * @param cert Specifies a cert name for use.
         * 
         * @return builder
         * 
         */
        public Builder cert(String cert) {
            return cert(Output.of(cert));
        }

        /**
         * @param chain Contains a certificate chain that is relevant to the certificate and key mentioned earlier.This key is optional
         * 
         * @return builder
         * 
         */
        public Builder chain(@Nullable Output<String> chain) {
            $.chain = chain;
            return this;
        }

        /**
         * @param chain Contains a certificate chain that is relevant to the certificate and key mentioned earlier.This key is optional
         * 
         * @return builder
         * 
         */
        public Builder chain(String chain) {
            return chain(Output.of(chain));
        }

        /**
         * @param key Contains a key name
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Contains a key name
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param name Specifies the name of the profile.Name of Profile should be full path.The full path is the combination of the `partition + profile name`,For example `/Common/test-clientssl-profile`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the profile.Name of Profile should be full path.The full path is the combination of the `partition + profile name`,For example `/Common/test-clientssl-profile`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder passphrase(@Nullable Output<String> passphrase) {
            $.passphrase = passphrase;
            return this;
        }

        public Builder passphrase(String passphrase) {
            return passphrase(Output.of(passphrase));
        }

        public ProfileClientSslCertKeyChainArgs build() {
            return $;
        }
    }

}
