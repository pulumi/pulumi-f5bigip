// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.cm;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.f5bigip.cm.inputs.DeviceGroupDeviceArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeviceGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeviceGroupArgs Empty = new DeviceGroupArgs();

    /**
     * Specifies if the device-group will automatically sync configuration data to its members
     * 
     */
    @Import(name="autoSync")
    private @Nullable Output<String> autoSync;

    /**
     * @return Specifies if the device-group will automatically sync configuration data to its members
     * 
     */
    public Optional<Output<String>> autoSync() {
        return Optional.ofNullable(this.autoSync);
    }

    /**
     * Description of Device group
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of Device group
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name of the device to be included in device group, this need to be configured before using devicegroup resource
     * 
     */
    @Import(name="devices")
    private @Nullable Output<List<DeviceGroupDeviceArgs>> devices;

    /**
     * @return Name of the device to be included in device group, this need to be configured before using devicegroup resource
     * 
     */
    public Optional<Output<List<DeviceGroupDeviceArgs>>> devices() {
        return Optional.ofNullable(this.devices);
    }

    /**
     * Specifies if the device-group will perform a full-load upon sync
     * 
     */
    @Import(name="fullLoadOnSync")
    private @Nullable Output<String> fullLoadOnSync;

    /**
     * @return Specifies if the device-group will perform a full-load upon sync
     * 
     */
    public Optional<Output<String>> fullLoadOnSync() {
        return Optional.ofNullable(this.fullLoadOnSync);
    }

    /**
     * Specifies the maximum size (in KB) to devote to incremental config sync cached transactions. The default is 1024 KB.
     * 
     */
    @Import(name="incrementalConfig")
    private @Nullable Output<Integer> incrementalConfig;

    /**
     * @return Specifies the maximum size (in KB) to devote to incremental config sync cached transactions. The default is 1024 KB.
     * 
     */
    public Optional<Output<Integer>> incrementalConfig() {
        return Optional.ofNullable(this.incrementalConfig);
    }

    /**
     * Is the name of the device Group
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Is the name of the device Group
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies if the device-group will use a network connection for failover
     * 
     */
    @Import(name="networkFailover")
    private @Nullable Output<String> networkFailover;

    /**
     * @return Specifies if the device-group will use a network connection for failover
     * 
     */
    public Optional<Output<String>> networkFailover() {
        return Optional.ofNullable(this.networkFailover);
    }

    /**
     * Device administrative partition
     * 
     */
    @Import(name="partition")
    private @Nullable Output<String> partition;

    /**
     * @return Device administrative partition
     * 
     */
    public Optional<Output<String>> partition() {
        return Optional.ofNullable(this.partition);
    }

    /**
     * Specifies whether the configuration should be saved upon auto-sync.
     * 
     */
    @Import(name="saveOnAutoSync")
    private @Nullable Output<String> saveOnAutoSync;

    /**
     * @return Specifies whether the configuration should be saved upon auto-sync.
     * 
     */
    public Optional<Output<String>> saveOnAutoSync() {
        return Optional.ofNullable(this.saveOnAutoSync);
    }

    /**
     * Specifies if the device-group will be used for failover or resource syncing
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Specifies if the device-group will be used for failover or resource syncing
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private DeviceGroupArgs() {}

    private DeviceGroupArgs(DeviceGroupArgs $) {
        this.autoSync = $.autoSync;
        this.description = $.description;
        this.devices = $.devices;
        this.fullLoadOnSync = $.fullLoadOnSync;
        this.incrementalConfig = $.incrementalConfig;
        this.name = $.name;
        this.networkFailover = $.networkFailover;
        this.partition = $.partition;
        this.saveOnAutoSync = $.saveOnAutoSync;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeviceGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeviceGroupArgs $;

        public Builder() {
            $ = new DeviceGroupArgs();
        }

        public Builder(DeviceGroupArgs defaults) {
            $ = new DeviceGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoSync Specifies if the device-group will automatically sync configuration data to its members
         * 
         * @return builder
         * 
         */
        public Builder autoSync(@Nullable Output<String> autoSync) {
            $.autoSync = autoSync;
            return this;
        }

        /**
         * @param autoSync Specifies if the device-group will automatically sync configuration data to its members
         * 
         * @return builder
         * 
         */
        public Builder autoSync(String autoSync) {
            return autoSync(Output.of(autoSync));
        }

        /**
         * @param description Description of Device group
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of Device group
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param devices Name of the device to be included in device group, this need to be configured before using devicegroup resource
         * 
         * @return builder
         * 
         */
        public Builder devices(@Nullable Output<List<DeviceGroupDeviceArgs>> devices) {
            $.devices = devices;
            return this;
        }

        /**
         * @param devices Name of the device to be included in device group, this need to be configured before using devicegroup resource
         * 
         * @return builder
         * 
         */
        public Builder devices(List<DeviceGroupDeviceArgs> devices) {
            return devices(Output.of(devices));
        }

        /**
         * @param devices Name of the device to be included in device group, this need to be configured before using devicegroup resource
         * 
         * @return builder
         * 
         */
        public Builder devices(DeviceGroupDeviceArgs... devices) {
            return devices(List.of(devices));
        }

        /**
         * @param fullLoadOnSync Specifies if the device-group will perform a full-load upon sync
         * 
         * @return builder
         * 
         */
        public Builder fullLoadOnSync(@Nullable Output<String> fullLoadOnSync) {
            $.fullLoadOnSync = fullLoadOnSync;
            return this;
        }

        /**
         * @param fullLoadOnSync Specifies if the device-group will perform a full-load upon sync
         * 
         * @return builder
         * 
         */
        public Builder fullLoadOnSync(String fullLoadOnSync) {
            return fullLoadOnSync(Output.of(fullLoadOnSync));
        }

        /**
         * @param incrementalConfig Specifies the maximum size (in KB) to devote to incremental config sync cached transactions. The default is 1024 KB.
         * 
         * @return builder
         * 
         */
        public Builder incrementalConfig(@Nullable Output<Integer> incrementalConfig) {
            $.incrementalConfig = incrementalConfig;
            return this;
        }

        /**
         * @param incrementalConfig Specifies the maximum size (in KB) to devote to incremental config sync cached transactions. The default is 1024 KB.
         * 
         * @return builder
         * 
         */
        public Builder incrementalConfig(Integer incrementalConfig) {
            return incrementalConfig(Output.of(incrementalConfig));
        }

        /**
         * @param name Is the name of the device Group
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Is the name of the device Group
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkFailover Specifies if the device-group will use a network connection for failover
         * 
         * @return builder
         * 
         */
        public Builder networkFailover(@Nullable Output<String> networkFailover) {
            $.networkFailover = networkFailover;
            return this;
        }

        /**
         * @param networkFailover Specifies if the device-group will use a network connection for failover
         * 
         * @return builder
         * 
         */
        public Builder networkFailover(String networkFailover) {
            return networkFailover(Output.of(networkFailover));
        }

        /**
         * @param partition Device administrative partition
         * 
         * @return builder
         * 
         */
        public Builder partition(@Nullable Output<String> partition) {
            $.partition = partition;
            return this;
        }

        /**
         * @param partition Device administrative partition
         * 
         * @return builder
         * 
         */
        public Builder partition(String partition) {
            return partition(Output.of(partition));
        }

        /**
         * @param saveOnAutoSync Specifies whether the configuration should be saved upon auto-sync.
         * 
         * @return builder
         * 
         */
        public Builder saveOnAutoSync(@Nullable Output<String> saveOnAutoSync) {
            $.saveOnAutoSync = saveOnAutoSync;
            return this;
        }

        /**
         * @param saveOnAutoSync Specifies whether the configuration should be saved upon auto-sync.
         * 
         * @return builder
         * 
         */
        public Builder saveOnAutoSync(String saveOnAutoSync) {
            return saveOnAutoSync(Output.of(saveOnAutoSync));
        }

        /**
         * @param type Specifies if the device-group will be used for failover or resource syncing
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Specifies if the device-group will be used for failover or resource syncing
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DeviceGroupArgs build() {
            return $;
        }
    }

}
