// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.sys.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OcspState extends com.pulumi.resources.ResourceArgs {

    public static final OcspState Empty = new OcspState();

    /**
     * Specifies the lifetime of an error response in the cache, in seconds. This value must be greater than connection_timeout. The default value is `3600`.
     * 
     */
    @Import(name="cacheErrorTimeout")
    private @Nullable Output<Integer> cacheErrorTimeout;

    /**
     * @return Specifies the lifetime of an error response in the cache, in seconds. This value must be greater than connection_timeout. The default value is `3600`.
     * 
     */
    public Optional<Output<Integer>> cacheErrorTimeout() {
        return Optional.ofNullable(this.cacheErrorTimeout);
    }

    /**
     * Specifies the lifetime of the OCSP response in the cache, in seconds. The default value is `indefinite`.
     * 
     */
    @Import(name="cacheTimeout")
    private @Nullable Output<String> cacheTimeout;

    /**
     * @return Specifies the lifetime of the OCSP response in the cache, in seconds. The default value is `indefinite`.
     * 
     */
    public Optional<Output<String>> cacheTimeout() {
        return Optional.ofNullable(this.cacheTimeout);
    }

    /**
     * Specifies the time interval that the BIG-IP system allows for clock skew, in seconds. The default value is `300`.
     * 
     */
    @Import(name="clockSkew")
    private @Nullable Output<Integer> clockSkew;

    /**
     * @return Specifies the time interval that the BIG-IP system allows for clock skew, in seconds. The default value is `300`.
     * 
     */
    public Optional<Output<Integer>> clockSkew() {
        return Optional.ofNullable(this.clockSkew);
    }

    /**
     * Specifies the maximum number of connections per second allowed for the OCSP certificate validator. The default value is `50`.
     * 
     */
    @Import(name="concurrentConnectionsLimit")
    private @Nullable Output<Integer> concurrentConnectionsLimit;

    /**
     * @return Specifies the maximum number of connections per second allowed for the OCSP certificate validator. The default value is `50`.
     * 
     */
    public Optional<Output<Integer>> concurrentConnectionsLimit() {
        return Optional.ofNullable(this.concurrentConnectionsLimit);
    }

    /**
     * Specifies the time interval that the BIG-IP system waits for before ending the connection to the OCSP responder, in seconds. The default value is `8`.
     * 
     */
    @Import(name="connectionTimeout")
    private @Nullable Output<Integer> connectionTimeout;

    /**
     * @return Specifies the time interval that the BIG-IP system waits for before ending the connection to the OCSP responder, in seconds. The default value is `8`.
     * 
     */
    public Optional<Output<Integer>> connectionTimeout() {
        return Optional.ofNullable(this.connectionTimeout);
    }

    /**
     * Specifies the internal DNS resolver the BIG-IP system uses to fetch the OCSP response.
     * 
     */
    @Import(name="dnsResolver")
    private @Nullable Output<String> dnsResolver;

    /**
     * @return Specifies the internal DNS resolver the BIG-IP system uses to fetch the OCSP response.
     * 
     */
    public Optional<Output<String>> dnsResolver() {
        return Optional.ofNullable(this.dnsResolver);
    }

    /**
     * Name of the OCSP Responder. Name should be in pattern `/partition/ocsp_name`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the OCSP Responder. Name should be in pattern `/partition/ocsp_name`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies a passphrase used to sign an OCSP request.
     * 
     */
    @Import(name="passphrase")
    private @Nullable Output<String> passphrase;

    /**
     * @return Specifies a passphrase used to sign an OCSP request.
     * 
     */
    public Optional<Output<String>> passphrase() {
        return Optional.ofNullable(this.passphrase);
    }

    /**
     * Specifies the proxy server pool the BIG-IP system uses to fetch the OCSP response.
     * 
     */
    @Import(name="proxyServerPool")
    private @Nullable Output<String> proxyServerPool;

    /**
     * @return Specifies the proxy server pool the BIG-IP system uses to fetch the OCSP response.
     * 
     */
    public Optional<Output<String>> proxyServerPool() {
        return Optional.ofNullable(this.proxyServerPool);
    }

    /**
     * Specifies the URL of the OCSP responder.
     * 
     */
    @Import(name="responderUrl")
    private @Nullable Output<String> responderUrl;

    /**
     * @return Specifies the URL of the OCSP responder.
     * 
     */
    public Optional<Output<String>> responderUrl() {
        return Optional.ofNullable(this.responderUrl);
    }

    /**
     * Specifies the route domain for the OCSP responder.
     * 
     */
    @Import(name="routeDomain")
    private @Nullable Output<String> routeDomain;

    /**
     * @return Specifies the route domain for the OCSP responder.
     * 
     */
    public Optional<Output<String>> routeDomain() {
        return Optional.ofNullable(this.routeDomain);
    }

    /**
     * Specifies the hash algorithm used to sign the OCSP request. The default value is `sha256`.
     * 
     */
    @Import(name="signHash")
    private @Nullable Output<String> signHash;

    /**
     * @return Specifies the hash algorithm used to sign the OCSP request. The default value is `sha256`.
     * 
     */
    public Optional<Output<String>> signHash() {
        return Optional.ofNullable(this.signHash);
    }

    /**
     * Specifies the certificate used to sign the OCSP request.
     * 
     */
    @Import(name="signerCert")
    private @Nullable Output<String> signerCert;

    /**
     * @return Specifies the certificate used to sign the OCSP request.
     * 
     */
    public Optional<Output<String>> signerCert() {
        return Optional.ofNullable(this.signerCert);
    }

    /**
     * Specifies the key used to sign the OCSP request.
     * 
     */
    @Import(name="signerKey")
    private @Nullable Output<String> signerKey;

    /**
     * @return Specifies the key used to sign the OCSP request.
     * 
     */
    public Optional<Output<String>> signerKey() {
        return Optional.ofNullable(this.signerKey);
    }

    /**
     * Specifies the maximum allowed lag time that the BIG-IP system accepts for the &#39;thisUpdate&#39; time in the OCSP response, in seconds. The default value is `0`.
     * 
     */
    @Import(name="statusAge")
    private @Nullable Output<Integer> statusAge;

    /**
     * @return Specifies the maximum allowed lag time that the BIG-IP system accepts for the &#39;thisUpdate&#39; time in the OCSP response, in seconds. The default value is `0`.
     * 
     */
    public Optional<Output<Integer>> statusAge() {
        return Optional.ofNullable(this.statusAge);
    }

    /**
     * Specifies whether the responder&#39;s certificate is checked for an OCSP signing extension. The default value is `enabled`.
     * 
     */
    @Import(name="strictRespCertCheck")
    private @Nullable Output<String> strictRespCertCheck;

    /**
     * @return Specifies whether the responder&#39;s certificate is checked for an OCSP signing extension. The default value is `enabled`.
     * 
     */
    public Optional<Output<String>> strictRespCertCheck() {
        return Optional.ofNullable(this.strictRespCertCheck);
    }

    /**
     * Specifies the certificates used for validating the OCSP response.
     * 
     */
    @Import(name="trustedResponders")
    private @Nullable Output<String> trustedResponders;

    /**
     * @return Specifies the certificates used for validating the OCSP response.
     * 
     */
    public Optional<Output<String>> trustedResponders() {
        return Optional.ofNullable(this.trustedResponders);
    }

    private OcspState() {}

    private OcspState(OcspState $) {
        this.cacheErrorTimeout = $.cacheErrorTimeout;
        this.cacheTimeout = $.cacheTimeout;
        this.clockSkew = $.clockSkew;
        this.concurrentConnectionsLimit = $.concurrentConnectionsLimit;
        this.connectionTimeout = $.connectionTimeout;
        this.dnsResolver = $.dnsResolver;
        this.name = $.name;
        this.passphrase = $.passphrase;
        this.proxyServerPool = $.proxyServerPool;
        this.responderUrl = $.responderUrl;
        this.routeDomain = $.routeDomain;
        this.signHash = $.signHash;
        this.signerCert = $.signerCert;
        this.signerKey = $.signerKey;
        this.statusAge = $.statusAge;
        this.strictRespCertCheck = $.strictRespCertCheck;
        this.trustedResponders = $.trustedResponders;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OcspState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OcspState $;

        public Builder() {
            $ = new OcspState();
        }

        public Builder(OcspState defaults) {
            $ = new OcspState(Objects.requireNonNull(defaults));
        }

        /**
         * @param cacheErrorTimeout Specifies the lifetime of an error response in the cache, in seconds. This value must be greater than connection_timeout. The default value is `3600`.
         * 
         * @return builder
         * 
         */
        public Builder cacheErrorTimeout(@Nullable Output<Integer> cacheErrorTimeout) {
            $.cacheErrorTimeout = cacheErrorTimeout;
            return this;
        }

        /**
         * @param cacheErrorTimeout Specifies the lifetime of an error response in the cache, in seconds. This value must be greater than connection_timeout. The default value is `3600`.
         * 
         * @return builder
         * 
         */
        public Builder cacheErrorTimeout(Integer cacheErrorTimeout) {
            return cacheErrorTimeout(Output.of(cacheErrorTimeout));
        }

        /**
         * @param cacheTimeout Specifies the lifetime of the OCSP response in the cache, in seconds. The default value is `indefinite`.
         * 
         * @return builder
         * 
         */
        public Builder cacheTimeout(@Nullable Output<String> cacheTimeout) {
            $.cacheTimeout = cacheTimeout;
            return this;
        }

        /**
         * @param cacheTimeout Specifies the lifetime of the OCSP response in the cache, in seconds. The default value is `indefinite`.
         * 
         * @return builder
         * 
         */
        public Builder cacheTimeout(String cacheTimeout) {
            return cacheTimeout(Output.of(cacheTimeout));
        }

        /**
         * @param clockSkew Specifies the time interval that the BIG-IP system allows for clock skew, in seconds. The default value is `300`.
         * 
         * @return builder
         * 
         */
        public Builder clockSkew(@Nullable Output<Integer> clockSkew) {
            $.clockSkew = clockSkew;
            return this;
        }

        /**
         * @param clockSkew Specifies the time interval that the BIG-IP system allows for clock skew, in seconds. The default value is `300`.
         * 
         * @return builder
         * 
         */
        public Builder clockSkew(Integer clockSkew) {
            return clockSkew(Output.of(clockSkew));
        }

        /**
         * @param concurrentConnectionsLimit Specifies the maximum number of connections per second allowed for the OCSP certificate validator. The default value is `50`.
         * 
         * @return builder
         * 
         */
        public Builder concurrentConnectionsLimit(@Nullable Output<Integer> concurrentConnectionsLimit) {
            $.concurrentConnectionsLimit = concurrentConnectionsLimit;
            return this;
        }

        /**
         * @param concurrentConnectionsLimit Specifies the maximum number of connections per second allowed for the OCSP certificate validator. The default value is `50`.
         * 
         * @return builder
         * 
         */
        public Builder concurrentConnectionsLimit(Integer concurrentConnectionsLimit) {
            return concurrentConnectionsLimit(Output.of(concurrentConnectionsLimit));
        }

        /**
         * @param connectionTimeout Specifies the time interval that the BIG-IP system waits for before ending the connection to the OCSP responder, in seconds. The default value is `8`.
         * 
         * @return builder
         * 
         */
        public Builder connectionTimeout(@Nullable Output<Integer> connectionTimeout) {
            $.connectionTimeout = connectionTimeout;
            return this;
        }

        /**
         * @param connectionTimeout Specifies the time interval that the BIG-IP system waits for before ending the connection to the OCSP responder, in seconds. The default value is `8`.
         * 
         * @return builder
         * 
         */
        public Builder connectionTimeout(Integer connectionTimeout) {
            return connectionTimeout(Output.of(connectionTimeout));
        }

        /**
         * @param dnsResolver Specifies the internal DNS resolver the BIG-IP system uses to fetch the OCSP response.
         * 
         * @return builder
         * 
         */
        public Builder dnsResolver(@Nullable Output<String> dnsResolver) {
            $.dnsResolver = dnsResolver;
            return this;
        }

        /**
         * @param dnsResolver Specifies the internal DNS resolver the BIG-IP system uses to fetch the OCSP response.
         * 
         * @return builder
         * 
         */
        public Builder dnsResolver(String dnsResolver) {
            return dnsResolver(Output.of(dnsResolver));
        }

        /**
         * @param name Name of the OCSP Responder. Name should be in pattern `/partition/ocsp_name`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the OCSP Responder. Name should be in pattern `/partition/ocsp_name`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param passphrase Specifies a passphrase used to sign an OCSP request.
         * 
         * @return builder
         * 
         */
        public Builder passphrase(@Nullable Output<String> passphrase) {
            $.passphrase = passphrase;
            return this;
        }

        /**
         * @param passphrase Specifies a passphrase used to sign an OCSP request.
         * 
         * @return builder
         * 
         */
        public Builder passphrase(String passphrase) {
            return passphrase(Output.of(passphrase));
        }

        /**
         * @param proxyServerPool Specifies the proxy server pool the BIG-IP system uses to fetch the OCSP response.
         * 
         * @return builder
         * 
         */
        public Builder proxyServerPool(@Nullable Output<String> proxyServerPool) {
            $.proxyServerPool = proxyServerPool;
            return this;
        }

        /**
         * @param proxyServerPool Specifies the proxy server pool the BIG-IP system uses to fetch the OCSP response.
         * 
         * @return builder
         * 
         */
        public Builder proxyServerPool(String proxyServerPool) {
            return proxyServerPool(Output.of(proxyServerPool));
        }

        /**
         * @param responderUrl Specifies the URL of the OCSP responder.
         * 
         * @return builder
         * 
         */
        public Builder responderUrl(@Nullable Output<String> responderUrl) {
            $.responderUrl = responderUrl;
            return this;
        }

        /**
         * @param responderUrl Specifies the URL of the OCSP responder.
         * 
         * @return builder
         * 
         */
        public Builder responderUrl(String responderUrl) {
            return responderUrl(Output.of(responderUrl));
        }

        /**
         * @param routeDomain Specifies the route domain for the OCSP responder.
         * 
         * @return builder
         * 
         */
        public Builder routeDomain(@Nullable Output<String> routeDomain) {
            $.routeDomain = routeDomain;
            return this;
        }

        /**
         * @param routeDomain Specifies the route domain for the OCSP responder.
         * 
         * @return builder
         * 
         */
        public Builder routeDomain(String routeDomain) {
            return routeDomain(Output.of(routeDomain));
        }

        /**
         * @param signHash Specifies the hash algorithm used to sign the OCSP request. The default value is `sha256`.
         * 
         * @return builder
         * 
         */
        public Builder signHash(@Nullable Output<String> signHash) {
            $.signHash = signHash;
            return this;
        }

        /**
         * @param signHash Specifies the hash algorithm used to sign the OCSP request. The default value is `sha256`.
         * 
         * @return builder
         * 
         */
        public Builder signHash(String signHash) {
            return signHash(Output.of(signHash));
        }

        /**
         * @param signerCert Specifies the certificate used to sign the OCSP request.
         * 
         * @return builder
         * 
         */
        public Builder signerCert(@Nullable Output<String> signerCert) {
            $.signerCert = signerCert;
            return this;
        }

        /**
         * @param signerCert Specifies the certificate used to sign the OCSP request.
         * 
         * @return builder
         * 
         */
        public Builder signerCert(String signerCert) {
            return signerCert(Output.of(signerCert));
        }

        /**
         * @param signerKey Specifies the key used to sign the OCSP request.
         * 
         * @return builder
         * 
         */
        public Builder signerKey(@Nullable Output<String> signerKey) {
            $.signerKey = signerKey;
            return this;
        }

        /**
         * @param signerKey Specifies the key used to sign the OCSP request.
         * 
         * @return builder
         * 
         */
        public Builder signerKey(String signerKey) {
            return signerKey(Output.of(signerKey));
        }

        /**
         * @param statusAge Specifies the maximum allowed lag time that the BIG-IP system accepts for the &#39;thisUpdate&#39; time in the OCSP response, in seconds. The default value is `0`.
         * 
         * @return builder
         * 
         */
        public Builder statusAge(@Nullable Output<Integer> statusAge) {
            $.statusAge = statusAge;
            return this;
        }

        /**
         * @param statusAge Specifies the maximum allowed lag time that the BIG-IP system accepts for the &#39;thisUpdate&#39; time in the OCSP response, in seconds. The default value is `0`.
         * 
         * @return builder
         * 
         */
        public Builder statusAge(Integer statusAge) {
            return statusAge(Output.of(statusAge));
        }

        /**
         * @param strictRespCertCheck Specifies whether the responder&#39;s certificate is checked for an OCSP signing extension. The default value is `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder strictRespCertCheck(@Nullable Output<String> strictRespCertCheck) {
            $.strictRespCertCheck = strictRespCertCheck;
            return this;
        }

        /**
         * @param strictRespCertCheck Specifies whether the responder&#39;s certificate is checked for an OCSP signing extension. The default value is `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder strictRespCertCheck(String strictRespCertCheck) {
            return strictRespCertCheck(Output.of(strictRespCertCheck));
        }

        /**
         * @param trustedResponders Specifies the certificates used for validating the OCSP response.
         * 
         * @return builder
         * 
         */
        public Builder trustedResponders(@Nullable Output<String> trustedResponders) {
            $.trustedResponders = trustedResponders;
            return this;
        }

        /**
         * @param trustedResponders Specifies the certificates used for validating the OCSP response.
         * 
         * @return builder
         * 
         */
        public Builder trustedResponders(String trustedResponders) {
            return trustedResponders(Output.of(trustedResponders));
        }

        public OcspState build() {
            return $;
        }
    }

}
