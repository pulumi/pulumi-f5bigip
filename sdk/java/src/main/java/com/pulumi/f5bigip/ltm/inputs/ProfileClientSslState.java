// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.f5bigip.ltm.inputs.ProfileClientSslCertKeyChainArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProfileClientSslState extends com.pulumi.resources.ResourceArgs {

    public static final ProfileClientSslState Empty = new ProfileClientSslState();

    /**
     * Alert time out
     * 
     */
    @Import(name="alertTimeout")
    private @Nullable Output<String> alertTimeout;

    /**
     * @return Alert time out
     * 
     */
    public Optional<Output<String>> alertTimeout() {
        return Optional.ofNullable(this.alertTimeout);
    }

    /**
     * Instructs the system to use the specified CRL file even if it has expired. The default is `disabled`.
     * 
     */
    @Import(name="allowExpiredCrl")
    private @Nullable Output<String> allowExpiredCrl;

    /**
     * @return Instructs the system to use the specified CRL file even if it has expired. The default is `disabled`.
     * 
     */
    public Optional<Output<String>> allowExpiredCrl() {
        return Optional.ofNullable(this.allowExpiredCrl);
    }

    /**
     * Enables or disables acceptance of non-SSL connections, When creating a new profile, the setting is provided by the parent profile
     * 
     */
    @Import(name="allowNonSsl")
    private @Nullable Output<String> allowNonSsl;

    /**
     * @return Enables or disables acceptance of non-SSL connections, When creating a new profile, the setting is provided by the parent profile
     * 
     */
    public Optional<Output<String>> allowNonSsl() {
        return Optional.ofNullable(this.allowNonSsl);
    }

    /**
     * Specifies the frequency of client authentication for an SSL session.When `once`,specifies that the system authenticates the client once for an SSL session.
     * When `always`, specifies that the system authenticates the client once for an SSL session and also upon reuse of that session.
     * 
     */
    @Import(name="authenticate")
    private @Nullable Output<String> authenticate;

    /**
     * @return Specifies the frequency of client authentication for an SSL session.When `once`,specifies that the system authenticates the client once for an SSL session.
     * When `always`, specifies that the system authenticates the client once for an SSL session and also upon reuse of that session.
     * 
     */
    public Optional<Output<String>> authenticate() {
        return Optional.ofNullable(this.authenticate);
    }

    /**
     * Specifies the maximum number of certificates to be traversed in a client certificate chain
     * 
     */
    @Import(name="authenticateDepth")
    private @Nullable Output<Integer> authenticateDepth;

    /**
     * @return Specifies the maximum number of certificates to be traversed in a client certificate chain
     * 
     */
    public Optional<Output<Integer>> authenticateDepth() {
        return Optional.ofNullable(this.authenticateDepth);
    }

    /**
     * Specifies the client certificate to use in SSL client certificate constrained delegation. This certificate will be used if client does not provide a cert during the SSL handshake. The default value is none.
     * 
     */
    @Import(name="c3dClientFallbackCert")
    private @Nullable Output<String> c3dClientFallbackCert;

    /**
     * @return Specifies the client certificate to use in SSL client certificate constrained delegation. This certificate will be used if client does not provide a cert during the SSL handshake. The default value is none.
     * 
     */
    public Optional<Output<String>> c3dClientFallbackCert() {
        return Optional.ofNullable(this.c3dClientFallbackCert);
    }

    /**
     * Specifies the BIG-IP action when the OCSP responder returns unknown status. The default value is drop, which causes the onnection to be dropped. Conversely, you can specify ignore, which causes the connection to ignore the unknown status and continue.
     * 
     */
    @Import(name="c3dDropUnknownOcspStatus")
    private @Nullable Output<String> c3dDropUnknownOcspStatus;

    /**
     * @return Specifies the BIG-IP action when the OCSP responder returns unknown status. The default value is drop, which causes the onnection to be dropped. Conversely, you can specify ignore, which causes the connection to ignore the unknown status and continue.
     * 
     */
    public Optional<Output<String>> c3dDropUnknownOcspStatus() {
        return Optional.ofNullable(this.c3dDropUnknownOcspStatus);
    }

    /**
     * Specifies the SSL client certificate constrained delegation OCSP object that the BIG-IP SSL should use to connect to the OCSP responder and check the client certificate status.
     * 
     */
    @Import(name="c3dOcsp")
    private @Nullable Output<String> c3dOcsp;

    /**
     * @return Specifies the SSL client certificate constrained delegation OCSP object that the BIG-IP SSL should use to connect to the OCSP responder and check the client certificate status.
     * 
     */
    public Optional<Output<String>> c3dOcsp() {
        return Optional.ofNullable(this.c3dOcsp);
    }

    /**
     * (Trusted Certificate Authorities)Specifies a client CA that the system trusts. The default is `None`.
     * 
     */
    @Import(name="caFile")
    private @Nullable Output<String> caFile;

    /**
     * @return (Trusted Certificate Authorities)Specifies a client CA that the system trusts. The default is `None`.
     * 
     */
    public Optional<Output<String>> caFile() {
        return Optional.ofNullable(this.caFile);
    }

    /**
     * Cache size (sessions).
     * 
     */
    @Import(name="cacheSize")
    private @Nullable Output<Integer> cacheSize;

    /**
     * @return Cache size (sessions).
     * 
     */
    public Optional<Output<Integer>> cacheSize() {
        return Optional.ofNullable(this.cacheSize);
    }

    /**
     * Cache time out
     * 
     */
    @Import(name="cacheTimeout")
    private @Nullable Output<Integer> cacheTimeout;

    /**
     * @return Cache time out
     * 
     */
    public Optional<Output<Integer>> cacheTimeout() {
        return Optional.ofNullable(this.cacheTimeout);
    }

    /**
     * Specifies the name of the certificate that the system uses for client-side SSL processing. The default is `default`
     * 
     */
    @Import(name="cert")
    private @Nullable Output<String> cert;

    /**
     * @return Specifies the name of the certificate that the system uses for client-side SSL processing. The default is `default`
     * 
     */
    public Optional<Output<String>> cert() {
        return Optional.ofNullable(this.cert);
    }

    /**
     * Cert extension includes for ssl forward proxy
     * 
     */
    @Import(name="certExtensionIncludes")
    private @Nullable Output<List<String>> certExtensionIncludes;

    /**
     * @return Cert extension includes for ssl forward proxy
     * 
     */
    public Optional<Output<List<String>>> certExtensionIncludes() {
        return Optional.ofNullable(this.certExtensionIncludes);
    }

    /**
     * `certKeyChain` Specifies one or more certificates and keys to associate with the SSL profile.
     * See Cert Key Chain below for more details.
     * 
     * &gt; **NOTE**  `certKeyChain` is recommend way for adding cert-key-chain to profile. If `certKeyChain` block provided, we should not provide `cert`, `key` and `chain`.
     * 
     */
    @Import(name="certKeyChain")
    private @Nullable Output<ProfileClientSslCertKeyChainArgs> certKeyChain;

    /**
     * @return `certKeyChain` Specifies one or more certificates and keys to associate with the SSL profile.
     * See Cert Key Chain below for more details.
     * 
     * &gt; **NOTE**  `certKeyChain` is recommend way for adding cert-key-chain to profile. If `certKeyChain` block provided, we should not provide `cert`, `key` and `chain`.
     * 
     */
    public Optional<Output<ProfileClientSslCertKeyChainArgs>> certKeyChain() {
        return Optional.ofNullable(this.certKeyChain);
    }

    /**
     * Life span of the certificate in days for ssl forward proxy
     * 
     */
    @Import(name="certLifeSpan")
    private @Nullable Output<Integer> certLifeSpan;

    /**
     * @return Life span of the certificate in days for ssl forward proxy
     * 
     */
    public Optional<Output<Integer>> certLifeSpan() {
        return Optional.ofNullable(this.certLifeSpan);
    }

    /**
     * Cert lookup by ip address and port enabled / disabled
     * 
     */
    @Import(name="certLookupByIpaddrPort")
    private @Nullable Output<String> certLookupByIpaddrPort;

    /**
     * @return Cert lookup by ip address and port enabled / disabled
     * 
     */
    public Optional<Output<String>> certLookupByIpaddrPort() {
        return Optional.ofNullable(this.certLookupByIpaddrPort);
    }

    /**
     * Specifies a certificate chain file that a server can use for authentication. The default is `None`.
     * 
     */
    @Import(name="chain")
    private @Nullable Output<String> chain;

    /**
     * @return Specifies a certificate chain file that a server can use for authentication. The default is `None`.
     * 
     */
    public Optional<Output<String>> chain() {
        return Optional.ofNullable(this.chain);
    }

    /**
     * Specifies the cipher group for the SSL server profile. It is mutually exclusive with the argument, `ciphers`. The default value is `none`.
     * 
     */
    @Import(name="cipherGroup")
    private @Nullable Output<String> cipherGroup;

    /**
     * @return Specifies the cipher group for the SSL server profile. It is mutually exclusive with the argument, `ciphers`. The default value is `none`.
     * 
     */
    public Optional<Output<String>> cipherGroup() {
        return Optional.ofNullable(this.cipherGroup);
    }

    /**
     * BigIP Cipher string.
     * 
     */
    @Import(name="ciphers")
    private @Nullable Output<String> ciphers;

    /**
     * @return BigIP Cipher string.
     * 
     */
    public Optional<Output<String>> ciphers() {
        return Optional.ofNullable(this.ciphers);
    }

    /**
     * (Advertised Certificate Authorities)Specifies that the CAs that the system advertises to clients is being trusted by the profile. The default is `None`.
     * 
     */
    @Import(name="clientCertCa")
    private @Nullable Output<String> clientCertCa;

    /**
     * @return (Advertised Certificate Authorities)Specifies that the CAs that the system advertises to clients is being trusted by the profile. The default is `None`.
     * 
     */
    public Optional<Output<String>> clientCertCa() {
        return Optional.ofNullable(this.clientCertCa);
    }

    /**
     * Specifies the name of a file containing a list of revoked client certificates. The default is `None`.
     * 
     */
    @Import(name="crlFile")
    private @Nullable Output<String> crlFile;

    /**
     * @return Specifies the name of a file containing a list of revoked client certificates. The default is `None`.
     * 
     */
    public Optional<Output<String>> crlFile() {
        return Optional.ofNullable(this.crlFile);
    }

    /**
     * Parent profile for this clientssl profile.Once this value has been set, it cannot be changed. Default value is `/Common/clientssl`. It Should Full path `/partition/profile_name`
     * 
     */
    @Import(name="defaultsFrom")
    private @Nullable Output<String> defaultsFrom;

    /**
     * @return Parent profile for this clientssl profile.Once this value has been set, it cannot be changed. Default value is `/Common/clientssl`. It Should Full path `/partition/profile_name`
     * 
     */
    public Optional<Output<String>> defaultsFrom() {
        return Optional.ofNullable(this.defaultsFrom);
    }

    /**
     * Forward proxy bypass default action. (enabled / disabled)
     * 
     */
    @Import(name="forwardProxyBypassDefaultAction")
    private @Nullable Output<String> forwardProxyBypassDefaultAction;

    /**
     * @return Forward proxy bypass default action. (enabled / disabled)
     * 
     */
    public Optional<Output<String>> forwardProxyBypassDefaultAction() {
        return Optional.ofNullable(this.forwardProxyBypassDefaultAction);
    }

    /**
     * full path of the profile
     * 
     */
    @Import(name="fullPath")
    private @Nullable Output<String> fullPath;

    /**
     * @return full path of the profile
     * 
     */
    public Optional<Output<String>> fullPath() {
        return Optional.ofNullable(this.fullPath);
    }

    /**
     * generation
     * 
     */
    @Import(name="generation")
    private @Nullable Output<Integer> generation;

    /**
     * @return generation
     * 
     */
    public Optional<Output<Integer>> generation() {
        return Optional.ofNullable(this.generation);
    }

    /**
     * Generic alerts enabled / disabled.
     * 
     */
    @Import(name="genericAlert")
    private @Nullable Output<String> genericAlert;

    /**
     * @return Generic alerts enabled / disabled.
     * 
     */
    public Optional<Output<String>> genericAlert() {
        return Optional.ofNullable(this.genericAlert);
    }

    /**
     * Handshake time out (seconds)
     * 
     */
    @Import(name="handshakeTimeout")
    private @Nullable Output<String> handshakeTimeout;

    /**
     * @return Handshake time out (seconds)
     * 
     */
    public Optional<Output<String>> handshakeTimeout() {
        return Optional.ofNullable(this.handshakeTimeout);
    }

    /**
     * Inherit cert key chain
     * 
     */
    @Import(name="inheritCertKeychain")
    private @Nullable Output<String> inheritCertKeychain;

    /**
     * @return Inherit cert key chain
     * 
     */
    public Optional<Output<String>> inheritCertKeychain() {
        return Optional.ofNullable(this.inheritCertKeychain);
    }

    /**
     * Specifies the file name of the SSL key. The default is `default`
     * 
     */
    @Import(name="key")
    private @Nullable Output<String> key;

    /**
     * @return Specifies the file name of the SSL key. The default is `default`
     * 
     */
    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * ModSSL Methods enabled / disabled.  Default is disabled.
     * 
     */
    @Import(name="modSslMethods")
    private @Nullable Output<String> modSslMethods;

    /**
     * @return ModSSL Methods enabled / disabled.  Default is disabled.
     * 
     */
    public Optional<Output<String>> modSslMethods() {
        return Optional.ofNullable(this.modSslMethods);
    }

    /**
     * ModSSL Methods enabled / disabled.  Default is disabled.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return ModSSL Methods enabled / disabled.  Default is disabled.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Specifies the name of the profile.Name of Profile should be full path.The full path is the combination of the `partition + profile name`,For example `/Common/test-clientssl-profile`.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Specifies the name of the profile.Name of Profile should be full path.The full path is the combination of the `partition + profile name`,For example `/Common/test-clientssl-profile`.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies whether the system uses OCSP stapling. The default value is `disabled`.
     * 
     */
    @Import(name="ocspStapling")
    private @Nullable Output<String> ocspStapling;

    /**
     * @return Specifies whether the system uses OCSP stapling. The default value is `disabled`.
     * 
     */
    public Optional<Output<String>> ocspStapling() {
        return Optional.ofNullable(this.ocspStapling);
    }

    /**
     * name of partition
     * 
     */
    @Import(name="partition")
    private @Nullable Output<String> partition;

    /**
     * @return name of partition
     * 
     */
    public Optional<Output<String>> partition() {
        return Optional.ofNullable(this.partition);
    }

    /**
     * Client Certificate Constrained Delegation CA passphrase
     * 
     */
    @Import(name="passphrase")
    private @Nullable Output<String> passphrase;

    /**
     * @return Client Certificate Constrained Delegation CA passphrase
     * 
     */
    public Optional<Output<String>> passphrase() {
        return Optional.ofNullable(this.passphrase);
    }

    /**
     * Specifies the way the system handles client certificates.When ignore, specifies that the system ignores certificates from client systems.When require, specifies that the system requires a client to present a valid certificate.When request, specifies that the system requests a valid certificate from a client but always authenticate the client.
     * 
     */
    @Import(name="peerCertMode")
    private @Nullable Output<String> peerCertMode;

    /**
     * @return Specifies the way the system handles client certificates.When ignore, specifies that the system ignores certificates from client systems.When require, specifies that the system requires a client to present a valid certificate.When request, specifies that the system requests a valid certificate from a client but always authenticate the client.
     * 
     */
    public Optional<Output<String>> peerCertMode() {
        return Optional.ofNullable(this.peerCertMode);
    }

    /**
     * Proxy CA Cert
     * 
     */
    @Import(name="proxyCaCert")
    private @Nullable Output<String> proxyCaCert;

    /**
     * @return Proxy CA Cert
     * 
     */
    public Optional<Output<String>> proxyCaCert() {
        return Optional.ofNullable(this.proxyCaCert);
    }

    /**
     * Proxy CA Key
     * 
     */
    @Import(name="proxyCaKey")
    private @Nullable Output<String> proxyCaKey;

    /**
     * @return Proxy CA Key
     * 
     */
    public Optional<Output<String>> proxyCaKey() {
        return Optional.ofNullable(this.proxyCaKey);
    }

    /**
     * Proxy CA Passphrase
     * 
     */
    @Import(name="proxyCaPassphrase")
    private @Nullable Output<String> proxyCaPassphrase;

    /**
     * @return Proxy CA Passphrase
     * 
     */
    public Optional<Output<String>> proxyCaPassphrase() {
        return Optional.ofNullable(this.proxyCaPassphrase);
    }

    /**
     * Proxy SSL enabled / disabled.  Default is disabled.
     * 
     */
    @Import(name="proxySsl")
    private @Nullable Output<String> proxySsl;

    /**
     * @return Proxy SSL enabled / disabled.  Default is disabled.
     * 
     */
    public Optional<Output<String>> proxySsl() {
        return Optional.ofNullable(this.proxySsl);
    }

    /**
     * Proxy SSL passthrough enabled / disabled.  Default is disabled.
     * 
     */
    @Import(name="proxySslPassthrough")
    private @Nullable Output<String> proxySslPassthrough;

    /**
     * @return Proxy SSL passthrough enabled / disabled.  Default is disabled.
     * 
     */
    public Optional<Output<String>> proxySslPassthrough() {
        return Optional.ofNullable(this.proxySslPassthrough);
    }

    /**
     * Renogotiate Period (seconds)
     * 
     */
    @Import(name="renegotiatePeriod")
    private @Nullable Output<String> renegotiatePeriod;

    /**
     * @return Renogotiate Period (seconds)
     * 
     */
    public Optional<Output<String>> renegotiatePeriod() {
        return Optional.ofNullable(this.renegotiatePeriod);
    }

    /**
     * Renogotiate Size
     * 
     */
    @Import(name="renegotiateSize")
    private @Nullable Output<String> renegotiateSize;

    /**
     * @return Renogotiate Size
     * 
     */
    public Optional<Output<String>> renegotiateSize() {
        return Optional.ofNullable(this.renegotiateSize);
    }

    /**
     * Enables or disables SSL renegotiation.When creating a new profile, the setting is provided by the parent profile
     * 
     */
    @Import(name="renegotiation")
    private @Nullable Output<String> renegotiation;

    /**
     * @return Enables or disables SSL renegotiation.When creating a new profile, the setting is provided by the parent profile
     * 
     */
    public Optional<Output<String>> renegotiation() {
        return Optional.ofNullable(this.renegotiation);
    }

    /**
     * When `true`, client certificate is retained in SSL session.
     * 
     */
    @Import(name="retainCertificate")
    private @Nullable Output<String> retainCertificate;

    /**
     * @return When `true`, client certificate is retained in SSL session.
     * 
     */
    public Optional<Output<String>> retainCertificate() {
        return Optional.ofNullable(this.retainCertificate);
    }

    /**
     * Specifies the method of secure renegotiations for SSL connections. When creating a new profile, the setting is provided by the parent profile.
     * When `request` is set the system request secure renegotation of SSL connections.
     * `require` is a default setting and when set the system permits initial SSL handshakes from clients but terminates renegotiations from unpatched clients.
     * The `require-strict` setting the system requires strict renegotiation of SSL connections. In this mode the system refuses connections to insecure servers, and terminates existing SSL connections to insecure servers
     * 
     */
    @Import(name="secureRenegotiation")
    private @Nullable Output<String> secureRenegotiation;

    /**
     * @return Specifies the method of secure renegotiations for SSL connections. When creating a new profile, the setting is provided by the parent profile.
     * When `request` is set the system request secure renegotation of SSL connections.
     * `require` is a default setting and when set the system permits initial SSL handshakes from clients but terminates renegotiations from unpatched clients.
     * The `require-strict` setting the system requires strict renegotiation of SSL connections. In this mode the system refuses connections to insecure servers, and terminates existing SSL connections to insecure servers
     * 
     */
    public Optional<Output<String>> secureRenegotiation() {
        return Optional.ofNullable(this.secureRenegotiation);
    }

    /**
     * Specifies the fully qualified DNS hostname of the server used in Server Name Indication communications. When creating a new profile, the setting is provided by the parent profile.The server name can also be a wildcard string containing the asterisk `*` character.
     * 
     */
    @Import(name="serverName")
    private @Nullable Output<String> serverName;

    /**
     * @return Specifies the fully qualified DNS hostname of the server used in Server Name Indication communications. When creating a new profile, the setting is provided by the parent profile.The server name can also be a wildcard string containing the asterisk `*` character.
     * 
     */
    public Optional<Output<String>> serverName() {
        return Optional.ofNullable(this.serverName);
    }

    /**
     * Session Mirroring (enabled / disabled)
     * 
     */
    @Import(name="sessionMirroring")
    private @Nullable Output<String> sessionMirroring;

    /**
     * @return Session Mirroring (enabled / disabled)
     * 
     */
    public Optional<Output<String>> sessionMirroring() {
        return Optional.ofNullable(this.sessionMirroring);
    }

    /**
     * Session Ticket (enabled / disabled)
     * 
     */
    @Import(name="sessionTicket")
    private @Nullable Output<String> sessionTicket;

    /**
     * @return Session Ticket (enabled / disabled)
     * 
     */
    public Optional<Output<String>> sessionTicket() {
        return Optional.ofNullable(this.sessionTicket);
    }

    /**
     * Indicates that the system uses this profile as the default SSL profile when there is no match to the server name, or when the client provides no SNI extension support.When creating a new profile, the setting is provided by the parent profile.
     * There can be only one SSL profile with this setting enabled.
     * 
     */
    @Import(name="sniDefault")
    private @Nullable Output<String> sniDefault;

    /**
     * @return Indicates that the system uses this profile as the default SSL profile when there is no match to the server name, or when the client provides no SNI extension support.When creating a new profile, the setting is provided by the parent profile.
     * There can be only one SSL profile with this setting enabled.
     * 
     */
    public Optional<Output<String>> sniDefault() {
        return Optional.ofNullable(this.sniDefault);
    }

    /**
     * Requires that the network peers also provide SNI support, this setting only takes effect when `sniDefault` is set to `true`.When creating a new profile, the setting is provided by the parent profile
     * 
     */
    @Import(name="sniRequire")
    private @Nullable Output<String> sniRequire;

    /**
     * @return Requires that the network peers also provide SNI support, this setting only takes effect when `sniDefault` is set to `true`.When creating a new profile, the setting is provided by the parent profile
     * 
     */
    public Optional<Output<String>> sniRequire() {
        return Optional.ofNullable(this.sniRequire);
    }

    /**
     * Enables or disables SSL client certificate constrained delegation. The default option is disabled. Conversely, you can specify enabled to use the SSL client certificate constrained delegation.
     * 
     */
    @Import(name="sslC3d")
    private @Nullable Output<String> sslC3d;

    /**
     * @return Enables or disables SSL client certificate constrained delegation. The default option is disabled. Conversely, you can specify enabled to use the SSL client certificate constrained delegation.
     * 
     */
    public Optional<Output<String>> sslC3d() {
        return Optional.ofNullable(this.sslC3d);
    }

    /**
     * Specifies whether SSL forward proxy feature is enabled or not. The default value is disabled.
     * 
     */
    @Import(name="sslForwardProxy")
    private @Nullable Output<String> sslForwardProxy;

    /**
     * @return Specifies whether SSL forward proxy feature is enabled or not. The default value is disabled.
     * 
     */
    public Optional<Output<String>> sslForwardProxy() {
        return Optional.ofNullable(this.sslForwardProxy);
    }

    /**
     * Specifies whether SSL forward proxy bypass feature is enabled or not. The default value is disabled.
     * 
     */
    @Import(name="sslForwardProxyBypass")
    private @Nullable Output<String> sslForwardProxyBypass;

    /**
     * @return Specifies whether SSL forward proxy bypass feature is enabled or not. The default value is disabled.
     * 
     */
    public Optional<Output<String>> sslForwardProxyBypass() {
        return Optional.ofNullable(this.sslForwardProxyBypass);
    }

    /**
     * SSL sign hash (any, sha1, sha256, sha384)
     * 
     */
    @Import(name="sslSignHash")
    private @Nullable Output<String> sslSignHash;

    /**
     * @return SSL sign hash (any, sha1, sha256, sha384)
     * 
     */
    public Optional<Output<String>> sslSignHash() {
        return Optional.ofNullable(this.sslSignHash);
    }

    /**
     * Enables or disables the resumption of SSL sessions after an unclean shutdown.When creating a new profile, the setting is provided by the parent profile.
     * 
     */
    @Import(name="strictResume")
    private @Nullable Output<String> strictResume;

    /**
     * @return Enables or disables the resumption of SSL sessions after an unclean shutdown.When creating a new profile, the setting is provided by the parent profile.
     * 
     */
    public Optional<Output<String>> strictResume() {
        return Optional.ofNullable(this.strictResume);
    }

    /**
     * List of Enabled selection from a set of industry standard options for handling SSL processing.By default,
     * Don&#39;t insert empty fragments and No TLSv1.3 are listed as Enabled Options. `Usage` : tmOptions    = [&#34;dont-insert-empty-fragments&#34;,&#34;no-tlsv1.3&#34;]
     * 
     */
    @Import(name="tmOptions")
    private @Nullable Output<List<String>> tmOptions;

    /**
     * @return List of Enabled selection from a set of industry standard options for handling SSL processing.By default,
     * Don&#39;t insert empty fragments and No TLSv1.3 are listed as Enabled Options. `Usage` : tmOptions    = [&#34;dont-insert-empty-fragments&#34;,&#34;no-tlsv1.3&#34;]
     * 
     */
    public Optional<Output<List<String>>> tmOptions() {
        return Optional.ofNullable(this.tmOptions);
    }

    /**
     * Unclean Shutdown (enabled / disabled)
     * 
     */
    @Import(name="uncleanShutdown")
    private @Nullable Output<String> uncleanShutdown;

    /**
     * @return Unclean Shutdown (enabled / disabled)
     * 
     */
    public Optional<Output<String>> uncleanShutdown() {
        return Optional.ofNullable(this.uncleanShutdown);
    }

    private ProfileClientSslState() {}

    private ProfileClientSslState(ProfileClientSslState $) {
        this.alertTimeout = $.alertTimeout;
        this.allowExpiredCrl = $.allowExpiredCrl;
        this.allowNonSsl = $.allowNonSsl;
        this.authenticate = $.authenticate;
        this.authenticateDepth = $.authenticateDepth;
        this.c3dClientFallbackCert = $.c3dClientFallbackCert;
        this.c3dDropUnknownOcspStatus = $.c3dDropUnknownOcspStatus;
        this.c3dOcsp = $.c3dOcsp;
        this.caFile = $.caFile;
        this.cacheSize = $.cacheSize;
        this.cacheTimeout = $.cacheTimeout;
        this.cert = $.cert;
        this.certExtensionIncludes = $.certExtensionIncludes;
        this.certKeyChain = $.certKeyChain;
        this.certLifeSpan = $.certLifeSpan;
        this.certLookupByIpaddrPort = $.certLookupByIpaddrPort;
        this.chain = $.chain;
        this.cipherGroup = $.cipherGroup;
        this.ciphers = $.ciphers;
        this.clientCertCa = $.clientCertCa;
        this.crlFile = $.crlFile;
        this.defaultsFrom = $.defaultsFrom;
        this.forwardProxyBypassDefaultAction = $.forwardProxyBypassDefaultAction;
        this.fullPath = $.fullPath;
        this.generation = $.generation;
        this.genericAlert = $.genericAlert;
        this.handshakeTimeout = $.handshakeTimeout;
        this.inheritCertKeychain = $.inheritCertKeychain;
        this.key = $.key;
        this.modSslMethods = $.modSslMethods;
        this.mode = $.mode;
        this.name = $.name;
        this.ocspStapling = $.ocspStapling;
        this.partition = $.partition;
        this.passphrase = $.passphrase;
        this.peerCertMode = $.peerCertMode;
        this.proxyCaCert = $.proxyCaCert;
        this.proxyCaKey = $.proxyCaKey;
        this.proxyCaPassphrase = $.proxyCaPassphrase;
        this.proxySsl = $.proxySsl;
        this.proxySslPassthrough = $.proxySslPassthrough;
        this.renegotiatePeriod = $.renegotiatePeriod;
        this.renegotiateSize = $.renegotiateSize;
        this.renegotiation = $.renegotiation;
        this.retainCertificate = $.retainCertificate;
        this.secureRenegotiation = $.secureRenegotiation;
        this.serverName = $.serverName;
        this.sessionMirroring = $.sessionMirroring;
        this.sessionTicket = $.sessionTicket;
        this.sniDefault = $.sniDefault;
        this.sniRequire = $.sniRequire;
        this.sslC3d = $.sslC3d;
        this.sslForwardProxy = $.sslForwardProxy;
        this.sslForwardProxyBypass = $.sslForwardProxyBypass;
        this.sslSignHash = $.sslSignHash;
        this.strictResume = $.strictResume;
        this.tmOptions = $.tmOptions;
        this.uncleanShutdown = $.uncleanShutdown;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProfileClientSslState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProfileClientSslState $;

        public Builder() {
            $ = new ProfileClientSslState();
        }

        public Builder(ProfileClientSslState defaults) {
            $ = new ProfileClientSslState(Objects.requireNonNull(defaults));
        }

        /**
         * @param alertTimeout Alert time out
         * 
         * @return builder
         * 
         */
        public Builder alertTimeout(@Nullable Output<String> alertTimeout) {
            $.alertTimeout = alertTimeout;
            return this;
        }

        /**
         * @param alertTimeout Alert time out
         * 
         * @return builder
         * 
         */
        public Builder alertTimeout(String alertTimeout) {
            return alertTimeout(Output.of(alertTimeout));
        }

        /**
         * @param allowExpiredCrl Instructs the system to use the specified CRL file even if it has expired. The default is `disabled`.
         * 
         * @return builder
         * 
         */
        public Builder allowExpiredCrl(@Nullable Output<String> allowExpiredCrl) {
            $.allowExpiredCrl = allowExpiredCrl;
            return this;
        }

        /**
         * @param allowExpiredCrl Instructs the system to use the specified CRL file even if it has expired. The default is `disabled`.
         * 
         * @return builder
         * 
         */
        public Builder allowExpiredCrl(String allowExpiredCrl) {
            return allowExpiredCrl(Output.of(allowExpiredCrl));
        }

        /**
         * @param allowNonSsl Enables or disables acceptance of non-SSL connections, When creating a new profile, the setting is provided by the parent profile
         * 
         * @return builder
         * 
         */
        public Builder allowNonSsl(@Nullable Output<String> allowNonSsl) {
            $.allowNonSsl = allowNonSsl;
            return this;
        }

        /**
         * @param allowNonSsl Enables or disables acceptance of non-SSL connections, When creating a new profile, the setting is provided by the parent profile
         * 
         * @return builder
         * 
         */
        public Builder allowNonSsl(String allowNonSsl) {
            return allowNonSsl(Output.of(allowNonSsl));
        }

        /**
         * @param authenticate Specifies the frequency of client authentication for an SSL session.When `once`,specifies that the system authenticates the client once for an SSL session.
         * When `always`, specifies that the system authenticates the client once for an SSL session and also upon reuse of that session.
         * 
         * @return builder
         * 
         */
        public Builder authenticate(@Nullable Output<String> authenticate) {
            $.authenticate = authenticate;
            return this;
        }

        /**
         * @param authenticate Specifies the frequency of client authentication for an SSL session.When `once`,specifies that the system authenticates the client once for an SSL session.
         * When `always`, specifies that the system authenticates the client once for an SSL session and also upon reuse of that session.
         * 
         * @return builder
         * 
         */
        public Builder authenticate(String authenticate) {
            return authenticate(Output.of(authenticate));
        }

        /**
         * @param authenticateDepth Specifies the maximum number of certificates to be traversed in a client certificate chain
         * 
         * @return builder
         * 
         */
        public Builder authenticateDepth(@Nullable Output<Integer> authenticateDepth) {
            $.authenticateDepth = authenticateDepth;
            return this;
        }

        /**
         * @param authenticateDepth Specifies the maximum number of certificates to be traversed in a client certificate chain
         * 
         * @return builder
         * 
         */
        public Builder authenticateDepth(Integer authenticateDepth) {
            return authenticateDepth(Output.of(authenticateDepth));
        }

        /**
         * @param c3dClientFallbackCert Specifies the client certificate to use in SSL client certificate constrained delegation. This certificate will be used if client does not provide a cert during the SSL handshake. The default value is none.
         * 
         * @return builder
         * 
         */
        public Builder c3dClientFallbackCert(@Nullable Output<String> c3dClientFallbackCert) {
            $.c3dClientFallbackCert = c3dClientFallbackCert;
            return this;
        }

        /**
         * @param c3dClientFallbackCert Specifies the client certificate to use in SSL client certificate constrained delegation. This certificate will be used if client does not provide a cert during the SSL handshake. The default value is none.
         * 
         * @return builder
         * 
         */
        public Builder c3dClientFallbackCert(String c3dClientFallbackCert) {
            return c3dClientFallbackCert(Output.of(c3dClientFallbackCert));
        }

        /**
         * @param c3dDropUnknownOcspStatus Specifies the BIG-IP action when the OCSP responder returns unknown status. The default value is drop, which causes the onnection to be dropped. Conversely, you can specify ignore, which causes the connection to ignore the unknown status and continue.
         * 
         * @return builder
         * 
         */
        public Builder c3dDropUnknownOcspStatus(@Nullable Output<String> c3dDropUnknownOcspStatus) {
            $.c3dDropUnknownOcspStatus = c3dDropUnknownOcspStatus;
            return this;
        }

        /**
         * @param c3dDropUnknownOcspStatus Specifies the BIG-IP action when the OCSP responder returns unknown status. The default value is drop, which causes the onnection to be dropped. Conversely, you can specify ignore, which causes the connection to ignore the unknown status and continue.
         * 
         * @return builder
         * 
         */
        public Builder c3dDropUnknownOcspStatus(String c3dDropUnknownOcspStatus) {
            return c3dDropUnknownOcspStatus(Output.of(c3dDropUnknownOcspStatus));
        }

        /**
         * @param c3dOcsp Specifies the SSL client certificate constrained delegation OCSP object that the BIG-IP SSL should use to connect to the OCSP responder and check the client certificate status.
         * 
         * @return builder
         * 
         */
        public Builder c3dOcsp(@Nullable Output<String> c3dOcsp) {
            $.c3dOcsp = c3dOcsp;
            return this;
        }

        /**
         * @param c3dOcsp Specifies the SSL client certificate constrained delegation OCSP object that the BIG-IP SSL should use to connect to the OCSP responder and check the client certificate status.
         * 
         * @return builder
         * 
         */
        public Builder c3dOcsp(String c3dOcsp) {
            return c3dOcsp(Output.of(c3dOcsp));
        }

        /**
         * @param caFile (Trusted Certificate Authorities)Specifies a client CA that the system trusts. The default is `None`.
         * 
         * @return builder
         * 
         */
        public Builder caFile(@Nullable Output<String> caFile) {
            $.caFile = caFile;
            return this;
        }

        /**
         * @param caFile (Trusted Certificate Authorities)Specifies a client CA that the system trusts. The default is `None`.
         * 
         * @return builder
         * 
         */
        public Builder caFile(String caFile) {
            return caFile(Output.of(caFile));
        }

        /**
         * @param cacheSize Cache size (sessions).
         * 
         * @return builder
         * 
         */
        public Builder cacheSize(@Nullable Output<Integer> cacheSize) {
            $.cacheSize = cacheSize;
            return this;
        }

        /**
         * @param cacheSize Cache size (sessions).
         * 
         * @return builder
         * 
         */
        public Builder cacheSize(Integer cacheSize) {
            return cacheSize(Output.of(cacheSize));
        }

        /**
         * @param cacheTimeout Cache time out
         * 
         * @return builder
         * 
         */
        public Builder cacheTimeout(@Nullable Output<Integer> cacheTimeout) {
            $.cacheTimeout = cacheTimeout;
            return this;
        }

        /**
         * @param cacheTimeout Cache time out
         * 
         * @return builder
         * 
         */
        public Builder cacheTimeout(Integer cacheTimeout) {
            return cacheTimeout(Output.of(cacheTimeout));
        }

        /**
         * @param cert Specifies the name of the certificate that the system uses for client-side SSL processing. The default is `default`
         * 
         * @return builder
         * 
         */
        public Builder cert(@Nullable Output<String> cert) {
            $.cert = cert;
            return this;
        }

        /**
         * @param cert Specifies the name of the certificate that the system uses for client-side SSL processing. The default is `default`
         * 
         * @return builder
         * 
         */
        public Builder cert(String cert) {
            return cert(Output.of(cert));
        }

        /**
         * @param certExtensionIncludes Cert extension includes for ssl forward proxy
         * 
         * @return builder
         * 
         */
        public Builder certExtensionIncludes(@Nullable Output<List<String>> certExtensionIncludes) {
            $.certExtensionIncludes = certExtensionIncludes;
            return this;
        }

        /**
         * @param certExtensionIncludes Cert extension includes for ssl forward proxy
         * 
         * @return builder
         * 
         */
        public Builder certExtensionIncludes(List<String> certExtensionIncludes) {
            return certExtensionIncludes(Output.of(certExtensionIncludes));
        }

        /**
         * @param certExtensionIncludes Cert extension includes for ssl forward proxy
         * 
         * @return builder
         * 
         */
        public Builder certExtensionIncludes(String... certExtensionIncludes) {
            return certExtensionIncludes(List.of(certExtensionIncludes));
        }

        /**
         * @param certKeyChain `certKeyChain` Specifies one or more certificates and keys to associate with the SSL profile.
         * See Cert Key Chain below for more details.
         * 
         * &gt; **NOTE**  `certKeyChain` is recommend way for adding cert-key-chain to profile. If `certKeyChain` block provided, we should not provide `cert`, `key` and `chain`.
         * 
         * @return builder
         * 
         */
        public Builder certKeyChain(@Nullable Output<ProfileClientSslCertKeyChainArgs> certKeyChain) {
            $.certKeyChain = certKeyChain;
            return this;
        }

        /**
         * @param certKeyChain `certKeyChain` Specifies one or more certificates and keys to associate with the SSL profile.
         * See Cert Key Chain below for more details.
         * 
         * &gt; **NOTE**  `certKeyChain` is recommend way for adding cert-key-chain to profile. If `certKeyChain` block provided, we should not provide `cert`, `key` and `chain`.
         * 
         * @return builder
         * 
         */
        public Builder certKeyChain(ProfileClientSslCertKeyChainArgs certKeyChain) {
            return certKeyChain(Output.of(certKeyChain));
        }

        /**
         * @param certLifeSpan Life span of the certificate in days for ssl forward proxy
         * 
         * @return builder
         * 
         */
        public Builder certLifeSpan(@Nullable Output<Integer> certLifeSpan) {
            $.certLifeSpan = certLifeSpan;
            return this;
        }

        /**
         * @param certLifeSpan Life span of the certificate in days for ssl forward proxy
         * 
         * @return builder
         * 
         */
        public Builder certLifeSpan(Integer certLifeSpan) {
            return certLifeSpan(Output.of(certLifeSpan));
        }

        /**
         * @param certLookupByIpaddrPort Cert lookup by ip address and port enabled / disabled
         * 
         * @return builder
         * 
         */
        public Builder certLookupByIpaddrPort(@Nullable Output<String> certLookupByIpaddrPort) {
            $.certLookupByIpaddrPort = certLookupByIpaddrPort;
            return this;
        }

        /**
         * @param certLookupByIpaddrPort Cert lookup by ip address and port enabled / disabled
         * 
         * @return builder
         * 
         */
        public Builder certLookupByIpaddrPort(String certLookupByIpaddrPort) {
            return certLookupByIpaddrPort(Output.of(certLookupByIpaddrPort));
        }

        /**
         * @param chain Specifies a certificate chain file that a server can use for authentication. The default is `None`.
         * 
         * @return builder
         * 
         */
        public Builder chain(@Nullable Output<String> chain) {
            $.chain = chain;
            return this;
        }

        /**
         * @param chain Specifies a certificate chain file that a server can use for authentication. The default is `None`.
         * 
         * @return builder
         * 
         */
        public Builder chain(String chain) {
            return chain(Output.of(chain));
        }

        /**
         * @param cipherGroup Specifies the cipher group for the SSL server profile. It is mutually exclusive with the argument, `ciphers`. The default value is `none`.
         * 
         * @return builder
         * 
         */
        public Builder cipherGroup(@Nullable Output<String> cipherGroup) {
            $.cipherGroup = cipherGroup;
            return this;
        }

        /**
         * @param cipherGroup Specifies the cipher group for the SSL server profile. It is mutually exclusive with the argument, `ciphers`. The default value is `none`.
         * 
         * @return builder
         * 
         */
        public Builder cipherGroup(String cipherGroup) {
            return cipherGroup(Output.of(cipherGroup));
        }

        /**
         * @param ciphers BigIP Cipher string.
         * 
         * @return builder
         * 
         */
        public Builder ciphers(@Nullable Output<String> ciphers) {
            $.ciphers = ciphers;
            return this;
        }

        /**
         * @param ciphers BigIP Cipher string.
         * 
         * @return builder
         * 
         */
        public Builder ciphers(String ciphers) {
            return ciphers(Output.of(ciphers));
        }

        /**
         * @param clientCertCa (Advertised Certificate Authorities)Specifies that the CAs that the system advertises to clients is being trusted by the profile. The default is `None`.
         * 
         * @return builder
         * 
         */
        public Builder clientCertCa(@Nullable Output<String> clientCertCa) {
            $.clientCertCa = clientCertCa;
            return this;
        }

        /**
         * @param clientCertCa (Advertised Certificate Authorities)Specifies that the CAs that the system advertises to clients is being trusted by the profile. The default is `None`.
         * 
         * @return builder
         * 
         */
        public Builder clientCertCa(String clientCertCa) {
            return clientCertCa(Output.of(clientCertCa));
        }

        /**
         * @param crlFile Specifies the name of a file containing a list of revoked client certificates. The default is `None`.
         * 
         * @return builder
         * 
         */
        public Builder crlFile(@Nullable Output<String> crlFile) {
            $.crlFile = crlFile;
            return this;
        }

        /**
         * @param crlFile Specifies the name of a file containing a list of revoked client certificates. The default is `None`.
         * 
         * @return builder
         * 
         */
        public Builder crlFile(String crlFile) {
            return crlFile(Output.of(crlFile));
        }

        /**
         * @param defaultsFrom Parent profile for this clientssl profile.Once this value has been set, it cannot be changed. Default value is `/Common/clientssl`. It Should Full path `/partition/profile_name`
         * 
         * @return builder
         * 
         */
        public Builder defaultsFrom(@Nullable Output<String> defaultsFrom) {
            $.defaultsFrom = defaultsFrom;
            return this;
        }

        /**
         * @param defaultsFrom Parent profile for this clientssl profile.Once this value has been set, it cannot be changed. Default value is `/Common/clientssl`. It Should Full path `/partition/profile_name`
         * 
         * @return builder
         * 
         */
        public Builder defaultsFrom(String defaultsFrom) {
            return defaultsFrom(Output.of(defaultsFrom));
        }

        /**
         * @param forwardProxyBypassDefaultAction Forward proxy bypass default action. (enabled / disabled)
         * 
         * @return builder
         * 
         */
        public Builder forwardProxyBypassDefaultAction(@Nullable Output<String> forwardProxyBypassDefaultAction) {
            $.forwardProxyBypassDefaultAction = forwardProxyBypassDefaultAction;
            return this;
        }

        /**
         * @param forwardProxyBypassDefaultAction Forward proxy bypass default action. (enabled / disabled)
         * 
         * @return builder
         * 
         */
        public Builder forwardProxyBypassDefaultAction(String forwardProxyBypassDefaultAction) {
            return forwardProxyBypassDefaultAction(Output.of(forwardProxyBypassDefaultAction));
        }

        /**
         * @param fullPath full path of the profile
         * 
         * @return builder
         * 
         */
        public Builder fullPath(@Nullable Output<String> fullPath) {
            $.fullPath = fullPath;
            return this;
        }

        /**
         * @param fullPath full path of the profile
         * 
         * @return builder
         * 
         */
        public Builder fullPath(String fullPath) {
            return fullPath(Output.of(fullPath));
        }

        /**
         * @param generation generation
         * 
         * @return builder
         * 
         */
        public Builder generation(@Nullable Output<Integer> generation) {
            $.generation = generation;
            return this;
        }

        /**
         * @param generation generation
         * 
         * @return builder
         * 
         */
        public Builder generation(Integer generation) {
            return generation(Output.of(generation));
        }

        /**
         * @param genericAlert Generic alerts enabled / disabled.
         * 
         * @return builder
         * 
         */
        public Builder genericAlert(@Nullable Output<String> genericAlert) {
            $.genericAlert = genericAlert;
            return this;
        }

        /**
         * @param genericAlert Generic alerts enabled / disabled.
         * 
         * @return builder
         * 
         */
        public Builder genericAlert(String genericAlert) {
            return genericAlert(Output.of(genericAlert));
        }

        /**
         * @param handshakeTimeout Handshake time out (seconds)
         * 
         * @return builder
         * 
         */
        public Builder handshakeTimeout(@Nullable Output<String> handshakeTimeout) {
            $.handshakeTimeout = handshakeTimeout;
            return this;
        }

        /**
         * @param handshakeTimeout Handshake time out (seconds)
         * 
         * @return builder
         * 
         */
        public Builder handshakeTimeout(String handshakeTimeout) {
            return handshakeTimeout(Output.of(handshakeTimeout));
        }

        /**
         * @param inheritCertKeychain Inherit cert key chain
         * 
         * @return builder
         * 
         */
        public Builder inheritCertKeychain(@Nullable Output<String> inheritCertKeychain) {
            $.inheritCertKeychain = inheritCertKeychain;
            return this;
        }

        /**
         * @param inheritCertKeychain Inherit cert key chain
         * 
         * @return builder
         * 
         */
        public Builder inheritCertKeychain(String inheritCertKeychain) {
            return inheritCertKeychain(Output.of(inheritCertKeychain));
        }

        /**
         * @param key Specifies the file name of the SSL key. The default is `default`
         * 
         * @return builder
         * 
         */
        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key Specifies the file name of the SSL key. The default is `default`
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param modSslMethods ModSSL Methods enabled / disabled.  Default is disabled.
         * 
         * @return builder
         * 
         */
        public Builder modSslMethods(@Nullable Output<String> modSslMethods) {
            $.modSslMethods = modSslMethods;
            return this;
        }

        /**
         * @param modSslMethods ModSSL Methods enabled / disabled.  Default is disabled.
         * 
         * @return builder
         * 
         */
        public Builder modSslMethods(String modSslMethods) {
            return modSslMethods(Output.of(modSslMethods));
        }

        /**
         * @param mode ModSSL Methods enabled / disabled.  Default is disabled.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode ModSSL Methods enabled / disabled.  Default is disabled.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param name Specifies the name of the profile.Name of Profile should be full path.The full path is the combination of the `partition + profile name`,For example `/Common/test-clientssl-profile`.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Specifies the name of the profile.Name of Profile should be full path.The full path is the combination of the `partition + profile name`,For example `/Common/test-clientssl-profile`.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param ocspStapling Specifies whether the system uses OCSP stapling. The default value is `disabled`.
         * 
         * @return builder
         * 
         */
        public Builder ocspStapling(@Nullable Output<String> ocspStapling) {
            $.ocspStapling = ocspStapling;
            return this;
        }

        /**
         * @param ocspStapling Specifies whether the system uses OCSP stapling. The default value is `disabled`.
         * 
         * @return builder
         * 
         */
        public Builder ocspStapling(String ocspStapling) {
            return ocspStapling(Output.of(ocspStapling));
        }

        /**
         * @param partition name of partition
         * 
         * @return builder
         * 
         */
        public Builder partition(@Nullable Output<String> partition) {
            $.partition = partition;
            return this;
        }

        /**
         * @param partition name of partition
         * 
         * @return builder
         * 
         */
        public Builder partition(String partition) {
            return partition(Output.of(partition));
        }

        /**
         * @param passphrase Client Certificate Constrained Delegation CA passphrase
         * 
         * @return builder
         * 
         */
        public Builder passphrase(@Nullable Output<String> passphrase) {
            $.passphrase = passphrase;
            return this;
        }

        /**
         * @param passphrase Client Certificate Constrained Delegation CA passphrase
         * 
         * @return builder
         * 
         */
        public Builder passphrase(String passphrase) {
            return passphrase(Output.of(passphrase));
        }

        /**
         * @param peerCertMode Specifies the way the system handles client certificates.When ignore, specifies that the system ignores certificates from client systems.When require, specifies that the system requires a client to present a valid certificate.When request, specifies that the system requests a valid certificate from a client but always authenticate the client.
         * 
         * @return builder
         * 
         */
        public Builder peerCertMode(@Nullable Output<String> peerCertMode) {
            $.peerCertMode = peerCertMode;
            return this;
        }

        /**
         * @param peerCertMode Specifies the way the system handles client certificates.When ignore, specifies that the system ignores certificates from client systems.When require, specifies that the system requires a client to present a valid certificate.When request, specifies that the system requests a valid certificate from a client but always authenticate the client.
         * 
         * @return builder
         * 
         */
        public Builder peerCertMode(String peerCertMode) {
            return peerCertMode(Output.of(peerCertMode));
        }

        /**
         * @param proxyCaCert Proxy CA Cert
         * 
         * @return builder
         * 
         */
        public Builder proxyCaCert(@Nullable Output<String> proxyCaCert) {
            $.proxyCaCert = proxyCaCert;
            return this;
        }

        /**
         * @param proxyCaCert Proxy CA Cert
         * 
         * @return builder
         * 
         */
        public Builder proxyCaCert(String proxyCaCert) {
            return proxyCaCert(Output.of(proxyCaCert));
        }

        /**
         * @param proxyCaKey Proxy CA Key
         * 
         * @return builder
         * 
         */
        public Builder proxyCaKey(@Nullable Output<String> proxyCaKey) {
            $.proxyCaKey = proxyCaKey;
            return this;
        }

        /**
         * @param proxyCaKey Proxy CA Key
         * 
         * @return builder
         * 
         */
        public Builder proxyCaKey(String proxyCaKey) {
            return proxyCaKey(Output.of(proxyCaKey));
        }

        /**
         * @param proxyCaPassphrase Proxy CA Passphrase
         * 
         * @return builder
         * 
         */
        public Builder proxyCaPassphrase(@Nullable Output<String> proxyCaPassphrase) {
            $.proxyCaPassphrase = proxyCaPassphrase;
            return this;
        }

        /**
         * @param proxyCaPassphrase Proxy CA Passphrase
         * 
         * @return builder
         * 
         */
        public Builder proxyCaPassphrase(String proxyCaPassphrase) {
            return proxyCaPassphrase(Output.of(proxyCaPassphrase));
        }

        /**
         * @param proxySsl Proxy SSL enabled / disabled.  Default is disabled.
         * 
         * @return builder
         * 
         */
        public Builder proxySsl(@Nullable Output<String> proxySsl) {
            $.proxySsl = proxySsl;
            return this;
        }

        /**
         * @param proxySsl Proxy SSL enabled / disabled.  Default is disabled.
         * 
         * @return builder
         * 
         */
        public Builder proxySsl(String proxySsl) {
            return proxySsl(Output.of(proxySsl));
        }

        /**
         * @param proxySslPassthrough Proxy SSL passthrough enabled / disabled.  Default is disabled.
         * 
         * @return builder
         * 
         */
        public Builder proxySslPassthrough(@Nullable Output<String> proxySslPassthrough) {
            $.proxySslPassthrough = proxySslPassthrough;
            return this;
        }

        /**
         * @param proxySslPassthrough Proxy SSL passthrough enabled / disabled.  Default is disabled.
         * 
         * @return builder
         * 
         */
        public Builder proxySslPassthrough(String proxySslPassthrough) {
            return proxySslPassthrough(Output.of(proxySslPassthrough));
        }

        /**
         * @param renegotiatePeriod Renogotiate Period (seconds)
         * 
         * @return builder
         * 
         */
        public Builder renegotiatePeriod(@Nullable Output<String> renegotiatePeriod) {
            $.renegotiatePeriod = renegotiatePeriod;
            return this;
        }

        /**
         * @param renegotiatePeriod Renogotiate Period (seconds)
         * 
         * @return builder
         * 
         */
        public Builder renegotiatePeriod(String renegotiatePeriod) {
            return renegotiatePeriod(Output.of(renegotiatePeriod));
        }

        /**
         * @param renegotiateSize Renogotiate Size
         * 
         * @return builder
         * 
         */
        public Builder renegotiateSize(@Nullable Output<String> renegotiateSize) {
            $.renegotiateSize = renegotiateSize;
            return this;
        }

        /**
         * @param renegotiateSize Renogotiate Size
         * 
         * @return builder
         * 
         */
        public Builder renegotiateSize(String renegotiateSize) {
            return renegotiateSize(Output.of(renegotiateSize));
        }

        /**
         * @param renegotiation Enables or disables SSL renegotiation.When creating a new profile, the setting is provided by the parent profile
         * 
         * @return builder
         * 
         */
        public Builder renegotiation(@Nullable Output<String> renegotiation) {
            $.renegotiation = renegotiation;
            return this;
        }

        /**
         * @param renegotiation Enables or disables SSL renegotiation.When creating a new profile, the setting is provided by the parent profile
         * 
         * @return builder
         * 
         */
        public Builder renegotiation(String renegotiation) {
            return renegotiation(Output.of(renegotiation));
        }

        /**
         * @param retainCertificate When `true`, client certificate is retained in SSL session.
         * 
         * @return builder
         * 
         */
        public Builder retainCertificate(@Nullable Output<String> retainCertificate) {
            $.retainCertificate = retainCertificate;
            return this;
        }

        /**
         * @param retainCertificate When `true`, client certificate is retained in SSL session.
         * 
         * @return builder
         * 
         */
        public Builder retainCertificate(String retainCertificate) {
            return retainCertificate(Output.of(retainCertificate));
        }

        /**
         * @param secureRenegotiation Specifies the method of secure renegotiations for SSL connections. When creating a new profile, the setting is provided by the parent profile.
         * When `request` is set the system request secure renegotation of SSL connections.
         * `require` is a default setting and when set the system permits initial SSL handshakes from clients but terminates renegotiations from unpatched clients.
         * The `require-strict` setting the system requires strict renegotiation of SSL connections. In this mode the system refuses connections to insecure servers, and terminates existing SSL connections to insecure servers
         * 
         * @return builder
         * 
         */
        public Builder secureRenegotiation(@Nullable Output<String> secureRenegotiation) {
            $.secureRenegotiation = secureRenegotiation;
            return this;
        }

        /**
         * @param secureRenegotiation Specifies the method of secure renegotiations for SSL connections. When creating a new profile, the setting is provided by the parent profile.
         * When `request` is set the system request secure renegotation of SSL connections.
         * `require` is a default setting and when set the system permits initial SSL handshakes from clients but terminates renegotiations from unpatched clients.
         * The `require-strict` setting the system requires strict renegotiation of SSL connections. In this mode the system refuses connections to insecure servers, and terminates existing SSL connections to insecure servers
         * 
         * @return builder
         * 
         */
        public Builder secureRenegotiation(String secureRenegotiation) {
            return secureRenegotiation(Output.of(secureRenegotiation));
        }

        /**
         * @param serverName Specifies the fully qualified DNS hostname of the server used in Server Name Indication communications. When creating a new profile, the setting is provided by the parent profile.The server name can also be a wildcard string containing the asterisk `*` character.
         * 
         * @return builder
         * 
         */
        public Builder serverName(@Nullable Output<String> serverName) {
            $.serverName = serverName;
            return this;
        }

        /**
         * @param serverName Specifies the fully qualified DNS hostname of the server used in Server Name Indication communications. When creating a new profile, the setting is provided by the parent profile.The server name can also be a wildcard string containing the asterisk `*` character.
         * 
         * @return builder
         * 
         */
        public Builder serverName(String serverName) {
            return serverName(Output.of(serverName));
        }

        /**
         * @param sessionMirroring Session Mirroring (enabled / disabled)
         * 
         * @return builder
         * 
         */
        public Builder sessionMirroring(@Nullable Output<String> sessionMirroring) {
            $.sessionMirroring = sessionMirroring;
            return this;
        }

        /**
         * @param sessionMirroring Session Mirroring (enabled / disabled)
         * 
         * @return builder
         * 
         */
        public Builder sessionMirroring(String sessionMirroring) {
            return sessionMirroring(Output.of(sessionMirroring));
        }

        /**
         * @param sessionTicket Session Ticket (enabled / disabled)
         * 
         * @return builder
         * 
         */
        public Builder sessionTicket(@Nullable Output<String> sessionTicket) {
            $.sessionTicket = sessionTicket;
            return this;
        }

        /**
         * @param sessionTicket Session Ticket (enabled / disabled)
         * 
         * @return builder
         * 
         */
        public Builder sessionTicket(String sessionTicket) {
            return sessionTicket(Output.of(sessionTicket));
        }

        /**
         * @param sniDefault Indicates that the system uses this profile as the default SSL profile when there is no match to the server name, or when the client provides no SNI extension support.When creating a new profile, the setting is provided by the parent profile.
         * There can be only one SSL profile with this setting enabled.
         * 
         * @return builder
         * 
         */
        public Builder sniDefault(@Nullable Output<String> sniDefault) {
            $.sniDefault = sniDefault;
            return this;
        }

        /**
         * @param sniDefault Indicates that the system uses this profile as the default SSL profile when there is no match to the server name, or when the client provides no SNI extension support.When creating a new profile, the setting is provided by the parent profile.
         * There can be only one SSL profile with this setting enabled.
         * 
         * @return builder
         * 
         */
        public Builder sniDefault(String sniDefault) {
            return sniDefault(Output.of(sniDefault));
        }

        /**
         * @param sniRequire Requires that the network peers also provide SNI support, this setting only takes effect when `sniDefault` is set to `true`.When creating a new profile, the setting is provided by the parent profile
         * 
         * @return builder
         * 
         */
        public Builder sniRequire(@Nullable Output<String> sniRequire) {
            $.sniRequire = sniRequire;
            return this;
        }

        /**
         * @param sniRequire Requires that the network peers also provide SNI support, this setting only takes effect when `sniDefault` is set to `true`.When creating a new profile, the setting is provided by the parent profile
         * 
         * @return builder
         * 
         */
        public Builder sniRequire(String sniRequire) {
            return sniRequire(Output.of(sniRequire));
        }

        /**
         * @param sslC3d Enables or disables SSL client certificate constrained delegation. The default option is disabled. Conversely, you can specify enabled to use the SSL client certificate constrained delegation.
         * 
         * @return builder
         * 
         */
        public Builder sslC3d(@Nullable Output<String> sslC3d) {
            $.sslC3d = sslC3d;
            return this;
        }

        /**
         * @param sslC3d Enables or disables SSL client certificate constrained delegation. The default option is disabled. Conversely, you can specify enabled to use the SSL client certificate constrained delegation.
         * 
         * @return builder
         * 
         */
        public Builder sslC3d(String sslC3d) {
            return sslC3d(Output.of(sslC3d));
        }

        /**
         * @param sslForwardProxy Specifies whether SSL forward proxy feature is enabled or not. The default value is disabled.
         * 
         * @return builder
         * 
         */
        public Builder sslForwardProxy(@Nullable Output<String> sslForwardProxy) {
            $.sslForwardProxy = sslForwardProxy;
            return this;
        }

        /**
         * @param sslForwardProxy Specifies whether SSL forward proxy feature is enabled or not. The default value is disabled.
         * 
         * @return builder
         * 
         */
        public Builder sslForwardProxy(String sslForwardProxy) {
            return sslForwardProxy(Output.of(sslForwardProxy));
        }

        /**
         * @param sslForwardProxyBypass Specifies whether SSL forward proxy bypass feature is enabled or not. The default value is disabled.
         * 
         * @return builder
         * 
         */
        public Builder sslForwardProxyBypass(@Nullable Output<String> sslForwardProxyBypass) {
            $.sslForwardProxyBypass = sslForwardProxyBypass;
            return this;
        }

        /**
         * @param sslForwardProxyBypass Specifies whether SSL forward proxy bypass feature is enabled or not. The default value is disabled.
         * 
         * @return builder
         * 
         */
        public Builder sslForwardProxyBypass(String sslForwardProxyBypass) {
            return sslForwardProxyBypass(Output.of(sslForwardProxyBypass));
        }

        /**
         * @param sslSignHash SSL sign hash (any, sha1, sha256, sha384)
         * 
         * @return builder
         * 
         */
        public Builder sslSignHash(@Nullable Output<String> sslSignHash) {
            $.sslSignHash = sslSignHash;
            return this;
        }

        /**
         * @param sslSignHash SSL sign hash (any, sha1, sha256, sha384)
         * 
         * @return builder
         * 
         */
        public Builder sslSignHash(String sslSignHash) {
            return sslSignHash(Output.of(sslSignHash));
        }

        /**
         * @param strictResume Enables or disables the resumption of SSL sessions after an unclean shutdown.When creating a new profile, the setting is provided by the parent profile.
         * 
         * @return builder
         * 
         */
        public Builder strictResume(@Nullable Output<String> strictResume) {
            $.strictResume = strictResume;
            return this;
        }

        /**
         * @param strictResume Enables or disables the resumption of SSL sessions after an unclean shutdown.When creating a new profile, the setting is provided by the parent profile.
         * 
         * @return builder
         * 
         */
        public Builder strictResume(String strictResume) {
            return strictResume(Output.of(strictResume));
        }

        /**
         * @param tmOptions List of Enabled selection from a set of industry standard options for handling SSL processing.By default,
         * Don&#39;t insert empty fragments and No TLSv1.3 are listed as Enabled Options. `Usage` : tmOptions    = [&#34;dont-insert-empty-fragments&#34;,&#34;no-tlsv1.3&#34;]
         * 
         * @return builder
         * 
         */
        public Builder tmOptions(@Nullable Output<List<String>> tmOptions) {
            $.tmOptions = tmOptions;
            return this;
        }

        /**
         * @param tmOptions List of Enabled selection from a set of industry standard options for handling SSL processing.By default,
         * Don&#39;t insert empty fragments and No TLSv1.3 are listed as Enabled Options. `Usage` : tmOptions    = [&#34;dont-insert-empty-fragments&#34;,&#34;no-tlsv1.3&#34;]
         * 
         * @return builder
         * 
         */
        public Builder tmOptions(List<String> tmOptions) {
            return tmOptions(Output.of(tmOptions));
        }

        /**
         * @param tmOptions List of Enabled selection from a set of industry standard options for handling SSL processing.By default,
         * Don&#39;t insert empty fragments and No TLSv1.3 are listed as Enabled Options. `Usage` : tmOptions    = [&#34;dont-insert-empty-fragments&#34;,&#34;no-tlsv1.3&#34;]
         * 
         * @return builder
         * 
         */
        public Builder tmOptions(String... tmOptions) {
            return tmOptions(List.of(tmOptions));
        }

        /**
         * @param uncleanShutdown Unclean Shutdown (enabled / disabled)
         * 
         * @return builder
         * 
         */
        public Builder uncleanShutdown(@Nullable Output<String> uncleanShutdown) {
            $.uncleanShutdown = uncleanShutdown;
            return this;
        }

        /**
         * @param uncleanShutdown Unclean Shutdown (enabled / disabled)
         * 
         * @return builder
         * 
         */
        public Builder uncleanShutdown(String uncleanShutdown) {
            return uncleanShutdown(Output.of(uncleanShutdown));
        }

        public ProfileClientSslState build() {
            return $;
        }
    }

}
