// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProfileFastHttpArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProfileFastHttpArgs Empty = new ProfileFastHttpArgs();

    /**
     * Specifies the maximum number of times that the system can re-use a current connection. The default value is 0 (zero).
     * 
     */
    @Import(name="connpoolMaxreuse")
    private @Nullable Output<Integer> connpoolMaxreuse;

    /**
     * @return Specifies the maximum number of times that the system can re-use a current connection. The default value is 0 (zero).
     * 
     */
    public Optional<Output<Integer>> connpoolMaxreuse() {
        return Optional.ofNullable(this.connpoolMaxreuse);
    }

    /**
     * Specifies the maximum number of connections to a load balancing pool. A setting of 0 specifies that a pool can accept an unlimited number of connections. The default value is 2048.
     * 
     */
    @Import(name="connpoolMaxsize")
    private @Nullable Output<Integer> connpoolMaxsize;

    /**
     * @return Specifies the maximum number of connections to a load balancing pool. A setting of 0 specifies that a pool can accept an unlimited number of connections. The default value is 2048.
     * 
     */
    public Optional<Output<Integer>> connpoolMaxsize() {
        return Optional.ofNullable(this.connpoolMaxsize);
    }

    /**
     * Specifies the minimum number of connections to a load balancing pool. A setting of 0 specifies that there is no minimum. The default value is 10.
     * 
     */
    @Import(name="connpoolMinsize")
    private @Nullable Output<Integer> connpoolMinsize;

    /**
     * @return Specifies the minimum number of connections to a load balancing pool. A setting of 0 specifies that there is no minimum. The default value is 10.
     * 
     */
    public Optional<Output<Integer>> connpoolMinsize() {
        return Optional.ofNullable(this.connpoolMinsize);
    }

    /**
     * The default value is enabled. When this option is enabled, the system replenishes the number of connections to a load balancing pool to the number of connections that existed when the server closed the connection to the pool. When disabled, the system replenishes the connection that was closed by the server, only when there are fewer connections to the pool than the number of connections set in the connpool-min-size connections option. Also see the connpool-min-size option..
     * 
     */
    @Import(name="connpoolReplenish")
    private @Nullable Output<String> connpoolReplenish;

    /**
     * @return The default value is enabled. When this option is enabled, the system replenishes the number of connections to a load balancing pool to the number of connections that existed when the server closed the connection to the pool. When disabled, the system replenishes the connection that was closed by the server, only when there are fewer connections to the pool than the number of connections set in the connpool-min-size connections option. Also see the connpool-min-size option..
     * 
     */
    public Optional<Output<String>> connpoolReplenish() {
        return Optional.ofNullable(this.connpoolReplenish);
    }

    /**
     * Specifies the increment in which the system makes additional connections available, when all available connections are in use. The default value is 4.
     * 
     */
    @Import(name="connpoolStep")
    private @Nullable Output<Integer> connpoolStep;

    /**
     * @return Specifies the increment in which the system makes additional connections available, when all available connections are in use. The default value is 4.
     * 
     */
    public Optional<Output<Integer>> connpoolStep() {
        return Optional.ofNullable(this.connpoolStep);
    }

    /**
     * Specifies the number of seconds after which a server-side connection in a OneConnect pool is eligible for deletion, when the connection has no traffic.The value of this option overrides the idle-timeout value that you specify. The default value is 0 (zero) seconds, which disables the override setting.
     * 
     */
    @Import(name="connpoolidleTimeoutoverride")
    private @Nullable Output<Integer> connpoolidleTimeoutoverride;

    /**
     * @return Specifies the number of seconds after which a server-side connection in a OneConnect pool is eligible for deletion, when the connection has no traffic.The value of this option overrides the idle-timeout value that you specify. The default value is 0 (zero) seconds, which disables the override setting.
     * 
     */
    public Optional<Output<Integer>> connpoolidleTimeoutoverride() {
        return Optional.ofNullable(this.connpoolidleTimeoutoverride);
    }

    /**
     * Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
     * 
     */
    @Import(name="defaultsFrom")
    private @Nullable Output<String> defaultsFrom;

    /**
     * @return Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
     * 
     */
    public Optional<Output<String>> defaultsFrom() {
        return Optional.ofNullable(this.defaultsFrom);
    }

    /**
     * Specifies whether to rewrite the HTTP version in the status line of the server to HTTP 1.0 to discourage the client from pipelining or chunking data. The default value is disabled.
     * 
     */
    @Import(name="forcehttp10response")
    private @Nullable Output<String> forcehttp10response;

    /**
     * @return Specifies whether to rewrite the HTTP version in the status line of the server to HTTP 1.0 to discourage the client from pipelining or chunking data. The default value is disabled.
     * 
     */
    public Optional<Output<String>> forcehttp10response() {
        return Optional.ofNullable(this.forcehttp10response);
    }

    /**
     * Specifies an idle timeout in seconds. This setting specifies the number of seconds that a connection is idle before the connection is eligible for deletion.When you specify an idle timeout for the Fast L4 profile, the value must be greater than the bigdb database variable Pva.Scrub time in msec for it to work properly.The default value is 300 seconds.
     * 
     */
    @Import(name="idleTimeout")
    private @Nullable Output<Integer> idleTimeout;

    /**
     * @return Specifies an idle timeout in seconds. This setting specifies the number of seconds that a connection is idle before the connection is eligible for deletion.When you specify an idle timeout for the Fast L4 profile, the value must be greater than the bigdb database variable Pva.Scrub time in msec for it to work properly.The default value is 300 seconds.
     * 
     */
    public Optional<Output<Integer>> idleTimeout() {
        return Optional.ofNullable(this.idleTimeout);
    }

    /**
     * Specifies the maximum amount of HTTP header data that the system buffers before making a load balancing decision. The default setting is 32768.
     * 
     */
    @Import(name="maxheaderSize")
    private @Nullable Output<Integer> maxheaderSize;

    /**
     * @return Specifies the maximum amount of HTTP header data that the system buffers before making a load balancing decision. The default setting is 32768.
     * 
     */
    public Optional<Output<Integer>> maxheaderSize() {
        return Optional.ofNullable(this.maxheaderSize);
    }

    /**
     * Name of the profile_fasthttp
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the profile_fasthttp
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private ProfileFastHttpArgs() {}

    private ProfileFastHttpArgs(ProfileFastHttpArgs $) {
        this.connpoolMaxreuse = $.connpoolMaxreuse;
        this.connpoolMaxsize = $.connpoolMaxsize;
        this.connpoolMinsize = $.connpoolMinsize;
        this.connpoolReplenish = $.connpoolReplenish;
        this.connpoolStep = $.connpoolStep;
        this.connpoolidleTimeoutoverride = $.connpoolidleTimeoutoverride;
        this.defaultsFrom = $.defaultsFrom;
        this.forcehttp10response = $.forcehttp10response;
        this.idleTimeout = $.idleTimeout;
        this.maxheaderSize = $.maxheaderSize;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProfileFastHttpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProfileFastHttpArgs $;

        public Builder() {
            $ = new ProfileFastHttpArgs();
        }

        public Builder(ProfileFastHttpArgs defaults) {
            $ = new ProfileFastHttpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connpoolMaxreuse Specifies the maximum number of times that the system can re-use a current connection. The default value is 0 (zero).
         * 
         * @return builder
         * 
         */
        public Builder connpoolMaxreuse(@Nullable Output<Integer> connpoolMaxreuse) {
            $.connpoolMaxreuse = connpoolMaxreuse;
            return this;
        }

        /**
         * @param connpoolMaxreuse Specifies the maximum number of times that the system can re-use a current connection. The default value is 0 (zero).
         * 
         * @return builder
         * 
         */
        public Builder connpoolMaxreuse(Integer connpoolMaxreuse) {
            return connpoolMaxreuse(Output.of(connpoolMaxreuse));
        }

        /**
         * @param connpoolMaxsize Specifies the maximum number of connections to a load balancing pool. A setting of 0 specifies that a pool can accept an unlimited number of connections. The default value is 2048.
         * 
         * @return builder
         * 
         */
        public Builder connpoolMaxsize(@Nullable Output<Integer> connpoolMaxsize) {
            $.connpoolMaxsize = connpoolMaxsize;
            return this;
        }

        /**
         * @param connpoolMaxsize Specifies the maximum number of connections to a load balancing pool. A setting of 0 specifies that a pool can accept an unlimited number of connections. The default value is 2048.
         * 
         * @return builder
         * 
         */
        public Builder connpoolMaxsize(Integer connpoolMaxsize) {
            return connpoolMaxsize(Output.of(connpoolMaxsize));
        }

        /**
         * @param connpoolMinsize Specifies the minimum number of connections to a load balancing pool. A setting of 0 specifies that there is no minimum. The default value is 10.
         * 
         * @return builder
         * 
         */
        public Builder connpoolMinsize(@Nullable Output<Integer> connpoolMinsize) {
            $.connpoolMinsize = connpoolMinsize;
            return this;
        }

        /**
         * @param connpoolMinsize Specifies the minimum number of connections to a load balancing pool. A setting of 0 specifies that there is no minimum. The default value is 10.
         * 
         * @return builder
         * 
         */
        public Builder connpoolMinsize(Integer connpoolMinsize) {
            return connpoolMinsize(Output.of(connpoolMinsize));
        }

        /**
         * @param connpoolReplenish The default value is enabled. When this option is enabled, the system replenishes the number of connections to a load balancing pool to the number of connections that existed when the server closed the connection to the pool. When disabled, the system replenishes the connection that was closed by the server, only when there are fewer connections to the pool than the number of connections set in the connpool-min-size connections option. Also see the connpool-min-size option..
         * 
         * @return builder
         * 
         */
        public Builder connpoolReplenish(@Nullable Output<String> connpoolReplenish) {
            $.connpoolReplenish = connpoolReplenish;
            return this;
        }

        /**
         * @param connpoolReplenish The default value is enabled. When this option is enabled, the system replenishes the number of connections to a load balancing pool to the number of connections that existed when the server closed the connection to the pool. When disabled, the system replenishes the connection that was closed by the server, only when there are fewer connections to the pool than the number of connections set in the connpool-min-size connections option. Also see the connpool-min-size option..
         * 
         * @return builder
         * 
         */
        public Builder connpoolReplenish(String connpoolReplenish) {
            return connpoolReplenish(Output.of(connpoolReplenish));
        }

        /**
         * @param connpoolStep Specifies the increment in which the system makes additional connections available, when all available connections are in use. The default value is 4.
         * 
         * @return builder
         * 
         */
        public Builder connpoolStep(@Nullable Output<Integer> connpoolStep) {
            $.connpoolStep = connpoolStep;
            return this;
        }

        /**
         * @param connpoolStep Specifies the increment in which the system makes additional connections available, when all available connections are in use. The default value is 4.
         * 
         * @return builder
         * 
         */
        public Builder connpoolStep(Integer connpoolStep) {
            return connpoolStep(Output.of(connpoolStep));
        }

        /**
         * @param connpoolidleTimeoutoverride Specifies the number of seconds after which a server-side connection in a OneConnect pool is eligible for deletion, when the connection has no traffic.The value of this option overrides the idle-timeout value that you specify. The default value is 0 (zero) seconds, which disables the override setting.
         * 
         * @return builder
         * 
         */
        public Builder connpoolidleTimeoutoverride(@Nullable Output<Integer> connpoolidleTimeoutoverride) {
            $.connpoolidleTimeoutoverride = connpoolidleTimeoutoverride;
            return this;
        }

        /**
         * @param connpoolidleTimeoutoverride Specifies the number of seconds after which a server-side connection in a OneConnect pool is eligible for deletion, when the connection has no traffic.The value of this option overrides the idle-timeout value that you specify. The default value is 0 (zero) seconds, which disables the override setting.
         * 
         * @return builder
         * 
         */
        public Builder connpoolidleTimeoutoverride(Integer connpoolidleTimeoutoverride) {
            return connpoolidleTimeoutoverride(Output.of(connpoolidleTimeoutoverride));
        }

        /**
         * @param defaultsFrom Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
         * 
         * @return builder
         * 
         */
        public Builder defaultsFrom(@Nullable Output<String> defaultsFrom) {
            $.defaultsFrom = defaultsFrom;
            return this;
        }

        /**
         * @param defaultsFrom Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
         * 
         * @return builder
         * 
         */
        public Builder defaultsFrom(String defaultsFrom) {
            return defaultsFrom(Output.of(defaultsFrom));
        }

        /**
         * @param forcehttp10response Specifies whether to rewrite the HTTP version in the status line of the server to HTTP 1.0 to discourage the client from pipelining or chunking data. The default value is disabled.
         * 
         * @return builder
         * 
         */
        public Builder forcehttp10response(@Nullable Output<String> forcehttp10response) {
            $.forcehttp10response = forcehttp10response;
            return this;
        }

        /**
         * @param forcehttp10response Specifies whether to rewrite the HTTP version in the status line of the server to HTTP 1.0 to discourage the client from pipelining or chunking data. The default value is disabled.
         * 
         * @return builder
         * 
         */
        public Builder forcehttp10response(String forcehttp10response) {
            return forcehttp10response(Output.of(forcehttp10response));
        }

        /**
         * @param idleTimeout Specifies an idle timeout in seconds. This setting specifies the number of seconds that a connection is idle before the connection is eligible for deletion.When you specify an idle timeout for the Fast L4 profile, the value must be greater than the bigdb database variable Pva.Scrub time in msec for it to work properly.The default value is 300 seconds.
         * 
         * @return builder
         * 
         */
        public Builder idleTimeout(@Nullable Output<Integer> idleTimeout) {
            $.idleTimeout = idleTimeout;
            return this;
        }

        /**
         * @param idleTimeout Specifies an idle timeout in seconds. This setting specifies the number of seconds that a connection is idle before the connection is eligible for deletion.When you specify an idle timeout for the Fast L4 profile, the value must be greater than the bigdb database variable Pva.Scrub time in msec for it to work properly.The default value is 300 seconds.
         * 
         * @return builder
         * 
         */
        public Builder idleTimeout(Integer idleTimeout) {
            return idleTimeout(Output.of(idleTimeout));
        }

        /**
         * @param maxheaderSize Specifies the maximum amount of HTTP header data that the system buffers before making a load balancing decision. The default setting is 32768.
         * 
         * @return builder
         * 
         */
        public Builder maxheaderSize(@Nullable Output<Integer> maxheaderSize) {
            $.maxheaderSize = maxheaderSize;
            return this;
        }

        /**
         * @param maxheaderSize Specifies the maximum amount of HTTP header data that the system buffers before making a load balancing decision. The default setting is 32768.
         * 
         * @return builder
         * 
         */
        public Builder maxheaderSize(Integer maxheaderSize) {
            return maxheaderSize(Output.of(maxheaderSize));
        }

        /**
         * @param name Name of the profile_fasthttp
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the profile_fasthttp
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public ProfileFastHttpArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
