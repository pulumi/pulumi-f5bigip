// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PolicyRuleCondition {
    private @Nullable Boolean address;
    private @Nullable Boolean all;
    private @Nullable String appService;
    private @Nullable Boolean browserType;
    private @Nullable Boolean browserVersion;
    private @Nullable Boolean caseInsensitive;
    private @Nullable Boolean caseSensitive;
    private @Nullable Boolean cipher;
    private @Nullable Boolean cipherBits;
    private @Nullable Boolean clientAccepted;
    private @Nullable Boolean clientSsl;
    private @Nullable Boolean code;
    private @Nullable Boolean commonName;
    private @Nullable Boolean contains;
    private @Nullable Boolean continent;
    private @Nullable Boolean countryCode;
    private @Nullable Boolean countryName;
    private @Nullable Boolean cpuUsage;
    private @Nullable String datagroup;
    private @Nullable Boolean deviceMake;
    private @Nullable Boolean deviceModel;
    private @Nullable Boolean domain;
    private @Nullable Boolean endsWith;
    private @Nullable Boolean equals;
    private @Nullable Boolean exists;
    private @Nullable Boolean expiry;
    private @Nullable Boolean extension;
    private @Nullable Boolean external;
    private @Nullable Boolean geoip;
    private @Nullable Boolean greater;
    private @Nullable Boolean greaterOrEqual;
    private @Nullable Boolean host;
    private @Nullable Boolean httpBasicAuth;
    private @Nullable Boolean httpCookie;
    private @Nullable Boolean httpHeader;
    private @Nullable Boolean httpHost;
    private @Nullable Boolean httpMethod;
    private @Nullable Boolean httpReferer;
    private @Nullable Boolean httpSetCookie;
    private @Nullable Boolean httpStatus;
    private @Nullable Boolean httpUri;
    private @Nullable Boolean httpUserAgent;
    private @Nullable Boolean httpVersion;
    private @Nullable Integer index;
    private @Nullable Boolean internal;
    private @Nullable Boolean isp;
    private @Nullable Boolean last15secs;
    private @Nullable Boolean last1min;
    private @Nullable Boolean last5mins;
    private @Nullable Boolean less;
    private @Nullable Boolean lessOrEqual;
    private @Nullable Boolean local;
    private @Nullable Boolean major;
    private @Nullable Boolean matches;
    private @Nullable Boolean minor;
    private @Nullable Boolean missing;
    private @Nullable Boolean mss;
    private @Nullable Boolean not;
    private @Nullable Boolean org;
    private @Nullable Boolean password;
    private @Nullable Boolean path;
    private @Nullable Boolean pathSegment;
    private @Nullable Boolean port;
    private @Nullable Boolean present;
    private @Nullable Boolean protocol;
    private @Nullable Boolean queryParameter;
    private @Nullable Boolean queryString;
    private @Nullable Boolean regionCode;
    private @Nullable Boolean regionName;
    private @Nullable Boolean remote;
    private @Nullable Boolean request;
    private @Nullable Boolean response;
    private @Nullable Boolean routeDomain;
    private @Nullable Boolean rtt;
    private @Nullable Boolean scheme;
    private @Nullable Boolean serverName;
    private @Nullable Boolean sslCert;
    private @Nullable Boolean sslClientHello;
    private @Nullable Boolean sslExtension;
    private @Nullable Boolean sslServerHandshake;
    private @Nullable Boolean sslServerHello;
    private @Nullable Boolean startsWith;
    private @Nullable Boolean tcp;
    private @Nullable Boolean text;
    private @Nullable String tmName;
    private @Nullable Boolean unnamedQueryParameter;
    private @Nullable Boolean userAgentToken;
    private @Nullable Boolean username;
    private @Nullable Boolean value;
    private @Nullable List<String> values;
    private @Nullable Boolean version;
    private @Nullable Boolean vlan;
    private @Nullable Boolean vlanId;

    private PolicyRuleCondition() {}
    public Optional<Boolean> address() {
        return Optional.ofNullable(this.address);
    }
    public Optional<Boolean> all() {
        return Optional.ofNullable(this.all);
    }
    public Optional<String> appService() {
        return Optional.ofNullable(this.appService);
    }
    public Optional<Boolean> browserType() {
        return Optional.ofNullable(this.browserType);
    }
    public Optional<Boolean> browserVersion() {
        return Optional.ofNullable(this.browserVersion);
    }
    public Optional<Boolean> caseInsensitive() {
        return Optional.ofNullable(this.caseInsensitive);
    }
    public Optional<Boolean> caseSensitive() {
        return Optional.ofNullable(this.caseSensitive);
    }
    public Optional<Boolean> cipher() {
        return Optional.ofNullable(this.cipher);
    }
    public Optional<Boolean> cipherBits() {
        return Optional.ofNullable(this.cipherBits);
    }
    public Optional<Boolean> clientAccepted() {
        return Optional.ofNullable(this.clientAccepted);
    }
    public Optional<Boolean> clientSsl() {
        return Optional.ofNullable(this.clientSsl);
    }
    public Optional<Boolean> code() {
        return Optional.ofNullable(this.code);
    }
    public Optional<Boolean> commonName() {
        return Optional.ofNullable(this.commonName);
    }
    public Optional<Boolean> contains() {
        return Optional.ofNullable(this.contains);
    }
    public Optional<Boolean> continent() {
        return Optional.ofNullable(this.continent);
    }
    public Optional<Boolean> countryCode() {
        return Optional.ofNullable(this.countryCode);
    }
    public Optional<Boolean> countryName() {
        return Optional.ofNullable(this.countryName);
    }
    public Optional<Boolean> cpuUsage() {
        return Optional.ofNullable(this.cpuUsage);
    }
    public Optional<String> datagroup() {
        return Optional.ofNullable(this.datagroup);
    }
    public Optional<Boolean> deviceMake() {
        return Optional.ofNullable(this.deviceMake);
    }
    public Optional<Boolean> deviceModel() {
        return Optional.ofNullable(this.deviceModel);
    }
    public Optional<Boolean> domain() {
        return Optional.ofNullable(this.domain);
    }
    public Optional<Boolean> endsWith() {
        return Optional.ofNullable(this.endsWith);
    }
    public Optional<Boolean> equals_() {
        return Optional.ofNullable(this.equals);
    }
    public Optional<Boolean> exists() {
        return Optional.ofNullable(this.exists);
    }
    public Optional<Boolean> expiry() {
        return Optional.ofNullable(this.expiry);
    }
    public Optional<Boolean> extension() {
        return Optional.ofNullable(this.extension);
    }
    public Optional<Boolean> external() {
        return Optional.ofNullable(this.external);
    }
    public Optional<Boolean> geoip() {
        return Optional.ofNullable(this.geoip);
    }
    public Optional<Boolean> greater() {
        return Optional.ofNullable(this.greater);
    }
    public Optional<Boolean> greaterOrEqual() {
        return Optional.ofNullable(this.greaterOrEqual);
    }
    public Optional<Boolean> host() {
        return Optional.ofNullable(this.host);
    }
    public Optional<Boolean> httpBasicAuth() {
        return Optional.ofNullable(this.httpBasicAuth);
    }
    public Optional<Boolean> httpCookie() {
        return Optional.ofNullable(this.httpCookie);
    }
    public Optional<Boolean> httpHeader() {
        return Optional.ofNullable(this.httpHeader);
    }
    public Optional<Boolean> httpHost() {
        return Optional.ofNullable(this.httpHost);
    }
    public Optional<Boolean> httpMethod() {
        return Optional.ofNullable(this.httpMethod);
    }
    public Optional<Boolean> httpReferer() {
        return Optional.ofNullable(this.httpReferer);
    }
    public Optional<Boolean> httpSetCookie() {
        return Optional.ofNullable(this.httpSetCookie);
    }
    public Optional<Boolean> httpStatus() {
        return Optional.ofNullable(this.httpStatus);
    }
    public Optional<Boolean> httpUri() {
        return Optional.ofNullable(this.httpUri);
    }
    public Optional<Boolean> httpUserAgent() {
        return Optional.ofNullable(this.httpUserAgent);
    }
    public Optional<Boolean> httpVersion() {
        return Optional.ofNullable(this.httpVersion);
    }
    public Optional<Integer> index() {
        return Optional.ofNullable(this.index);
    }
    public Optional<Boolean> internal() {
        return Optional.ofNullable(this.internal);
    }
    public Optional<Boolean> isp() {
        return Optional.ofNullable(this.isp);
    }
    public Optional<Boolean> last15secs() {
        return Optional.ofNullable(this.last15secs);
    }
    public Optional<Boolean> last1min() {
        return Optional.ofNullable(this.last1min);
    }
    public Optional<Boolean> last5mins() {
        return Optional.ofNullable(this.last5mins);
    }
    public Optional<Boolean> less() {
        return Optional.ofNullable(this.less);
    }
    public Optional<Boolean> lessOrEqual() {
        return Optional.ofNullable(this.lessOrEqual);
    }
    public Optional<Boolean> local() {
        return Optional.ofNullable(this.local);
    }
    public Optional<Boolean> major() {
        return Optional.ofNullable(this.major);
    }
    public Optional<Boolean> matches() {
        return Optional.ofNullable(this.matches);
    }
    public Optional<Boolean> minor() {
        return Optional.ofNullable(this.minor);
    }
    public Optional<Boolean> missing() {
        return Optional.ofNullable(this.missing);
    }
    public Optional<Boolean> mss() {
        return Optional.ofNullable(this.mss);
    }
    public Optional<Boolean> not() {
        return Optional.ofNullable(this.not);
    }
    public Optional<Boolean> org() {
        return Optional.ofNullable(this.org);
    }
    public Optional<Boolean> password() {
        return Optional.ofNullable(this.password);
    }
    public Optional<Boolean> path() {
        return Optional.ofNullable(this.path);
    }
    public Optional<Boolean> pathSegment() {
        return Optional.ofNullable(this.pathSegment);
    }
    public Optional<Boolean> port() {
        return Optional.ofNullable(this.port);
    }
    public Optional<Boolean> present() {
        return Optional.ofNullable(this.present);
    }
    public Optional<Boolean> protocol() {
        return Optional.ofNullable(this.protocol);
    }
    public Optional<Boolean> queryParameter() {
        return Optional.ofNullable(this.queryParameter);
    }
    public Optional<Boolean> queryString() {
        return Optional.ofNullable(this.queryString);
    }
    public Optional<Boolean> regionCode() {
        return Optional.ofNullable(this.regionCode);
    }
    public Optional<Boolean> regionName() {
        return Optional.ofNullable(this.regionName);
    }
    public Optional<Boolean> remote() {
        return Optional.ofNullable(this.remote);
    }
    public Optional<Boolean> request() {
        return Optional.ofNullable(this.request);
    }
    public Optional<Boolean> response() {
        return Optional.ofNullable(this.response);
    }
    public Optional<Boolean> routeDomain() {
        return Optional.ofNullable(this.routeDomain);
    }
    public Optional<Boolean> rtt() {
        return Optional.ofNullable(this.rtt);
    }
    public Optional<Boolean> scheme() {
        return Optional.ofNullable(this.scheme);
    }
    public Optional<Boolean> serverName() {
        return Optional.ofNullable(this.serverName);
    }
    public Optional<Boolean> sslCert() {
        return Optional.ofNullable(this.sslCert);
    }
    public Optional<Boolean> sslClientHello() {
        return Optional.ofNullable(this.sslClientHello);
    }
    public Optional<Boolean> sslExtension() {
        return Optional.ofNullable(this.sslExtension);
    }
    public Optional<Boolean> sslServerHandshake() {
        return Optional.ofNullable(this.sslServerHandshake);
    }
    public Optional<Boolean> sslServerHello() {
        return Optional.ofNullable(this.sslServerHello);
    }
    public Optional<Boolean> startsWith() {
        return Optional.ofNullable(this.startsWith);
    }
    public Optional<Boolean> tcp() {
        return Optional.ofNullable(this.tcp);
    }
    public Optional<Boolean> text() {
        return Optional.ofNullable(this.text);
    }
    public Optional<String> tmName() {
        return Optional.ofNullable(this.tmName);
    }
    public Optional<Boolean> unnamedQueryParameter() {
        return Optional.ofNullable(this.unnamedQueryParameter);
    }
    public Optional<Boolean> userAgentToken() {
        return Optional.ofNullable(this.userAgentToken);
    }
    public Optional<Boolean> username() {
        return Optional.ofNullable(this.username);
    }
    public Optional<Boolean> value() {
        return Optional.ofNullable(this.value);
    }
    public List<String> values() {
        return this.values == null ? List.of() : this.values;
    }
    public Optional<Boolean> version() {
        return Optional.ofNullable(this.version);
    }
    public Optional<Boolean> vlan() {
        return Optional.ofNullable(this.vlan);
    }
    public Optional<Boolean> vlanId() {
        return Optional.ofNullable(this.vlanId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PolicyRuleCondition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean address;
        private @Nullable Boolean all;
        private @Nullable String appService;
        private @Nullable Boolean browserType;
        private @Nullable Boolean browserVersion;
        private @Nullable Boolean caseInsensitive;
        private @Nullable Boolean caseSensitive;
        private @Nullable Boolean cipher;
        private @Nullable Boolean cipherBits;
        private @Nullable Boolean clientAccepted;
        private @Nullable Boolean clientSsl;
        private @Nullable Boolean code;
        private @Nullable Boolean commonName;
        private @Nullable Boolean contains;
        private @Nullable Boolean continent;
        private @Nullable Boolean countryCode;
        private @Nullable Boolean countryName;
        private @Nullable Boolean cpuUsage;
        private @Nullable String datagroup;
        private @Nullable Boolean deviceMake;
        private @Nullable Boolean deviceModel;
        private @Nullable Boolean domain;
        private @Nullable Boolean endsWith;
        private @Nullable Boolean equals;
        private @Nullable Boolean exists;
        private @Nullable Boolean expiry;
        private @Nullable Boolean extension;
        private @Nullable Boolean external;
        private @Nullable Boolean geoip;
        private @Nullable Boolean greater;
        private @Nullable Boolean greaterOrEqual;
        private @Nullable Boolean host;
        private @Nullable Boolean httpBasicAuth;
        private @Nullable Boolean httpCookie;
        private @Nullable Boolean httpHeader;
        private @Nullable Boolean httpHost;
        private @Nullable Boolean httpMethod;
        private @Nullable Boolean httpReferer;
        private @Nullable Boolean httpSetCookie;
        private @Nullable Boolean httpStatus;
        private @Nullable Boolean httpUri;
        private @Nullable Boolean httpUserAgent;
        private @Nullable Boolean httpVersion;
        private @Nullable Integer index;
        private @Nullable Boolean internal;
        private @Nullable Boolean isp;
        private @Nullable Boolean last15secs;
        private @Nullable Boolean last1min;
        private @Nullable Boolean last5mins;
        private @Nullable Boolean less;
        private @Nullable Boolean lessOrEqual;
        private @Nullable Boolean local;
        private @Nullable Boolean major;
        private @Nullable Boolean matches;
        private @Nullable Boolean minor;
        private @Nullable Boolean missing;
        private @Nullable Boolean mss;
        private @Nullable Boolean not;
        private @Nullable Boolean org;
        private @Nullable Boolean password;
        private @Nullable Boolean path;
        private @Nullable Boolean pathSegment;
        private @Nullable Boolean port;
        private @Nullable Boolean present;
        private @Nullable Boolean protocol;
        private @Nullable Boolean queryParameter;
        private @Nullable Boolean queryString;
        private @Nullable Boolean regionCode;
        private @Nullable Boolean regionName;
        private @Nullable Boolean remote;
        private @Nullable Boolean request;
        private @Nullable Boolean response;
        private @Nullable Boolean routeDomain;
        private @Nullable Boolean rtt;
        private @Nullable Boolean scheme;
        private @Nullable Boolean serverName;
        private @Nullable Boolean sslCert;
        private @Nullable Boolean sslClientHello;
        private @Nullable Boolean sslExtension;
        private @Nullable Boolean sslServerHandshake;
        private @Nullable Boolean sslServerHello;
        private @Nullable Boolean startsWith;
        private @Nullable Boolean tcp;
        private @Nullable Boolean text;
        private @Nullable String tmName;
        private @Nullable Boolean unnamedQueryParameter;
        private @Nullable Boolean userAgentToken;
        private @Nullable Boolean username;
        private @Nullable Boolean value;
        private @Nullable List<String> values;
        private @Nullable Boolean version;
        private @Nullable Boolean vlan;
        private @Nullable Boolean vlanId;
        public Builder() {}
        public Builder(PolicyRuleCondition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.all = defaults.all;
    	      this.appService = defaults.appService;
    	      this.browserType = defaults.browserType;
    	      this.browserVersion = defaults.browserVersion;
    	      this.caseInsensitive = defaults.caseInsensitive;
    	      this.caseSensitive = defaults.caseSensitive;
    	      this.cipher = defaults.cipher;
    	      this.cipherBits = defaults.cipherBits;
    	      this.clientAccepted = defaults.clientAccepted;
    	      this.clientSsl = defaults.clientSsl;
    	      this.code = defaults.code;
    	      this.commonName = defaults.commonName;
    	      this.contains = defaults.contains;
    	      this.continent = defaults.continent;
    	      this.countryCode = defaults.countryCode;
    	      this.countryName = defaults.countryName;
    	      this.cpuUsage = defaults.cpuUsage;
    	      this.datagroup = defaults.datagroup;
    	      this.deviceMake = defaults.deviceMake;
    	      this.deviceModel = defaults.deviceModel;
    	      this.domain = defaults.domain;
    	      this.endsWith = defaults.endsWith;
    	      this.equals = defaults.equals;
    	      this.exists = defaults.exists;
    	      this.expiry = defaults.expiry;
    	      this.extension = defaults.extension;
    	      this.external = defaults.external;
    	      this.geoip = defaults.geoip;
    	      this.greater = defaults.greater;
    	      this.greaterOrEqual = defaults.greaterOrEqual;
    	      this.host = defaults.host;
    	      this.httpBasicAuth = defaults.httpBasicAuth;
    	      this.httpCookie = defaults.httpCookie;
    	      this.httpHeader = defaults.httpHeader;
    	      this.httpHost = defaults.httpHost;
    	      this.httpMethod = defaults.httpMethod;
    	      this.httpReferer = defaults.httpReferer;
    	      this.httpSetCookie = defaults.httpSetCookie;
    	      this.httpStatus = defaults.httpStatus;
    	      this.httpUri = defaults.httpUri;
    	      this.httpUserAgent = defaults.httpUserAgent;
    	      this.httpVersion = defaults.httpVersion;
    	      this.index = defaults.index;
    	      this.internal = defaults.internal;
    	      this.isp = defaults.isp;
    	      this.last15secs = defaults.last15secs;
    	      this.last1min = defaults.last1min;
    	      this.last5mins = defaults.last5mins;
    	      this.less = defaults.less;
    	      this.lessOrEqual = defaults.lessOrEqual;
    	      this.local = defaults.local;
    	      this.major = defaults.major;
    	      this.matches = defaults.matches;
    	      this.minor = defaults.minor;
    	      this.missing = defaults.missing;
    	      this.mss = defaults.mss;
    	      this.not = defaults.not;
    	      this.org = defaults.org;
    	      this.password = defaults.password;
    	      this.path = defaults.path;
    	      this.pathSegment = defaults.pathSegment;
    	      this.port = defaults.port;
    	      this.present = defaults.present;
    	      this.protocol = defaults.protocol;
    	      this.queryParameter = defaults.queryParameter;
    	      this.queryString = defaults.queryString;
    	      this.regionCode = defaults.regionCode;
    	      this.regionName = defaults.regionName;
    	      this.remote = defaults.remote;
    	      this.request = defaults.request;
    	      this.response = defaults.response;
    	      this.routeDomain = defaults.routeDomain;
    	      this.rtt = defaults.rtt;
    	      this.scheme = defaults.scheme;
    	      this.serverName = defaults.serverName;
    	      this.sslCert = defaults.sslCert;
    	      this.sslClientHello = defaults.sslClientHello;
    	      this.sslExtension = defaults.sslExtension;
    	      this.sslServerHandshake = defaults.sslServerHandshake;
    	      this.sslServerHello = defaults.sslServerHello;
    	      this.startsWith = defaults.startsWith;
    	      this.tcp = defaults.tcp;
    	      this.text = defaults.text;
    	      this.tmName = defaults.tmName;
    	      this.unnamedQueryParameter = defaults.unnamedQueryParameter;
    	      this.userAgentToken = defaults.userAgentToken;
    	      this.username = defaults.username;
    	      this.value = defaults.value;
    	      this.values = defaults.values;
    	      this.version = defaults.version;
    	      this.vlan = defaults.vlan;
    	      this.vlanId = defaults.vlanId;
        }

        @CustomType.Setter
        public Builder address(@Nullable Boolean address) {

            this.address = address;
            return this;
        }
        @CustomType.Setter
        public Builder all(@Nullable Boolean all) {

            this.all = all;
            return this;
        }
        @CustomType.Setter
        public Builder appService(@Nullable String appService) {

            this.appService = appService;
            return this;
        }
        @CustomType.Setter
        public Builder browserType(@Nullable Boolean browserType) {

            this.browserType = browserType;
            return this;
        }
        @CustomType.Setter
        public Builder browserVersion(@Nullable Boolean browserVersion) {

            this.browserVersion = browserVersion;
            return this;
        }
        @CustomType.Setter
        public Builder caseInsensitive(@Nullable Boolean caseInsensitive) {

            this.caseInsensitive = caseInsensitive;
            return this;
        }
        @CustomType.Setter
        public Builder caseSensitive(@Nullable Boolean caseSensitive) {

            this.caseSensitive = caseSensitive;
            return this;
        }
        @CustomType.Setter
        public Builder cipher(@Nullable Boolean cipher) {

            this.cipher = cipher;
            return this;
        }
        @CustomType.Setter
        public Builder cipherBits(@Nullable Boolean cipherBits) {

            this.cipherBits = cipherBits;
            return this;
        }
        @CustomType.Setter
        public Builder clientAccepted(@Nullable Boolean clientAccepted) {

            this.clientAccepted = clientAccepted;
            return this;
        }
        @CustomType.Setter
        public Builder clientSsl(@Nullable Boolean clientSsl) {

            this.clientSsl = clientSsl;
            return this;
        }
        @CustomType.Setter
        public Builder code(@Nullable Boolean code) {

            this.code = code;
            return this;
        }
        @CustomType.Setter
        public Builder commonName(@Nullable Boolean commonName) {

            this.commonName = commonName;
            return this;
        }
        @CustomType.Setter
        public Builder contains(@Nullable Boolean contains) {

            this.contains = contains;
            return this;
        }
        @CustomType.Setter
        public Builder continent(@Nullable Boolean continent) {

            this.continent = continent;
            return this;
        }
        @CustomType.Setter
        public Builder countryCode(@Nullable Boolean countryCode) {

            this.countryCode = countryCode;
            return this;
        }
        @CustomType.Setter
        public Builder countryName(@Nullable Boolean countryName) {

            this.countryName = countryName;
            return this;
        }
        @CustomType.Setter
        public Builder cpuUsage(@Nullable Boolean cpuUsage) {

            this.cpuUsage = cpuUsage;
            return this;
        }
        @CustomType.Setter
        public Builder datagroup(@Nullable String datagroup) {

            this.datagroup = datagroup;
            return this;
        }
        @CustomType.Setter
        public Builder deviceMake(@Nullable Boolean deviceMake) {

            this.deviceMake = deviceMake;
            return this;
        }
        @CustomType.Setter
        public Builder deviceModel(@Nullable Boolean deviceModel) {

            this.deviceModel = deviceModel;
            return this;
        }
        @CustomType.Setter
        public Builder domain(@Nullable Boolean domain) {

            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder endsWith(@Nullable Boolean endsWith) {

            this.endsWith = endsWith;
            return this;
        }
        @CustomType.Setter("equals")
        public Builder equals_(@Nullable Boolean equals) {

            this.equals = equals;
            return this;
        }
        @CustomType.Setter
        public Builder exists(@Nullable Boolean exists) {

            this.exists = exists;
            return this;
        }
        @CustomType.Setter
        public Builder expiry(@Nullable Boolean expiry) {

            this.expiry = expiry;
            return this;
        }
        @CustomType.Setter
        public Builder extension(@Nullable Boolean extension) {

            this.extension = extension;
            return this;
        }
        @CustomType.Setter
        public Builder external(@Nullable Boolean external) {

            this.external = external;
            return this;
        }
        @CustomType.Setter
        public Builder geoip(@Nullable Boolean geoip) {

            this.geoip = geoip;
            return this;
        }
        @CustomType.Setter
        public Builder greater(@Nullable Boolean greater) {

            this.greater = greater;
            return this;
        }
        @CustomType.Setter
        public Builder greaterOrEqual(@Nullable Boolean greaterOrEqual) {

            this.greaterOrEqual = greaterOrEqual;
            return this;
        }
        @CustomType.Setter
        public Builder host(@Nullable Boolean host) {

            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder httpBasicAuth(@Nullable Boolean httpBasicAuth) {

            this.httpBasicAuth = httpBasicAuth;
            return this;
        }
        @CustomType.Setter
        public Builder httpCookie(@Nullable Boolean httpCookie) {

            this.httpCookie = httpCookie;
            return this;
        }
        @CustomType.Setter
        public Builder httpHeader(@Nullable Boolean httpHeader) {

            this.httpHeader = httpHeader;
            return this;
        }
        @CustomType.Setter
        public Builder httpHost(@Nullable Boolean httpHost) {

            this.httpHost = httpHost;
            return this;
        }
        @CustomType.Setter
        public Builder httpMethod(@Nullable Boolean httpMethod) {

            this.httpMethod = httpMethod;
            return this;
        }
        @CustomType.Setter
        public Builder httpReferer(@Nullable Boolean httpReferer) {

            this.httpReferer = httpReferer;
            return this;
        }
        @CustomType.Setter
        public Builder httpSetCookie(@Nullable Boolean httpSetCookie) {

            this.httpSetCookie = httpSetCookie;
            return this;
        }
        @CustomType.Setter
        public Builder httpStatus(@Nullable Boolean httpStatus) {

            this.httpStatus = httpStatus;
            return this;
        }
        @CustomType.Setter
        public Builder httpUri(@Nullable Boolean httpUri) {

            this.httpUri = httpUri;
            return this;
        }
        @CustomType.Setter
        public Builder httpUserAgent(@Nullable Boolean httpUserAgent) {

            this.httpUserAgent = httpUserAgent;
            return this;
        }
        @CustomType.Setter
        public Builder httpVersion(@Nullable Boolean httpVersion) {

            this.httpVersion = httpVersion;
            return this;
        }
        @CustomType.Setter
        public Builder index(@Nullable Integer index) {

            this.index = index;
            return this;
        }
        @CustomType.Setter
        public Builder internal(@Nullable Boolean internal) {

            this.internal = internal;
            return this;
        }
        @CustomType.Setter
        public Builder isp(@Nullable Boolean isp) {

            this.isp = isp;
            return this;
        }
        @CustomType.Setter
        public Builder last15secs(@Nullable Boolean last15secs) {

            this.last15secs = last15secs;
            return this;
        }
        @CustomType.Setter
        public Builder last1min(@Nullable Boolean last1min) {

            this.last1min = last1min;
            return this;
        }
        @CustomType.Setter
        public Builder last5mins(@Nullable Boolean last5mins) {

            this.last5mins = last5mins;
            return this;
        }
        @CustomType.Setter
        public Builder less(@Nullable Boolean less) {

            this.less = less;
            return this;
        }
        @CustomType.Setter
        public Builder lessOrEqual(@Nullable Boolean lessOrEqual) {

            this.lessOrEqual = lessOrEqual;
            return this;
        }
        @CustomType.Setter
        public Builder local(@Nullable Boolean local) {

            this.local = local;
            return this;
        }
        @CustomType.Setter
        public Builder major(@Nullable Boolean major) {

            this.major = major;
            return this;
        }
        @CustomType.Setter
        public Builder matches(@Nullable Boolean matches) {

            this.matches = matches;
            return this;
        }
        @CustomType.Setter
        public Builder minor(@Nullable Boolean minor) {

            this.minor = minor;
            return this;
        }
        @CustomType.Setter
        public Builder missing(@Nullable Boolean missing) {

            this.missing = missing;
            return this;
        }
        @CustomType.Setter
        public Builder mss(@Nullable Boolean mss) {

            this.mss = mss;
            return this;
        }
        @CustomType.Setter
        public Builder not(@Nullable Boolean not) {

            this.not = not;
            return this;
        }
        @CustomType.Setter
        public Builder org(@Nullable Boolean org) {

            this.org = org;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable Boolean password) {

            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable Boolean path) {

            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder pathSegment(@Nullable Boolean pathSegment) {

            this.pathSegment = pathSegment;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Boolean port) {

            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder present(@Nullable Boolean present) {

            this.present = present;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(@Nullable Boolean protocol) {

            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder queryParameter(@Nullable Boolean queryParameter) {

            this.queryParameter = queryParameter;
            return this;
        }
        @CustomType.Setter
        public Builder queryString(@Nullable Boolean queryString) {

            this.queryString = queryString;
            return this;
        }
        @CustomType.Setter
        public Builder regionCode(@Nullable Boolean regionCode) {

            this.regionCode = regionCode;
            return this;
        }
        @CustomType.Setter
        public Builder regionName(@Nullable Boolean regionName) {

            this.regionName = regionName;
            return this;
        }
        @CustomType.Setter
        public Builder remote(@Nullable Boolean remote) {

            this.remote = remote;
            return this;
        }
        @CustomType.Setter
        public Builder request(@Nullable Boolean request) {

            this.request = request;
            return this;
        }
        @CustomType.Setter
        public Builder response(@Nullable Boolean response) {

            this.response = response;
            return this;
        }
        @CustomType.Setter
        public Builder routeDomain(@Nullable Boolean routeDomain) {

            this.routeDomain = routeDomain;
            return this;
        }
        @CustomType.Setter
        public Builder rtt(@Nullable Boolean rtt) {

            this.rtt = rtt;
            return this;
        }
        @CustomType.Setter
        public Builder scheme(@Nullable Boolean scheme) {

            this.scheme = scheme;
            return this;
        }
        @CustomType.Setter
        public Builder serverName(@Nullable Boolean serverName) {

            this.serverName = serverName;
            return this;
        }
        @CustomType.Setter
        public Builder sslCert(@Nullable Boolean sslCert) {

            this.sslCert = sslCert;
            return this;
        }
        @CustomType.Setter
        public Builder sslClientHello(@Nullable Boolean sslClientHello) {

            this.sslClientHello = sslClientHello;
            return this;
        }
        @CustomType.Setter
        public Builder sslExtension(@Nullable Boolean sslExtension) {

            this.sslExtension = sslExtension;
            return this;
        }
        @CustomType.Setter
        public Builder sslServerHandshake(@Nullable Boolean sslServerHandshake) {

            this.sslServerHandshake = sslServerHandshake;
            return this;
        }
        @CustomType.Setter
        public Builder sslServerHello(@Nullable Boolean sslServerHello) {

            this.sslServerHello = sslServerHello;
            return this;
        }
        @CustomType.Setter
        public Builder startsWith(@Nullable Boolean startsWith) {

            this.startsWith = startsWith;
            return this;
        }
        @CustomType.Setter
        public Builder tcp(@Nullable Boolean tcp) {

            this.tcp = tcp;
            return this;
        }
        @CustomType.Setter
        public Builder text(@Nullable Boolean text) {

            this.text = text;
            return this;
        }
        @CustomType.Setter
        public Builder tmName(@Nullable String tmName) {

            this.tmName = tmName;
            return this;
        }
        @CustomType.Setter
        public Builder unnamedQueryParameter(@Nullable Boolean unnamedQueryParameter) {

            this.unnamedQueryParameter = unnamedQueryParameter;
            return this;
        }
        @CustomType.Setter
        public Builder userAgentToken(@Nullable Boolean userAgentToken) {

            this.userAgentToken = userAgentToken;
            return this;
        }
        @CustomType.Setter
        public Builder username(@Nullable Boolean username) {

            this.username = username;
            return this;
        }
        @CustomType.Setter
        public Builder value(@Nullable Boolean value) {

            this.value = value;
            return this;
        }
        @CustomType.Setter
        public Builder values(@Nullable List<String> values) {

            this.values = values;
            return this;
        }
        public Builder values(String... values) {
            return values(List.of(values));
        }
        @CustomType.Setter
        public Builder version(@Nullable Boolean version) {

            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder vlan(@Nullable Boolean vlan) {

            this.vlan = vlan;
            return this;
        }
        @CustomType.Setter
        public Builder vlanId(@Nullable Boolean vlanId) {

            this.vlanId = vlanId;
            return this;
        }
        public PolicyRuleCondition build() {
            final var _resultValue = new PolicyRuleCondition();
            _resultValue.address = address;
            _resultValue.all = all;
            _resultValue.appService = appService;
            _resultValue.browserType = browserType;
            _resultValue.browserVersion = browserVersion;
            _resultValue.caseInsensitive = caseInsensitive;
            _resultValue.caseSensitive = caseSensitive;
            _resultValue.cipher = cipher;
            _resultValue.cipherBits = cipherBits;
            _resultValue.clientAccepted = clientAccepted;
            _resultValue.clientSsl = clientSsl;
            _resultValue.code = code;
            _resultValue.commonName = commonName;
            _resultValue.contains = contains;
            _resultValue.continent = continent;
            _resultValue.countryCode = countryCode;
            _resultValue.countryName = countryName;
            _resultValue.cpuUsage = cpuUsage;
            _resultValue.datagroup = datagroup;
            _resultValue.deviceMake = deviceMake;
            _resultValue.deviceModel = deviceModel;
            _resultValue.domain = domain;
            _resultValue.endsWith = endsWith;
            _resultValue.equals = equals;
            _resultValue.exists = exists;
            _resultValue.expiry = expiry;
            _resultValue.extension = extension;
            _resultValue.external = external;
            _resultValue.geoip = geoip;
            _resultValue.greater = greater;
            _resultValue.greaterOrEqual = greaterOrEqual;
            _resultValue.host = host;
            _resultValue.httpBasicAuth = httpBasicAuth;
            _resultValue.httpCookie = httpCookie;
            _resultValue.httpHeader = httpHeader;
            _resultValue.httpHost = httpHost;
            _resultValue.httpMethod = httpMethod;
            _resultValue.httpReferer = httpReferer;
            _resultValue.httpSetCookie = httpSetCookie;
            _resultValue.httpStatus = httpStatus;
            _resultValue.httpUri = httpUri;
            _resultValue.httpUserAgent = httpUserAgent;
            _resultValue.httpVersion = httpVersion;
            _resultValue.index = index;
            _resultValue.internal = internal;
            _resultValue.isp = isp;
            _resultValue.last15secs = last15secs;
            _resultValue.last1min = last1min;
            _resultValue.last5mins = last5mins;
            _resultValue.less = less;
            _resultValue.lessOrEqual = lessOrEqual;
            _resultValue.local = local;
            _resultValue.major = major;
            _resultValue.matches = matches;
            _resultValue.minor = minor;
            _resultValue.missing = missing;
            _resultValue.mss = mss;
            _resultValue.not = not;
            _resultValue.org = org;
            _resultValue.password = password;
            _resultValue.path = path;
            _resultValue.pathSegment = pathSegment;
            _resultValue.port = port;
            _resultValue.present = present;
            _resultValue.protocol = protocol;
            _resultValue.queryParameter = queryParameter;
            _resultValue.queryString = queryString;
            _resultValue.regionCode = regionCode;
            _resultValue.regionName = regionName;
            _resultValue.remote = remote;
            _resultValue.request = request;
            _resultValue.response = response;
            _resultValue.routeDomain = routeDomain;
            _resultValue.rtt = rtt;
            _resultValue.scheme = scheme;
            _resultValue.serverName = serverName;
            _resultValue.sslCert = sslCert;
            _resultValue.sslClientHello = sslClientHello;
            _resultValue.sslExtension = sslExtension;
            _resultValue.sslServerHandshake = sslServerHandshake;
            _resultValue.sslServerHello = sslServerHello;
            _resultValue.startsWith = startsWith;
            _resultValue.tcp = tcp;
            _resultValue.text = text;
            _resultValue.tmName = tmName;
            _resultValue.unnamedQueryParameter = unnamedQueryParameter;
            _resultValue.userAgentToken = userAgentToken;
            _resultValue.username = username;
            _resultValue.value = value;
            _resultValue.values = values;
            _resultValue.version = version;
            _resultValue.vlan = vlan;
            _resultValue.vlanId = vlanId;
            return _resultValue;
        }
    }
}
