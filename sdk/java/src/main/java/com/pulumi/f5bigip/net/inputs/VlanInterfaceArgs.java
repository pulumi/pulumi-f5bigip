// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.net.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VlanInterfaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final VlanInterfaceArgs Empty = new VlanInterfaceArgs();

    /**
     * Specifies a list of tagged interfaces or trunks associated with this VLAN. Note that you can associate tagged interfaces or trunks with any number of VLANs.
     * 
     */
    @Import(name="tagged")
    private @Nullable Output<Boolean> tagged;

    /**
     * @return Specifies a list of tagged interfaces or trunks associated with this VLAN. Note that you can associate tagged interfaces or trunks with any number of VLANs.
     * 
     */
    public Optional<Output<Boolean>> tagged() {
        return Optional.ofNullable(this.tagged);
    }

    /**
     * Physical or virtual port used for traffic
     * 
     */
    @Import(name="vlanport")
    private @Nullable Output<String> vlanport;

    /**
     * @return Physical or virtual port used for traffic
     * 
     */
    public Optional<Output<String>> vlanport() {
        return Optional.ofNullable(this.vlanport);
    }

    private VlanInterfaceArgs() {}

    private VlanInterfaceArgs(VlanInterfaceArgs $) {
        this.tagged = $.tagged;
        this.vlanport = $.vlanport;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VlanInterfaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VlanInterfaceArgs $;

        public Builder() {
            $ = new VlanInterfaceArgs();
        }

        public Builder(VlanInterfaceArgs defaults) {
            $ = new VlanInterfaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param tagged Specifies a list of tagged interfaces or trunks associated with this VLAN. Note that you can associate tagged interfaces or trunks with any number of VLANs.
         * 
         * @return builder
         * 
         */
        public Builder tagged(@Nullable Output<Boolean> tagged) {
            $.tagged = tagged;
            return this;
        }

        /**
         * @param tagged Specifies a list of tagged interfaces or trunks associated with this VLAN. Note that you can associate tagged interfaces or trunks with any number of VLANs.
         * 
         * @return builder
         * 
         */
        public Builder tagged(Boolean tagged) {
            return tagged(Output.of(tagged));
        }

        /**
         * @param vlanport Physical or virtual port used for traffic
         * 
         * @return builder
         * 
         */
        public Builder vlanport(@Nullable Output<String> vlanport) {
            $.vlanport = vlanport;
            return this;
        }

        /**
         * @param vlanport Physical or virtual port used for traffic
         * 
         * @return builder
         * 
         */
        public Builder vlanport(String vlanport) {
            return vlanport(Output.of(vlanport));
        }

        public VlanInterfaceArgs build() {
            return $;
        }
    }

}
