// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.f5bigip.inputs.EventServiceDiscoveryNodeArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventServiceDiscoveryArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventServiceDiscoveryArgs Empty = new EventServiceDiscoveryArgs();

    /**
     * Map of node which will be added to pool which will be having node name(id),node address(ip) and node port(port)
     * 
     */
    @Import(name="nodes")
    private @Nullable Output<List<EventServiceDiscoveryNodeArgs>> nodes;

    /**
     * @return Map of node which will be added to pool which will be having node name(id),node address(ip) and node port(port)
     * 
     */
    public Optional<Output<List<EventServiceDiscoveryNodeArgs>>> nodes() {
        return Optional.ofNullable(this.nodes);
    }

    /**
     * servicediscovery endpoint ( Below example shows how to create endpoing using AS3 )
     * 
     */
    @Import(name="taskid", required=true)
    private Output<String> taskid;

    /**
     * @return servicediscovery endpoint ( Below example shows how to create endpoing using AS3 )
     * 
     */
    public Output<String> taskid() {
        return this.taskid;
    }

    private EventServiceDiscoveryArgs() {}

    private EventServiceDiscoveryArgs(EventServiceDiscoveryArgs $) {
        this.nodes = $.nodes;
        this.taskid = $.taskid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventServiceDiscoveryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventServiceDiscoveryArgs $;

        public Builder() {
            $ = new EventServiceDiscoveryArgs();
        }

        public Builder(EventServiceDiscoveryArgs defaults) {
            $ = new EventServiceDiscoveryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param nodes Map of node which will be added to pool which will be having node name(id),node address(ip) and node port(port)
         * 
         * @return builder
         * 
         */
        public Builder nodes(@Nullable Output<List<EventServiceDiscoveryNodeArgs>> nodes) {
            $.nodes = nodes;
            return this;
        }

        /**
         * @param nodes Map of node which will be added to pool which will be having node name(id),node address(ip) and node port(port)
         * 
         * @return builder
         * 
         */
        public Builder nodes(List<EventServiceDiscoveryNodeArgs> nodes) {
            return nodes(Output.of(nodes));
        }

        /**
         * @param nodes Map of node which will be added to pool which will be having node name(id),node address(ip) and node port(port)
         * 
         * @return builder
         * 
         */
        public Builder nodes(EventServiceDiscoveryNodeArgs... nodes) {
            return nodes(List.of(nodes));
        }

        /**
         * @param taskid servicediscovery endpoint ( Below example shows how to create endpoing using AS3 )
         * 
         * @return builder
         * 
         */
        public Builder taskid(Output<String> taskid) {
            $.taskid = taskid;
            return this;
        }

        /**
         * @param taskid servicediscovery endpoint ( Below example shows how to create endpoing using AS3 )
         * 
         * @return builder
         * 
         */
        public Builder taskid(String taskid) {
            return taskid(Output.of(taskid));
        }

        public EventServiceDiscoveryArgs build() {
            $.taskid = Objects.requireNonNull($.taskid, "expected parameter 'taskid' to be non-null");
            return $;
        }
    }

}
