// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPolicyRuleAction {
    private String appService;
    private String application;
    private Boolean asm;
    private Boolean avr;
    private Boolean cache;
    private Boolean carp;
    private String category;
    private Boolean classify;
    private String clonePool;
    private Integer code;
    private Boolean compress;
    private Boolean connection;
    private String content;
    private Boolean cookieHash;
    private Boolean cookieInsert;
    private Boolean cookiePassive;
    private Boolean cookieRewrite;
    private Boolean decompress;
    private Boolean defer;
    private Boolean destinationAddress;
    private Boolean disable;
    private String domain;
    private Boolean enable;
    private String expiry;
    private Integer expirySecs;
    private String expression;
    private String extension;
    private String facility;
    private @Nullable Boolean forward;
    private String fromProfile;
    private Boolean hash;
    private String host;
    private Boolean http;
    private Boolean httpBasicAuth;
    private Boolean httpCookie;
    private Boolean httpHeader;
    private @Nullable Boolean httpHost;
    private Boolean httpReferer;
    private Boolean httpReply;
    private Boolean httpSetCookie;
    private Boolean httpUri;
    private String ifile;
    private Boolean insert;
    private String internalVirtual;
    private String ipAddress;
    private String key;
    private Boolean l7dos;
    private Integer length;
    private String location;
    private Boolean log;
    private Boolean ltmPolicy;
    private String member;
    private String message;
    private String netmask;
    private String nexthop;
    private String node;
    private Integer offset;
    private String path;
    private Boolean pem;
    private Boolean persist;
    private Boolean pin;
    private String policy;
    private String pool;
    private Integer port;
    private String priority;
    private String profile;
    private String protocol;
    private String queryString;
    private String rateclass;
    private Boolean redirect;
    private Boolean remove;
    private Boolean replace;
    private Boolean request;
    private Boolean requestAdapt;
    private Boolean reset;
    private Boolean response;
    private Boolean responseAdapt;
    private String scheme;
    private String script;
    private Boolean select;
    private Boolean serverSsl;
    private Boolean setVariable;
    private Boolean shutdown;
    private String snat;
    private String snatpool;
    private Boolean sourceAddress;
    private Boolean sslClientHello;
    private Boolean sslServerHandshake;
    private Boolean sslServerHello;
    private Boolean sslSessionId;
    private Integer status;
    private Boolean tcl;
    private Boolean tcpNagle;
    private String text;
    private Integer timeout;
    private String tmName;
    private Boolean uie;
    private Boolean universal;
    private String value;
    private String virtual;
    private String vlan;
    private Integer vlanId;
    private Boolean wam;
    private Boolean write;

    private GetPolicyRuleAction() {}
    public String appService() {
        return this.appService;
    }
    public String application() {
        return this.application;
    }
    public Boolean asm() {
        return this.asm;
    }
    public Boolean avr() {
        return this.avr;
    }
    public Boolean cache() {
        return this.cache;
    }
    public Boolean carp() {
        return this.carp;
    }
    public String category() {
        return this.category;
    }
    public Boolean classify() {
        return this.classify;
    }
    public String clonePool() {
        return this.clonePool;
    }
    public Integer code() {
        return this.code;
    }
    public Boolean compress() {
        return this.compress;
    }
    public Boolean connection() {
        return this.connection;
    }
    public String content() {
        return this.content;
    }
    public Boolean cookieHash() {
        return this.cookieHash;
    }
    public Boolean cookieInsert() {
        return this.cookieInsert;
    }
    public Boolean cookiePassive() {
        return this.cookiePassive;
    }
    public Boolean cookieRewrite() {
        return this.cookieRewrite;
    }
    public Boolean decompress() {
        return this.decompress;
    }
    public Boolean defer() {
        return this.defer;
    }
    public Boolean destinationAddress() {
        return this.destinationAddress;
    }
    public Boolean disable() {
        return this.disable;
    }
    public String domain() {
        return this.domain;
    }
    public Boolean enable() {
        return this.enable;
    }
    public String expiry() {
        return this.expiry;
    }
    public Integer expirySecs() {
        return this.expirySecs;
    }
    public String expression() {
        return this.expression;
    }
    public String extension() {
        return this.extension;
    }
    public String facility() {
        return this.facility;
    }
    public Optional<Boolean> forward() {
        return Optional.ofNullable(this.forward);
    }
    public String fromProfile() {
        return this.fromProfile;
    }
    public Boolean hash() {
        return this.hash;
    }
    public String host() {
        return this.host;
    }
    public Boolean http() {
        return this.http;
    }
    public Boolean httpBasicAuth() {
        return this.httpBasicAuth;
    }
    public Boolean httpCookie() {
        return this.httpCookie;
    }
    public Boolean httpHeader() {
        return this.httpHeader;
    }
    public Optional<Boolean> httpHost() {
        return Optional.ofNullable(this.httpHost);
    }
    public Boolean httpReferer() {
        return this.httpReferer;
    }
    public Boolean httpReply() {
        return this.httpReply;
    }
    public Boolean httpSetCookie() {
        return this.httpSetCookie;
    }
    public Boolean httpUri() {
        return this.httpUri;
    }
    public String ifile() {
        return this.ifile;
    }
    public Boolean insert() {
        return this.insert;
    }
    public String internalVirtual() {
        return this.internalVirtual;
    }
    public String ipAddress() {
        return this.ipAddress;
    }
    public String key() {
        return this.key;
    }
    public Boolean l7dos() {
        return this.l7dos;
    }
    public Integer length() {
        return this.length;
    }
    public String location() {
        return this.location;
    }
    public Boolean log() {
        return this.log;
    }
    public Boolean ltmPolicy() {
        return this.ltmPolicy;
    }
    public String member() {
        return this.member;
    }
    public String message() {
        return this.message;
    }
    public String netmask() {
        return this.netmask;
    }
    public String nexthop() {
        return this.nexthop;
    }
    public String node() {
        return this.node;
    }
    public Integer offset() {
        return this.offset;
    }
    public String path() {
        return this.path;
    }
    public Boolean pem() {
        return this.pem;
    }
    public Boolean persist() {
        return this.persist;
    }
    public Boolean pin() {
        return this.pin;
    }
    public String policy() {
        return this.policy;
    }
    public String pool() {
        return this.pool;
    }
    public Integer port() {
        return this.port;
    }
    public String priority() {
        return this.priority;
    }
    public String profile() {
        return this.profile;
    }
    public String protocol() {
        return this.protocol;
    }
    public String queryString() {
        return this.queryString;
    }
    public String rateclass() {
        return this.rateclass;
    }
    public Boolean redirect() {
        return this.redirect;
    }
    public Boolean remove() {
        return this.remove;
    }
    public Boolean replace() {
        return this.replace;
    }
    public Boolean request() {
        return this.request;
    }
    public Boolean requestAdapt() {
        return this.requestAdapt;
    }
    public Boolean reset() {
        return this.reset;
    }
    public Boolean response() {
        return this.response;
    }
    public Boolean responseAdapt() {
        return this.responseAdapt;
    }
    public String scheme() {
        return this.scheme;
    }
    public String script() {
        return this.script;
    }
    public Boolean select() {
        return this.select;
    }
    public Boolean serverSsl() {
        return this.serverSsl;
    }
    public Boolean setVariable() {
        return this.setVariable;
    }
    public Boolean shutdown() {
        return this.shutdown;
    }
    public String snat() {
        return this.snat;
    }
    public String snatpool() {
        return this.snatpool;
    }
    public Boolean sourceAddress() {
        return this.sourceAddress;
    }
    public Boolean sslClientHello() {
        return this.sslClientHello;
    }
    public Boolean sslServerHandshake() {
        return this.sslServerHandshake;
    }
    public Boolean sslServerHello() {
        return this.sslServerHello;
    }
    public Boolean sslSessionId() {
        return this.sslSessionId;
    }
    public Integer status() {
        return this.status;
    }
    public Boolean tcl() {
        return this.tcl;
    }
    public Boolean tcpNagle() {
        return this.tcpNagle;
    }
    public String text() {
        return this.text;
    }
    public Integer timeout() {
        return this.timeout;
    }
    public String tmName() {
        return this.tmName;
    }
    public Boolean uie() {
        return this.uie;
    }
    public Boolean universal() {
        return this.universal;
    }
    public String value() {
        return this.value;
    }
    public String virtual() {
        return this.virtual;
    }
    public String vlan() {
        return this.vlan;
    }
    public Integer vlanId() {
        return this.vlanId;
    }
    public Boolean wam() {
        return this.wam;
    }
    public Boolean write() {
        return this.write;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPolicyRuleAction defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String appService;
        private String application;
        private Boolean asm;
        private Boolean avr;
        private Boolean cache;
        private Boolean carp;
        private String category;
        private Boolean classify;
        private String clonePool;
        private Integer code;
        private Boolean compress;
        private Boolean connection;
        private String content;
        private Boolean cookieHash;
        private Boolean cookieInsert;
        private Boolean cookiePassive;
        private Boolean cookieRewrite;
        private Boolean decompress;
        private Boolean defer;
        private Boolean destinationAddress;
        private Boolean disable;
        private String domain;
        private Boolean enable;
        private String expiry;
        private Integer expirySecs;
        private String expression;
        private String extension;
        private String facility;
        private @Nullable Boolean forward;
        private String fromProfile;
        private Boolean hash;
        private String host;
        private Boolean http;
        private Boolean httpBasicAuth;
        private Boolean httpCookie;
        private Boolean httpHeader;
        private @Nullable Boolean httpHost;
        private Boolean httpReferer;
        private Boolean httpReply;
        private Boolean httpSetCookie;
        private Boolean httpUri;
        private String ifile;
        private Boolean insert;
        private String internalVirtual;
        private String ipAddress;
        private String key;
        private Boolean l7dos;
        private Integer length;
        private String location;
        private Boolean log;
        private Boolean ltmPolicy;
        private String member;
        private String message;
        private String netmask;
        private String nexthop;
        private String node;
        private Integer offset;
        private String path;
        private Boolean pem;
        private Boolean persist;
        private Boolean pin;
        private String policy;
        private String pool;
        private Integer port;
        private String priority;
        private String profile;
        private String protocol;
        private String queryString;
        private String rateclass;
        private Boolean redirect;
        private Boolean remove;
        private Boolean replace;
        private Boolean request;
        private Boolean requestAdapt;
        private Boolean reset;
        private Boolean response;
        private Boolean responseAdapt;
        private String scheme;
        private String script;
        private Boolean select;
        private Boolean serverSsl;
        private Boolean setVariable;
        private Boolean shutdown;
        private String snat;
        private String snatpool;
        private Boolean sourceAddress;
        private Boolean sslClientHello;
        private Boolean sslServerHandshake;
        private Boolean sslServerHello;
        private Boolean sslSessionId;
        private Integer status;
        private Boolean tcl;
        private Boolean tcpNagle;
        private String text;
        private Integer timeout;
        private String tmName;
        private Boolean uie;
        private Boolean universal;
        private String value;
        private String virtual;
        private String vlan;
        private Integer vlanId;
        private Boolean wam;
        private Boolean write;
        public Builder() {}
        public Builder(GetPolicyRuleAction defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appService = defaults.appService;
    	      this.application = defaults.application;
    	      this.asm = defaults.asm;
    	      this.avr = defaults.avr;
    	      this.cache = defaults.cache;
    	      this.carp = defaults.carp;
    	      this.category = defaults.category;
    	      this.classify = defaults.classify;
    	      this.clonePool = defaults.clonePool;
    	      this.code = defaults.code;
    	      this.compress = defaults.compress;
    	      this.connection = defaults.connection;
    	      this.content = defaults.content;
    	      this.cookieHash = defaults.cookieHash;
    	      this.cookieInsert = defaults.cookieInsert;
    	      this.cookiePassive = defaults.cookiePassive;
    	      this.cookieRewrite = defaults.cookieRewrite;
    	      this.decompress = defaults.decompress;
    	      this.defer = defaults.defer;
    	      this.destinationAddress = defaults.destinationAddress;
    	      this.disable = defaults.disable;
    	      this.domain = defaults.domain;
    	      this.enable = defaults.enable;
    	      this.expiry = defaults.expiry;
    	      this.expirySecs = defaults.expirySecs;
    	      this.expression = defaults.expression;
    	      this.extension = defaults.extension;
    	      this.facility = defaults.facility;
    	      this.forward = defaults.forward;
    	      this.fromProfile = defaults.fromProfile;
    	      this.hash = defaults.hash;
    	      this.host = defaults.host;
    	      this.http = defaults.http;
    	      this.httpBasicAuth = defaults.httpBasicAuth;
    	      this.httpCookie = defaults.httpCookie;
    	      this.httpHeader = defaults.httpHeader;
    	      this.httpHost = defaults.httpHost;
    	      this.httpReferer = defaults.httpReferer;
    	      this.httpReply = defaults.httpReply;
    	      this.httpSetCookie = defaults.httpSetCookie;
    	      this.httpUri = defaults.httpUri;
    	      this.ifile = defaults.ifile;
    	      this.insert = defaults.insert;
    	      this.internalVirtual = defaults.internalVirtual;
    	      this.ipAddress = defaults.ipAddress;
    	      this.key = defaults.key;
    	      this.l7dos = defaults.l7dos;
    	      this.length = defaults.length;
    	      this.location = defaults.location;
    	      this.log = defaults.log;
    	      this.ltmPolicy = defaults.ltmPolicy;
    	      this.member = defaults.member;
    	      this.message = defaults.message;
    	      this.netmask = defaults.netmask;
    	      this.nexthop = defaults.nexthop;
    	      this.node = defaults.node;
    	      this.offset = defaults.offset;
    	      this.path = defaults.path;
    	      this.pem = defaults.pem;
    	      this.persist = defaults.persist;
    	      this.pin = defaults.pin;
    	      this.policy = defaults.policy;
    	      this.pool = defaults.pool;
    	      this.port = defaults.port;
    	      this.priority = defaults.priority;
    	      this.profile = defaults.profile;
    	      this.protocol = defaults.protocol;
    	      this.queryString = defaults.queryString;
    	      this.rateclass = defaults.rateclass;
    	      this.redirect = defaults.redirect;
    	      this.remove = defaults.remove;
    	      this.replace = defaults.replace;
    	      this.request = defaults.request;
    	      this.requestAdapt = defaults.requestAdapt;
    	      this.reset = defaults.reset;
    	      this.response = defaults.response;
    	      this.responseAdapt = defaults.responseAdapt;
    	      this.scheme = defaults.scheme;
    	      this.script = defaults.script;
    	      this.select = defaults.select;
    	      this.serverSsl = defaults.serverSsl;
    	      this.setVariable = defaults.setVariable;
    	      this.shutdown = defaults.shutdown;
    	      this.snat = defaults.snat;
    	      this.snatpool = defaults.snatpool;
    	      this.sourceAddress = defaults.sourceAddress;
    	      this.sslClientHello = defaults.sslClientHello;
    	      this.sslServerHandshake = defaults.sslServerHandshake;
    	      this.sslServerHello = defaults.sslServerHello;
    	      this.sslSessionId = defaults.sslSessionId;
    	      this.status = defaults.status;
    	      this.tcl = defaults.tcl;
    	      this.tcpNagle = defaults.tcpNagle;
    	      this.text = defaults.text;
    	      this.timeout = defaults.timeout;
    	      this.tmName = defaults.tmName;
    	      this.uie = defaults.uie;
    	      this.universal = defaults.universal;
    	      this.value = defaults.value;
    	      this.virtual = defaults.virtual;
    	      this.vlan = defaults.vlan;
    	      this.vlanId = defaults.vlanId;
    	      this.wam = defaults.wam;
    	      this.write = defaults.write;
        }

        @CustomType.Setter
        public Builder appService(String appService) {
            if (appService == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "appService");
            }
            this.appService = appService;
            return this;
        }
        @CustomType.Setter
        public Builder application(String application) {
            if (application == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "application");
            }
            this.application = application;
            return this;
        }
        @CustomType.Setter
        public Builder asm(Boolean asm) {
            if (asm == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "asm");
            }
            this.asm = asm;
            return this;
        }
        @CustomType.Setter
        public Builder avr(Boolean avr) {
            if (avr == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "avr");
            }
            this.avr = avr;
            return this;
        }
        @CustomType.Setter
        public Builder cache(Boolean cache) {
            if (cache == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "cache");
            }
            this.cache = cache;
            return this;
        }
        @CustomType.Setter
        public Builder carp(Boolean carp) {
            if (carp == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "carp");
            }
            this.carp = carp;
            return this;
        }
        @CustomType.Setter
        public Builder category(String category) {
            if (category == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "category");
            }
            this.category = category;
            return this;
        }
        @CustomType.Setter
        public Builder classify(Boolean classify) {
            if (classify == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "classify");
            }
            this.classify = classify;
            return this;
        }
        @CustomType.Setter
        public Builder clonePool(String clonePool) {
            if (clonePool == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "clonePool");
            }
            this.clonePool = clonePool;
            return this;
        }
        @CustomType.Setter
        public Builder code(Integer code) {
            if (code == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "code");
            }
            this.code = code;
            return this;
        }
        @CustomType.Setter
        public Builder compress(Boolean compress) {
            if (compress == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "compress");
            }
            this.compress = compress;
            return this;
        }
        @CustomType.Setter
        public Builder connection(Boolean connection) {
            if (connection == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "connection");
            }
            this.connection = connection;
            return this;
        }
        @CustomType.Setter
        public Builder content(String content) {
            if (content == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "content");
            }
            this.content = content;
            return this;
        }
        @CustomType.Setter
        public Builder cookieHash(Boolean cookieHash) {
            if (cookieHash == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "cookieHash");
            }
            this.cookieHash = cookieHash;
            return this;
        }
        @CustomType.Setter
        public Builder cookieInsert(Boolean cookieInsert) {
            if (cookieInsert == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "cookieInsert");
            }
            this.cookieInsert = cookieInsert;
            return this;
        }
        @CustomType.Setter
        public Builder cookiePassive(Boolean cookiePassive) {
            if (cookiePassive == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "cookiePassive");
            }
            this.cookiePassive = cookiePassive;
            return this;
        }
        @CustomType.Setter
        public Builder cookieRewrite(Boolean cookieRewrite) {
            if (cookieRewrite == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "cookieRewrite");
            }
            this.cookieRewrite = cookieRewrite;
            return this;
        }
        @CustomType.Setter
        public Builder decompress(Boolean decompress) {
            if (decompress == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "decompress");
            }
            this.decompress = decompress;
            return this;
        }
        @CustomType.Setter
        public Builder defer(Boolean defer) {
            if (defer == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "defer");
            }
            this.defer = defer;
            return this;
        }
        @CustomType.Setter
        public Builder destinationAddress(Boolean destinationAddress) {
            if (destinationAddress == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "destinationAddress");
            }
            this.destinationAddress = destinationAddress;
            return this;
        }
        @CustomType.Setter
        public Builder disable(Boolean disable) {
            if (disable == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "disable");
            }
            this.disable = disable;
            return this;
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder enable(Boolean enable) {
            if (enable == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "enable");
            }
            this.enable = enable;
            return this;
        }
        @CustomType.Setter
        public Builder expiry(String expiry) {
            if (expiry == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "expiry");
            }
            this.expiry = expiry;
            return this;
        }
        @CustomType.Setter
        public Builder expirySecs(Integer expirySecs) {
            if (expirySecs == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "expirySecs");
            }
            this.expirySecs = expirySecs;
            return this;
        }
        @CustomType.Setter
        public Builder expression(String expression) {
            if (expression == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "expression");
            }
            this.expression = expression;
            return this;
        }
        @CustomType.Setter
        public Builder extension(String extension) {
            if (extension == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "extension");
            }
            this.extension = extension;
            return this;
        }
        @CustomType.Setter
        public Builder facility(String facility) {
            if (facility == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "facility");
            }
            this.facility = facility;
            return this;
        }
        @CustomType.Setter
        public Builder forward(@Nullable Boolean forward) {

            this.forward = forward;
            return this;
        }
        @CustomType.Setter
        public Builder fromProfile(String fromProfile) {
            if (fromProfile == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "fromProfile");
            }
            this.fromProfile = fromProfile;
            return this;
        }
        @CustomType.Setter
        public Builder hash(Boolean hash) {
            if (hash == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "hash");
            }
            this.hash = hash;
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder http(Boolean http) {
            if (http == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "http");
            }
            this.http = http;
            return this;
        }
        @CustomType.Setter
        public Builder httpBasicAuth(Boolean httpBasicAuth) {
            if (httpBasicAuth == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "httpBasicAuth");
            }
            this.httpBasicAuth = httpBasicAuth;
            return this;
        }
        @CustomType.Setter
        public Builder httpCookie(Boolean httpCookie) {
            if (httpCookie == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "httpCookie");
            }
            this.httpCookie = httpCookie;
            return this;
        }
        @CustomType.Setter
        public Builder httpHeader(Boolean httpHeader) {
            if (httpHeader == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "httpHeader");
            }
            this.httpHeader = httpHeader;
            return this;
        }
        @CustomType.Setter
        public Builder httpHost(@Nullable Boolean httpHost) {

            this.httpHost = httpHost;
            return this;
        }
        @CustomType.Setter
        public Builder httpReferer(Boolean httpReferer) {
            if (httpReferer == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "httpReferer");
            }
            this.httpReferer = httpReferer;
            return this;
        }
        @CustomType.Setter
        public Builder httpReply(Boolean httpReply) {
            if (httpReply == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "httpReply");
            }
            this.httpReply = httpReply;
            return this;
        }
        @CustomType.Setter
        public Builder httpSetCookie(Boolean httpSetCookie) {
            if (httpSetCookie == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "httpSetCookie");
            }
            this.httpSetCookie = httpSetCookie;
            return this;
        }
        @CustomType.Setter
        public Builder httpUri(Boolean httpUri) {
            if (httpUri == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "httpUri");
            }
            this.httpUri = httpUri;
            return this;
        }
        @CustomType.Setter
        public Builder ifile(String ifile) {
            if (ifile == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "ifile");
            }
            this.ifile = ifile;
            return this;
        }
        @CustomType.Setter
        public Builder insert(Boolean insert) {
            if (insert == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "insert");
            }
            this.insert = insert;
            return this;
        }
        @CustomType.Setter
        public Builder internalVirtual(String internalVirtual) {
            if (internalVirtual == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "internalVirtual");
            }
            this.internalVirtual = internalVirtual;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            if (ipAddress == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "ipAddress");
            }
            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder l7dos(Boolean l7dos) {
            if (l7dos == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "l7dos");
            }
            this.l7dos = l7dos;
            return this;
        }
        @CustomType.Setter
        public Builder length(Integer length) {
            if (length == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "length");
            }
            this.length = length;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder log(Boolean log) {
            if (log == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "log");
            }
            this.log = log;
            return this;
        }
        @CustomType.Setter
        public Builder ltmPolicy(Boolean ltmPolicy) {
            if (ltmPolicy == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "ltmPolicy");
            }
            this.ltmPolicy = ltmPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder member(String member) {
            if (member == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "member");
            }
            this.member = member;
            return this;
        }
        @CustomType.Setter
        public Builder message(String message) {
            if (message == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "message");
            }
            this.message = message;
            return this;
        }
        @CustomType.Setter
        public Builder netmask(String netmask) {
            if (netmask == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "netmask");
            }
            this.netmask = netmask;
            return this;
        }
        @CustomType.Setter
        public Builder nexthop(String nexthop) {
            if (nexthop == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "nexthop");
            }
            this.nexthop = nexthop;
            return this;
        }
        @CustomType.Setter
        public Builder node(String node) {
            if (node == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "node");
            }
            this.node = node;
            return this;
        }
        @CustomType.Setter
        public Builder offset(Integer offset) {
            if (offset == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "offset");
            }
            this.offset = offset;
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            if (path == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "path");
            }
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder pem(Boolean pem) {
            if (pem == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "pem");
            }
            this.pem = pem;
            return this;
        }
        @CustomType.Setter
        public Builder persist(Boolean persist) {
            if (persist == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "persist");
            }
            this.persist = persist;
            return this;
        }
        @CustomType.Setter
        public Builder pin(Boolean pin) {
            if (pin == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "pin");
            }
            this.pin = pin;
            return this;
        }
        @CustomType.Setter
        public Builder policy(String policy) {
            if (policy == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "policy");
            }
            this.policy = policy;
            return this;
        }
        @CustomType.Setter
        public Builder pool(String pool) {
            if (pool == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "pool");
            }
            this.pool = pool;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder priority(String priority) {
            if (priority == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "priority");
            }
            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder profile(String profile) {
            if (profile == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "profile");
            }
            this.profile = profile;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder queryString(String queryString) {
            if (queryString == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "queryString");
            }
            this.queryString = queryString;
            return this;
        }
        @CustomType.Setter
        public Builder rateclass(String rateclass) {
            if (rateclass == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "rateclass");
            }
            this.rateclass = rateclass;
            return this;
        }
        @CustomType.Setter
        public Builder redirect(Boolean redirect) {
            if (redirect == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "redirect");
            }
            this.redirect = redirect;
            return this;
        }
        @CustomType.Setter
        public Builder remove(Boolean remove) {
            if (remove == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "remove");
            }
            this.remove = remove;
            return this;
        }
        @CustomType.Setter
        public Builder replace(Boolean replace) {
            if (replace == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "replace");
            }
            this.replace = replace;
            return this;
        }
        @CustomType.Setter
        public Builder request(Boolean request) {
            if (request == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "request");
            }
            this.request = request;
            return this;
        }
        @CustomType.Setter
        public Builder requestAdapt(Boolean requestAdapt) {
            if (requestAdapt == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "requestAdapt");
            }
            this.requestAdapt = requestAdapt;
            return this;
        }
        @CustomType.Setter
        public Builder reset(Boolean reset) {
            if (reset == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "reset");
            }
            this.reset = reset;
            return this;
        }
        @CustomType.Setter
        public Builder response(Boolean response) {
            if (response == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "response");
            }
            this.response = response;
            return this;
        }
        @CustomType.Setter
        public Builder responseAdapt(Boolean responseAdapt) {
            if (responseAdapt == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "responseAdapt");
            }
            this.responseAdapt = responseAdapt;
            return this;
        }
        @CustomType.Setter
        public Builder scheme(String scheme) {
            if (scheme == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "scheme");
            }
            this.scheme = scheme;
            return this;
        }
        @CustomType.Setter
        public Builder script(String script) {
            if (script == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "script");
            }
            this.script = script;
            return this;
        }
        @CustomType.Setter
        public Builder select(Boolean select) {
            if (select == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "select");
            }
            this.select = select;
            return this;
        }
        @CustomType.Setter
        public Builder serverSsl(Boolean serverSsl) {
            if (serverSsl == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "serverSsl");
            }
            this.serverSsl = serverSsl;
            return this;
        }
        @CustomType.Setter
        public Builder setVariable(Boolean setVariable) {
            if (setVariable == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "setVariable");
            }
            this.setVariable = setVariable;
            return this;
        }
        @CustomType.Setter
        public Builder shutdown(Boolean shutdown) {
            if (shutdown == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "shutdown");
            }
            this.shutdown = shutdown;
            return this;
        }
        @CustomType.Setter
        public Builder snat(String snat) {
            if (snat == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "snat");
            }
            this.snat = snat;
            return this;
        }
        @CustomType.Setter
        public Builder snatpool(String snatpool) {
            if (snatpool == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "snatpool");
            }
            this.snatpool = snatpool;
            return this;
        }
        @CustomType.Setter
        public Builder sourceAddress(Boolean sourceAddress) {
            if (sourceAddress == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "sourceAddress");
            }
            this.sourceAddress = sourceAddress;
            return this;
        }
        @CustomType.Setter
        public Builder sslClientHello(Boolean sslClientHello) {
            if (sslClientHello == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "sslClientHello");
            }
            this.sslClientHello = sslClientHello;
            return this;
        }
        @CustomType.Setter
        public Builder sslServerHandshake(Boolean sslServerHandshake) {
            if (sslServerHandshake == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "sslServerHandshake");
            }
            this.sslServerHandshake = sslServerHandshake;
            return this;
        }
        @CustomType.Setter
        public Builder sslServerHello(Boolean sslServerHello) {
            if (sslServerHello == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "sslServerHello");
            }
            this.sslServerHello = sslServerHello;
            return this;
        }
        @CustomType.Setter
        public Builder sslSessionId(Boolean sslSessionId) {
            if (sslSessionId == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "sslSessionId");
            }
            this.sslSessionId = sslSessionId;
            return this;
        }
        @CustomType.Setter
        public Builder status(Integer status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tcl(Boolean tcl) {
            if (tcl == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "tcl");
            }
            this.tcl = tcl;
            return this;
        }
        @CustomType.Setter
        public Builder tcpNagle(Boolean tcpNagle) {
            if (tcpNagle == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "tcpNagle");
            }
            this.tcpNagle = tcpNagle;
            return this;
        }
        @CustomType.Setter
        public Builder text(String text) {
            if (text == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "text");
            }
            this.text = text;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(Integer timeout) {
            if (timeout == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "timeout");
            }
            this.timeout = timeout;
            return this;
        }
        @CustomType.Setter
        public Builder tmName(String tmName) {
            if (tmName == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "tmName");
            }
            this.tmName = tmName;
            return this;
        }
        @CustomType.Setter
        public Builder uie(Boolean uie) {
            if (uie == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "uie");
            }
            this.uie = uie;
            return this;
        }
        @CustomType.Setter
        public Builder universal(Boolean universal) {
            if (universal == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "universal");
            }
            this.universal = universal;
            return this;
        }
        @CustomType.Setter
        public Builder value(String value) {
            if (value == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "value");
            }
            this.value = value;
            return this;
        }
        @CustomType.Setter
        public Builder virtual(String virtual) {
            if (virtual == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "virtual");
            }
            this.virtual = virtual;
            return this;
        }
        @CustomType.Setter
        public Builder vlan(String vlan) {
            if (vlan == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "vlan");
            }
            this.vlan = vlan;
            return this;
        }
        @CustomType.Setter
        public Builder vlanId(Integer vlanId) {
            if (vlanId == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "vlanId");
            }
            this.vlanId = vlanId;
            return this;
        }
        @CustomType.Setter
        public Builder wam(Boolean wam) {
            if (wam == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "wam");
            }
            this.wam = wam;
            return this;
        }
        @CustomType.Setter
        public Builder write(Boolean write) {
            if (write == null) {
              throw new MissingRequiredPropertyException("GetPolicyRuleAction", "write");
            }
            this.write = write;
            return this;
        }
        public GetPolicyRuleAction build() {
            final var _resultValue = new GetPolicyRuleAction();
            _resultValue.appService = appService;
            _resultValue.application = application;
            _resultValue.asm = asm;
            _resultValue.avr = avr;
            _resultValue.cache = cache;
            _resultValue.carp = carp;
            _resultValue.category = category;
            _resultValue.classify = classify;
            _resultValue.clonePool = clonePool;
            _resultValue.code = code;
            _resultValue.compress = compress;
            _resultValue.connection = connection;
            _resultValue.content = content;
            _resultValue.cookieHash = cookieHash;
            _resultValue.cookieInsert = cookieInsert;
            _resultValue.cookiePassive = cookiePassive;
            _resultValue.cookieRewrite = cookieRewrite;
            _resultValue.decompress = decompress;
            _resultValue.defer = defer;
            _resultValue.destinationAddress = destinationAddress;
            _resultValue.disable = disable;
            _resultValue.domain = domain;
            _resultValue.enable = enable;
            _resultValue.expiry = expiry;
            _resultValue.expirySecs = expirySecs;
            _resultValue.expression = expression;
            _resultValue.extension = extension;
            _resultValue.facility = facility;
            _resultValue.forward = forward;
            _resultValue.fromProfile = fromProfile;
            _resultValue.hash = hash;
            _resultValue.host = host;
            _resultValue.http = http;
            _resultValue.httpBasicAuth = httpBasicAuth;
            _resultValue.httpCookie = httpCookie;
            _resultValue.httpHeader = httpHeader;
            _resultValue.httpHost = httpHost;
            _resultValue.httpReferer = httpReferer;
            _resultValue.httpReply = httpReply;
            _resultValue.httpSetCookie = httpSetCookie;
            _resultValue.httpUri = httpUri;
            _resultValue.ifile = ifile;
            _resultValue.insert = insert;
            _resultValue.internalVirtual = internalVirtual;
            _resultValue.ipAddress = ipAddress;
            _resultValue.key = key;
            _resultValue.l7dos = l7dos;
            _resultValue.length = length;
            _resultValue.location = location;
            _resultValue.log = log;
            _resultValue.ltmPolicy = ltmPolicy;
            _resultValue.member = member;
            _resultValue.message = message;
            _resultValue.netmask = netmask;
            _resultValue.nexthop = nexthop;
            _resultValue.node = node;
            _resultValue.offset = offset;
            _resultValue.path = path;
            _resultValue.pem = pem;
            _resultValue.persist = persist;
            _resultValue.pin = pin;
            _resultValue.policy = policy;
            _resultValue.pool = pool;
            _resultValue.port = port;
            _resultValue.priority = priority;
            _resultValue.profile = profile;
            _resultValue.protocol = protocol;
            _resultValue.queryString = queryString;
            _resultValue.rateclass = rateclass;
            _resultValue.redirect = redirect;
            _resultValue.remove = remove;
            _resultValue.replace = replace;
            _resultValue.request = request;
            _resultValue.requestAdapt = requestAdapt;
            _resultValue.reset = reset;
            _resultValue.response = response;
            _resultValue.responseAdapt = responseAdapt;
            _resultValue.scheme = scheme;
            _resultValue.script = script;
            _resultValue.select = select;
            _resultValue.serverSsl = serverSsl;
            _resultValue.setVariable = setVariable;
            _resultValue.shutdown = shutdown;
            _resultValue.snat = snat;
            _resultValue.snatpool = snatpool;
            _resultValue.sourceAddress = sourceAddress;
            _resultValue.sslClientHello = sslClientHello;
            _resultValue.sslServerHandshake = sslServerHandshake;
            _resultValue.sslServerHello = sslServerHello;
            _resultValue.sslSessionId = sslSessionId;
            _resultValue.status = status;
            _resultValue.tcl = tcl;
            _resultValue.tcpNagle = tcpNagle;
            _resultValue.text = text;
            _resultValue.timeout = timeout;
            _resultValue.tmName = tmName;
            _resultValue.uie = uie;
            _resultValue.universal = universal;
            _resultValue.value = value;
            _resultValue.virtual = virtual;
            _resultValue.vlan = vlan;
            _resultValue.vlanId = vlanId;
            _resultValue.wam = wam;
            _resultValue.write = write;
            return _resultValue;
        }
    }
}
