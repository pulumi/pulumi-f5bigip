// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProfileHttpEnforcementArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProfileHttpEnforcementArgs Empty = new ProfileHttpEnforcementArgs();

    /**
     * Specifies which HTTP methods count as being known. Removing RFC-defined methods from this list will cause the HTTP filter to not recognize them. Default value is [CONNECT DELETE GET HEAD LOCK OPTIONS POST PROPFIND PUT TRACE UNLOCK].If no value is specified while creating, then default value will be assigned by BigIP. In order to remove it, [&#34;&#34;] list is to be passed. If knownMethods is commented (or not passed) during the update call, then no changes would be applied and previous value will persist. In order to put default value , we need to pass [CONNECT DELETE GET HEAD LOCK OPTIONS POST PROPFIND PUT TRACE UNLOCK] explicitly.
     * 
     */
    @Import(name="knownMethods")
    private @Nullable Output<List<String>> knownMethods;

    /**
     * @return Specifies which HTTP methods count as being known. Removing RFC-defined methods from this list will cause the HTTP filter to not recognize them. Default value is [CONNECT DELETE GET HEAD LOCK OPTIONS POST PROPFIND PUT TRACE UNLOCK].If no value is specified while creating, then default value will be assigned by BigIP. In order to remove it, [&#34;&#34;] list is to be passed. If knownMethods is commented (or not passed) during the update call, then no changes would be applied and previous value will persist. In order to put default value , we need to pass [CONNECT DELETE GET HEAD LOCK OPTIONS POST PROPFIND PUT TRACE UNLOCK] explicitly.
     * 
     */
    public Optional<Output<List<String>>> knownMethods() {
        return Optional.ofNullable(this.knownMethods);
    }

    /**
     * Specifies the maximum number of headers allowed in HTTP request/response. The default is 64 headers.If no value is specified while creating, then default value will be assigned by BigIP. If maxHeaderCount is commented (or not passed) during the update call, then no changes would be applied and previous value will persist. In order to put default value, we need to pass &#34;64&#34; explicitly.
     * 
     */
    @Import(name="maxHeaderCount")
    private @Nullable Output<Integer> maxHeaderCount;

    /**
     * @return Specifies the maximum number of headers allowed in HTTP request/response. The default is 64 headers.If no value is specified while creating, then default value will be assigned by BigIP. If maxHeaderCount is commented (or not passed) during the update call, then no changes would be applied and previous value will persist. In order to put default value, we need to pass &#34;64&#34; explicitly.
     * 
     */
    public Optional<Output<Integer>> maxHeaderCount() {
        return Optional.ofNullable(this.maxHeaderCount);
    }

    /**
     * Specifies the maximum header size. The default value is 32768. If no string is specified while creating, then default value will be assigned by BigIP. If maxHeaderSize is commented (or not passed) during the update call, then no changes would be applied and previous value will persist. In order to put default value, we need to pass &#34;32768&#34; explicitly.
     * 
     */
    @Import(name="maxHeaderSize")
    private @Nullable Output<Integer> maxHeaderSize;

    /**
     * @return Specifies the maximum header size. The default value is 32768. If no string is specified while creating, then default value will be assigned by BigIP. If maxHeaderSize is commented (or not passed) during the update call, then no changes would be applied and previous value will persist. In order to put default value, we need to pass &#34;32768&#34; explicitly.
     * 
     */
    public Optional<Output<Integer>> maxHeaderSize() {
        return Optional.ofNullable(this.maxHeaderSize);
    }

    /**
     * Specifies whether to allow, reject or switch to pass-through mode when an unknown HTTP method is parsed. Default value is &#34;allow&#34;. If no string is specified while creating, then default value will be assigned by BigIP. If unknownMethod is commented (or not passed) during the update call, then no changes would be applied and previous value will persist. In order to put default value, we need to pass &#34;allow&#34; explicitly.
     * 
     */
    @Import(name="unknownMethod")
    private @Nullable Output<String> unknownMethod;

    /**
     * @return Specifies whether to allow, reject or switch to pass-through mode when an unknown HTTP method is parsed. Default value is &#34;allow&#34;. If no string is specified while creating, then default value will be assigned by BigIP. If unknownMethod is commented (or not passed) during the update call, then no changes would be applied and previous value will persist. In order to put default value, we need to pass &#34;allow&#34; explicitly.
     * 
     */
    public Optional<Output<String>> unknownMethod() {
        return Optional.ofNullable(this.unknownMethod);
    }

    private ProfileHttpEnforcementArgs() {}

    private ProfileHttpEnforcementArgs(ProfileHttpEnforcementArgs $) {
        this.knownMethods = $.knownMethods;
        this.maxHeaderCount = $.maxHeaderCount;
        this.maxHeaderSize = $.maxHeaderSize;
        this.unknownMethod = $.unknownMethod;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProfileHttpEnforcementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProfileHttpEnforcementArgs $;

        public Builder() {
            $ = new ProfileHttpEnforcementArgs();
        }

        public Builder(ProfileHttpEnforcementArgs defaults) {
            $ = new ProfileHttpEnforcementArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param knownMethods Specifies which HTTP methods count as being known. Removing RFC-defined methods from this list will cause the HTTP filter to not recognize them. Default value is [CONNECT DELETE GET HEAD LOCK OPTIONS POST PROPFIND PUT TRACE UNLOCK].If no value is specified while creating, then default value will be assigned by BigIP. In order to remove it, [&#34;&#34;] list is to be passed. If knownMethods is commented (or not passed) during the update call, then no changes would be applied and previous value will persist. In order to put default value , we need to pass [CONNECT DELETE GET HEAD LOCK OPTIONS POST PROPFIND PUT TRACE UNLOCK] explicitly.
         * 
         * @return builder
         * 
         */
        public Builder knownMethods(@Nullable Output<List<String>> knownMethods) {
            $.knownMethods = knownMethods;
            return this;
        }

        /**
         * @param knownMethods Specifies which HTTP methods count as being known. Removing RFC-defined methods from this list will cause the HTTP filter to not recognize them. Default value is [CONNECT DELETE GET HEAD LOCK OPTIONS POST PROPFIND PUT TRACE UNLOCK].If no value is specified while creating, then default value will be assigned by BigIP. In order to remove it, [&#34;&#34;] list is to be passed. If knownMethods is commented (or not passed) during the update call, then no changes would be applied and previous value will persist. In order to put default value , we need to pass [CONNECT DELETE GET HEAD LOCK OPTIONS POST PROPFIND PUT TRACE UNLOCK] explicitly.
         * 
         * @return builder
         * 
         */
        public Builder knownMethods(List<String> knownMethods) {
            return knownMethods(Output.of(knownMethods));
        }

        /**
         * @param knownMethods Specifies which HTTP methods count as being known. Removing RFC-defined methods from this list will cause the HTTP filter to not recognize them. Default value is [CONNECT DELETE GET HEAD LOCK OPTIONS POST PROPFIND PUT TRACE UNLOCK].If no value is specified while creating, then default value will be assigned by BigIP. In order to remove it, [&#34;&#34;] list is to be passed. If knownMethods is commented (or not passed) during the update call, then no changes would be applied and previous value will persist. In order to put default value , we need to pass [CONNECT DELETE GET HEAD LOCK OPTIONS POST PROPFIND PUT TRACE UNLOCK] explicitly.
         * 
         * @return builder
         * 
         */
        public Builder knownMethods(String... knownMethods) {
            return knownMethods(List.of(knownMethods));
        }

        /**
         * @param maxHeaderCount Specifies the maximum number of headers allowed in HTTP request/response. The default is 64 headers.If no value is specified while creating, then default value will be assigned by BigIP. If maxHeaderCount is commented (or not passed) during the update call, then no changes would be applied and previous value will persist. In order to put default value, we need to pass &#34;64&#34; explicitly.
         * 
         * @return builder
         * 
         */
        public Builder maxHeaderCount(@Nullable Output<Integer> maxHeaderCount) {
            $.maxHeaderCount = maxHeaderCount;
            return this;
        }

        /**
         * @param maxHeaderCount Specifies the maximum number of headers allowed in HTTP request/response. The default is 64 headers.If no value is specified while creating, then default value will be assigned by BigIP. If maxHeaderCount is commented (or not passed) during the update call, then no changes would be applied and previous value will persist. In order to put default value, we need to pass &#34;64&#34; explicitly.
         * 
         * @return builder
         * 
         */
        public Builder maxHeaderCount(Integer maxHeaderCount) {
            return maxHeaderCount(Output.of(maxHeaderCount));
        }

        /**
         * @param maxHeaderSize Specifies the maximum header size. The default value is 32768. If no string is specified while creating, then default value will be assigned by BigIP. If maxHeaderSize is commented (or not passed) during the update call, then no changes would be applied and previous value will persist. In order to put default value, we need to pass &#34;32768&#34; explicitly.
         * 
         * @return builder
         * 
         */
        public Builder maxHeaderSize(@Nullable Output<Integer> maxHeaderSize) {
            $.maxHeaderSize = maxHeaderSize;
            return this;
        }

        /**
         * @param maxHeaderSize Specifies the maximum header size. The default value is 32768. If no string is specified while creating, then default value will be assigned by BigIP. If maxHeaderSize is commented (or not passed) during the update call, then no changes would be applied and previous value will persist. In order to put default value, we need to pass &#34;32768&#34; explicitly.
         * 
         * @return builder
         * 
         */
        public Builder maxHeaderSize(Integer maxHeaderSize) {
            return maxHeaderSize(Output.of(maxHeaderSize));
        }

        /**
         * @param unknownMethod Specifies whether to allow, reject or switch to pass-through mode when an unknown HTTP method is parsed. Default value is &#34;allow&#34;. If no string is specified while creating, then default value will be assigned by BigIP. If unknownMethod is commented (or not passed) during the update call, then no changes would be applied and previous value will persist. In order to put default value, we need to pass &#34;allow&#34; explicitly.
         * 
         * @return builder
         * 
         */
        public Builder unknownMethod(@Nullable Output<String> unknownMethod) {
            $.unknownMethod = unknownMethod;
            return this;
        }

        /**
         * @param unknownMethod Specifies whether to allow, reject or switch to pass-through mode when an unknown HTTP method is parsed. Default value is &#34;allow&#34;. If no string is specified while creating, then default value will be assigned by BigIP. If unknownMethod is commented (or not passed) during the update call, then no changes would be applied and previous value will persist. In order to put default value, we need to pass &#34;allow&#34; explicitly.
         * 
         * @return builder
         * 
         */
        public Builder unknownMethod(String unknownMethod) {
            return unknownMethod(Output.of(unknownMethod));
        }

        public ProfileHttpEnforcementArgs build() {
            return $;
        }
    }

}
