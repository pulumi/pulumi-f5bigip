// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.cm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DeviceState extends com.pulumi.resources.ResourceArgs {

    public static final DeviceState Empty = new DeviceState();

    /**
     * IP address used for config sync
     * 
     */
    @Import(name="configsyncIp")
    private @Nullable Output<String> configsyncIp;

    /**
     * @return IP address used for config sync
     * 
     */
    public Optional<Output<String>> configsyncIp() {
        return Optional.ofNullable(this.configsyncIp);
    }

    /**
     * IP address used for state mirroring
     * 
     */
    @Import(name="mirrorIp")
    private @Nullable Output<String> mirrorIp;

    /**
     * @return IP address used for state mirroring
     * 
     */
    public Optional<Output<String>> mirrorIp() {
        return Optional.ofNullable(this.mirrorIp);
    }

    /**
     * Secondary IP address used for state mirroring
     * 
     */
    @Import(name="mirrorSecondaryIp")
    private @Nullable Output<String> mirrorSecondaryIp;

    /**
     * @return Secondary IP address used for state mirroring
     * 
     */
    public Optional<Output<String>> mirrorSecondaryIp() {
        return Optional.ofNullable(this.mirrorSecondaryIp);
    }

    /**
     * Address of the Device which needs to be Deviceensed
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Address of the Device which needs to be Deviceensed
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private DeviceState() {}

    private DeviceState(DeviceState $) {
        this.configsyncIp = $.configsyncIp;
        this.mirrorIp = $.mirrorIp;
        this.mirrorSecondaryIp = $.mirrorSecondaryIp;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeviceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeviceState $;

        public Builder() {
            $ = new DeviceState();
        }

        public Builder(DeviceState defaults) {
            $ = new DeviceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param configsyncIp IP address used for config sync
         * 
         * @return builder
         * 
         */
        public Builder configsyncIp(@Nullable Output<String> configsyncIp) {
            $.configsyncIp = configsyncIp;
            return this;
        }

        /**
         * @param configsyncIp IP address used for config sync
         * 
         * @return builder
         * 
         */
        public Builder configsyncIp(String configsyncIp) {
            return configsyncIp(Output.of(configsyncIp));
        }

        /**
         * @param mirrorIp IP address used for state mirroring
         * 
         * @return builder
         * 
         */
        public Builder mirrorIp(@Nullable Output<String> mirrorIp) {
            $.mirrorIp = mirrorIp;
            return this;
        }

        /**
         * @param mirrorIp IP address used for state mirroring
         * 
         * @return builder
         * 
         */
        public Builder mirrorIp(String mirrorIp) {
            return mirrorIp(Output.of(mirrorIp));
        }

        /**
         * @param mirrorSecondaryIp Secondary IP address used for state mirroring
         * 
         * @return builder
         * 
         */
        public Builder mirrorSecondaryIp(@Nullable Output<String> mirrorSecondaryIp) {
            $.mirrorSecondaryIp = mirrorSecondaryIp;
            return this;
        }

        /**
         * @param mirrorSecondaryIp Secondary IP address used for state mirroring
         * 
         * @return builder
         * 
         */
        public Builder mirrorSecondaryIp(String mirrorSecondaryIp) {
            return mirrorSecondaryIp(Output.of(mirrorSecondaryIp));
        }

        /**
         * @param name Address of the Device which needs to be Deviceensed
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Address of the Device which needs to be Deviceensed
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public DeviceState build() {
            return $;
        }
    }

}
