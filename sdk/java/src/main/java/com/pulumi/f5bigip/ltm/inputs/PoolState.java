// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PoolState extends com.pulumi.resources.ResourceArgs {

    public static final PoolState Empty = new PoolState();

    /**
     * Specifies whether NATs are automatically enabled or disabled for any connections using this pool, [ Default : `yes`, Possible Values `yes` or `no`].
     * 
     */
    @Import(name="allowNat")
    private @Nullable Output<String> allowNat;

    /**
     * @return Specifies whether NATs are automatically enabled or disabled for any connections using this pool, [ Default : `yes`, Possible Values `yes` or `no`].
     * 
     */
    public Optional<Output<String>> allowNat() {
        return Optional.ofNullable(this.allowNat);
    }

    /**
     * Specifies whether SNATs are automatically enabled or disabled for any connections using this pool,[ Default : `yes`, Possible Values `yes` or `no`].
     * 
     */
    @Import(name="allowSnat")
    private @Nullable Output<String> allowSnat;

    /**
     * @return Specifies whether SNATs are automatically enabled or disabled for any connections using this pool,[ Default : `yes`, Possible Values `yes` or `no`].
     * 
     */
    public Optional<Output<String>> allowSnat() {
        return Optional.ofNullable(this.allowSnat);
    }

    /**
     * Specifies descriptive text that identifies the pool.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Specifies descriptive text that identifies the pool.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Specifies the load balancing method. The default is `round-robin`. Possible options: [`dynamic-ratio-member`,`dynamic-ratio-node`, `fastest-app-response`,`fastest-node`, `least-connections-members`,`least-connections-node`,`least-sessions`,`observed-member`,`observed-node`,`predictive-member`,`predictive-node`,`ratio-least-connections-member`,`ratio-least-connections-node`,`ratio-member`,`ratio-node`,`ratio-session`,`round-robin`,`weighted-least-connections-member`,`weighted-least-connections-node`]
     * 
     */
    @Import(name="loadBalancingMode")
    private @Nullable Output<String> loadBalancingMode;

    /**
     * @return Specifies the load balancing method. The default is `round-robin`. Possible options: [`dynamic-ratio-member`,`dynamic-ratio-node`, `fastest-app-response`,`fastest-node`, `least-connections-members`,`least-connections-node`,`least-sessions`,`observed-member`,`observed-node`,`predictive-member`,`predictive-node`,`ratio-least-connections-member`,`ratio-least-connections-node`,`ratio-member`,`ratio-node`,`ratio-session`,`round-robin`,`weighted-least-connections-member`,`weighted-least-connections-node`]
     * 
     */
    public Optional<Output<String>> loadBalancingMode() {
        return Optional.ofNullable(this.loadBalancingMode);
    }

    /**
     * Specifies whether the system load balances traffic according to the priority number assigned to the pool member,Default Value is `0` meaning `disabled`.
     * 
     */
    @Import(name="minimumActiveMembers")
    private @Nullable Output<Integer> minimumActiveMembers;

    /**
     * @return Specifies whether the system load balances traffic according to the priority number assigned to the pool member,Default Value is `0` meaning `disabled`.
     * 
     */
    public Optional<Output<Integer>> minimumActiveMembers() {
        return Optional.ofNullable(this.minimumActiveMembers);
    }

    /**
     * List of monitor names to associate with the pool
     * 
     */
    @Import(name="monitors")
    private @Nullable Output<List<String>> monitors;

    /**
     * @return List of monitor names to associate with the pool
     * 
     */
    public Optional<Output<List<String>>> monitors() {
        return Optional.ofNullable(this.monitors);
    }

    /**
     * Name of the pool,it should be `full path`.The full path is the combination of the `partition + name` of the pool.(For example `/Common/my-pool`)
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the pool,it should be `full path`.The full path is the combination of the `partition + name` of the pool.(For example `/Common/my-pool`)
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies the number of times the system tries to contact a new pool member after a passive failure.
     * 
     */
    @Import(name="reselectTries")
    private @Nullable Output<Integer> reselectTries;

    /**
     * @return Specifies the number of times the system tries to contact a new pool member after a passive failure.
     * 
     */
    public Optional<Output<Integer>> reselectTries() {
        return Optional.ofNullable(this.reselectTries);
    }

    /**
     * Specifies how the system should respond when the target pool member becomes unavailable. The default is `None`, Possible values: `[none, reset, reselect, drop]`.
     * 
     */
    @Import(name="serviceDownAction")
    private @Nullable Output<String> serviceDownAction;

    /**
     * @return Specifies how the system should respond when the target pool member becomes unavailable. The default is `None`, Possible values: `[none, reset, reselect, drop]`.
     * 
     */
    public Optional<Output<String>> serviceDownAction() {
        return Optional.ofNullable(this.serviceDownAction);
    }

    /**
     * Specifies the duration during which the system sends less traffic to a newly-enabled pool member.
     * 
     */
    @Import(name="slowRampTime")
    private @Nullable Output<Integer> slowRampTime;

    /**
     * @return Specifies the duration during which the system sends less traffic to a newly-enabled pool member.
     * 
     */
    public Optional<Output<Integer>> slowRampTime() {
        return Optional.ofNullable(this.slowRampTime);
    }

    private PoolState() {}

    private PoolState(PoolState $) {
        this.allowNat = $.allowNat;
        this.allowSnat = $.allowSnat;
        this.description = $.description;
        this.loadBalancingMode = $.loadBalancingMode;
        this.minimumActiveMembers = $.minimumActiveMembers;
        this.monitors = $.monitors;
        this.name = $.name;
        this.reselectTries = $.reselectTries;
        this.serviceDownAction = $.serviceDownAction;
        this.slowRampTime = $.slowRampTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PoolState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PoolState $;

        public Builder() {
            $ = new PoolState();
        }

        public Builder(PoolState defaults) {
            $ = new PoolState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowNat Specifies whether NATs are automatically enabled or disabled for any connections using this pool, [ Default : `yes`, Possible Values `yes` or `no`].
         * 
         * @return builder
         * 
         */
        public Builder allowNat(@Nullable Output<String> allowNat) {
            $.allowNat = allowNat;
            return this;
        }

        /**
         * @param allowNat Specifies whether NATs are automatically enabled or disabled for any connections using this pool, [ Default : `yes`, Possible Values `yes` or `no`].
         * 
         * @return builder
         * 
         */
        public Builder allowNat(String allowNat) {
            return allowNat(Output.of(allowNat));
        }

        /**
         * @param allowSnat Specifies whether SNATs are automatically enabled or disabled for any connections using this pool,[ Default : `yes`, Possible Values `yes` or `no`].
         * 
         * @return builder
         * 
         */
        public Builder allowSnat(@Nullable Output<String> allowSnat) {
            $.allowSnat = allowSnat;
            return this;
        }

        /**
         * @param allowSnat Specifies whether SNATs are automatically enabled or disabled for any connections using this pool,[ Default : `yes`, Possible Values `yes` or `no`].
         * 
         * @return builder
         * 
         */
        public Builder allowSnat(String allowSnat) {
            return allowSnat(Output.of(allowSnat));
        }

        /**
         * @param description Specifies descriptive text that identifies the pool.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Specifies descriptive text that identifies the pool.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param loadBalancingMode Specifies the load balancing method. The default is `round-robin`. Possible options: [`dynamic-ratio-member`,`dynamic-ratio-node`, `fastest-app-response`,`fastest-node`, `least-connections-members`,`least-connections-node`,`least-sessions`,`observed-member`,`observed-node`,`predictive-member`,`predictive-node`,`ratio-least-connections-member`,`ratio-least-connections-node`,`ratio-member`,`ratio-node`,`ratio-session`,`round-robin`,`weighted-least-connections-member`,`weighted-least-connections-node`]
         * 
         * @return builder
         * 
         */
        public Builder loadBalancingMode(@Nullable Output<String> loadBalancingMode) {
            $.loadBalancingMode = loadBalancingMode;
            return this;
        }

        /**
         * @param loadBalancingMode Specifies the load balancing method. The default is `round-robin`. Possible options: [`dynamic-ratio-member`,`dynamic-ratio-node`, `fastest-app-response`,`fastest-node`, `least-connections-members`,`least-connections-node`,`least-sessions`,`observed-member`,`observed-node`,`predictive-member`,`predictive-node`,`ratio-least-connections-member`,`ratio-least-connections-node`,`ratio-member`,`ratio-node`,`ratio-session`,`round-robin`,`weighted-least-connections-member`,`weighted-least-connections-node`]
         * 
         * @return builder
         * 
         */
        public Builder loadBalancingMode(String loadBalancingMode) {
            return loadBalancingMode(Output.of(loadBalancingMode));
        }

        /**
         * @param minimumActiveMembers Specifies whether the system load balances traffic according to the priority number assigned to the pool member,Default Value is `0` meaning `disabled`.
         * 
         * @return builder
         * 
         */
        public Builder minimumActiveMembers(@Nullable Output<Integer> minimumActiveMembers) {
            $.minimumActiveMembers = minimumActiveMembers;
            return this;
        }

        /**
         * @param minimumActiveMembers Specifies whether the system load balances traffic according to the priority number assigned to the pool member,Default Value is `0` meaning `disabled`.
         * 
         * @return builder
         * 
         */
        public Builder minimumActiveMembers(Integer minimumActiveMembers) {
            return minimumActiveMembers(Output.of(minimumActiveMembers));
        }

        /**
         * @param monitors List of monitor names to associate with the pool
         * 
         * @return builder
         * 
         */
        public Builder monitors(@Nullable Output<List<String>> monitors) {
            $.monitors = monitors;
            return this;
        }

        /**
         * @param monitors List of monitor names to associate with the pool
         * 
         * @return builder
         * 
         */
        public Builder monitors(List<String> monitors) {
            return monitors(Output.of(monitors));
        }

        /**
         * @param monitors List of monitor names to associate with the pool
         * 
         * @return builder
         * 
         */
        public Builder monitors(String... monitors) {
            return monitors(List.of(monitors));
        }

        /**
         * @param name Name of the pool,it should be `full path`.The full path is the combination of the `partition + name` of the pool.(For example `/Common/my-pool`)
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the pool,it should be `full path`.The full path is the combination of the `partition + name` of the pool.(For example `/Common/my-pool`)
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param reselectTries Specifies the number of times the system tries to contact a new pool member after a passive failure.
         * 
         * @return builder
         * 
         */
        public Builder reselectTries(@Nullable Output<Integer> reselectTries) {
            $.reselectTries = reselectTries;
            return this;
        }

        /**
         * @param reselectTries Specifies the number of times the system tries to contact a new pool member after a passive failure.
         * 
         * @return builder
         * 
         */
        public Builder reselectTries(Integer reselectTries) {
            return reselectTries(Output.of(reselectTries));
        }

        /**
         * @param serviceDownAction Specifies how the system should respond when the target pool member becomes unavailable. The default is `None`, Possible values: `[none, reset, reselect, drop]`.
         * 
         * @return builder
         * 
         */
        public Builder serviceDownAction(@Nullable Output<String> serviceDownAction) {
            $.serviceDownAction = serviceDownAction;
            return this;
        }

        /**
         * @param serviceDownAction Specifies how the system should respond when the target pool member becomes unavailable. The default is `None`, Possible values: `[none, reset, reselect, drop]`.
         * 
         * @return builder
         * 
         */
        public Builder serviceDownAction(String serviceDownAction) {
            return serviceDownAction(Output.of(serviceDownAction));
        }

        /**
         * @param slowRampTime Specifies the duration during which the system sends less traffic to a newly-enabled pool member.
         * 
         * @return builder
         * 
         */
        public Builder slowRampTime(@Nullable Output<Integer> slowRampTime) {
            $.slowRampTime = slowRampTime;
            return this;
        }

        /**
         * @param slowRampTime Specifies the duration during which the system sends less traffic to a newly-enabled pool member.
         * 
         * @return builder
         * 
         */
        public Builder slowRampTime(Integer slowRampTime) {
            return slowRampTime(Output.of(slowRampTime));
        }

        public PoolState build() {
            return $;
        }
    }

}
