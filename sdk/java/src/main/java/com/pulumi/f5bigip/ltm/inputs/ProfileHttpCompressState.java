// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProfileHttpCompressState extends com.pulumi.resources.ResourceArgs {

    public static final ProfileHttpCompressState Empty = new ProfileHttpCompressState();

    /**
     * Specifies the maximum number of compressed bytes that the system buffers before inserting a Content-Length header (which specifies the compressed size) into the response. The default is `4096` bytes.
     * 
     */
    @Import(name="compressionBuffersize")
    private @Nullable Output<Integer> compressionBuffersize;

    /**
     * @return Specifies the maximum number of compressed bytes that the system buffers before inserting a Content-Length header (which specifies the compressed size) into the response. The default is `4096` bytes.
     * 
     */
    public Optional<Output<Integer>> compressionBuffersize() {
        return Optional.ofNullable(this.compressionBuffersize);
    }

    /**
     * Excludes a specified list of content types from compression of HTTP Content-Type responses. Use a string list to specify a list of content types you want to compress.
     * 
     */
    @Import(name="contentTypeExcludes")
    private @Nullable Output<List<String>> contentTypeExcludes;

    /**
     * @return Excludes a specified list of content types from compression of HTTP Content-Type responses. Use a string list to specify a list of content types you want to compress.
     * 
     */
    public Optional<Output<List<String>>> contentTypeExcludes() {
        return Optional.ofNullable(this.contentTypeExcludes);
    }

    /**
     * Specifies a list of content types for compression of HTTP Content-Type responses. Use a string list to specify a list of content types you want to compress.
     * 
     */
    @Import(name="contentTypeIncludes")
    private @Nullable Output<List<String>> contentTypeIncludes;

    /**
     * @return Specifies a list of content types for compression of HTTP Content-Type responses. Use a string list to specify a list of content types you want to compress.
     * 
     */
    public Optional<Output<List<String>>> contentTypeIncludes() {
        return Optional.ofNullable(this.contentTypeIncludes);
    }

    /**
     * Specifies, when checked (enabled), that the system monitors the percent CPU usage and adjusts compression rates automatically when the CPU usage reaches either the CPU Saver High Threshold or the CPU Saver Low Threshold. The default is `enabled`.
     * 
     */
    @Import(name="cpuSaver")
    private @Nullable Output<String> cpuSaver;

    /**
     * @return Specifies, when checked (enabled), that the system monitors the percent CPU usage and adjusts compression rates automatically when the CPU usage reaches either the CPU Saver High Threshold or the CPU Saver Low Threshold. The default is `enabled`.
     * 
     */
    public Optional<Output<String>> cpuSaver() {
        return Optional.ofNullable(this.cpuSaver);
    }

    /**
     * Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
     * 
     */
    @Import(name="defaultsFrom")
    private @Nullable Output<String> defaultsFrom;

    /**
     * @return Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
     * 
     */
    public Optional<Output<String>> defaultsFrom() {
        return Optional.ofNullable(this.defaultsFrom);
    }

    /**
     * Specifies the degree to which the system compresses the content. Higher compression levels cause the compression process to be slower. The default is 1 - Least Compression (Fastest)
     * 
     */
    @Import(name="gzipCompressionLevel")
    private @Nullable Output<Integer> gzipCompressionLevel;

    /**
     * @return Specifies the degree to which the system compresses the content. Higher compression levels cause the compression process to be slower. The default is 1 - Least Compression (Fastest)
     * 
     */
    public Optional<Output<Integer>> gzipCompressionLevel() {
        return Optional.ofNullable(this.gzipCompressionLevel);
    }

    /**
     * Specifies the number of bytes of memory that the system uses for internal compression buffers when compressing a server response. The default is `8 kilobytes/8192 bytes`.
     * 
     */
    @Import(name="gzipMemoryLevel")
    private @Nullable Output<Integer> gzipMemoryLevel;

    /**
     * @return Specifies the number of bytes of memory that the system uses for internal compression buffers when compressing a server response. The default is `8 kilobytes/8192 bytes`.
     * 
     */
    public Optional<Output<Integer>> gzipMemoryLevel() {
        return Optional.ofNullable(this.gzipMemoryLevel);
    }

    /**
     * Specifies the number of kilobytes in the window size that the system uses when compressing a server response. The default is `16` kilobytes
     * 
     */
    @Import(name="gzipWindowSize")
    private @Nullable Output<Integer> gzipWindowSize;

    /**
     * @return Specifies the number of kilobytes in the window size that the system uses when compressing a server response. The default is `16` kilobytes
     * 
     */
    public Optional<Output<Integer>> gzipWindowSize() {
        return Optional.ofNullable(this.gzipWindowSize);
    }

    /**
     * Specifies, when checked (enabled), that the system does not remove the Accept-Encoding: header from an HTTP request. The default is `disabled`.
     * 
     */
    @Import(name="keepAcceptEncoding")
    private @Nullable Output<String> keepAcceptEncoding;

    /**
     * @return Specifies, when checked (enabled), that the system does not remove the Accept-Encoding: header from an HTTP request. The default is `disabled`.
     * 
     */
    public Optional<Output<String>> keepAcceptEncoding() {
        return Optional.ofNullable(this.keepAcceptEncoding);
    }

    /**
     * Name of the LTM http compress profile,named with their `full path`.The full path is the combination of the `partition + name` (example: `/Common/my-httpcompresprofile` ) or  `partition + directory + name` of the resource  (example: `my-httpcompresprofile`)
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the LTM http compress profile,named with their `full path`.The full path is the combination of the `partition + name` (example: `/Common/my-httpcompresprofile` ) or  `partition + directory + name` of the resource  (example: `my-httpcompresprofile`)
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Disables compression on a specified list of HTTP Request-URI responses. Use a regular expression to specify a list of URIs you do not want to compress.
     * 
     */
    @Import(name="uriExcludes")
    private @Nullable Output<List<String>> uriExcludes;

    /**
     * @return Disables compression on a specified list of HTTP Request-URI responses. Use a regular expression to specify a list of URIs you do not want to compress.
     * 
     */
    public Optional<Output<List<String>>> uriExcludes() {
        return Optional.ofNullable(this.uriExcludes);
    }

    /**
     * Enables compression on a specified list of HTTP Request-URI responses. Use a regular expression to specify a list of URIs you want to compress.
     * 
     */
    @Import(name="uriIncludes")
    private @Nullable Output<List<String>> uriIncludes;

    /**
     * @return Enables compression on a specified list of HTTP Request-URI responses. Use a regular expression to specify a list of URIs you want to compress.
     * 
     */
    public Optional<Output<List<String>>> uriIncludes() {
        return Optional.ofNullable(this.uriIncludes);
    }

    /**
     * Specifies, when checked (enabled), that the system inserts a Vary header into cacheable server responses. The default is `enabled`.
     * 
     */
    @Import(name="varyHeader")
    private @Nullable Output<String> varyHeader;

    /**
     * @return Specifies, when checked (enabled), that the system inserts a Vary header into cacheable server responses. The default is `enabled`.
     * 
     */
    public Optional<Output<String>> varyHeader() {
        return Optional.ofNullable(this.varyHeader);
    }

    private ProfileHttpCompressState() {}

    private ProfileHttpCompressState(ProfileHttpCompressState $) {
        this.compressionBuffersize = $.compressionBuffersize;
        this.contentTypeExcludes = $.contentTypeExcludes;
        this.contentTypeIncludes = $.contentTypeIncludes;
        this.cpuSaver = $.cpuSaver;
        this.defaultsFrom = $.defaultsFrom;
        this.gzipCompressionLevel = $.gzipCompressionLevel;
        this.gzipMemoryLevel = $.gzipMemoryLevel;
        this.gzipWindowSize = $.gzipWindowSize;
        this.keepAcceptEncoding = $.keepAcceptEncoding;
        this.name = $.name;
        this.uriExcludes = $.uriExcludes;
        this.uriIncludes = $.uriIncludes;
        this.varyHeader = $.varyHeader;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProfileHttpCompressState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProfileHttpCompressState $;

        public Builder() {
            $ = new ProfileHttpCompressState();
        }

        public Builder(ProfileHttpCompressState defaults) {
            $ = new ProfileHttpCompressState(Objects.requireNonNull(defaults));
        }

        /**
         * @param compressionBuffersize Specifies the maximum number of compressed bytes that the system buffers before inserting a Content-Length header (which specifies the compressed size) into the response. The default is `4096` bytes.
         * 
         * @return builder
         * 
         */
        public Builder compressionBuffersize(@Nullable Output<Integer> compressionBuffersize) {
            $.compressionBuffersize = compressionBuffersize;
            return this;
        }

        /**
         * @param compressionBuffersize Specifies the maximum number of compressed bytes that the system buffers before inserting a Content-Length header (which specifies the compressed size) into the response. The default is `4096` bytes.
         * 
         * @return builder
         * 
         */
        public Builder compressionBuffersize(Integer compressionBuffersize) {
            return compressionBuffersize(Output.of(compressionBuffersize));
        }

        /**
         * @param contentTypeExcludes Excludes a specified list of content types from compression of HTTP Content-Type responses. Use a string list to specify a list of content types you want to compress.
         * 
         * @return builder
         * 
         */
        public Builder contentTypeExcludes(@Nullable Output<List<String>> contentTypeExcludes) {
            $.contentTypeExcludes = contentTypeExcludes;
            return this;
        }

        /**
         * @param contentTypeExcludes Excludes a specified list of content types from compression of HTTP Content-Type responses. Use a string list to specify a list of content types you want to compress.
         * 
         * @return builder
         * 
         */
        public Builder contentTypeExcludes(List<String> contentTypeExcludes) {
            return contentTypeExcludes(Output.of(contentTypeExcludes));
        }

        /**
         * @param contentTypeExcludes Excludes a specified list of content types from compression of HTTP Content-Type responses. Use a string list to specify a list of content types you want to compress.
         * 
         * @return builder
         * 
         */
        public Builder contentTypeExcludes(String... contentTypeExcludes) {
            return contentTypeExcludes(List.of(contentTypeExcludes));
        }

        /**
         * @param contentTypeIncludes Specifies a list of content types for compression of HTTP Content-Type responses. Use a string list to specify a list of content types you want to compress.
         * 
         * @return builder
         * 
         */
        public Builder contentTypeIncludes(@Nullable Output<List<String>> contentTypeIncludes) {
            $.contentTypeIncludes = contentTypeIncludes;
            return this;
        }

        /**
         * @param contentTypeIncludes Specifies a list of content types for compression of HTTP Content-Type responses. Use a string list to specify a list of content types you want to compress.
         * 
         * @return builder
         * 
         */
        public Builder contentTypeIncludes(List<String> contentTypeIncludes) {
            return contentTypeIncludes(Output.of(contentTypeIncludes));
        }

        /**
         * @param contentTypeIncludes Specifies a list of content types for compression of HTTP Content-Type responses. Use a string list to specify a list of content types you want to compress.
         * 
         * @return builder
         * 
         */
        public Builder contentTypeIncludes(String... contentTypeIncludes) {
            return contentTypeIncludes(List.of(contentTypeIncludes));
        }

        /**
         * @param cpuSaver Specifies, when checked (enabled), that the system monitors the percent CPU usage and adjusts compression rates automatically when the CPU usage reaches either the CPU Saver High Threshold or the CPU Saver Low Threshold. The default is `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder cpuSaver(@Nullable Output<String> cpuSaver) {
            $.cpuSaver = cpuSaver;
            return this;
        }

        /**
         * @param cpuSaver Specifies, when checked (enabled), that the system monitors the percent CPU usage and adjusts compression rates automatically when the CPU usage reaches either the CPU Saver High Threshold or the CPU Saver Low Threshold. The default is `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder cpuSaver(String cpuSaver) {
            return cpuSaver(Output.of(cpuSaver));
        }

        /**
         * @param defaultsFrom Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
         * 
         * @return builder
         * 
         */
        public Builder defaultsFrom(@Nullable Output<String> defaultsFrom) {
            $.defaultsFrom = defaultsFrom;
            return this;
        }

        /**
         * @param defaultsFrom Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
         * 
         * @return builder
         * 
         */
        public Builder defaultsFrom(String defaultsFrom) {
            return defaultsFrom(Output.of(defaultsFrom));
        }

        /**
         * @param gzipCompressionLevel Specifies the degree to which the system compresses the content. Higher compression levels cause the compression process to be slower. The default is 1 - Least Compression (Fastest)
         * 
         * @return builder
         * 
         */
        public Builder gzipCompressionLevel(@Nullable Output<Integer> gzipCompressionLevel) {
            $.gzipCompressionLevel = gzipCompressionLevel;
            return this;
        }

        /**
         * @param gzipCompressionLevel Specifies the degree to which the system compresses the content. Higher compression levels cause the compression process to be slower. The default is 1 - Least Compression (Fastest)
         * 
         * @return builder
         * 
         */
        public Builder gzipCompressionLevel(Integer gzipCompressionLevel) {
            return gzipCompressionLevel(Output.of(gzipCompressionLevel));
        }

        /**
         * @param gzipMemoryLevel Specifies the number of bytes of memory that the system uses for internal compression buffers when compressing a server response. The default is `8 kilobytes/8192 bytes`.
         * 
         * @return builder
         * 
         */
        public Builder gzipMemoryLevel(@Nullable Output<Integer> gzipMemoryLevel) {
            $.gzipMemoryLevel = gzipMemoryLevel;
            return this;
        }

        /**
         * @param gzipMemoryLevel Specifies the number of bytes of memory that the system uses for internal compression buffers when compressing a server response. The default is `8 kilobytes/8192 bytes`.
         * 
         * @return builder
         * 
         */
        public Builder gzipMemoryLevel(Integer gzipMemoryLevel) {
            return gzipMemoryLevel(Output.of(gzipMemoryLevel));
        }

        /**
         * @param gzipWindowSize Specifies the number of kilobytes in the window size that the system uses when compressing a server response. The default is `16` kilobytes
         * 
         * @return builder
         * 
         */
        public Builder gzipWindowSize(@Nullable Output<Integer> gzipWindowSize) {
            $.gzipWindowSize = gzipWindowSize;
            return this;
        }

        /**
         * @param gzipWindowSize Specifies the number of kilobytes in the window size that the system uses when compressing a server response. The default is `16` kilobytes
         * 
         * @return builder
         * 
         */
        public Builder gzipWindowSize(Integer gzipWindowSize) {
            return gzipWindowSize(Output.of(gzipWindowSize));
        }

        /**
         * @param keepAcceptEncoding Specifies, when checked (enabled), that the system does not remove the Accept-Encoding: header from an HTTP request. The default is `disabled`.
         * 
         * @return builder
         * 
         */
        public Builder keepAcceptEncoding(@Nullable Output<String> keepAcceptEncoding) {
            $.keepAcceptEncoding = keepAcceptEncoding;
            return this;
        }

        /**
         * @param keepAcceptEncoding Specifies, when checked (enabled), that the system does not remove the Accept-Encoding: header from an HTTP request. The default is `disabled`.
         * 
         * @return builder
         * 
         */
        public Builder keepAcceptEncoding(String keepAcceptEncoding) {
            return keepAcceptEncoding(Output.of(keepAcceptEncoding));
        }

        /**
         * @param name Name of the LTM http compress profile,named with their `full path`.The full path is the combination of the `partition + name` (example: `/Common/my-httpcompresprofile` ) or  `partition + directory + name` of the resource  (example: `my-httpcompresprofile`)
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the LTM http compress profile,named with their `full path`.The full path is the combination of the `partition + name` (example: `/Common/my-httpcompresprofile` ) or  `partition + directory + name` of the resource  (example: `my-httpcompresprofile`)
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param uriExcludes Disables compression on a specified list of HTTP Request-URI responses. Use a regular expression to specify a list of URIs you do not want to compress.
         * 
         * @return builder
         * 
         */
        public Builder uriExcludes(@Nullable Output<List<String>> uriExcludes) {
            $.uriExcludes = uriExcludes;
            return this;
        }

        /**
         * @param uriExcludes Disables compression on a specified list of HTTP Request-URI responses. Use a regular expression to specify a list of URIs you do not want to compress.
         * 
         * @return builder
         * 
         */
        public Builder uriExcludes(List<String> uriExcludes) {
            return uriExcludes(Output.of(uriExcludes));
        }

        /**
         * @param uriExcludes Disables compression on a specified list of HTTP Request-URI responses. Use a regular expression to specify a list of URIs you do not want to compress.
         * 
         * @return builder
         * 
         */
        public Builder uriExcludes(String... uriExcludes) {
            return uriExcludes(List.of(uriExcludes));
        }

        /**
         * @param uriIncludes Enables compression on a specified list of HTTP Request-URI responses. Use a regular expression to specify a list of URIs you want to compress.
         * 
         * @return builder
         * 
         */
        public Builder uriIncludes(@Nullable Output<List<String>> uriIncludes) {
            $.uriIncludes = uriIncludes;
            return this;
        }

        /**
         * @param uriIncludes Enables compression on a specified list of HTTP Request-URI responses. Use a regular expression to specify a list of URIs you want to compress.
         * 
         * @return builder
         * 
         */
        public Builder uriIncludes(List<String> uriIncludes) {
            return uriIncludes(Output.of(uriIncludes));
        }

        /**
         * @param uriIncludes Enables compression on a specified list of HTTP Request-URI responses. Use a regular expression to specify a list of URIs you want to compress.
         * 
         * @return builder
         * 
         */
        public Builder uriIncludes(String... uriIncludes) {
            return uriIncludes(List.of(uriIncludes));
        }

        /**
         * @param varyHeader Specifies, when checked (enabled), that the system inserts a Vary header into cacheable server responses. The default is `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder varyHeader(@Nullable Output<String> varyHeader) {
            $.varyHeader = varyHeader;
            return this;
        }

        /**
         * @param varyHeader Specifies, when checked (enabled), that the system inserts a Vary header into cacheable server responses. The default is `enabled`.
         * 
         * @return builder
         * 
         */
        public Builder varyHeader(String varyHeader) {
            return varyHeader(Output.of(varyHeader));
        }

        public ProfileHttpCompressState build() {
            return $;
        }
    }

}
