// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.vcmp;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.f5bigip.Utilities;
import com.pulumi.f5bigip.vcmp.GuestArgs;
import com.pulumi.f5bigip.vcmp.inputs.GuestState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * `f5bigip.vcmp.Guest` Manages a vCMP guest configuration
 * 
 * Resource does not wait for vCMP guest to reach the desired state, it only ensures that a desired configuration is set on the target device.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.f5bigip.vcmp.Guest;
 * import com.pulumi.f5bigip.vcmp.GuestArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var vcmp_test = new Guest(&#34;vcmp-test&#34;, GuestArgs.builder()        
 *             .name(&#34;tf_guest&#34;)
 *             .initialImage(&#34;12.1.2.iso&#34;)
 *             .mgmtNetwork(&#34;bridged&#34;)
 *             .mgmtAddress(&#34;10.1.1.1/24&#34;)
 *             .mgmtRoute(&#34;none&#34;)
 *             .state(&#34;provisioned&#34;)
 *             .coresPerSlot(2)
 *             .numberOfSlots(1)
 *             .minNumberOfSlots(1)
 *             .build());
 * 
 *     }
 * }
 * ```
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="f5bigip:vcmp/guest:Guest")
public class Guest extends com.pulumi.resources.CustomResource {
    /**
     * Contains those slots to which the guest is allowed to be assigned.
     * 
     */
    @Export(name="allowedSlots", refs={List.class,Integer.class}, tree="[0,1]")
    private Output<List<Integer>> allowedSlots;

    /**
     * @return Contains those slots to which the guest is allowed to be assigned.
     * 
     */
    public Output<List<Integer>> allowedSlots() {
        return this.allowedSlots;
    }
    /**
     * Specifies the number of cores the system allocates to the guest.
     * 
     */
    @Export(name="coresPerSlot", refs={Integer.class}, tree="[0]")
    private Output<Integer> coresPerSlot;

    /**
     * @return Specifies the number of cores the system allocates to the guest.
     * 
     */
    public Output<Integer> coresPerSlot() {
        return this.coresPerSlot;
    }
    /**
     * Indicates if virtual disk associated with vCMP guest should be removed during remove operation.  The default is `true`
     * 
     */
    @Export(name="deleteVirtualDisk", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> deleteVirtualDisk;

    /**
     * @return Indicates if virtual disk associated with vCMP guest should be removed during remove operation.  The default is `true`
     * 
     */
    public Output<Optional<Boolean>> deleteVirtualDisk() {
        return Codegen.optional(this.deleteVirtualDisk);
    }
    /**
     * Resource name including prepended partition path.
     * 
     */
    @Export(name="fullPath", refs={String.class}, tree="[0]")
    private Output<String> fullPath;

    /**
     * @return Resource name including prepended partition path.
     * 
     */
    public Output<String> fullPath() {
        return this.fullPath;
    }
    /**
     * Specifies the hotfix ISO image file which is applied on top of the base image.
     * 
     */
    @Export(name="initialHotfix", refs={String.class}, tree="[0]")
    private Output<String> initialHotfix;

    /**
     * @return Specifies the hotfix ISO image file which is applied on top of the base image.
     * 
     */
    public Output<String> initialHotfix() {
        return this.initialHotfix;
    }
    /**
     * Specifies the base software release ISO image file for installing the TMOS hypervisor instance.
     * 
     */
    @Export(name="initialImage", refs={String.class}, tree="[0]")
    private Output<String> initialImage;

    /**
     * @return Specifies the base software release ISO image file for installing the TMOS hypervisor instance.
     * 
     */
    public Output<String> initialImage() {
        return this.initialImage;
    }
    /**
     * Specifies the IP address and subnet or subnet mask you use to access the guest when you want to manage a module running within the guest.
     * 
     */
    @Export(name="mgmtAddress", refs={String.class}, tree="[0]")
    private Output<String> mgmtAddress;

    /**
     * @return Specifies the IP address and subnet or subnet mask you use to access the guest when you want to manage a module running within the guest.
     * 
     */
    public Output<String> mgmtAddress() {
        return this.mgmtAddress;
    }
    /**
     * Specifies the method by which the management address is used in the vCMP guest. options : [`bridged`,`isolated`,`host-only`].
     * 
     */
    @Export(name="mgmtNetwork", refs={String.class}, tree="[0]")
    private Output<String> mgmtNetwork;

    /**
     * @return Specifies the method by which the management address is used in the vCMP guest. options : [`bridged`,`isolated`,`host-only`].
     * 
     */
    public Output<String> mgmtNetwork() {
        return this.mgmtNetwork;
    }
    /**
     * Specifies the gateway address for the `mgmt_address`. Can be set to `none` to remove the value from the configuration.
     * 
     */
    @Export(name="mgmtRoute", refs={String.class}, tree="[0]")
    private Output<String> mgmtRoute;

    /**
     * @return Specifies the gateway address for the `mgmt_address`. Can be set to `none` to remove the value from the configuration.
     * 
     */
    public Output<String> mgmtRoute() {
        return this.mgmtRoute;
    }
    /**
     * Specifies the minimum number of slots the guest must be assigned to in order to deploy.
     * 
     */
    @Export(name="minNumberOfSlots", refs={Integer.class}, tree="[0]")
    private Output<Integer> minNumberOfSlots;

    /**
     * @return Specifies the minimum number of slots the guest must be assigned to in order to deploy.
     * 
     */
    public Output<Integer> minNumberOfSlots() {
        return this.minNumberOfSlots;
    }
    /**
     * Name of the vCMP guest
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Name of the vCMP guest
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Specifies the number of slots for the system to use when creating the guest.
     * 
     */
    @Export(name="numberOfSlots", refs={Integer.class}, tree="[0]")
    private Output<Integer> numberOfSlots;

    /**
     * @return Specifies the number of slots for the system to use when creating the guest.
     * 
     */
    public Output<Integer> numberOfSlots() {
        return this.numberOfSlots;
    }
    /**
     * Specifies the state of the vCMP guest on the system. options : [`configured`,`provisioned`,`deployed`].
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return Specifies the state of the vCMP guest on the system. options : [`configured`,`provisioned`,`deployed`].
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * Virtual disk associated with vCMP guest.
     * 
     */
    @Export(name="virtualDisk", refs={String.class}, tree="[0]")
    private Output<String> virtualDisk;

    /**
     * @return Virtual disk associated with vCMP guest.
     * 
     */
    public Output<String> virtualDisk() {
        return this.virtualDisk;
    }
    /**
     * Specifies the list of VLANs the vCMP guest uses to communicate with other guests, the host, and with the external network. The naming format must be the combination of the partition + name. For example /Common/my-vlan
     * 
     */
    @Export(name="vlans", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> vlans;

    /**
     * @return Specifies the list of VLANs the vCMP guest uses to communicate with other guests, the host, and with the external network. The naming format must be the combination of the partition + name. For example /Common/my-vlan
     * 
     */
    public Output<List<String>> vlans() {
        return this.vlans;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Guest(String name) {
        this(name, GuestArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Guest(String name, GuestArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Guest(String name, GuestArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("f5bigip:vcmp/guest:Guest", name, args == null ? GuestArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Guest(String name, Output<String> id, @Nullable GuestState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("f5bigip:vcmp/guest:Guest", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Guest get(String name, Output<String> id, @Nullable GuestState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Guest(name, id, state, options);
    }
}
