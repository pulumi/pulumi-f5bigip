// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CipherRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final CipherRuleArgs Empty = new CipherRuleArgs();

    /**
     * Specifies one or more Cipher Suites used,this is a colon (:) separated string of cipher suites. example, `TLS13-AES128-GCM-SHA256:TLS13-AES256-GCM-SHA384`.
     * 
     */
    @Import(name="cipher", required=true)
    private Output<String> cipher;

    /**
     * @return Specifies one or more Cipher Suites used,this is a colon (:) separated string of cipher suites. example, `TLS13-AES128-GCM-SHA256:TLS13-AES256-GCM-SHA384`.
     * 
     */
    public Output<String> cipher() {
        return this.cipher;
    }

    /**
     * The Partition in which the Cipher Rule will be created.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The Partition in which the Cipher Rule will be created.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Specifies the DH Groups algorithms, separated by colons (:).
     * 
     */
    @Import(name="dhGroups")
    private @Nullable Output<String> dhGroups;

    /**
     * @return Specifies the DH Groups algorithms, separated by colons (:).
     * 
     */
    public Optional<Output<String>> dhGroups() {
        return Optional.ofNullable(this.dhGroups);
    }

    /**
     * Name of the Cipher Rule. Name should be in pattern `partition` + `cipher_rule_name`
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the Cipher Rule. Name should be in pattern `partition` + `cipher_rule_name`
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Specifies the Signature Algorithms, separated by colons (:).
     * 
     */
    @Import(name="signatureAlgorithms")
    private @Nullable Output<String> signatureAlgorithms;

    /**
     * @return Specifies the Signature Algorithms, separated by colons (:).
     * 
     */
    public Optional<Output<String>> signatureAlgorithms() {
        return Optional.ofNullable(this.signatureAlgorithms);
    }

    private CipherRuleArgs() {}

    private CipherRuleArgs(CipherRuleArgs $) {
        this.cipher = $.cipher;
        this.description = $.description;
        this.dhGroups = $.dhGroups;
        this.name = $.name;
        this.signatureAlgorithms = $.signatureAlgorithms;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CipherRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CipherRuleArgs $;

        public Builder() {
            $ = new CipherRuleArgs();
        }

        public Builder(CipherRuleArgs defaults) {
            $ = new CipherRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cipher Specifies one or more Cipher Suites used,this is a colon (:) separated string of cipher suites. example, `TLS13-AES128-GCM-SHA256:TLS13-AES256-GCM-SHA384`.
         * 
         * @return builder
         * 
         */
        public Builder cipher(Output<String> cipher) {
            $.cipher = cipher;
            return this;
        }

        /**
         * @param cipher Specifies one or more Cipher Suites used,this is a colon (:) separated string of cipher suites. example, `TLS13-AES128-GCM-SHA256:TLS13-AES256-GCM-SHA384`.
         * 
         * @return builder
         * 
         */
        public Builder cipher(String cipher) {
            return cipher(Output.of(cipher));
        }

        /**
         * @param description The Partition in which the Cipher Rule will be created.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The Partition in which the Cipher Rule will be created.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dhGroups Specifies the DH Groups algorithms, separated by colons (:).
         * 
         * @return builder
         * 
         */
        public Builder dhGroups(@Nullable Output<String> dhGroups) {
            $.dhGroups = dhGroups;
            return this;
        }

        /**
         * @param dhGroups Specifies the DH Groups algorithms, separated by colons (:).
         * 
         * @return builder
         * 
         */
        public Builder dhGroups(String dhGroups) {
            return dhGroups(Output.of(dhGroups));
        }

        /**
         * @param name Name of the Cipher Rule. Name should be in pattern `partition` + `cipher_rule_name`
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Cipher Rule. Name should be in pattern `partition` + `cipher_rule_name`
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param signatureAlgorithms Specifies the Signature Algorithms, separated by colons (:).
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithms(@Nullable Output<String> signatureAlgorithms) {
            $.signatureAlgorithms = signatureAlgorithms;
            return this;
        }

        /**
         * @param signatureAlgorithms Specifies the Signature Algorithms, separated by colons (:).
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithms(String signatureAlgorithms) {
            return signatureAlgorithms(Output.of(signatureAlgorithms));
        }

        public CipherRuleArgs build() {
            if ($.cipher == null) {
                throw new MissingRequiredPropertyException("CipherRuleArgs", "cipher");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("CipherRuleArgs", "name");
            }
            return $;
        }
    }

}
