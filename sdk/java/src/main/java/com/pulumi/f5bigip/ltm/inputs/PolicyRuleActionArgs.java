// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyRuleActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyRuleActionArgs Empty = new PolicyRuleActionArgs();

    @Import(name="appService")
    private @Nullable Output<String> appService;

    public Optional<Output<String>> appService() {
        return Optional.ofNullable(this.appService);
    }

    @Import(name="application")
    private @Nullable Output<String> application;

    public Optional<Output<String>> application() {
        return Optional.ofNullable(this.application);
    }

    @Import(name="asm")
    private @Nullable Output<Boolean> asm;

    public Optional<Output<Boolean>> asm() {
        return Optional.ofNullable(this.asm);
    }

    @Import(name="avr")
    private @Nullable Output<Boolean> avr;

    public Optional<Output<Boolean>> avr() {
        return Optional.ofNullable(this.avr);
    }

    @Import(name="cache")
    private @Nullable Output<Boolean> cache;

    public Optional<Output<Boolean>> cache() {
        return Optional.ofNullable(this.cache);
    }

    @Import(name="carp")
    private @Nullable Output<Boolean> carp;

    public Optional<Output<Boolean>> carp() {
        return Optional.ofNullable(this.carp);
    }

    @Import(name="category")
    private @Nullable Output<String> category;

    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    @Import(name="classify")
    private @Nullable Output<Boolean> classify;

    public Optional<Output<Boolean>> classify() {
        return Optional.ofNullable(this.classify);
    }

    @Import(name="clonePool")
    private @Nullable Output<String> clonePool;

    public Optional<Output<String>> clonePool() {
        return Optional.ofNullable(this.clonePool);
    }

    @Import(name="code")
    private @Nullable Output<Integer> code;

    public Optional<Output<Integer>> code() {
        return Optional.ofNullable(this.code);
    }

    @Import(name="compress")
    private @Nullable Output<Boolean> compress;

    public Optional<Output<Boolean>> compress() {
        return Optional.ofNullable(this.compress);
    }

    /**
     * This action is set to `true` by default, it needs to be explicitly set to `false` for actions it conflicts with.
     * 
     */
    @Import(name="connection")
    private @Nullable Output<Boolean> connection;

    /**
     * @return This action is set to `true` by default, it needs to be explicitly set to `false` for actions it conflicts with.
     * 
     */
    public Optional<Output<Boolean>> connection() {
        return Optional.ofNullable(this.connection);
    }

    @Import(name="content")
    private @Nullable Output<String> content;

    public Optional<Output<String>> content() {
        return Optional.ofNullable(this.content);
    }

    @Import(name="cookieHash")
    private @Nullable Output<Boolean> cookieHash;

    public Optional<Output<Boolean>> cookieHash() {
        return Optional.ofNullable(this.cookieHash);
    }

    @Import(name="cookieInsert")
    private @Nullable Output<Boolean> cookieInsert;

    public Optional<Output<Boolean>> cookieInsert() {
        return Optional.ofNullable(this.cookieInsert);
    }

    @Import(name="cookiePassive")
    private @Nullable Output<Boolean> cookiePassive;

    public Optional<Output<Boolean>> cookiePassive() {
        return Optional.ofNullable(this.cookiePassive);
    }

    @Import(name="cookieRewrite")
    private @Nullable Output<Boolean> cookieRewrite;

    public Optional<Output<Boolean>> cookieRewrite() {
        return Optional.ofNullable(this.cookieRewrite);
    }

    @Import(name="decompress")
    private @Nullable Output<Boolean> decompress;

    public Optional<Output<Boolean>> decompress() {
        return Optional.ofNullable(this.decompress);
    }

    @Import(name="defer")
    private @Nullable Output<Boolean> defer;

    public Optional<Output<Boolean>> defer() {
        return Optional.ofNullable(this.defer);
    }

    @Import(name="destinationAddress")
    private @Nullable Output<Boolean> destinationAddress;

    public Optional<Output<Boolean>> destinationAddress() {
        return Optional.ofNullable(this.destinationAddress);
    }

    @Import(name="disable")
    private @Nullable Output<Boolean> disable;

    public Optional<Output<Boolean>> disable() {
        return Optional.ofNullable(this.disable);
    }

    @Import(name="domain")
    private @Nullable Output<String> domain;

    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    @Import(name="enable")
    private @Nullable Output<Boolean> enable;

    public Optional<Output<Boolean>> enable() {
        return Optional.ofNullable(this.enable);
    }

    @Import(name="expiry")
    private @Nullable Output<String> expiry;

    public Optional<Output<String>> expiry() {
        return Optional.ofNullable(this.expiry);
    }

    @Import(name="expirySecs")
    private @Nullable Output<Integer> expirySecs;

    public Optional<Output<Integer>> expirySecs() {
        return Optional.ofNullable(this.expirySecs);
    }

    @Import(name="expression")
    private @Nullable Output<String> expression;

    public Optional<Output<String>> expression() {
        return Optional.ofNullable(this.expression);
    }

    @Import(name="extension")
    private @Nullable Output<String> extension;

    public Optional<Output<String>> extension() {
        return Optional.ofNullable(this.extension);
    }

    @Import(name="facility")
    private @Nullable Output<String> facility;

    public Optional<Output<String>> facility() {
        return Optional.ofNullable(this.facility);
    }

    /**
     * This action will affect forwarding.
     * 
     */
    @Import(name="forward")
    private @Nullable Output<Boolean> forward;

    /**
     * @return This action will affect forwarding.
     * 
     */
    public Optional<Output<Boolean>> forward() {
        return Optional.ofNullable(this.forward);
    }

    @Import(name="fromProfile")
    private @Nullable Output<String> fromProfile;

    public Optional<Output<String>> fromProfile() {
        return Optional.ofNullable(this.fromProfile);
    }

    @Import(name="hash")
    private @Nullable Output<Boolean> hash;

    public Optional<Output<Boolean>> hash() {
        return Optional.ofNullable(this.hash);
    }

    @Import(name="host")
    private @Nullable Output<String> host;

    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    @Import(name="http")
    private @Nullable Output<Boolean> http;

    public Optional<Output<Boolean>> http() {
        return Optional.ofNullable(this.http);
    }

    @Import(name="httpBasicAuth")
    private @Nullable Output<Boolean> httpBasicAuth;

    public Optional<Output<Boolean>> httpBasicAuth() {
        return Optional.ofNullable(this.httpBasicAuth);
    }

    @Import(name="httpCookie")
    private @Nullable Output<Boolean> httpCookie;

    public Optional<Output<Boolean>> httpCookie() {
        return Optional.ofNullable(this.httpCookie);
    }

    @Import(name="httpHeader")
    private @Nullable Output<Boolean> httpHeader;

    public Optional<Output<Boolean>> httpHeader() {
        return Optional.ofNullable(this.httpHeader);
    }

    @Import(name="httpHost")
    private @Nullable Output<Boolean> httpHost;

    public Optional<Output<Boolean>> httpHost() {
        return Optional.ofNullable(this.httpHost);
    }

    @Import(name="httpReferer")
    private @Nullable Output<Boolean> httpReferer;

    public Optional<Output<Boolean>> httpReferer() {
        return Optional.ofNullable(this.httpReferer);
    }

    @Import(name="httpReply")
    private @Nullable Output<Boolean> httpReply;

    public Optional<Output<Boolean>> httpReply() {
        return Optional.ofNullable(this.httpReply);
    }

    @Import(name="httpSetCookie")
    private @Nullable Output<Boolean> httpSetCookie;

    public Optional<Output<Boolean>> httpSetCookie() {
        return Optional.ofNullable(this.httpSetCookie);
    }

    @Import(name="httpUri")
    private @Nullable Output<Boolean> httpUri;

    public Optional<Output<Boolean>> httpUri() {
        return Optional.ofNullable(this.httpUri);
    }

    @Import(name="ifile")
    private @Nullable Output<String> ifile;

    public Optional<Output<String>> ifile() {
        return Optional.ofNullable(this.ifile);
    }

    @Import(name="insert")
    private @Nullable Output<Boolean> insert;

    public Optional<Output<Boolean>> insert() {
        return Optional.ofNullable(this.insert);
    }

    @Import(name="internalVirtual")
    private @Nullable Output<String> internalVirtual;

    public Optional<Output<String>> internalVirtual() {
        return Optional.ofNullable(this.internalVirtual);
    }

    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    @Import(name="key")
    private @Nullable Output<String> key;

    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    @Import(name="l7dos")
    private @Nullable Output<Boolean> l7dos;

    public Optional<Output<Boolean>> l7dos() {
        return Optional.ofNullable(this.l7dos);
    }

    @Import(name="length")
    private @Nullable Output<Integer> length;

    public Optional<Output<Integer>> length() {
        return Optional.ofNullable(this.length);
    }

    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    @Import(name="log")
    private @Nullable Output<Boolean> log;

    public Optional<Output<Boolean>> log() {
        return Optional.ofNullable(this.log);
    }

    @Import(name="ltmPolicy")
    private @Nullable Output<Boolean> ltmPolicy;

    public Optional<Output<Boolean>> ltmPolicy() {
        return Optional.ofNullable(this.ltmPolicy);
    }

    @Import(name="member")
    private @Nullable Output<String> member;

    public Optional<Output<String>> member() {
        return Optional.ofNullable(this.member);
    }

    @Import(name="message")
    private @Nullable Output<String> message;

    public Optional<Output<String>> message() {
        return Optional.ofNullable(this.message);
    }

    @Import(name="netmask")
    private @Nullable Output<String> netmask;

    public Optional<Output<String>> netmask() {
        return Optional.ofNullable(this.netmask);
    }

    @Import(name="nexthop")
    private @Nullable Output<String> nexthop;

    public Optional<Output<String>> nexthop() {
        return Optional.ofNullable(this.nexthop);
    }

    @Import(name="node")
    private @Nullable Output<String> node;

    public Optional<Output<String>> node() {
        return Optional.ofNullable(this.node);
    }

    @Import(name="offset")
    private @Nullable Output<Integer> offset;

    public Optional<Output<Integer>> offset() {
        return Optional.ofNullable(this.offset);
    }

    @Import(name="path")
    private @Nullable Output<String> path;

    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    @Import(name="pem")
    private @Nullable Output<Boolean> pem;

    public Optional<Output<Boolean>> pem() {
        return Optional.ofNullable(this.pem);
    }

    @Import(name="persist")
    private @Nullable Output<Boolean> persist;

    public Optional<Output<Boolean>> persist() {
        return Optional.ofNullable(this.persist);
    }

    @Import(name="pin")
    private @Nullable Output<Boolean> pin;

    public Optional<Output<Boolean>> pin() {
        return Optional.ofNullable(this.pin);
    }

    @Import(name="policy")
    private @Nullable Output<String> policy;

    public Optional<Output<String>> policy() {
        return Optional.ofNullable(this.policy);
    }

    /**
     * This action will direct the stream to this pool.
     * 
     */
    @Import(name="pool")
    private @Nullable Output<String> pool;

    /**
     * @return This action will direct the stream to this pool.
     * 
     */
    public Optional<Output<String>> pool() {
        return Optional.ofNullable(this.pool);
    }

    @Import(name="port")
    private @Nullable Output<Integer> port;

    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    @Import(name="priority")
    private @Nullable Output<String> priority;

    public Optional<Output<String>> priority() {
        return Optional.ofNullable(this.priority);
    }

    @Import(name="profile")
    private @Nullable Output<String> profile;

    public Optional<Output<String>> profile() {
        return Optional.ofNullable(this.profile);
    }

    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    @Import(name="queryString")
    private @Nullable Output<String> queryString;

    public Optional<Output<String>> queryString() {
        return Optional.ofNullable(this.queryString);
    }

    @Import(name="rateclass")
    private @Nullable Output<String> rateclass;

    public Optional<Output<String>> rateclass() {
        return Optional.ofNullable(this.rateclass);
    }

    @Import(name="redirect")
    private @Nullable Output<Boolean> redirect;

    public Optional<Output<Boolean>> redirect() {
        return Optional.ofNullable(this.redirect);
    }

    @Import(name="remove")
    private @Nullable Output<Boolean> remove;

    public Optional<Output<Boolean>> remove() {
        return Optional.ofNullable(this.remove);
    }

    @Import(name="replace")
    private @Nullable Output<Boolean> replace;

    public Optional<Output<Boolean>> replace() {
        return Optional.ofNullable(this.replace);
    }

    @Import(name="request")
    private @Nullable Output<Boolean> request;

    public Optional<Output<Boolean>> request() {
        return Optional.ofNullable(this.request);
    }

    @Import(name="requestAdapt")
    private @Nullable Output<Boolean> requestAdapt;

    public Optional<Output<Boolean>> requestAdapt() {
        return Optional.ofNullable(this.requestAdapt);
    }

    @Import(name="reset")
    private @Nullable Output<Boolean> reset;

    public Optional<Output<Boolean>> reset() {
        return Optional.ofNullable(this.reset);
    }

    @Import(name="response")
    private @Nullable Output<Boolean> response;

    public Optional<Output<Boolean>> response() {
        return Optional.ofNullable(this.response);
    }

    @Import(name="responseAdapt")
    private @Nullable Output<Boolean> responseAdapt;

    public Optional<Output<Boolean>> responseAdapt() {
        return Optional.ofNullable(this.responseAdapt);
    }

    @Import(name="scheme")
    private @Nullable Output<String> scheme;

    public Optional<Output<String>> scheme() {
        return Optional.ofNullable(this.scheme);
    }

    @Import(name="script")
    private @Nullable Output<String> script;

    public Optional<Output<String>> script() {
        return Optional.ofNullable(this.script);
    }

    @Import(name="select")
    private @Nullable Output<Boolean> select;

    public Optional<Output<Boolean>> select() {
        return Optional.ofNullable(this.select);
    }

    @Import(name="serverSsl")
    private @Nullable Output<Boolean> serverSsl;

    public Optional<Output<Boolean>> serverSsl() {
        return Optional.ofNullable(this.serverSsl);
    }

    @Import(name="setVariable")
    private @Nullable Output<Boolean> setVariable;

    public Optional<Output<Boolean>> setVariable() {
        return Optional.ofNullable(this.setVariable);
    }

    @Import(name="shutdown")
    private @Nullable Output<Boolean> shutdown;

    public Optional<Output<Boolean>> shutdown() {
        return Optional.ofNullable(this.shutdown);
    }

    @Import(name="snat")
    private @Nullable Output<String> snat;

    public Optional<Output<String>> snat() {
        return Optional.ofNullable(this.snat);
    }

    @Import(name="snatpool")
    private @Nullable Output<String> snatpool;

    public Optional<Output<String>> snatpool() {
        return Optional.ofNullable(this.snatpool);
    }

    @Import(name="sourceAddress")
    private @Nullable Output<Boolean> sourceAddress;

    public Optional<Output<Boolean>> sourceAddress() {
        return Optional.ofNullable(this.sourceAddress);
    }

    @Import(name="sslClientHello")
    private @Nullable Output<Boolean> sslClientHello;

    public Optional<Output<Boolean>> sslClientHello() {
        return Optional.ofNullable(this.sslClientHello);
    }

    @Import(name="sslServerHandshake")
    private @Nullable Output<Boolean> sslServerHandshake;

    public Optional<Output<Boolean>> sslServerHandshake() {
        return Optional.ofNullable(this.sslServerHandshake);
    }

    @Import(name="sslServerHello")
    private @Nullable Output<Boolean> sslServerHello;

    public Optional<Output<Boolean>> sslServerHello() {
        return Optional.ofNullable(this.sslServerHello);
    }

    @Import(name="sslSessionId")
    private @Nullable Output<Boolean> sslSessionId;

    public Optional<Output<Boolean>> sslSessionId() {
        return Optional.ofNullable(this.sslSessionId);
    }

    @Import(name="status")
    private @Nullable Output<Integer> status;

    public Optional<Output<Integer>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="tcl")
    private @Nullable Output<Boolean> tcl;

    public Optional<Output<Boolean>> tcl() {
        return Optional.ofNullable(this.tcl);
    }

    @Import(name="tcpNagle")
    private @Nullable Output<Boolean> tcpNagle;

    public Optional<Output<Boolean>> tcpNagle() {
        return Optional.ofNullable(this.tcpNagle);
    }

    @Import(name="text")
    private @Nullable Output<String> text;

    public Optional<Output<String>> text() {
        return Optional.ofNullable(this.text);
    }

    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    @Import(name="tmName")
    private @Nullable Output<String> tmName;

    public Optional<Output<String>> tmName() {
        return Optional.ofNullable(this.tmName);
    }

    @Import(name="uie")
    private @Nullable Output<Boolean> uie;

    public Optional<Output<Boolean>> uie() {
        return Optional.ofNullable(this.uie);
    }

    @Import(name="universal")
    private @Nullable Output<Boolean> universal;

    public Optional<Output<Boolean>> universal() {
        return Optional.ofNullable(this.universal);
    }

    @Import(name="value")
    private @Nullable Output<String> value;

    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    @Import(name="virtual")
    private @Nullable Output<String> virtual;

    public Optional<Output<String>> virtual() {
        return Optional.ofNullable(this.virtual);
    }

    @Import(name="vlan")
    private @Nullable Output<String> vlan;

    public Optional<Output<String>> vlan() {
        return Optional.ofNullable(this.vlan);
    }

    @Import(name="vlanId")
    private @Nullable Output<Integer> vlanId;

    public Optional<Output<Integer>> vlanId() {
        return Optional.ofNullable(this.vlanId);
    }

    @Import(name="wam")
    private @Nullable Output<Boolean> wam;

    public Optional<Output<Boolean>> wam() {
        return Optional.ofNullable(this.wam);
    }

    @Import(name="write")
    private @Nullable Output<Boolean> write;

    public Optional<Output<Boolean>> write() {
        return Optional.ofNullable(this.write);
    }

    private PolicyRuleActionArgs() {}

    private PolicyRuleActionArgs(PolicyRuleActionArgs $) {
        this.appService = $.appService;
        this.application = $.application;
        this.asm = $.asm;
        this.avr = $.avr;
        this.cache = $.cache;
        this.carp = $.carp;
        this.category = $.category;
        this.classify = $.classify;
        this.clonePool = $.clonePool;
        this.code = $.code;
        this.compress = $.compress;
        this.connection = $.connection;
        this.content = $.content;
        this.cookieHash = $.cookieHash;
        this.cookieInsert = $.cookieInsert;
        this.cookiePassive = $.cookiePassive;
        this.cookieRewrite = $.cookieRewrite;
        this.decompress = $.decompress;
        this.defer = $.defer;
        this.destinationAddress = $.destinationAddress;
        this.disable = $.disable;
        this.domain = $.domain;
        this.enable = $.enable;
        this.expiry = $.expiry;
        this.expirySecs = $.expirySecs;
        this.expression = $.expression;
        this.extension = $.extension;
        this.facility = $.facility;
        this.forward = $.forward;
        this.fromProfile = $.fromProfile;
        this.hash = $.hash;
        this.host = $.host;
        this.http = $.http;
        this.httpBasicAuth = $.httpBasicAuth;
        this.httpCookie = $.httpCookie;
        this.httpHeader = $.httpHeader;
        this.httpHost = $.httpHost;
        this.httpReferer = $.httpReferer;
        this.httpReply = $.httpReply;
        this.httpSetCookie = $.httpSetCookie;
        this.httpUri = $.httpUri;
        this.ifile = $.ifile;
        this.insert = $.insert;
        this.internalVirtual = $.internalVirtual;
        this.ipAddress = $.ipAddress;
        this.key = $.key;
        this.l7dos = $.l7dos;
        this.length = $.length;
        this.location = $.location;
        this.log = $.log;
        this.ltmPolicy = $.ltmPolicy;
        this.member = $.member;
        this.message = $.message;
        this.netmask = $.netmask;
        this.nexthop = $.nexthop;
        this.node = $.node;
        this.offset = $.offset;
        this.path = $.path;
        this.pem = $.pem;
        this.persist = $.persist;
        this.pin = $.pin;
        this.policy = $.policy;
        this.pool = $.pool;
        this.port = $.port;
        this.priority = $.priority;
        this.profile = $.profile;
        this.protocol = $.protocol;
        this.queryString = $.queryString;
        this.rateclass = $.rateclass;
        this.redirect = $.redirect;
        this.remove = $.remove;
        this.replace = $.replace;
        this.request = $.request;
        this.requestAdapt = $.requestAdapt;
        this.reset = $.reset;
        this.response = $.response;
        this.responseAdapt = $.responseAdapt;
        this.scheme = $.scheme;
        this.script = $.script;
        this.select = $.select;
        this.serverSsl = $.serverSsl;
        this.setVariable = $.setVariable;
        this.shutdown = $.shutdown;
        this.snat = $.snat;
        this.snatpool = $.snatpool;
        this.sourceAddress = $.sourceAddress;
        this.sslClientHello = $.sslClientHello;
        this.sslServerHandshake = $.sslServerHandshake;
        this.sslServerHello = $.sslServerHello;
        this.sslSessionId = $.sslSessionId;
        this.status = $.status;
        this.tcl = $.tcl;
        this.tcpNagle = $.tcpNagle;
        this.text = $.text;
        this.timeout = $.timeout;
        this.tmName = $.tmName;
        this.uie = $.uie;
        this.universal = $.universal;
        this.value = $.value;
        this.virtual = $.virtual;
        this.vlan = $.vlan;
        this.vlanId = $.vlanId;
        this.wam = $.wam;
        this.write = $.write;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyRuleActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyRuleActionArgs $;

        public Builder() {
            $ = new PolicyRuleActionArgs();
        }

        public Builder(PolicyRuleActionArgs defaults) {
            $ = new PolicyRuleActionArgs(Objects.requireNonNull(defaults));
        }

        public Builder appService(@Nullable Output<String> appService) {
            $.appService = appService;
            return this;
        }

        public Builder appService(String appService) {
            return appService(Output.of(appService));
        }

        public Builder application(@Nullable Output<String> application) {
            $.application = application;
            return this;
        }

        public Builder application(String application) {
            return application(Output.of(application));
        }

        public Builder asm(@Nullable Output<Boolean> asm) {
            $.asm = asm;
            return this;
        }

        public Builder asm(Boolean asm) {
            return asm(Output.of(asm));
        }

        public Builder avr(@Nullable Output<Boolean> avr) {
            $.avr = avr;
            return this;
        }

        public Builder avr(Boolean avr) {
            return avr(Output.of(avr));
        }

        public Builder cache(@Nullable Output<Boolean> cache) {
            $.cache = cache;
            return this;
        }

        public Builder cache(Boolean cache) {
            return cache(Output.of(cache));
        }

        public Builder carp(@Nullable Output<Boolean> carp) {
            $.carp = carp;
            return this;
        }

        public Builder carp(Boolean carp) {
            return carp(Output.of(carp));
        }

        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        public Builder category(String category) {
            return category(Output.of(category));
        }

        public Builder classify(@Nullable Output<Boolean> classify) {
            $.classify = classify;
            return this;
        }

        public Builder classify(Boolean classify) {
            return classify(Output.of(classify));
        }

        public Builder clonePool(@Nullable Output<String> clonePool) {
            $.clonePool = clonePool;
            return this;
        }

        public Builder clonePool(String clonePool) {
            return clonePool(Output.of(clonePool));
        }

        public Builder code(@Nullable Output<Integer> code) {
            $.code = code;
            return this;
        }

        public Builder code(Integer code) {
            return code(Output.of(code));
        }

        public Builder compress(@Nullable Output<Boolean> compress) {
            $.compress = compress;
            return this;
        }

        public Builder compress(Boolean compress) {
            return compress(Output.of(compress));
        }

        /**
         * @param connection This action is set to `true` by default, it needs to be explicitly set to `false` for actions it conflicts with.
         * 
         * @return builder
         * 
         */
        public Builder connection(@Nullable Output<Boolean> connection) {
            $.connection = connection;
            return this;
        }

        /**
         * @param connection This action is set to `true` by default, it needs to be explicitly set to `false` for actions it conflicts with.
         * 
         * @return builder
         * 
         */
        public Builder connection(Boolean connection) {
            return connection(Output.of(connection));
        }

        public Builder content(@Nullable Output<String> content) {
            $.content = content;
            return this;
        }

        public Builder content(String content) {
            return content(Output.of(content));
        }

        public Builder cookieHash(@Nullable Output<Boolean> cookieHash) {
            $.cookieHash = cookieHash;
            return this;
        }

        public Builder cookieHash(Boolean cookieHash) {
            return cookieHash(Output.of(cookieHash));
        }

        public Builder cookieInsert(@Nullable Output<Boolean> cookieInsert) {
            $.cookieInsert = cookieInsert;
            return this;
        }

        public Builder cookieInsert(Boolean cookieInsert) {
            return cookieInsert(Output.of(cookieInsert));
        }

        public Builder cookiePassive(@Nullable Output<Boolean> cookiePassive) {
            $.cookiePassive = cookiePassive;
            return this;
        }

        public Builder cookiePassive(Boolean cookiePassive) {
            return cookiePassive(Output.of(cookiePassive));
        }

        public Builder cookieRewrite(@Nullable Output<Boolean> cookieRewrite) {
            $.cookieRewrite = cookieRewrite;
            return this;
        }

        public Builder cookieRewrite(Boolean cookieRewrite) {
            return cookieRewrite(Output.of(cookieRewrite));
        }

        public Builder decompress(@Nullable Output<Boolean> decompress) {
            $.decompress = decompress;
            return this;
        }

        public Builder decompress(Boolean decompress) {
            return decompress(Output.of(decompress));
        }

        public Builder defer(@Nullable Output<Boolean> defer) {
            $.defer = defer;
            return this;
        }

        public Builder defer(Boolean defer) {
            return defer(Output.of(defer));
        }

        public Builder destinationAddress(@Nullable Output<Boolean> destinationAddress) {
            $.destinationAddress = destinationAddress;
            return this;
        }

        public Builder destinationAddress(Boolean destinationAddress) {
            return destinationAddress(Output.of(destinationAddress));
        }

        public Builder disable(@Nullable Output<Boolean> disable) {
            $.disable = disable;
            return this;
        }

        public Builder disable(Boolean disable) {
            return disable(Output.of(disable));
        }

        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        public Builder enable(@Nullable Output<Boolean> enable) {
            $.enable = enable;
            return this;
        }

        public Builder enable(Boolean enable) {
            return enable(Output.of(enable));
        }

        public Builder expiry(@Nullable Output<String> expiry) {
            $.expiry = expiry;
            return this;
        }

        public Builder expiry(String expiry) {
            return expiry(Output.of(expiry));
        }

        public Builder expirySecs(@Nullable Output<Integer> expirySecs) {
            $.expirySecs = expirySecs;
            return this;
        }

        public Builder expirySecs(Integer expirySecs) {
            return expirySecs(Output.of(expirySecs));
        }

        public Builder expression(@Nullable Output<String> expression) {
            $.expression = expression;
            return this;
        }

        public Builder expression(String expression) {
            return expression(Output.of(expression));
        }

        public Builder extension(@Nullable Output<String> extension) {
            $.extension = extension;
            return this;
        }

        public Builder extension(String extension) {
            return extension(Output.of(extension));
        }

        public Builder facility(@Nullable Output<String> facility) {
            $.facility = facility;
            return this;
        }

        public Builder facility(String facility) {
            return facility(Output.of(facility));
        }

        /**
         * @param forward This action will affect forwarding.
         * 
         * @return builder
         * 
         */
        public Builder forward(@Nullable Output<Boolean> forward) {
            $.forward = forward;
            return this;
        }

        /**
         * @param forward This action will affect forwarding.
         * 
         * @return builder
         * 
         */
        public Builder forward(Boolean forward) {
            return forward(Output.of(forward));
        }

        public Builder fromProfile(@Nullable Output<String> fromProfile) {
            $.fromProfile = fromProfile;
            return this;
        }

        public Builder fromProfile(String fromProfile) {
            return fromProfile(Output.of(fromProfile));
        }

        public Builder hash(@Nullable Output<Boolean> hash) {
            $.hash = hash;
            return this;
        }

        public Builder hash(Boolean hash) {
            return hash(Output.of(hash));
        }

        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        public Builder host(String host) {
            return host(Output.of(host));
        }

        public Builder http(@Nullable Output<Boolean> http) {
            $.http = http;
            return this;
        }

        public Builder http(Boolean http) {
            return http(Output.of(http));
        }

        public Builder httpBasicAuth(@Nullable Output<Boolean> httpBasicAuth) {
            $.httpBasicAuth = httpBasicAuth;
            return this;
        }

        public Builder httpBasicAuth(Boolean httpBasicAuth) {
            return httpBasicAuth(Output.of(httpBasicAuth));
        }

        public Builder httpCookie(@Nullable Output<Boolean> httpCookie) {
            $.httpCookie = httpCookie;
            return this;
        }

        public Builder httpCookie(Boolean httpCookie) {
            return httpCookie(Output.of(httpCookie));
        }

        public Builder httpHeader(@Nullable Output<Boolean> httpHeader) {
            $.httpHeader = httpHeader;
            return this;
        }

        public Builder httpHeader(Boolean httpHeader) {
            return httpHeader(Output.of(httpHeader));
        }

        public Builder httpHost(@Nullable Output<Boolean> httpHost) {
            $.httpHost = httpHost;
            return this;
        }

        public Builder httpHost(Boolean httpHost) {
            return httpHost(Output.of(httpHost));
        }

        public Builder httpReferer(@Nullable Output<Boolean> httpReferer) {
            $.httpReferer = httpReferer;
            return this;
        }

        public Builder httpReferer(Boolean httpReferer) {
            return httpReferer(Output.of(httpReferer));
        }

        public Builder httpReply(@Nullable Output<Boolean> httpReply) {
            $.httpReply = httpReply;
            return this;
        }

        public Builder httpReply(Boolean httpReply) {
            return httpReply(Output.of(httpReply));
        }

        public Builder httpSetCookie(@Nullable Output<Boolean> httpSetCookie) {
            $.httpSetCookie = httpSetCookie;
            return this;
        }

        public Builder httpSetCookie(Boolean httpSetCookie) {
            return httpSetCookie(Output.of(httpSetCookie));
        }

        public Builder httpUri(@Nullable Output<Boolean> httpUri) {
            $.httpUri = httpUri;
            return this;
        }

        public Builder httpUri(Boolean httpUri) {
            return httpUri(Output.of(httpUri));
        }

        public Builder ifile(@Nullable Output<String> ifile) {
            $.ifile = ifile;
            return this;
        }

        public Builder ifile(String ifile) {
            return ifile(Output.of(ifile));
        }

        public Builder insert(@Nullable Output<Boolean> insert) {
            $.insert = insert;
            return this;
        }

        public Builder insert(Boolean insert) {
            return insert(Output.of(insert));
        }

        public Builder internalVirtual(@Nullable Output<String> internalVirtual) {
            $.internalVirtual = internalVirtual;
            return this;
        }

        public Builder internalVirtual(String internalVirtual) {
            return internalVirtual(Output.of(internalVirtual));
        }

        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        public Builder key(String key) {
            return key(Output.of(key));
        }

        public Builder l7dos(@Nullable Output<Boolean> l7dos) {
            $.l7dos = l7dos;
            return this;
        }

        public Builder l7dos(Boolean l7dos) {
            return l7dos(Output.of(l7dos));
        }

        public Builder length(@Nullable Output<Integer> length) {
            $.length = length;
            return this;
        }

        public Builder length(Integer length) {
            return length(Output.of(length));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder log(@Nullable Output<Boolean> log) {
            $.log = log;
            return this;
        }

        public Builder log(Boolean log) {
            return log(Output.of(log));
        }

        public Builder ltmPolicy(@Nullable Output<Boolean> ltmPolicy) {
            $.ltmPolicy = ltmPolicy;
            return this;
        }

        public Builder ltmPolicy(Boolean ltmPolicy) {
            return ltmPolicy(Output.of(ltmPolicy));
        }

        public Builder member(@Nullable Output<String> member) {
            $.member = member;
            return this;
        }

        public Builder member(String member) {
            return member(Output.of(member));
        }

        public Builder message(@Nullable Output<String> message) {
            $.message = message;
            return this;
        }

        public Builder message(String message) {
            return message(Output.of(message));
        }

        public Builder netmask(@Nullable Output<String> netmask) {
            $.netmask = netmask;
            return this;
        }

        public Builder netmask(String netmask) {
            return netmask(Output.of(netmask));
        }

        public Builder nexthop(@Nullable Output<String> nexthop) {
            $.nexthop = nexthop;
            return this;
        }

        public Builder nexthop(String nexthop) {
            return nexthop(Output.of(nexthop));
        }

        public Builder node(@Nullable Output<String> node) {
            $.node = node;
            return this;
        }

        public Builder node(String node) {
            return node(Output.of(node));
        }

        public Builder offset(@Nullable Output<Integer> offset) {
            $.offset = offset;
            return this;
        }

        public Builder offset(Integer offset) {
            return offset(Output.of(offset));
        }

        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        public Builder path(String path) {
            return path(Output.of(path));
        }

        public Builder pem(@Nullable Output<Boolean> pem) {
            $.pem = pem;
            return this;
        }

        public Builder pem(Boolean pem) {
            return pem(Output.of(pem));
        }

        public Builder persist(@Nullable Output<Boolean> persist) {
            $.persist = persist;
            return this;
        }

        public Builder persist(Boolean persist) {
            return persist(Output.of(persist));
        }

        public Builder pin(@Nullable Output<Boolean> pin) {
            $.pin = pin;
            return this;
        }

        public Builder pin(Boolean pin) {
            return pin(Output.of(pin));
        }

        public Builder policy(@Nullable Output<String> policy) {
            $.policy = policy;
            return this;
        }

        public Builder policy(String policy) {
            return policy(Output.of(policy));
        }

        /**
         * @param pool This action will direct the stream to this pool.
         * 
         * @return builder
         * 
         */
        public Builder pool(@Nullable Output<String> pool) {
            $.pool = pool;
            return this;
        }

        /**
         * @param pool This action will direct the stream to this pool.
         * 
         * @return builder
         * 
         */
        public Builder pool(String pool) {
            return pool(Output.of(pool));
        }

        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        public Builder priority(@Nullable Output<String> priority) {
            $.priority = priority;
            return this;
        }

        public Builder priority(String priority) {
            return priority(Output.of(priority));
        }

        public Builder profile(@Nullable Output<String> profile) {
            $.profile = profile;
            return this;
        }

        public Builder profile(String profile) {
            return profile(Output.of(profile));
        }

        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        public Builder queryString(@Nullable Output<String> queryString) {
            $.queryString = queryString;
            return this;
        }

        public Builder queryString(String queryString) {
            return queryString(Output.of(queryString));
        }

        public Builder rateclass(@Nullable Output<String> rateclass) {
            $.rateclass = rateclass;
            return this;
        }

        public Builder rateclass(String rateclass) {
            return rateclass(Output.of(rateclass));
        }

        public Builder redirect(@Nullable Output<Boolean> redirect) {
            $.redirect = redirect;
            return this;
        }

        public Builder redirect(Boolean redirect) {
            return redirect(Output.of(redirect));
        }

        public Builder remove(@Nullable Output<Boolean> remove) {
            $.remove = remove;
            return this;
        }

        public Builder remove(Boolean remove) {
            return remove(Output.of(remove));
        }

        public Builder replace(@Nullable Output<Boolean> replace) {
            $.replace = replace;
            return this;
        }

        public Builder replace(Boolean replace) {
            return replace(Output.of(replace));
        }

        public Builder request(@Nullable Output<Boolean> request) {
            $.request = request;
            return this;
        }

        public Builder request(Boolean request) {
            return request(Output.of(request));
        }

        public Builder requestAdapt(@Nullable Output<Boolean> requestAdapt) {
            $.requestAdapt = requestAdapt;
            return this;
        }

        public Builder requestAdapt(Boolean requestAdapt) {
            return requestAdapt(Output.of(requestAdapt));
        }

        public Builder reset(@Nullable Output<Boolean> reset) {
            $.reset = reset;
            return this;
        }

        public Builder reset(Boolean reset) {
            return reset(Output.of(reset));
        }

        public Builder response(@Nullable Output<Boolean> response) {
            $.response = response;
            return this;
        }

        public Builder response(Boolean response) {
            return response(Output.of(response));
        }

        public Builder responseAdapt(@Nullable Output<Boolean> responseAdapt) {
            $.responseAdapt = responseAdapt;
            return this;
        }

        public Builder responseAdapt(Boolean responseAdapt) {
            return responseAdapt(Output.of(responseAdapt));
        }

        public Builder scheme(@Nullable Output<String> scheme) {
            $.scheme = scheme;
            return this;
        }

        public Builder scheme(String scheme) {
            return scheme(Output.of(scheme));
        }

        public Builder script(@Nullable Output<String> script) {
            $.script = script;
            return this;
        }

        public Builder script(String script) {
            return script(Output.of(script));
        }

        public Builder select(@Nullable Output<Boolean> select) {
            $.select = select;
            return this;
        }

        public Builder select(Boolean select) {
            return select(Output.of(select));
        }

        public Builder serverSsl(@Nullable Output<Boolean> serverSsl) {
            $.serverSsl = serverSsl;
            return this;
        }

        public Builder serverSsl(Boolean serverSsl) {
            return serverSsl(Output.of(serverSsl));
        }

        public Builder setVariable(@Nullable Output<Boolean> setVariable) {
            $.setVariable = setVariable;
            return this;
        }

        public Builder setVariable(Boolean setVariable) {
            return setVariable(Output.of(setVariable));
        }

        public Builder shutdown(@Nullable Output<Boolean> shutdown) {
            $.shutdown = shutdown;
            return this;
        }

        public Builder shutdown(Boolean shutdown) {
            return shutdown(Output.of(shutdown));
        }

        public Builder snat(@Nullable Output<String> snat) {
            $.snat = snat;
            return this;
        }

        public Builder snat(String snat) {
            return snat(Output.of(snat));
        }

        public Builder snatpool(@Nullable Output<String> snatpool) {
            $.snatpool = snatpool;
            return this;
        }

        public Builder snatpool(String snatpool) {
            return snatpool(Output.of(snatpool));
        }

        public Builder sourceAddress(@Nullable Output<Boolean> sourceAddress) {
            $.sourceAddress = sourceAddress;
            return this;
        }

        public Builder sourceAddress(Boolean sourceAddress) {
            return sourceAddress(Output.of(sourceAddress));
        }

        public Builder sslClientHello(@Nullable Output<Boolean> sslClientHello) {
            $.sslClientHello = sslClientHello;
            return this;
        }

        public Builder sslClientHello(Boolean sslClientHello) {
            return sslClientHello(Output.of(sslClientHello));
        }

        public Builder sslServerHandshake(@Nullable Output<Boolean> sslServerHandshake) {
            $.sslServerHandshake = sslServerHandshake;
            return this;
        }

        public Builder sslServerHandshake(Boolean sslServerHandshake) {
            return sslServerHandshake(Output.of(sslServerHandshake));
        }

        public Builder sslServerHello(@Nullable Output<Boolean> sslServerHello) {
            $.sslServerHello = sslServerHello;
            return this;
        }

        public Builder sslServerHello(Boolean sslServerHello) {
            return sslServerHello(Output.of(sslServerHello));
        }

        public Builder sslSessionId(@Nullable Output<Boolean> sslSessionId) {
            $.sslSessionId = sslSessionId;
            return this;
        }

        public Builder sslSessionId(Boolean sslSessionId) {
            return sslSessionId(Output.of(sslSessionId));
        }

        public Builder status(@Nullable Output<Integer> status) {
            $.status = status;
            return this;
        }

        public Builder status(Integer status) {
            return status(Output.of(status));
        }

        public Builder tcl(@Nullable Output<Boolean> tcl) {
            $.tcl = tcl;
            return this;
        }

        public Builder tcl(Boolean tcl) {
            return tcl(Output.of(tcl));
        }

        public Builder tcpNagle(@Nullable Output<Boolean> tcpNagle) {
            $.tcpNagle = tcpNagle;
            return this;
        }

        public Builder tcpNagle(Boolean tcpNagle) {
            return tcpNagle(Output.of(tcpNagle));
        }

        public Builder text(@Nullable Output<String> text) {
            $.text = text;
            return this;
        }

        public Builder text(String text) {
            return text(Output.of(text));
        }

        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        public Builder tmName(@Nullable Output<String> tmName) {
            $.tmName = tmName;
            return this;
        }

        public Builder tmName(String tmName) {
            return tmName(Output.of(tmName));
        }

        public Builder uie(@Nullable Output<Boolean> uie) {
            $.uie = uie;
            return this;
        }

        public Builder uie(Boolean uie) {
            return uie(Output.of(uie));
        }

        public Builder universal(@Nullable Output<Boolean> universal) {
            $.universal = universal;
            return this;
        }

        public Builder universal(Boolean universal) {
            return universal(Output.of(universal));
        }

        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        public Builder value(String value) {
            return value(Output.of(value));
        }

        public Builder virtual(@Nullable Output<String> virtual) {
            $.virtual = virtual;
            return this;
        }

        public Builder virtual(String virtual) {
            return virtual(Output.of(virtual));
        }

        public Builder vlan(@Nullable Output<String> vlan) {
            $.vlan = vlan;
            return this;
        }

        public Builder vlan(String vlan) {
            return vlan(Output.of(vlan));
        }

        public Builder vlanId(@Nullable Output<Integer> vlanId) {
            $.vlanId = vlanId;
            return this;
        }

        public Builder vlanId(Integer vlanId) {
            return vlanId(Output.of(vlanId));
        }

        public Builder wam(@Nullable Output<Boolean> wam) {
            $.wam = wam;
            return this;
        }

        public Builder wam(Boolean wam) {
            return wam(Output.of(wam));
        }

        public Builder write(@Nullable Output<Boolean> write) {
            $.write = write;
            return this;
        }

        public Builder write(Boolean write) {
            return write(Output.of(write));
        }

        public PolicyRuleActionArgs build() {
            return $;
        }
    }

}
