// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.f5bigip.ltm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProfileRewriteUriRulesServerArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProfileRewriteUriRulesServerArgs Empty = new ProfileRewriteUriRulesServerArgs();

    /**
     * Host part of the uri, e.g. `www.foo.com`.
     * 
     */
    @Import(name="host", required=true)
    private Output<String> host;

    /**
     * @return Host part of the uri, e.g. `www.foo.com`.
     * 
     */
    public Output<String> host() {
        return this.host;
    }

    /**
     * Path part of the uri, must always end with `/`. Default value is: `/`
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    /**
     * @return Path part of the uri, must always end with `/`. Default value is: `/`
     * 
     */
    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Port part of the uri. Default value is: `none`
     * 
     */
    @Import(name="port")
    private @Nullable Output<String> port;

    /**
     * @return Port part of the uri. Default value is: `none`
     * 
     */
    public Optional<Output<String>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Scheme part of the uri, e.g. `https`, `ftp`.
     * 
     */
    @Import(name="scheme", required=true)
    private Output<String> scheme;

    /**
     * @return Scheme part of the uri, e.g. `https`, `ftp`.
     * 
     */
    public Output<String> scheme() {
        return this.scheme;
    }

    private ProfileRewriteUriRulesServerArgs() {}

    private ProfileRewriteUriRulesServerArgs(ProfileRewriteUriRulesServerArgs $) {
        this.host = $.host;
        this.path = $.path;
        this.port = $.port;
        this.scheme = $.scheme;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProfileRewriteUriRulesServerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProfileRewriteUriRulesServerArgs $;

        public Builder() {
            $ = new ProfileRewriteUriRulesServerArgs();
        }

        public Builder(ProfileRewriteUriRulesServerArgs defaults) {
            $ = new ProfileRewriteUriRulesServerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param host Host part of the uri, e.g. `www.foo.com`.
         * 
         * @return builder
         * 
         */
        public Builder host(Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host Host part of the uri, e.g. `www.foo.com`.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param path Path part of the uri, must always end with `/`. Default value is: `/`
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Path part of the uri, must always end with `/`. Default value is: `/`
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param port Port part of the uri. Default value is: `none`
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<String> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Port part of the uri. Default value is: `none`
         * 
         * @return builder
         * 
         */
        public Builder port(String port) {
            return port(Output.of(port));
        }

        /**
         * @param scheme Scheme part of the uri, e.g. `https`, `ftp`.
         * 
         * @return builder
         * 
         */
        public Builder scheme(Output<String> scheme) {
            $.scheme = scheme;
            return this;
        }

        /**
         * @param scheme Scheme part of the uri, e.g. `https`, `ftp`.
         * 
         * @return builder
         * 
         */
        public Builder scheme(String scheme) {
            return scheme(Output.of(scheme));
        }

        public ProfileRewriteUriRulesServerArgs build() {
            if ($.host == null) {
                throw new MissingRequiredPropertyException("ProfileRewriteUriRulesServerArgs", "host");
            }
            if ($.scheme == null) {
                throw new MissingRequiredPropertyException("ProfileRewriteUriRulesServerArgs", "scheme");
            }
            return $;
        }
    }

}
