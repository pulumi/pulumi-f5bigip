// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./as3";
export * from "./bigIqAs3";
export * from "./command";
export * from "./commonLicenseManageBigIq";
export * from "./do";
export * from "./eventServiceDiscovery";
export * from "./fastApplication";
export * from "./fastTemplate";
export * from "./ipsecPolicy";
export * from "./ipsecProfile";
export * from "./netIkePeer";
export * from "./netTunnel";
export * from "./provider";
export * from "./trafficSelector";

// Export sub-modules:
import * as cm from "./cm";
import * as config from "./config";
import * as ltm from "./ltm";
import * as net from "./net";
import * as ssl from "./ssl";
import * as sys from "./sys";
import * as types from "./types";

export {
    cm,
    config,
    ltm,
    net,
    ssl,
    sys,
    types,
};

// Import resources to register:
import { As3 } from "./as3";
import { BigIqAs3 } from "./bigIqAs3";
import { Command } from "./command";
import { CommonLicenseManageBigIq } from "./commonLicenseManageBigIq";
import { Do } from "./do";
import { EventServiceDiscovery } from "./eventServiceDiscovery";
import { FastApplication } from "./fastApplication";
import { FastTemplate } from "./fastTemplate";
import { IpsecPolicy } from "./ipsecPolicy";
import { IpsecProfile } from "./ipsecProfile";
import { NetIkePeer } from "./netIkePeer";
import { NetTunnel } from "./netTunnel";
import { TrafficSelector } from "./trafficSelector";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "f5bigip:index/as3:As3":
                return new As3(name, <any>undefined, { urn })
            case "f5bigip:index/bigIqAs3:BigIqAs3":
                return new BigIqAs3(name, <any>undefined, { urn })
            case "f5bigip:index/command:Command":
                return new Command(name, <any>undefined, { urn })
            case "f5bigip:index/commonLicenseManageBigIq:CommonLicenseManageBigIq":
                return new CommonLicenseManageBigIq(name, <any>undefined, { urn })
            case "f5bigip:index/do:Do":
                return new Do(name, <any>undefined, { urn })
            case "f5bigip:index/eventServiceDiscovery:EventServiceDiscovery":
                return new EventServiceDiscovery(name, <any>undefined, { urn })
            case "f5bigip:index/fastApplication:FastApplication":
                return new FastApplication(name, <any>undefined, { urn })
            case "f5bigip:index/fastTemplate:FastTemplate":
                return new FastTemplate(name, <any>undefined, { urn })
            case "f5bigip:index/ipsecPolicy:IpsecPolicy":
                return new IpsecPolicy(name, <any>undefined, { urn })
            case "f5bigip:index/ipsecProfile:IpsecProfile":
                return new IpsecProfile(name, <any>undefined, { urn })
            case "f5bigip:index/netIkePeer:NetIkePeer":
                return new NetIkePeer(name, <any>undefined, { urn })
            case "f5bigip:index/netTunnel:NetTunnel":
                return new NetTunnel(name, <any>undefined, { urn })
            case "f5bigip:index/trafficSelector:TrafficSelector":
                return new TrafficSelector(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("f5bigip", "index/as3", _module)
pulumi.runtime.registerResourceModule("f5bigip", "index/bigIqAs3", _module)
pulumi.runtime.registerResourceModule("f5bigip", "index/command", _module)
pulumi.runtime.registerResourceModule("f5bigip", "index/commonLicenseManageBigIq", _module)
pulumi.runtime.registerResourceModule("f5bigip", "index/do", _module)
pulumi.runtime.registerResourceModule("f5bigip", "index/eventServiceDiscovery", _module)
pulumi.runtime.registerResourceModule("f5bigip", "index/fastApplication", _module)
pulumi.runtime.registerResourceModule("f5bigip", "index/fastTemplate", _module)
pulumi.runtime.registerResourceModule("f5bigip", "index/ipsecPolicy", _module)
pulumi.runtime.registerResourceModule("f5bigip", "index/ipsecProfile", _module)
pulumi.runtime.registerResourceModule("f5bigip", "index/netIkePeer", _module)
pulumi.runtime.registerResourceModule("f5bigip", "index/netTunnel", _module)
pulumi.runtime.registerResourceModule("f5bigip", "index/trafficSelector", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("f5bigip", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:f5bigip") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
