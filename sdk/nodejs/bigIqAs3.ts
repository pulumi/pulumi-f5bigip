// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `f5bigip.BigIqAs3` provides details about bigiq as3 resource
 *
 * This resource is helpful to configure as3 declarative JSON on BIG-IP through BIG-IQ.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as f5bigip from "@pulumi/f5bigip";
 * import * as fs from "fs";
 *
 * // Example Usage for json file
 * const exampletask = new f5bigip.BigIqAs3("exampletask", {
 *     as3Json: fs.readFileSync("bigiq_example.json", "utf-8"),
 *     bigiqAddress: "xx.xx.xxx.xx",
 *     bigiqPassword: "xxxxxxxxx",
 *     bigiqUser: "xxxxx",
 * });
 * ```
 */
export class BigIqAs3 extends pulumi.CustomResource {
    /**
     * Get an existing BigIqAs3 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BigIqAs3State, opts?: pulumi.CustomResourceOptions): BigIqAs3 {
        return new BigIqAs3(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'f5bigip:index/bigIqAs3:BigIqAs3';

    /**
     * Returns true if the given object is an instance of BigIqAs3.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BigIqAs3 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BigIqAs3.__pulumiType;
    }

    /**
     * Path/Filename of Declarative AS3 JSON which is a json file used with builtin ```file``` function
     */
    public readonly as3Json!: pulumi.Output<string>;
    /**
     * Address of the BIG-IQ to which your targer BIG-IP is attached
     */
    public readonly bigiqAddress!: pulumi.Output<string>;
    /**
     * Login reference for token authentication (see BIG-IQ REST docs for details)
     */
    public readonly bigiqLoginRef!: pulumi.Output<string | undefined>;
    /**
     * Password of the BIG-IQ to which your targer BIG-IP is attached
     */
    public readonly bigiqPassword!: pulumi.Output<string>;
    /**
     * The registration key pool to use
     */
    public readonly bigiqPort!: pulumi.Output<string | undefined>;
    /**
     * Enable to use an external authentication source (LDAP, TACACS, etc)
     */
    public readonly bigiqTokenAuth!: pulumi.Output<boolean | undefined>;
    /**
     * User name  of the BIG-IQ to which your targer BIG-IP is attached
     */
    public readonly bigiqUser!: pulumi.Output<string>;
    /**
     * Set True if you want to ignore metadata changes during update. By default it is set to `true`
     */
    public readonly ignoreMetadata!: pulumi.Output<boolean | undefined>;
    /**
     * Name of Tenant
     */
    public readonly tenantList!: pulumi.Output<string>;

    /**
     * Create a BigIqAs3 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BigIqAs3Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BigIqAs3Args | BigIqAs3State, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BigIqAs3State | undefined;
            inputs["as3Json"] = state ? state.as3Json : undefined;
            inputs["bigiqAddress"] = state ? state.bigiqAddress : undefined;
            inputs["bigiqLoginRef"] = state ? state.bigiqLoginRef : undefined;
            inputs["bigiqPassword"] = state ? state.bigiqPassword : undefined;
            inputs["bigiqPort"] = state ? state.bigiqPort : undefined;
            inputs["bigiqTokenAuth"] = state ? state.bigiqTokenAuth : undefined;
            inputs["bigiqUser"] = state ? state.bigiqUser : undefined;
            inputs["ignoreMetadata"] = state ? state.ignoreMetadata : undefined;
            inputs["tenantList"] = state ? state.tenantList : undefined;
        } else {
            const args = argsOrState as BigIqAs3Args | undefined;
            if ((!args || args.as3Json === undefined) && !opts.urn) {
                throw new Error("Missing required property 'as3Json'");
            }
            if ((!args || args.bigiqAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bigiqAddress'");
            }
            if ((!args || args.bigiqPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bigiqPassword'");
            }
            if ((!args || args.bigiqUser === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bigiqUser'");
            }
            inputs["as3Json"] = args ? args.as3Json : undefined;
            inputs["bigiqAddress"] = args ? args.bigiqAddress : undefined;
            inputs["bigiqLoginRef"] = args ? args.bigiqLoginRef : undefined;
            inputs["bigiqPassword"] = args ? args.bigiqPassword : undefined;
            inputs["bigiqPort"] = args ? args.bigiqPort : undefined;
            inputs["bigiqTokenAuth"] = args ? args.bigiqTokenAuth : undefined;
            inputs["bigiqUser"] = args ? args.bigiqUser : undefined;
            inputs["ignoreMetadata"] = args ? args.ignoreMetadata : undefined;
            inputs["tenantList"] = args ? args.tenantList : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(BigIqAs3.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BigIqAs3 resources.
 */
export interface BigIqAs3State {
    /**
     * Path/Filename of Declarative AS3 JSON which is a json file used with builtin ```file``` function
     */
    as3Json?: pulumi.Input<string>;
    /**
     * Address of the BIG-IQ to which your targer BIG-IP is attached
     */
    bigiqAddress?: pulumi.Input<string>;
    /**
     * Login reference for token authentication (see BIG-IQ REST docs for details)
     */
    bigiqLoginRef?: pulumi.Input<string>;
    /**
     * Password of the BIG-IQ to which your targer BIG-IP is attached
     */
    bigiqPassword?: pulumi.Input<string>;
    /**
     * The registration key pool to use
     */
    bigiqPort?: pulumi.Input<string>;
    /**
     * Enable to use an external authentication source (LDAP, TACACS, etc)
     */
    bigiqTokenAuth?: pulumi.Input<boolean>;
    /**
     * User name  of the BIG-IQ to which your targer BIG-IP is attached
     */
    bigiqUser?: pulumi.Input<string>;
    /**
     * Set True if you want to ignore metadata changes during update. By default it is set to `true`
     */
    ignoreMetadata?: pulumi.Input<boolean>;
    /**
     * Name of Tenant
     */
    tenantList?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BigIqAs3 resource.
 */
export interface BigIqAs3Args {
    /**
     * Path/Filename of Declarative AS3 JSON which is a json file used with builtin ```file``` function
     */
    as3Json: pulumi.Input<string>;
    /**
     * Address of the BIG-IQ to which your targer BIG-IP is attached
     */
    bigiqAddress: pulumi.Input<string>;
    /**
     * Login reference for token authentication (see BIG-IQ REST docs for details)
     */
    bigiqLoginRef?: pulumi.Input<string>;
    /**
     * Password of the BIG-IQ to which your targer BIG-IP is attached
     */
    bigiqPassword: pulumi.Input<string>;
    /**
     * The registration key pool to use
     */
    bigiqPort?: pulumi.Input<string>;
    /**
     * Enable to use an external authentication source (LDAP, TACACS, etc)
     */
    bigiqTokenAuth?: pulumi.Input<boolean>;
    /**
     * User name  of the BIG-IQ to which your targer BIG-IP is attached
     */
    bigiqUser: pulumi.Input<string>;
    /**
     * Set True if you want to ignore metadata changes during update. By default it is set to `true`
     */
    ignoreMetadata?: pulumi.Input<boolean>;
    /**
     * Name of Tenant
     */
    tenantList?: pulumi.Input<string>;
}
