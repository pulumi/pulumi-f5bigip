// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * `f5bigip.FastHttpsApp` This resource will create and manage FAST HTTPS applications on BIG-IP
 *
 * [FAST documentation](https://clouddocs.f5.com/products/extensions/f5-appsvcs-templates/latest/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as f5bigip from "@pulumi/f5bigip";
 *
 * const fastHttpsApp = new f5bigip.FastHttpsApp("fast_https_app", {
 *     application: "fasthttpsapp",
 *     tenant: "fasthttpstenant",
 *     virtualServer: {
 *         ip: "10.30.40.44",
 *         port: 443,
 *     },
 * });
 * ```
 */
export class FastHttpsApp extends pulumi.CustomResource {
    /**
     * Get an existing FastHttpsApp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FastHttpsAppState, opts?: pulumi.CustomResourceOptions): FastHttpsApp {
        return new FastHttpsApp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'f5bigip:index/fastHttpsApp:FastHttpsApp';

    /**
     * Returns true if the given object is an instance of FastHttpsApp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FastHttpsApp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FastHttpsApp.__pulumiType;
    }

    /**
     * Name of the FAST HTTPS application.
     */
    public readonly application!: pulumi.Output<string>;
    /**
     * `createTlsServerProfile` block takes input for FAST-Generated TLS Server Profile.
     * See TLS Server Profile below for more details.
     */
    public readonly createTlsServerProfile!: pulumi.Output<outputs.FastHttpsAppCreateTlsServerProfile | undefined>;
    /**
     * Name of an existing BIG-IP pool.
     */
    public readonly existPoolName!: pulumi.Output<string | undefined>;
    /**
     * Name of an existing BIG-IP HTTPS pool monitor. Monitors are used to determine the health of the application on each server.
     */
    public readonly existingMonitor!: pulumi.Output<string | undefined>;
    /**
     * Name of an existing BIG-IP SNAT pool.
     */
    public readonly existingSnatPool!: pulumi.Output<string | undefined>;
    /**
     * `fastCreateMonitor` block takes input for FAST-Generated Pool Monitor.
     * See Pool Monitor below for more details.
     */
    public readonly fastCreateMonitor!: pulumi.Output<outputs.FastHttpsAppFastCreateMonitor | undefined>;
    /**
     * `fastCreatePoolMembers` block takes input for FAST-Generated Pool.
     * See Pool Members below for more details.
     */
    public readonly fastCreatePoolMembers!: pulumi.Output<outputs.FastHttpsAppFastCreatePoolMember[] | undefined>;
    /**
     * List of address to be used for FAST-Generated SNAT Pool.
     */
    public readonly fastCreateSnatPoolAddresses!: pulumi.Output<string[] | undefined>;
    /**
     * A `load balancing method` is an algorithm that the BIG-IP system uses to select a pool member for processing a request. F5 recommends the Least Connections load balancing method
     */
    public readonly loadBalancingMode!: pulumi.Output<string | undefined>;
    /**
     * Slow ramp temporarily throttles the number of connections to a new pool member. The recommended value is 300 seconds
     */
    public readonly slowRampTime!: pulumi.Output<number | undefined>;
    /**
     * Name of the FAST HTTPS application tenant.
     */
    public readonly tenant!: pulumi.Output<string>;
    /**
     * Name of an existing TLS server profile.
     */
    public readonly tlsServerProfileName!: pulumi.Output<string | undefined>;
    /**
     * `virtualServer` block will provide `ip` and `port` options to be used for virtual server.
     * See virtual server below for more details.
     */
    public readonly virtualServer!: pulumi.Output<outputs.FastHttpsAppVirtualServer | undefined>;

    /**
     * Create a FastHttpsApp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FastHttpsAppArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FastHttpsAppArgs | FastHttpsAppState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FastHttpsAppState | undefined;
            resourceInputs["application"] = state ? state.application : undefined;
            resourceInputs["createTlsServerProfile"] = state ? state.createTlsServerProfile : undefined;
            resourceInputs["existPoolName"] = state ? state.existPoolName : undefined;
            resourceInputs["existingMonitor"] = state ? state.existingMonitor : undefined;
            resourceInputs["existingSnatPool"] = state ? state.existingSnatPool : undefined;
            resourceInputs["fastCreateMonitor"] = state ? state.fastCreateMonitor : undefined;
            resourceInputs["fastCreatePoolMembers"] = state ? state.fastCreatePoolMembers : undefined;
            resourceInputs["fastCreateSnatPoolAddresses"] = state ? state.fastCreateSnatPoolAddresses : undefined;
            resourceInputs["loadBalancingMode"] = state ? state.loadBalancingMode : undefined;
            resourceInputs["slowRampTime"] = state ? state.slowRampTime : undefined;
            resourceInputs["tenant"] = state ? state.tenant : undefined;
            resourceInputs["tlsServerProfileName"] = state ? state.tlsServerProfileName : undefined;
            resourceInputs["virtualServer"] = state ? state.virtualServer : undefined;
        } else {
            const args = argsOrState as FastHttpsAppArgs | undefined;
            if ((!args || args.application === undefined) && !opts.urn) {
                throw new Error("Missing required property 'application'");
            }
            if ((!args || args.tenant === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenant'");
            }
            resourceInputs["application"] = args ? args.application : undefined;
            resourceInputs["createTlsServerProfile"] = args ? args.createTlsServerProfile : undefined;
            resourceInputs["existPoolName"] = args ? args.existPoolName : undefined;
            resourceInputs["existingMonitor"] = args ? args.existingMonitor : undefined;
            resourceInputs["existingSnatPool"] = args ? args.existingSnatPool : undefined;
            resourceInputs["fastCreateMonitor"] = args ? args.fastCreateMonitor : undefined;
            resourceInputs["fastCreatePoolMembers"] = args ? args.fastCreatePoolMembers : undefined;
            resourceInputs["fastCreateSnatPoolAddresses"] = args ? args.fastCreateSnatPoolAddresses : undefined;
            resourceInputs["loadBalancingMode"] = args ? args.loadBalancingMode : undefined;
            resourceInputs["slowRampTime"] = args ? args.slowRampTime : undefined;
            resourceInputs["tenant"] = args ? args.tenant : undefined;
            resourceInputs["tlsServerProfileName"] = args ? args.tlsServerProfileName : undefined;
            resourceInputs["virtualServer"] = args ? args.virtualServer : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FastHttpsApp.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FastHttpsApp resources.
 */
export interface FastHttpsAppState {
    /**
     * Name of the FAST HTTPS application.
     */
    application?: pulumi.Input<string>;
    /**
     * `createTlsServerProfile` block takes input for FAST-Generated TLS Server Profile.
     * See TLS Server Profile below for more details.
     */
    createTlsServerProfile?: pulumi.Input<inputs.FastHttpsAppCreateTlsServerProfile>;
    /**
     * Name of an existing BIG-IP pool.
     */
    existPoolName?: pulumi.Input<string>;
    /**
     * Name of an existing BIG-IP HTTPS pool monitor. Monitors are used to determine the health of the application on each server.
     */
    existingMonitor?: pulumi.Input<string>;
    /**
     * Name of an existing BIG-IP SNAT pool.
     */
    existingSnatPool?: pulumi.Input<string>;
    /**
     * `fastCreateMonitor` block takes input for FAST-Generated Pool Monitor.
     * See Pool Monitor below for more details.
     */
    fastCreateMonitor?: pulumi.Input<inputs.FastHttpsAppFastCreateMonitor>;
    /**
     * `fastCreatePoolMembers` block takes input for FAST-Generated Pool.
     * See Pool Members below for more details.
     */
    fastCreatePoolMembers?: pulumi.Input<pulumi.Input<inputs.FastHttpsAppFastCreatePoolMember>[]>;
    /**
     * List of address to be used for FAST-Generated SNAT Pool.
     */
    fastCreateSnatPoolAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A `load balancing method` is an algorithm that the BIG-IP system uses to select a pool member for processing a request. F5 recommends the Least Connections load balancing method
     */
    loadBalancingMode?: pulumi.Input<string>;
    /**
     * Slow ramp temporarily throttles the number of connections to a new pool member. The recommended value is 300 seconds
     */
    slowRampTime?: pulumi.Input<number>;
    /**
     * Name of the FAST HTTPS application tenant.
     */
    tenant?: pulumi.Input<string>;
    /**
     * Name of an existing TLS server profile.
     */
    tlsServerProfileName?: pulumi.Input<string>;
    /**
     * `virtualServer` block will provide `ip` and `port` options to be used for virtual server.
     * See virtual server below for more details.
     */
    virtualServer?: pulumi.Input<inputs.FastHttpsAppVirtualServer>;
}

/**
 * The set of arguments for constructing a FastHttpsApp resource.
 */
export interface FastHttpsAppArgs {
    /**
     * Name of the FAST HTTPS application.
     */
    application: pulumi.Input<string>;
    /**
     * `createTlsServerProfile` block takes input for FAST-Generated TLS Server Profile.
     * See TLS Server Profile below for more details.
     */
    createTlsServerProfile?: pulumi.Input<inputs.FastHttpsAppCreateTlsServerProfile>;
    /**
     * Name of an existing BIG-IP pool.
     */
    existPoolName?: pulumi.Input<string>;
    /**
     * Name of an existing BIG-IP HTTPS pool monitor. Monitors are used to determine the health of the application on each server.
     */
    existingMonitor?: pulumi.Input<string>;
    /**
     * Name of an existing BIG-IP SNAT pool.
     */
    existingSnatPool?: pulumi.Input<string>;
    /**
     * `fastCreateMonitor` block takes input for FAST-Generated Pool Monitor.
     * See Pool Monitor below for more details.
     */
    fastCreateMonitor?: pulumi.Input<inputs.FastHttpsAppFastCreateMonitor>;
    /**
     * `fastCreatePoolMembers` block takes input for FAST-Generated Pool.
     * See Pool Members below for more details.
     */
    fastCreatePoolMembers?: pulumi.Input<pulumi.Input<inputs.FastHttpsAppFastCreatePoolMember>[]>;
    /**
     * List of address to be used for FAST-Generated SNAT Pool.
     */
    fastCreateSnatPoolAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A `load balancing method` is an algorithm that the BIG-IP system uses to select a pool member for processing a request. F5 recommends the Least Connections load balancing method
     */
    loadBalancingMode?: pulumi.Input<string>;
    /**
     * Slow ramp temporarily throttles the number of connections to a new pool member. The recommended value is 300 seconds
     */
    slowRampTime?: pulumi.Input<number>;
    /**
     * Name of the FAST HTTPS application tenant.
     */
    tenant: pulumi.Input<string>;
    /**
     * Name of an existing TLS server profile.
     */
    tlsServerProfileName?: pulumi.Input<string>;
    /**
     * `virtualServer` block will provide `ip` and `port` options to be used for virtual server.
     * See virtual server below for more details.
     */
    virtualServer?: pulumi.Input<inputs.FastHttpsAppVirtualServer>;
}
