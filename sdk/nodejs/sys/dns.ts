// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * `f5bigip.sys.Dns` Configures DNS Name server on F5 BIG-IP
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as f5bigip from "@pulumi/f5bigip";
 *
 * const dns1 = new f5bigip.sys.Dns("dns1", {
 *     description: "/Common/DNS1",
 *     nameServers: ["1.1.1.1"],
 *     searches: ["f5.com"],
 * });
 * ```
 */
export class Dns extends pulumi.CustomResource {
    /**
     * Get an existing Dns resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsState, opts?: pulumi.CustomResourceOptions): Dns {
        return new Dns(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'f5bigip:sys/dns:Dns';

    /**
     * Returns true if the given object is an instance of Dns.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Dns {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dns.__pulumiType;
    }

    /**
     * Provide description for your DNS server
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * Specifies the name servers that the system uses to validate DNS lookups, and resolve host names.
     */
    declare public readonly nameServers: pulumi.Output<string[]>;
    /**
     * Configures the number of dots needed in a name before an initial absolute query will be made.
     */
    declare public readonly numberOfDots: pulumi.Output<number>;
    /**
     * Specifies the domains that the system searches for local domain lookups, to resolve local host names.
     */
    declare public readonly searches: pulumi.Output<string[] | undefined>;

    /**
     * Create a Dns resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsArgs | DnsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["nameServers"] = state?.nameServers;
            resourceInputs["numberOfDots"] = state?.numberOfDots;
            resourceInputs["searches"] = state?.searches;
        } else {
            const args = argsOrState as DnsArgs | undefined;
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.nameServers === undefined && !opts.urn) {
                throw new Error("Missing required property 'nameServers'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["nameServers"] = args?.nameServers;
            resourceInputs["numberOfDots"] = args?.numberOfDots;
            resourceInputs["searches"] = args?.searches;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Dns.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Dns resources.
 */
export interface DnsState {
    /**
     * Provide description for your DNS server
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the name servers that the system uses to validate DNS lookups, and resolve host names.
     */
    nameServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configures the number of dots needed in a name before an initial absolute query will be made.
     */
    numberOfDots?: pulumi.Input<number>;
    /**
     * Specifies the domains that the system searches for local domain lookups, to resolve local host names.
     */
    searches?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Dns resource.
 */
export interface DnsArgs {
    /**
     * Provide description for your DNS server
     */
    description: pulumi.Input<string>;
    /**
     * Specifies the name servers that the system uses to validate DNS lookups, and resolve host names.
     */
    nameServers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configures the number of dots needed in a name before an initial absolute query will be made.
     */
    numberOfDots?: pulumi.Input<number>;
    /**
     * Specifies the domains that the system searches for local domain lookups, to resolve local host names.
     */
    searches?: pulumi.Input<pulumi.Input<string>[]>;
}
