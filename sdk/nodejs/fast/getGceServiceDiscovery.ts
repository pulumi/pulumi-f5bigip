// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Use this data source (`f5bigip.fast.getGceServiceDiscovery`) to get the GCE Service discovery config to be used for `http`/`https` app deployment in FAST.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as f5bigip from "@pulumi/f5bigip";
 *
 * const tC3 = f5bigip.fast.getGceServiceDiscovery({
 *     region: "testgceregion",
 *     tagKey: "testgcetag",
 *     tagValue: "testgcevalue",
 * });
 * ```
 */
export function getGceServiceDiscovery(args: GetGceServiceDiscoveryArgs, opts?: pulumi.InvokeOptions): Promise<GetGceServiceDiscoveryResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("f5bigip:fast/getGceServiceDiscovery:getGceServiceDiscovery", {
        "addressRealm": args.addressRealm,
        "credentialUpdate": args.credentialUpdate,
        "encodedCredentials": args.encodedCredentials,
        "minimumMonitors": args.minimumMonitors,
        "port": args.port,
        "projectId": args.projectId,
        "region": args.region,
        "tagKey": args.tagKey,
        "tagValue": args.tagValue,
        "type": args.type,
        "undetectableAction": args.undetectableAction,
        "updateInterval": args.updateInterval,
    }, opts);
}

/**
 * A collection of arguments for invoking getGceServiceDiscovery.
 */
export interface GetGceServiceDiscoveryArgs {
    /**
     * (`optional`,type `string`)Specifies whether to look for public or private IP addresses,default `private`.
     */
    addressRealm?: string;
    /**
     * (`optional`,type `bool`) Specifies whether you are updating your credentials,default `false`.
     */
    credentialUpdate?: boolean;
    /**
     * (`optional`,type `string`)Base 64 encoded service account credentials JSON.
     */
    encodedCredentials?: string;
    /**
     * (`optional`,type `string`)Member is down when fewer than minimum monitors report it healthy.
     */
    minimumMonitors?: string;
    /**
     * (`optional`,type `int`)Port to be used for AWS service discovery,default `80`.
     */
    port?: number;
    /**
     * (`optional`,type `string`)For Google Cloud Engine (GCE) only: The ID of the project in which the members are located.
     */
    projectId?: string;
    /**
     * (`Required`,type `string`) GCE region in which ADC is running.
     */
    region: string;
    /**
     * (`Required`,type `string`) The tag key associated with the node to add to this pool.
     */
    tagKey: string;
    /**
     * (`Required`,type `string`) The tag value associated with the node to add to this pool.
     */
    tagValue: string;
    type?: string;
    /**
     * (`optional`,type `string`)Action to take when node cannot be detected,default `remove`.
     */
    undetectableAction?: string;
    /**
     * (`optional`,type `string`)Update interval for service discovery.
     */
    updateInterval?: string;
}

/**
 * A collection of values returned by getGceServiceDiscovery.
 */
export interface GetGceServiceDiscoveryResult {
    readonly addressRealm?: string;
    readonly credentialUpdate?: boolean;
    readonly encodedCredentials?: string;
    /**
     * The JSON for GCE service discovery block.
     */
    readonly gceSdJson: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly minimumMonitors?: string;
    readonly port?: number;
    readonly projectId?: string;
    readonly region: string;
    readonly tagKey: string;
    readonly tagValue: string;
    readonly type?: string;
    readonly undetectableAction?: string;
    readonly updateInterval?: string;
}
/**
 * Use this data source (`f5bigip.fast.getGceServiceDiscovery`) to get the GCE Service discovery config to be used for `http`/`https` app deployment in FAST.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as f5bigip from "@pulumi/f5bigip";
 *
 * const tC3 = f5bigip.fast.getGceServiceDiscovery({
 *     region: "testgceregion",
 *     tagKey: "testgcetag",
 *     tagValue: "testgcevalue",
 * });
 * ```
 */
export function getGceServiceDiscoveryOutput(args: GetGceServiceDiscoveryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGceServiceDiscoveryResult> {
    return pulumi.output(args).apply((a: any) => getGceServiceDiscovery(a, opts))
}

/**
 * A collection of arguments for invoking getGceServiceDiscovery.
 */
export interface GetGceServiceDiscoveryOutputArgs {
    /**
     * (`optional`,type `string`)Specifies whether to look for public or private IP addresses,default `private`.
     */
    addressRealm?: pulumi.Input<string>;
    /**
     * (`optional`,type `bool`) Specifies whether you are updating your credentials,default `false`.
     */
    credentialUpdate?: pulumi.Input<boolean>;
    /**
     * (`optional`,type `string`)Base 64 encoded service account credentials JSON.
     */
    encodedCredentials?: pulumi.Input<string>;
    /**
     * (`optional`,type `string`)Member is down when fewer than minimum monitors report it healthy.
     */
    minimumMonitors?: pulumi.Input<string>;
    /**
     * (`optional`,type `int`)Port to be used for AWS service discovery,default `80`.
     */
    port?: pulumi.Input<number>;
    /**
     * (`optional`,type `string`)For Google Cloud Engine (GCE) only: The ID of the project in which the members are located.
     */
    projectId?: pulumi.Input<string>;
    /**
     * (`Required`,type `string`) GCE region in which ADC is running.
     */
    region: pulumi.Input<string>;
    /**
     * (`Required`,type `string`) The tag key associated with the node to add to this pool.
     */
    tagKey: pulumi.Input<string>;
    /**
     * (`Required`,type `string`) The tag value associated with the node to add to this pool.
     */
    tagValue: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    /**
     * (`optional`,type `string`)Action to take when node cannot be detected,default `remove`.
     */
    undetectableAction?: pulumi.Input<string>;
    /**
     * (`optional`,type `string`)Update interval for service discovery.
     */
    updateInterval?: pulumi.Input<string>;
}
