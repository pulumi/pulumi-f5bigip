// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `f5bigip.TrafficSelector` Manage IPSec Traffic Selectors on BIG-IP
 *
 * Resources should be named with their "full path". The full path is the combination of the partition + name (example: /Common/test-selector)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as f5bigip from "@pulumi/f5bigip";
 *
 * const test_selector = new f5bigip.TrafficSelector("test-selector", {
 *     name: "/Common/test-selector",
 *     destinationAddress: "3.10.11.2/32",
 *     sourceAddress: "2.10.11.12/32",
 * });
 * ```
 */
export class TrafficSelector extends pulumi.CustomResource {
    /**
     * Get an existing TrafficSelector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TrafficSelectorState, opts?: pulumi.CustomResourceOptions): TrafficSelector {
        return new TrafficSelector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'f5bigip:index/trafficSelector:TrafficSelector';

    /**
     * Returns true if the given object is an instance of TrafficSelector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TrafficSelector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrafficSelector.__pulumiType;
    }

    /**
     * Description of the traffic selector.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Specifies the host or network IP address to which the application traffic is destined.When creating a new traffic selector, this parameter is required.
     */
    public readonly destinationAddress!: pulumi.Output<string>;
    /**
     * Specifies the IP port used by the application. The default value is `All Ports (0)`
     */
    public readonly destinationPort!: pulumi.Output<number>;
    /**
     * Specifies whether the traffic selector applies to inbound or outbound traffic, or both. The default value is `Both`.
     */
    public readonly direction!: pulumi.Output<string>;
    /**
     * Specifies the network protocol to use for this traffic. The default value is `All Protocols (255)`
     */
    public readonly ipProtocol!: pulumi.Output<number>;
    /**
     * Specifies the IPsec policy that tells the BIG-IP system how to handle the packets.When creating a new traffic selector, if this parameter is not specified, the default is `default-ipsec-policy`.
     */
    public readonly ipsecPolicy!: pulumi.Output<string>;
    /**
     * Name of the IPSec traffic-selector,it should be "full path".The full path is the combination of the partition + name of the IPSec traffic-selector.(For example `/Common/test-selector`)
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the order in which traffic is matched, if traffic can be matched to multiple traffic selectors.Traffic is matched to the traffic selector with the highest priority (lowest order number).
     * When creating a new traffic selector, if this parameter is not specified, the default is `last`
     */
    public readonly order!: pulumi.Output<number>;
    /**
     * Specifies the host or network IP address from which the application traffic originates.When creating a new traffic selector, this parameter is required.
     */
    public readonly sourceAddress!: pulumi.Output<string>;
    /**
     * Specifies the IP port used by the application. The default value is `All Ports (0)`.
     */
    public readonly sourcePort!: pulumi.Output<number>;

    /**
     * Create a TrafficSelector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TrafficSelectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TrafficSelectorArgs | TrafficSelectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TrafficSelectorState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationAddress"] = state ? state.destinationAddress : undefined;
            resourceInputs["destinationPort"] = state ? state.destinationPort : undefined;
            resourceInputs["direction"] = state ? state.direction : undefined;
            resourceInputs["ipProtocol"] = state ? state.ipProtocol : undefined;
            resourceInputs["ipsecPolicy"] = state ? state.ipsecPolicy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["order"] = state ? state.order : undefined;
            resourceInputs["sourceAddress"] = state ? state.sourceAddress : undefined;
            resourceInputs["sourcePort"] = state ? state.sourcePort : undefined;
        } else {
            const args = argsOrState as TrafficSelectorArgs | undefined;
            if ((!args || args.destinationAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationAddress'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.sourceAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceAddress'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationAddress"] = args ? args.destinationAddress : undefined;
            resourceInputs["destinationPort"] = args ? args.destinationPort : undefined;
            resourceInputs["direction"] = args ? args.direction : undefined;
            resourceInputs["ipProtocol"] = args ? args.ipProtocol : undefined;
            resourceInputs["ipsecPolicy"] = args ? args.ipsecPolicy : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["order"] = args ? args.order : undefined;
            resourceInputs["sourceAddress"] = args ? args.sourceAddress : undefined;
            resourceInputs["sourcePort"] = args ? args.sourcePort : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TrafficSelector.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TrafficSelector resources.
 */
export interface TrafficSelectorState {
    /**
     * Description of the traffic selector.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the host or network IP address to which the application traffic is destined.When creating a new traffic selector, this parameter is required.
     */
    destinationAddress?: pulumi.Input<string>;
    /**
     * Specifies the IP port used by the application. The default value is `All Ports (0)`
     */
    destinationPort?: pulumi.Input<number>;
    /**
     * Specifies whether the traffic selector applies to inbound or outbound traffic, or both. The default value is `Both`.
     */
    direction?: pulumi.Input<string>;
    /**
     * Specifies the network protocol to use for this traffic. The default value is `All Protocols (255)`
     */
    ipProtocol?: pulumi.Input<number>;
    /**
     * Specifies the IPsec policy that tells the BIG-IP system how to handle the packets.When creating a new traffic selector, if this parameter is not specified, the default is `default-ipsec-policy`.
     */
    ipsecPolicy?: pulumi.Input<string>;
    /**
     * Name of the IPSec traffic-selector,it should be "full path".The full path is the combination of the partition + name of the IPSec traffic-selector.(For example `/Common/test-selector`)
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the order in which traffic is matched, if traffic can be matched to multiple traffic selectors.Traffic is matched to the traffic selector with the highest priority (lowest order number).
     * When creating a new traffic selector, if this parameter is not specified, the default is `last`
     */
    order?: pulumi.Input<number>;
    /**
     * Specifies the host or network IP address from which the application traffic originates.When creating a new traffic selector, this parameter is required.
     */
    sourceAddress?: pulumi.Input<string>;
    /**
     * Specifies the IP port used by the application. The default value is `All Ports (0)`.
     */
    sourcePort?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a TrafficSelector resource.
 */
export interface TrafficSelectorArgs {
    /**
     * Description of the traffic selector.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the host or network IP address to which the application traffic is destined.When creating a new traffic selector, this parameter is required.
     */
    destinationAddress: pulumi.Input<string>;
    /**
     * Specifies the IP port used by the application. The default value is `All Ports (0)`
     */
    destinationPort?: pulumi.Input<number>;
    /**
     * Specifies whether the traffic selector applies to inbound or outbound traffic, or both. The default value is `Both`.
     */
    direction?: pulumi.Input<string>;
    /**
     * Specifies the network protocol to use for this traffic. The default value is `All Protocols (255)`
     */
    ipProtocol?: pulumi.Input<number>;
    /**
     * Specifies the IPsec policy that tells the BIG-IP system how to handle the packets.When creating a new traffic selector, if this parameter is not specified, the default is `default-ipsec-policy`.
     */
    ipsecPolicy?: pulumi.Input<string>;
    /**
     * Name of the IPSec traffic-selector,it should be "full path".The full path is the combination of the partition + name of the IPSec traffic-selector.(For example `/Common/test-selector`)
     */
    name: pulumi.Input<string>;
    /**
     * Specifies the order in which traffic is matched, if traffic can be matched to multiple traffic selectors.Traffic is matched to the traffic selector with the highest priority (lowest order number).
     * When creating a new traffic selector, if this parameter is not specified, the default is `last`
     */
    order?: pulumi.Input<number>;
    /**
     * Specifies the host or network IP address from which the application traffic originates.When creating a new traffic selector, this parameter is required.
     */
    sourceAddress: pulumi.Input<string>;
    /**
     * Specifies the IP port used by the application. The default value is `All Ports (0)`.
     */
    sourcePort?: pulumi.Input<number>;
}
