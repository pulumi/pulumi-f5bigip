// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `f5bigip.CommonLicenseManageBigIq` This Resource is used for BIGIP/Provider License Management from BIGIQ
 */
export class CommonLicenseManageBigIq extends pulumi.CustomResource {
    /**
     * Get an existing CommonLicenseManageBigIq resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CommonLicenseManageBigIqState, opts?: pulumi.CustomResourceOptions): CommonLicenseManageBigIq {
        return new CommonLicenseManageBigIq(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'f5bigip:index/commonLicenseManageBigIq:CommonLicenseManageBigIq';

    /**
     * Returns true if the given object is an instance of CommonLicenseManageBigIq.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CommonLicenseManageBigIq {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CommonLicenseManageBigIq.__pulumiType;
    }

    /**
     * The type of assignment, which is determined by whether the BIG-IP is unreachable, unmanaged, or managed by BIG-IQ. Possible values: “UNREACHABLE”, “UNMANAGED”, or “MANAGED”.
     */
    declare public readonly assignmentType: pulumi.Output<string>;
    /**
     * BIGIQ License Manager IP Address, variable type `string`
     */
    declare public readonly bigiqAddress: pulumi.Output<string>;
    /**
     * BIGIQ Login reference for token authentication
     */
    declare public readonly bigiqLoginRef: pulumi.Output<string | undefined>;
    /**
     * BIGIQ License Manager password.  variable type `string`
     */
    declare public readonly bigiqPassword: pulumi.Output<string>;
    /**
     * type `int`, BIGIQ License Manager Port number, specify if port is other than `443`
     */
    declare public readonly bigiqPort: pulumi.Output<string | undefined>;
    /**
     * type `bool`, if set to `true` enables Token based Authentication,default is `false`
     */
    declare public readonly bigiqTokenAuth: pulumi.Output<boolean | undefined>;
    /**
     * BIGIQ License Manager username, variable type `string`
     */
    declare public readonly bigiqUser: pulumi.Output<string>;
    /**
     * Status of Licence Assignment
     */
    declare public readonly deviceLicenseStatus: pulumi.Output<string>;
    /**
     * Identifies the platform running the BIG-IP VE. Possible values: “aws”, “azure”, “gce”, “vmware”, “hyperv”, “kvm”, or “xen”. type `string`
     */
    declare public readonly hypervisor: pulumi.Output<string | undefined>;
    /**
     * License Assignment is done with specified `key`, supported only with RegKeypool type License assignement. type `string`
     */
    declare public readonly key: pulumi.Output<string | undefined>;
    /**
     * A name given to the license pool. type `string`
     */
    declare public readonly licensePoolname: pulumi.Output<string>;
    /**
     * MAC address of the BIG-IP. type `string`
     */
    declare public readonly macAddress: pulumi.Output<string | undefined>;
    /**
     * An optional offering name. type `string`
     */
    declare public readonly skukeyword1: pulumi.Output<string | undefined>;
    /**
     * An optional offering name. type `string`
     */
    declare public readonly skukeyword2: pulumi.Output<string | undefined>;
    /**
     * For an unreachable BIG-IP, you can provide an optional description for the assignment in this field.
     */
    declare public readonly tenant: pulumi.Output<string | undefined>;
    /**
     * The units used to measure billing. For example, “hourly” or “daily”. Type `string`
     */
    declare public readonly unitOfMeasure: pulumi.Output<string | undefined>;

    /**
     * Create a CommonLicenseManageBigIq resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CommonLicenseManageBigIqArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CommonLicenseManageBigIqArgs | CommonLicenseManageBigIqState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CommonLicenseManageBigIqState | undefined;
            resourceInputs["assignmentType"] = state?.assignmentType;
            resourceInputs["bigiqAddress"] = state?.bigiqAddress;
            resourceInputs["bigiqLoginRef"] = state?.bigiqLoginRef;
            resourceInputs["bigiqPassword"] = state?.bigiqPassword;
            resourceInputs["bigiqPort"] = state?.bigiqPort;
            resourceInputs["bigiqTokenAuth"] = state?.bigiqTokenAuth;
            resourceInputs["bigiqUser"] = state?.bigiqUser;
            resourceInputs["deviceLicenseStatus"] = state?.deviceLicenseStatus;
            resourceInputs["hypervisor"] = state?.hypervisor;
            resourceInputs["key"] = state?.key;
            resourceInputs["licensePoolname"] = state?.licensePoolname;
            resourceInputs["macAddress"] = state?.macAddress;
            resourceInputs["skukeyword1"] = state?.skukeyword1;
            resourceInputs["skukeyword2"] = state?.skukeyword2;
            resourceInputs["tenant"] = state?.tenant;
            resourceInputs["unitOfMeasure"] = state?.unitOfMeasure;
        } else {
            const args = argsOrState as CommonLicenseManageBigIqArgs | undefined;
            if (args?.assignmentType === undefined && !opts.urn) {
                throw new Error("Missing required property 'assignmentType'");
            }
            if (args?.bigiqAddress === undefined && !opts.urn) {
                throw new Error("Missing required property 'bigiqAddress'");
            }
            if (args?.bigiqPassword === undefined && !opts.urn) {
                throw new Error("Missing required property 'bigiqPassword'");
            }
            if (args?.bigiqUser === undefined && !opts.urn) {
                throw new Error("Missing required property 'bigiqUser'");
            }
            if (args?.licensePoolname === undefined && !opts.urn) {
                throw new Error("Missing required property 'licensePoolname'");
            }
            resourceInputs["assignmentType"] = args?.assignmentType;
            resourceInputs["bigiqAddress"] = args?.bigiqAddress;
            resourceInputs["bigiqLoginRef"] = args?.bigiqLoginRef ? pulumi.secret(args.bigiqLoginRef) : undefined;
            resourceInputs["bigiqPassword"] = args?.bigiqPassword ? pulumi.secret(args.bigiqPassword) : undefined;
            resourceInputs["bigiqPort"] = args?.bigiqPort ? pulumi.secret(args.bigiqPort) : undefined;
            resourceInputs["bigiqTokenAuth"] = args?.bigiqTokenAuth ? pulumi.secret(args.bigiqTokenAuth) : undefined;
            resourceInputs["bigiqUser"] = args?.bigiqUser ? pulumi.secret(args.bigiqUser) : undefined;
            resourceInputs["deviceLicenseStatus"] = args?.deviceLicenseStatus;
            resourceInputs["hypervisor"] = args?.hypervisor;
            resourceInputs["key"] = args?.key;
            resourceInputs["licensePoolname"] = args?.licensePoolname;
            resourceInputs["macAddress"] = args?.macAddress;
            resourceInputs["skukeyword1"] = args?.skukeyword1;
            resourceInputs["skukeyword2"] = args?.skukeyword2;
            resourceInputs["tenant"] = args?.tenant;
            resourceInputs["unitOfMeasure"] = args?.unitOfMeasure;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["bigiqLoginRef", "bigiqPassword", "bigiqPort", "bigiqTokenAuth", "bigiqUser"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CommonLicenseManageBigIq.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CommonLicenseManageBigIq resources.
 */
export interface CommonLicenseManageBigIqState {
    /**
     * The type of assignment, which is determined by whether the BIG-IP is unreachable, unmanaged, or managed by BIG-IQ. Possible values: “UNREACHABLE”, “UNMANAGED”, or “MANAGED”.
     */
    assignmentType?: pulumi.Input<string>;
    /**
     * BIGIQ License Manager IP Address, variable type `string`
     */
    bigiqAddress?: pulumi.Input<string>;
    /**
     * BIGIQ Login reference for token authentication
     */
    bigiqLoginRef?: pulumi.Input<string>;
    /**
     * BIGIQ License Manager password.  variable type `string`
     */
    bigiqPassword?: pulumi.Input<string>;
    /**
     * type `int`, BIGIQ License Manager Port number, specify if port is other than `443`
     */
    bigiqPort?: pulumi.Input<string>;
    /**
     * type `bool`, if set to `true` enables Token based Authentication,default is `false`
     */
    bigiqTokenAuth?: pulumi.Input<boolean>;
    /**
     * BIGIQ License Manager username, variable type `string`
     */
    bigiqUser?: pulumi.Input<string>;
    /**
     * Status of Licence Assignment
     */
    deviceLicenseStatus?: pulumi.Input<string>;
    /**
     * Identifies the platform running the BIG-IP VE. Possible values: “aws”, “azure”, “gce”, “vmware”, “hyperv”, “kvm”, or “xen”. type `string`
     */
    hypervisor?: pulumi.Input<string>;
    /**
     * License Assignment is done with specified `key`, supported only with RegKeypool type License assignement. type `string`
     */
    key?: pulumi.Input<string>;
    /**
     * A name given to the license pool. type `string`
     */
    licensePoolname?: pulumi.Input<string>;
    /**
     * MAC address of the BIG-IP. type `string`
     */
    macAddress?: pulumi.Input<string>;
    /**
     * An optional offering name. type `string`
     */
    skukeyword1?: pulumi.Input<string>;
    /**
     * An optional offering name. type `string`
     */
    skukeyword2?: pulumi.Input<string>;
    /**
     * For an unreachable BIG-IP, you can provide an optional description for the assignment in this field.
     */
    tenant?: pulumi.Input<string>;
    /**
     * The units used to measure billing. For example, “hourly” or “daily”. Type `string`
     */
    unitOfMeasure?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CommonLicenseManageBigIq resource.
 */
export interface CommonLicenseManageBigIqArgs {
    /**
     * The type of assignment, which is determined by whether the BIG-IP is unreachable, unmanaged, or managed by BIG-IQ. Possible values: “UNREACHABLE”, “UNMANAGED”, or “MANAGED”.
     */
    assignmentType: pulumi.Input<string>;
    /**
     * BIGIQ License Manager IP Address, variable type `string`
     */
    bigiqAddress: pulumi.Input<string>;
    /**
     * BIGIQ Login reference for token authentication
     */
    bigiqLoginRef?: pulumi.Input<string>;
    /**
     * BIGIQ License Manager password.  variable type `string`
     */
    bigiqPassword: pulumi.Input<string>;
    /**
     * type `int`, BIGIQ License Manager Port number, specify if port is other than `443`
     */
    bigiqPort?: pulumi.Input<string>;
    /**
     * type `bool`, if set to `true` enables Token based Authentication,default is `false`
     */
    bigiqTokenAuth?: pulumi.Input<boolean>;
    /**
     * BIGIQ License Manager username, variable type `string`
     */
    bigiqUser: pulumi.Input<string>;
    /**
     * Status of Licence Assignment
     */
    deviceLicenseStatus?: pulumi.Input<string>;
    /**
     * Identifies the platform running the BIG-IP VE. Possible values: “aws”, “azure”, “gce”, “vmware”, “hyperv”, “kvm”, or “xen”. type `string`
     */
    hypervisor?: pulumi.Input<string>;
    /**
     * License Assignment is done with specified `key`, supported only with RegKeypool type License assignement. type `string`
     */
    key?: pulumi.Input<string>;
    /**
     * A name given to the license pool. type `string`
     */
    licensePoolname: pulumi.Input<string>;
    /**
     * MAC address of the BIG-IP. type `string`
     */
    macAddress?: pulumi.Input<string>;
    /**
     * An optional offering name. type `string`
     */
    skukeyword1?: pulumi.Input<string>;
    /**
     * An optional offering name. type `string`
     */
    skukeyword2?: pulumi.Input<string>;
    /**
     * For an unreachable BIG-IP, you can provide an optional description for the assignment in this field.
     */
    tenant?: pulumi.Input<string>;
    /**
     * The units used to measure billing. For example, “hourly” or “daily”. Type `string`
     */
    unitOfMeasure?: pulumi.Input<string>;
}
