// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * `f5bigip.ltm.Snat` Manages a SNAT configuration
 *
 * For resources should be named with their `full path`. The full path is the combination of the `partition + name` of the resource.For example `/Common/test-snat`.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as f5bigip from "@pulumi/f5bigip";
 *
 * const test_snat = new f5bigip.ltm.Snat("test-snat", {
 *     name: "/Common/test-snat",
 *     origins: [{
 *         name: "0.0.0.0/0",
 *     }],
 *     sourceport: "preserve",
 *     translation: "/Common/136.1.1.2",
 *     vlans: ["/Common/internal"],
 *     vlansdisabled: false,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export class Snat extends pulumi.CustomResource {
    /**
     * Get an existing Snat resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnatState, opts?: pulumi.CustomResourceOptions): Snat {
        return new Snat(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'f5bigip:ltm/snat:Snat';

    /**
     * Returns true if the given object is an instance of Snat.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Snat {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Snat.__pulumiType;
    }

    /**
     * Specifies whether to automatically map last hop for pools or not. The default is to use next level's default.
     */
    public readonly autolasthop!: pulumi.Output<string>;
    /**
     * Fullpath
     */
    public readonly fullPath!: pulumi.Output<string | undefined>;
    /**
     * Enables or disables mirroring of SNAT connections.
     */
    public readonly mirror!: pulumi.Output<string>;
    /**
     * Name of the SNAT, name of SNAT should be full path. Full path is the combination of the `partition + SNAT name`,For example `/Common/test-snat`.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies, for each SNAT that you create, the origin addresses that are to be members of that SNAT. Specify origin addresses by their IP addresses and service ports
     */
    public readonly origins!: pulumi.Output<outputs.ltm.SnatOrigin[]>;
    /**
     * Partition or path to which the SNAT belongs
     */
    public readonly partition!: pulumi.Output<string | undefined>;
    /**
     * Specifies the name of a SNAT pool. You can only use this option when `automap` and `translation` are not used.
     */
    public readonly snatpool!: pulumi.Output<string | undefined>;
    /**
     * Specifies how the SNAT object handles the client's source port. The default is `preserve`.
     */
    public readonly sourceport!: pulumi.Output<string | undefined>;
    /**
     * Specifies the IP address configured for translation. Note that translated addresses are outside the traffic management system. You can only use this option when `automap` and `snatpool` are not used.
     */
    public readonly translation!: pulumi.Output<string | undefined>;
    /**
     * Specifies the available VLANs or tunnels and those for which the SNAT is enabled or disabled.
     */
    public readonly vlans!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the VLANs or tunnels for which the SNAT is enabled or disabled. The default is `true`, vlandisabled on VLANS specified by `vlans`,if set to `false` vlanEnabled set on VLANS specified by `vlans` .
     */
    public readonly vlansdisabled!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Snat resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnatArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnatArgs | SnatState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnatState | undefined;
            resourceInputs["autolasthop"] = state ? state.autolasthop : undefined;
            resourceInputs["fullPath"] = state ? state.fullPath : undefined;
            resourceInputs["mirror"] = state ? state.mirror : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["origins"] = state ? state.origins : undefined;
            resourceInputs["partition"] = state ? state.partition : undefined;
            resourceInputs["snatpool"] = state ? state.snatpool : undefined;
            resourceInputs["sourceport"] = state ? state.sourceport : undefined;
            resourceInputs["translation"] = state ? state.translation : undefined;
            resourceInputs["vlans"] = state ? state.vlans : undefined;
            resourceInputs["vlansdisabled"] = state ? state.vlansdisabled : undefined;
        } else {
            const args = argsOrState as SnatArgs | undefined;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.origins === undefined) && !opts.urn) {
                throw new Error("Missing required property 'origins'");
            }
            resourceInputs["autolasthop"] = args ? args.autolasthop : undefined;
            resourceInputs["fullPath"] = args ? args.fullPath : undefined;
            resourceInputs["mirror"] = args ? args.mirror : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["origins"] = args ? args.origins : undefined;
            resourceInputs["partition"] = args ? args.partition : undefined;
            resourceInputs["snatpool"] = args ? args.snatpool : undefined;
            resourceInputs["sourceport"] = args ? args.sourceport : undefined;
            resourceInputs["translation"] = args ? args.translation : undefined;
            resourceInputs["vlans"] = args ? args.vlans : undefined;
            resourceInputs["vlansdisabled"] = args ? args.vlansdisabled : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Snat.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Snat resources.
 */
export interface SnatState {
    /**
     * Specifies whether to automatically map last hop for pools or not. The default is to use next level's default.
     */
    autolasthop?: pulumi.Input<string>;
    /**
     * Fullpath
     */
    fullPath?: pulumi.Input<string>;
    /**
     * Enables or disables mirroring of SNAT connections.
     */
    mirror?: pulumi.Input<string>;
    /**
     * Name of the SNAT, name of SNAT should be full path. Full path is the combination of the `partition + SNAT name`,For example `/Common/test-snat`.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies, for each SNAT that you create, the origin addresses that are to be members of that SNAT. Specify origin addresses by their IP addresses and service ports
     */
    origins?: pulumi.Input<pulumi.Input<inputs.ltm.SnatOrigin>[]>;
    /**
     * Partition or path to which the SNAT belongs
     */
    partition?: pulumi.Input<string>;
    /**
     * Specifies the name of a SNAT pool. You can only use this option when `automap` and `translation` are not used.
     */
    snatpool?: pulumi.Input<string>;
    /**
     * Specifies how the SNAT object handles the client's source port. The default is `preserve`.
     */
    sourceport?: pulumi.Input<string>;
    /**
     * Specifies the IP address configured for translation. Note that translated addresses are outside the traffic management system. You can only use this option when `automap` and `snatpool` are not used.
     */
    translation?: pulumi.Input<string>;
    /**
     * Specifies the available VLANs or tunnels and those for which the SNAT is enabled or disabled.
     */
    vlans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the VLANs or tunnels for which the SNAT is enabled or disabled. The default is `true`, vlandisabled on VLANS specified by `vlans`,if set to `false` vlanEnabled set on VLANS specified by `vlans` .
     */
    vlansdisabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Snat resource.
 */
export interface SnatArgs {
    /**
     * Specifies whether to automatically map last hop for pools or not. The default is to use next level's default.
     */
    autolasthop?: pulumi.Input<string>;
    /**
     * Fullpath
     */
    fullPath?: pulumi.Input<string>;
    /**
     * Enables or disables mirroring of SNAT connections.
     */
    mirror?: pulumi.Input<string>;
    /**
     * Name of the SNAT, name of SNAT should be full path. Full path is the combination of the `partition + SNAT name`,For example `/Common/test-snat`.
     */
    name: pulumi.Input<string>;
    /**
     * Specifies, for each SNAT that you create, the origin addresses that are to be members of that SNAT. Specify origin addresses by their IP addresses and service ports
     */
    origins: pulumi.Input<pulumi.Input<inputs.ltm.SnatOrigin>[]>;
    /**
     * Partition or path to which the SNAT belongs
     */
    partition?: pulumi.Input<string>;
    /**
     * Specifies the name of a SNAT pool. You can only use this option when `automap` and `translation` are not used.
     */
    snatpool?: pulumi.Input<string>;
    /**
     * Specifies how the SNAT object handles the client's source port. The default is `preserve`.
     */
    sourceport?: pulumi.Input<string>;
    /**
     * Specifies the IP address configured for translation. Note that translated addresses are outside the traffic management system. You can only use this option when `automap` and `snatpool` are not used.
     */
    translation?: pulumi.Input<string>;
    /**
     * Specifies the available VLANs or tunnels and those for which the SNAT is enabled or disabled.
     */
    vlans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the VLANs or tunnels for which the SNAT is enabled or disabled. The default is `true`, vlandisabled on VLANS specified by `vlans`,if set to `false` vlanEnabled set on VLANS specified by `vlans` .
     */
    vlansdisabled?: pulumi.Input<boolean>;
}
