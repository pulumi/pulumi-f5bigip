// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * `f5bigip.ltm.CipherRule` Manages F5 BIG-IP LTM cipher rule using iControl REST.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as f5bigip from "@pulumi/f5bigip";
 *
 * const testCipherRule = new f5bigip.ltm.CipherRule("testCipherRule", {
 *     cipher: "TLS13-AES128-GCM-SHA256:TLS13-AES256-GCM-SHA384",
 *     dhGroups: "P256:P384:FFDHE2048:FFDHE3072:FFDHE4096",
 *     name: "/Common/test_cipher_rule",
 *     signatureAlgorithms: "DEFAULT",
 * });
 * ```
 */
export class CipherRule extends pulumi.CustomResource {
    /**
     * Get an existing CipherRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CipherRuleState, opts?: pulumi.CustomResourceOptions): CipherRule {
        return new CipherRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'f5bigip:ltm/cipherRule:CipherRule';

    /**
     * Returns true if the given object is an instance of CipherRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CipherRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CipherRule.__pulumiType;
    }

    /**
     * Specifies one or more Cipher Suites used,this is a colon (:) separated string of cipher suites. example, `TLS13-AES128-GCM-SHA256:TLS13-AES256-GCM-SHA384`.
     */
    public readonly cipher!: pulumi.Output<string>;
    /**
     * The Partition in which the Cipher Rule will be created.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies the DH Groups algorithms, separated by colons (:).
     */
    public readonly dhGroups!: pulumi.Output<string>;
    /**
     * Name of the Cipher Rule. Name should be in pattern `partition` + `cipherRuleName`
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the Signature Algorithms, separated by colons (:).
     */
    public readonly signatureAlgorithms!: pulumi.Output<string>;

    /**
     * Create a CipherRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CipherRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CipherRuleArgs | CipherRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CipherRuleState | undefined;
            resourceInputs["cipher"] = state ? state.cipher : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dhGroups"] = state ? state.dhGroups : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["signatureAlgorithms"] = state ? state.signatureAlgorithms : undefined;
        } else {
            const args = argsOrState as CipherRuleArgs | undefined;
            if ((!args || args.cipher === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cipher'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["cipher"] = args ? args.cipher : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dhGroups"] = args ? args.dhGroups : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["signatureAlgorithms"] = args ? args.signatureAlgorithms : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CipherRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CipherRule resources.
 */
export interface CipherRuleState {
    /**
     * Specifies one or more Cipher Suites used,this is a colon (:) separated string of cipher suites. example, `TLS13-AES128-GCM-SHA256:TLS13-AES256-GCM-SHA384`.
     */
    cipher?: pulumi.Input<string>;
    /**
     * The Partition in which the Cipher Rule will be created.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the DH Groups algorithms, separated by colons (:).
     */
    dhGroups?: pulumi.Input<string>;
    /**
     * Name of the Cipher Rule. Name should be in pattern `partition` + `cipherRuleName`
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the Signature Algorithms, separated by colons (:).
     */
    signatureAlgorithms?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CipherRule resource.
 */
export interface CipherRuleArgs {
    /**
     * Specifies one or more Cipher Suites used,this is a colon (:) separated string of cipher suites. example, `TLS13-AES128-GCM-SHA256:TLS13-AES256-GCM-SHA384`.
     */
    cipher: pulumi.Input<string>;
    /**
     * The Partition in which the Cipher Rule will be created.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the DH Groups algorithms, separated by colons (:).
     */
    dhGroups?: pulumi.Input<string>;
    /**
     * Name of the Cipher Rule. Name should be in pattern `partition` + `cipherRuleName`
     */
    name: pulumi.Input<string>;
    /**
     * Specifies the Signature Algorithms, separated by colons (:).
     */
    signatureAlgorithms?: pulumi.Input<string>;
}
