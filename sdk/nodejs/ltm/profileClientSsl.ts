// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * `f5bigip.ltm.ProfileClientSsl` Manages client SSL profiles on a BIG-IP
 *
 *
 *
 * ## Example Usage
 *
 *
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as f5bigip from "@pulumi/f5bigip";
 *
 * const test_ClientSsl = new f5bigip.ltm.ProfileClientSsl("test-ClientSsl", {
 *     authenticate: "always",
 *     ciphers: "DEFAULT",
 *     defaultsFrom: "/Common/clientssl",
 *     name: "/Common/test-ClientSsl",
 *     partition: "Common",
 * });
 * ```
 */
export class ProfileClientSsl extends pulumi.CustomResource {
    /**
     * Get an existing ProfileClientSsl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProfileClientSslState, opts?: pulumi.CustomResourceOptions): ProfileClientSsl {
        return new ProfileClientSsl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'f5bigip:ltm/profileClientSsl:ProfileClientSsl';

    /**
     * Returns true if the given object is an instance of ProfileClientSsl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProfileClientSsl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProfileClientSsl.__pulumiType;
    }

    /**
     * Alert time out
     */
    public readonly alertTimeout!: pulumi.Output<string>;
    /**
     * Enables or disables acceptance of non-SSL connections, When creating a new profile, the setting is provided by the parent profile
     */
    public readonly allowNonSsl!: pulumi.Output<string>;
    /**
     * Specifies the frequency of client authentication for an SSL session.When `once`,specifies that the system authenticates the client once for an SSL session.
     * When `always`, specifies that the system authenticates the client once for an SSL session and also upon reuse of that session.
     */
    public readonly authenticate!: pulumi.Output<string>;
    /**
     * Specifies the maximum number of certificates to be traversed in a client certificate chain
     */
    public readonly authenticateDepth!: pulumi.Output<number>;
    /**
     * Client certificate file path. Default None.
     */
    public readonly caFile!: pulumi.Output<string>;
    /**
     * Cache size (sessions).
     */
    public readonly cacheSize!: pulumi.Output<number>;
    /**
     * Cache time out
     */
    public readonly cacheTimeout!: pulumi.Output<number>;
    /**
     * Specifies a cert name for use.
     */
    public readonly cert!: pulumi.Output<string>;
    /**
     * Cert extension includes for ssl forward proxy
     */
    public readonly certExtensionIncludes!: pulumi.Output<string[]>;
    public readonly certKeyChains!: pulumi.Output<outputs.ltm.ProfileClientSslCertKeyChain[]>;
    /**
     * Life span of the certificate in days for ssl forward proxy
     */
    public readonly certLifeSpan!: pulumi.Output<number>;
    /**
     * Cert lookup by ip address and port enabled / disabled
     */
    public readonly certLookupByIpaddrPort!: pulumi.Output<string>;
    /**
     * Contains a certificate chain that is relevant to the certificate and key mentioned earlier.This key is optional
     */
    public readonly chain!: pulumi.Output<string>;
    /**
     * Specifies the list of ciphers that the system supports. When creating a new profile, the default cipher list is provided by the parent profile.
     */
    public readonly ciphers!: pulumi.Output<string>;
    /**
     * client certificate name
     */
    public readonly clientCertCa!: pulumi.Output<string>;
    /**
     * Certificate revocation file name
     */
    public readonly crlFile!: pulumi.Output<string>;
    /**
     * The parent template of this monitor template. Once this value has been set, it cannot be changed. By default, this value is the `clientssl` parent on the `Common` partition.
     */
    public readonly defaultsFrom!: pulumi.Output<string | undefined>;
    /**
     * Forward proxy bypass default action. (enabled / disabled)
     */
    public readonly forwardProxyBypassDefaultAction!: pulumi.Output<string>;
    /**
     * full path of the profile
     */
    public readonly fullPath!: pulumi.Output<string>;
    /**
     * generation
     */
    public readonly generation!: pulumi.Output<number>;
    /**
     * Generic alerts enabled / disabled.
     */
    public readonly genericAlert!: pulumi.Output<string>;
    /**
     * Handshake time out (seconds)
     */
    public readonly handshakeTimeout!: pulumi.Output<string>;
    /**
     * Inherit cert key chain
     */
    public readonly inheritCertKeychain!: pulumi.Output<string>;
    /**
     * Contains a key name
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * ModSSL Methods enabled / disabled. Default is disabled.
     */
    public readonly modSslMethods!: pulumi.Output<string>;
    /**
     * ModSSL Methods enabled / disabled. Default is disabled.
     */
    public readonly mode!: pulumi.Output<string>;
    /**
     * Specifies the name of the profile. (type `string`)
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Device partition to manage resources on.
     */
    public readonly partition!: pulumi.Output<string>;
    /**
     * Client Certificate Constrained Delegation CA passphrase
     */
    public readonly passphrase!: pulumi.Output<string>;
    /**
     * Specifies the way the system handles client certificates.When ignore, specifies that the system ignores certificates from client systems.When require, specifies that the system requires a client to present a valid certificate.When request, specifies that the system requests a valid certificate from a client but always authenticate the client.
     */
    public readonly peerCertMode!: pulumi.Output<string>;
    /**
     * Proxy CA Cert
     */
    public readonly proxyCaCert!: pulumi.Output<string>;
    /**
     * Proxy CA Key
     */
    public readonly proxyCaKey!: pulumi.Output<string>;
    /**
     * Proxy CA Passphrase
     */
    public readonly proxyCaPassphrase!: pulumi.Output<string>;
    /**
     * Proxy SSL enabled / disabled. Default is disabled.
     */
    public readonly proxySsl!: pulumi.Output<string>;
    /**
     * Proxy SSL passthrough enabled / disabled. Default is disabled.
     */
    public readonly proxySslPassthrough!: pulumi.Output<string>;
    /**
     * Renogotiate Period (seconds)
     */
    public readonly renegotiatePeriod!: pulumi.Output<string>;
    /**
     * Renogotiate Size
     */
    public readonly renegotiateSize!: pulumi.Output<string>;
    /**
     * Enables or disables SSL renegotiation.When creating a new profile, the setting is provided by the parent profile
     */
    public readonly renegotiation!: pulumi.Output<string>;
    /**
     * When `true`, client certificate is retained in SSL session.
     */
    public readonly retainCertificate!: pulumi.Output<string>;
    /**
     * Specifies the method of secure renegotiations for SSL connections. When creating a new profile, the setting is provided by the parent profile.
     * When `request` is set the system request secure renegotation of SSL connections.
     * `require` is a default setting and when set the system permits initial SSL handshakes from clients but terminates renegotiations from unpatched clients.
     * The `require-strict` setting the system requires strict renegotiation of SSL connections. In this mode the system refuses connections to insecure servers, and terminates existing SSL connections to insecure servers
     */
    public readonly secureRenegotiation!: pulumi.Output<string>;
    /**
     * Specifies the fully qualified DNS hostname of the server used in Server Name Indication communications. When creating a new profile, the setting is provided by the parent profile.The server name can also be a wildcard string containing the asterisk `*` character.
     */
    public readonly serverName!: pulumi.Output<string>;
    /**
     * Session Mirroring (enabled / disabled)
     */
    public readonly sessionMirroring!: pulumi.Output<string>;
    /**
     * Session Ticket (enabled / disabled)
     */
    public readonly sessionTicket!: pulumi.Output<string>;
    /**
     * Indicates that the system uses this profile as the default SSL profile when there is no match to the server name, or when the client provides no SNI extension support.When creating a new profile, the setting is provided by the parent profile.
     * There can be only one SSL profile with this setting enabled.
     */
    public readonly sniDefault!: pulumi.Output<string>;
    /**
     * Requires that the network peers also provide SNI support, this setting only takes effect when `sniDefault` is set to `true`.When creating a new profile, the setting is provided by the parent profile
     */
    public readonly sniRequire!: pulumi.Output<string>;
    /**
     * SSL forward Proxy (enabled / disabled)
     */
    public readonly sslForwardProxy!: pulumi.Output<string>;
    /**
     * SSL forward Proxy Bypass (enabled / disabled)
     */
    public readonly sslForwardProxyBypass!: pulumi.Output<string>;
    /**
     * SSL sign hash (any, sha1, sha256, sha384)
     */
    public readonly sslSignHash!: pulumi.Output<string>;
    /**
     * Enables or disables the resumption of SSL sessions after an unclean shutdown.When creating a new profile, the setting is provided by the parent profile. 
     */
    public readonly strictResume!: pulumi.Output<string>;
    public readonly tmOptions!: pulumi.Output<string[]>;
    /**
     * Unclean Shutdown (enabled / disabled)
     */
    public readonly uncleanShutdown!: pulumi.Output<string>;

    /**
     * Create a ProfileClientSsl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProfileClientSslArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProfileClientSslArgs | ProfileClientSslState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ProfileClientSslState | undefined;
            inputs["alertTimeout"] = state ? state.alertTimeout : undefined;
            inputs["allowNonSsl"] = state ? state.allowNonSsl : undefined;
            inputs["authenticate"] = state ? state.authenticate : undefined;
            inputs["authenticateDepth"] = state ? state.authenticateDepth : undefined;
            inputs["caFile"] = state ? state.caFile : undefined;
            inputs["cacheSize"] = state ? state.cacheSize : undefined;
            inputs["cacheTimeout"] = state ? state.cacheTimeout : undefined;
            inputs["cert"] = state ? state.cert : undefined;
            inputs["certExtensionIncludes"] = state ? state.certExtensionIncludes : undefined;
            inputs["certKeyChains"] = state ? state.certKeyChains : undefined;
            inputs["certLifeSpan"] = state ? state.certLifeSpan : undefined;
            inputs["certLookupByIpaddrPort"] = state ? state.certLookupByIpaddrPort : undefined;
            inputs["chain"] = state ? state.chain : undefined;
            inputs["ciphers"] = state ? state.ciphers : undefined;
            inputs["clientCertCa"] = state ? state.clientCertCa : undefined;
            inputs["crlFile"] = state ? state.crlFile : undefined;
            inputs["defaultsFrom"] = state ? state.defaultsFrom : undefined;
            inputs["forwardProxyBypassDefaultAction"] = state ? state.forwardProxyBypassDefaultAction : undefined;
            inputs["fullPath"] = state ? state.fullPath : undefined;
            inputs["generation"] = state ? state.generation : undefined;
            inputs["genericAlert"] = state ? state.genericAlert : undefined;
            inputs["handshakeTimeout"] = state ? state.handshakeTimeout : undefined;
            inputs["inheritCertKeychain"] = state ? state.inheritCertKeychain : undefined;
            inputs["key"] = state ? state.key : undefined;
            inputs["modSslMethods"] = state ? state.modSslMethods : undefined;
            inputs["mode"] = state ? state.mode : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["partition"] = state ? state.partition : undefined;
            inputs["passphrase"] = state ? state.passphrase : undefined;
            inputs["peerCertMode"] = state ? state.peerCertMode : undefined;
            inputs["proxyCaCert"] = state ? state.proxyCaCert : undefined;
            inputs["proxyCaKey"] = state ? state.proxyCaKey : undefined;
            inputs["proxyCaPassphrase"] = state ? state.proxyCaPassphrase : undefined;
            inputs["proxySsl"] = state ? state.proxySsl : undefined;
            inputs["proxySslPassthrough"] = state ? state.proxySslPassthrough : undefined;
            inputs["renegotiatePeriod"] = state ? state.renegotiatePeriod : undefined;
            inputs["renegotiateSize"] = state ? state.renegotiateSize : undefined;
            inputs["renegotiation"] = state ? state.renegotiation : undefined;
            inputs["retainCertificate"] = state ? state.retainCertificate : undefined;
            inputs["secureRenegotiation"] = state ? state.secureRenegotiation : undefined;
            inputs["serverName"] = state ? state.serverName : undefined;
            inputs["sessionMirroring"] = state ? state.sessionMirroring : undefined;
            inputs["sessionTicket"] = state ? state.sessionTicket : undefined;
            inputs["sniDefault"] = state ? state.sniDefault : undefined;
            inputs["sniRequire"] = state ? state.sniRequire : undefined;
            inputs["sslForwardProxy"] = state ? state.sslForwardProxy : undefined;
            inputs["sslForwardProxyBypass"] = state ? state.sslForwardProxyBypass : undefined;
            inputs["sslSignHash"] = state ? state.sslSignHash : undefined;
            inputs["strictResume"] = state ? state.strictResume : undefined;
            inputs["tmOptions"] = state ? state.tmOptions : undefined;
            inputs["uncleanShutdown"] = state ? state.uncleanShutdown : undefined;
        } else {
            const args = argsOrState as ProfileClientSslArgs | undefined;
            if (!args || args.name === undefined) {
                throw new Error("Missing required property 'name'");
            }
            inputs["alertTimeout"] = args ? args.alertTimeout : undefined;
            inputs["allowNonSsl"] = args ? args.allowNonSsl : undefined;
            inputs["authenticate"] = args ? args.authenticate : undefined;
            inputs["authenticateDepth"] = args ? args.authenticateDepth : undefined;
            inputs["caFile"] = args ? args.caFile : undefined;
            inputs["cacheSize"] = args ? args.cacheSize : undefined;
            inputs["cacheTimeout"] = args ? args.cacheTimeout : undefined;
            inputs["cert"] = args ? args.cert : undefined;
            inputs["certExtensionIncludes"] = args ? args.certExtensionIncludes : undefined;
            inputs["certKeyChains"] = args ? args.certKeyChains : undefined;
            inputs["certLifeSpan"] = args ? args.certLifeSpan : undefined;
            inputs["certLookupByIpaddrPort"] = args ? args.certLookupByIpaddrPort : undefined;
            inputs["chain"] = args ? args.chain : undefined;
            inputs["ciphers"] = args ? args.ciphers : undefined;
            inputs["clientCertCa"] = args ? args.clientCertCa : undefined;
            inputs["crlFile"] = args ? args.crlFile : undefined;
            inputs["defaultsFrom"] = args ? args.defaultsFrom : undefined;
            inputs["forwardProxyBypassDefaultAction"] = args ? args.forwardProxyBypassDefaultAction : undefined;
            inputs["fullPath"] = args ? args.fullPath : undefined;
            inputs["generation"] = args ? args.generation : undefined;
            inputs["genericAlert"] = args ? args.genericAlert : undefined;
            inputs["handshakeTimeout"] = args ? args.handshakeTimeout : undefined;
            inputs["inheritCertKeychain"] = args ? args.inheritCertKeychain : undefined;
            inputs["key"] = args ? args.key : undefined;
            inputs["modSslMethods"] = args ? args.modSslMethods : undefined;
            inputs["mode"] = args ? args.mode : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["partition"] = args ? args.partition : undefined;
            inputs["passphrase"] = args ? args.passphrase : undefined;
            inputs["peerCertMode"] = args ? args.peerCertMode : undefined;
            inputs["proxyCaCert"] = args ? args.proxyCaCert : undefined;
            inputs["proxyCaKey"] = args ? args.proxyCaKey : undefined;
            inputs["proxyCaPassphrase"] = args ? args.proxyCaPassphrase : undefined;
            inputs["proxySsl"] = args ? args.proxySsl : undefined;
            inputs["proxySslPassthrough"] = args ? args.proxySslPassthrough : undefined;
            inputs["renegotiatePeriod"] = args ? args.renegotiatePeriod : undefined;
            inputs["renegotiateSize"] = args ? args.renegotiateSize : undefined;
            inputs["renegotiation"] = args ? args.renegotiation : undefined;
            inputs["retainCertificate"] = args ? args.retainCertificate : undefined;
            inputs["secureRenegotiation"] = args ? args.secureRenegotiation : undefined;
            inputs["serverName"] = args ? args.serverName : undefined;
            inputs["sessionMirroring"] = args ? args.sessionMirroring : undefined;
            inputs["sessionTicket"] = args ? args.sessionTicket : undefined;
            inputs["sniDefault"] = args ? args.sniDefault : undefined;
            inputs["sniRequire"] = args ? args.sniRequire : undefined;
            inputs["sslForwardProxy"] = args ? args.sslForwardProxy : undefined;
            inputs["sslForwardProxyBypass"] = args ? args.sslForwardProxyBypass : undefined;
            inputs["sslSignHash"] = args ? args.sslSignHash : undefined;
            inputs["strictResume"] = args ? args.strictResume : undefined;
            inputs["tmOptions"] = args ? args.tmOptions : undefined;
            inputs["uncleanShutdown"] = args ? args.uncleanShutdown : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ProfileClientSsl.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProfileClientSsl resources.
 */
export interface ProfileClientSslState {
    /**
     * Alert time out
     */
    readonly alertTimeout?: pulumi.Input<string>;
    /**
     * Enables or disables acceptance of non-SSL connections, When creating a new profile, the setting is provided by the parent profile
     */
    readonly allowNonSsl?: pulumi.Input<string>;
    /**
     * Specifies the frequency of client authentication for an SSL session.When `once`,specifies that the system authenticates the client once for an SSL session.
     * When `always`, specifies that the system authenticates the client once for an SSL session and also upon reuse of that session.
     */
    readonly authenticate?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of certificates to be traversed in a client certificate chain
     */
    readonly authenticateDepth?: pulumi.Input<number>;
    /**
     * Client certificate file path. Default None.
     */
    readonly caFile?: pulumi.Input<string>;
    /**
     * Cache size (sessions).
     */
    readonly cacheSize?: pulumi.Input<number>;
    /**
     * Cache time out
     */
    readonly cacheTimeout?: pulumi.Input<number>;
    /**
     * Specifies a cert name for use.
     */
    readonly cert?: pulumi.Input<string>;
    /**
     * Cert extension includes for ssl forward proxy
     */
    readonly certExtensionIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    readonly certKeyChains?: pulumi.Input<pulumi.Input<inputs.ltm.ProfileClientSslCertKeyChain>[]>;
    /**
     * Life span of the certificate in days for ssl forward proxy
     */
    readonly certLifeSpan?: pulumi.Input<number>;
    /**
     * Cert lookup by ip address and port enabled / disabled
     */
    readonly certLookupByIpaddrPort?: pulumi.Input<string>;
    /**
     * Contains a certificate chain that is relevant to the certificate and key mentioned earlier.This key is optional
     */
    readonly chain?: pulumi.Input<string>;
    /**
     * Specifies the list of ciphers that the system supports. When creating a new profile, the default cipher list is provided by the parent profile.
     */
    readonly ciphers?: pulumi.Input<string>;
    /**
     * client certificate name
     */
    readonly clientCertCa?: pulumi.Input<string>;
    /**
     * Certificate revocation file name
     */
    readonly crlFile?: pulumi.Input<string>;
    /**
     * The parent template of this monitor template. Once this value has been set, it cannot be changed. By default, this value is the `clientssl` parent on the `Common` partition.
     */
    readonly defaultsFrom?: pulumi.Input<string>;
    /**
     * Forward proxy bypass default action. (enabled / disabled)
     */
    readonly forwardProxyBypassDefaultAction?: pulumi.Input<string>;
    /**
     * full path of the profile
     */
    readonly fullPath?: pulumi.Input<string>;
    /**
     * generation
     */
    readonly generation?: pulumi.Input<number>;
    /**
     * Generic alerts enabled / disabled.
     */
    readonly genericAlert?: pulumi.Input<string>;
    /**
     * Handshake time out (seconds)
     */
    readonly handshakeTimeout?: pulumi.Input<string>;
    /**
     * Inherit cert key chain
     */
    readonly inheritCertKeychain?: pulumi.Input<string>;
    /**
     * Contains a key name
     */
    readonly key?: pulumi.Input<string>;
    /**
     * ModSSL Methods enabled / disabled. Default is disabled.
     */
    readonly modSslMethods?: pulumi.Input<string>;
    /**
     * ModSSL Methods enabled / disabled. Default is disabled.
     */
    readonly mode?: pulumi.Input<string>;
    /**
     * Specifies the name of the profile. (type `string`)
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Device partition to manage resources on.
     */
    readonly partition?: pulumi.Input<string>;
    /**
     * Client Certificate Constrained Delegation CA passphrase
     */
    readonly passphrase?: pulumi.Input<string>;
    /**
     * Specifies the way the system handles client certificates.When ignore, specifies that the system ignores certificates from client systems.When require, specifies that the system requires a client to present a valid certificate.When request, specifies that the system requests a valid certificate from a client but always authenticate the client.
     */
    readonly peerCertMode?: pulumi.Input<string>;
    /**
     * Proxy CA Cert
     */
    readonly proxyCaCert?: pulumi.Input<string>;
    /**
     * Proxy CA Key
     */
    readonly proxyCaKey?: pulumi.Input<string>;
    /**
     * Proxy CA Passphrase
     */
    readonly proxyCaPassphrase?: pulumi.Input<string>;
    /**
     * Proxy SSL enabled / disabled. Default is disabled.
     */
    readonly proxySsl?: pulumi.Input<string>;
    /**
     * Proxy SSL passthrough enabled / disabled. Default is disabled.
     */
    readonly proxySslPassthrough?: pulumi.Input<string>;
    /**
     * Renogotiate Period (seconds)
     */
    readonly renegotiatePeriod?: pulumi.Input<string>;
    /**
     * Renogotiate Size
     */
    readonly renegotiateSize?: pulumi.Input<string>;
    /**
     * Enables or disables SSL renegotiation.When creating a new profile, the setting is provided by the parent profile
     */
    readonly renegotiation?: pulumi.Input<string>;
    /**
     * When `true`, client certificate is retained in SSL session.
     */
    readonly retainCertificate?: pulumi.Input<string>;
    /**
     * Specifies the method of secure renegotiations for SSL connections. When creating a new profile, the setting is provided by the parent profile.
     * When `request` is set the system request secure renegotation of SSL connections.
     * `require` is a default setting and when set the system permits initial SSL handshakes from clients but terminates renegotiations from unpatched clients.
     * The `require-strict` setting the system requires strict renegotiation of SSL connections. In this mode the system refuses connections to insecure servers, and terminates existing SSL connections to insecure servers
     */
    readonly secureRenegotiation?: pulumi.Input<string>;
    /**
     * Specifies the fully qualified DNS hostname of the server used in Server Name Indication communications. When creating a new profile, the setting is provided by the parent profile.The server name can also be a wildcard string containing the asterisk `*` character.
     */
    readonly serverName?: pulumi.Input<string>;
    /**
     * Session Mirroring (enabled / disabled)
     */
    readonly sessionMirroring?: pulumi.Input<string>;
    /**
     * Session Ticket (enabled / disabled)
     */
    readonly sessionTicket?: pulumi.Input<string>;
    /**
     * Indicates that the system uses this profile as the default SSL profile when there is no match to the server name, or when the client provides no SNI extension support.When creating a new profile, the setting is provided by the parent profile.
     * There can be only one SSL profile with this setting enabled.
     */
    readonly sniDefault?: pulumi.Input<string>;
    /**
     * Requires that the network peers also provide SNI support, this setting only takes effect when `sniDefault` is set to `true`.When creating a new profile, the setting is provided by the parent profile
     */
    readonly sniRequire?: pulumi.Input<string>;
    /**
     * SSL forward Proxy (enabled / disabled)
     */
    readonly sslForwardProxy?: pulumi.Input<string>;
    /**
     * SSL forward Proxy Bypass (enabled / disabled)
     */
    readonly sslForwardProxyBypass?: pulumi.Input<string>;
    /**
     * SSL sign hash (any, sha1, sha256, sha384)
     */
    readonly sslSignHash?: pulumi.Input<string>;
    /**
     * Enables or disables the resumption of SSL sessions after an unclean shutdown.When creating a new profile, the setting is provided by the parent profile. 
     */
    readonly strictResume?: pulumi.Input<string>;
    readonly tmOptions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unclean Shutdown (enabled / disabled)
     */
    readonly uncleanShutdown?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProfileClientSsl resource.
 */
export interface ProfileClientSslArgs {
    /**
     * Alert time out
     */
    readonly alertTimeout?: pulumi.Input<string>;
    /**
     * Enables or disables acceptance of non-SSL connections, When creating a new profile, the setting is provided by the parent profile
     */
    readonly allowNonSsl?: pulumi.Input<string>;
    /**
     * Specifies the frequency of client authentication for an SSL session.When `once`,specifies that the system authenticates the client once for an SSL session.
     * When `always`, specifies that the system authenticates the client once for an SSL session and also upon reuse of that session.
     */
    readonly authenticate?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of certificates to be traversed in a client certificate chain
     */
    readonly authenticateDepth?: pulumi.Input<number>;
    /**
     * Client certificate file path. Default None.
     */
    readonly caFile?: pulumi.Input<string>;
    /**
     * Cache size (sessions).
     */
    readonly cacheSize?: pulumi.Input<number>;
    /**
     * Cache time out
     */
    readonly cacheTimeout?: pulumi.Input<number>;
    /**
     * Specifies a cert name for use.
     */
    readonly cert?: pulumi.Input<string>;
    /**
     * Cert extension includes for ssl forward proxy
     */
    readonly certExtensionIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    readonly certKeyChains?: pulumi.Input<pulumi.Input<inputs.ltm.ProfileClientSslCertKeyChain>[]>;
    /**
     * Life span of the certificate in days for ssl forward proxy
     */
    readonly certLifeSpan?: pulumi.Input<number>;
    /**
     * Cert lookup by ip address and port enabled / disabled
     */
    readonly certLookupByIpaddrPort?: pulumi.Input<string>;
    /**
     * Contains a certificate chain that is relevant to the certificate and key mentioned earlier.This key is optional
     */
    readonly chain?: pulumi.Input<string>;
    /**
     * Specifies the list of ciphers that the system supports. When creating a new profile, the default cipher list is provided by the parent profile.
     */
    readonly ciphers?: pulumi.Input<string>;
    /**
     * client certificate name
     */
    readonly clientCertCa?: pulumi.Input<string>;
    /**
     * Certificate revocation file name
     */
    readonly crlFile?: pulumi.Input<string>;
    /**
     * The parent template of this monitor template. Once this value has been set, it cannot be changed. By default, this value is the `clientssl` parent on the `Common` partition.
     */
    readonly defaultsFrom?: pulumi.Input<string>;
    /**
     * Forward proxy bypass default action. (enabled / disabled)
     */
    readonly forwardProxyBypassDefaultAction?: pulumi.Input<string>;
    /**
     * full path of the profile
     */
    readonly fullPath?: pulumi.Input<string>;
    /**
     * generation
     */
    readonly generation?: pulumi.Input<number>;
    /**
     * Generic alerts enabled / disabled.
     */
    readonly genericAlert?: pulumi.Input<string>;
    /**
     * Handshake time out (seconds)
     */
    readonly handshakeTimeout?: pulumi.Input<string>;
    /**
     * Inherit cert key chain
     */
    readonly inheritCertKeychain?: pulumi.Input<string>;
    /**
     * Contains a key name
     */
    readonly key?: pulumi.Input<string>;
    /**
     * ModSSL Methods enabled / disabled. Default is disabled.
     */
    readonly modSslMethods?: pulumi.Input<string>;
    /**
     * ModSSL Methods enabled / disabled. Default is disabled.
     */
    readonly mode?: pulumi.Input<string>;
    /**
     * Specifies the name of the profile. (type `string`)
     */
    readonly name: pulumi.Input<string>;
    /**
     * Device partition to manage resources on.
     */
    readonly partition?: pulumi.Input<string>;
    /**
     * Client Certificate Constrained Delegation CA passphrase
     */
    readonly passphrase?: pulumi.Input<string>;
    /**
     * Specifies the way the system handles client certificates.When ignore, specifies that the system ignores certificates from client systems.When require, specifies that the system requires a client to present a valid certificate.When request, specifies that the system requests a valid certificate from a client but always authenticate the client.
     */
    readonly peerCertMode?: pulumi.Input<string>;
    /**
     * Proxy CA Cert
     */
    readonly proxyCaCert?: pulumi.Input<string>;
    /**
     * Proxy CA Key
     */
    readonly proxyCaKey?: pulumi.Input<string>;
    /**
     * Proxy CA Passphrase
     */
    readonly proxyCaPassphrase?: pulumi.Input<string>;
    /**
     * Proxy SSL enabled / disabled. Default is disabled.
     */
    readonly proxySsl?: pulumi.Input<string>;
    /**
     * Proxy SSL passthrough enabled / disabled. Default is disabled.
     */
    readonly proxySslPassthrough?: pulumi.Input<string>;
    /**
     * Renogotiate Period (seconds)
     */
    readonly renegotiatePeriod?: pulumi.Input<string>;
    /**
     * Renogotiate Size
     */
    readonly renegotiateSize?: pulumi.Input<string>;
    /**
     * Enables or disables SSL renegotiation.When creating a new profile, the setting is provided by the parent profile
     */
    readonly renegotiation?: pulumi.Input<string>;
    /**
     * When `true`, client certificate is retained in SSL session.
     */
    readonly retainCertificate?: pulumi.Input<string>;
    /**
     * Specifies the method of secure renegotiations for SSL connections. When creating a new profile, the setting is provided by the parent profile.
     * When `request` is set the system request secure renegotation of SSL connections.
     * `require` is a default setting and when set the system permits initial SSL handshakes from clients but terminates renegotiations from unpatched clients.
     * The `require-strict` setting the system requires strict renegotiation of SSL connections. In this mode the system refuses connections to insecure servers, and terminates existing SSL connections to insecure servers
     */
    readonly secureRenegotiation?: pulumi.Input<string>;
    /**
     * Specifies the fully qualified DNS hostname of the server used in Server Name Indication communications. When creating a new profile, the setting is provided by the parent profile.The server name can also be a wildcard string containing the asterisk `*` character.
     */
    readonly serverName?: pulumi.Input<string>;
    /**
     * Session Mirroring (enabled / disabled)
     */
    readonly sessionMirroring?: pulumi.Input<string>;
    /**
     * Session Ticket (enabled / disabled)
     */
    readonly sessionTicket?: pulumi.Input<string>;
    /**
     * Indicates that the system uses this profile as the default SSL profile when there is no match to the server name, or when the client provides no SNI extension support.When creating a new profile, the setting is provided by the parent profile.
     * There can be only one SSL profile with this setting enabled.
     */
    readonly sniDefault?: pulumi.Input<string>;
    /**
     * Requires that the network peers also provide SNI support, this setting only takes effect when `sniDefault` is set to `true`.When creating a new profile, the setting is provided by the parent profile
     */
    readonly sniRequire?: pulumi.Input<string>;
    /**
     * SSL forward Proxy (enabled / disabled)
     */
    readonly sslForwardProxy?: pulumi.Input<string>;
    /**
     * SSL forward Proxy Bypass (enabled / disabled)
     */
    readonly sslForwardProxyBypass?: pulumi.Input<string>;
    /**
     * SSL sign hash (any, sha1, sha256, sha384)
     */
    readonly sslSignHash?: pulumi.Input<string>;
    /**
     * Enables or disables the resumption of SSL sessions after an unclean shutdown.When creating a new profile, the setting is provided by the parent profile. 
     */
    readonly strictResume?: pulumi.Input<string>;
    readonly tmOptions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unclean Shutdown (enabled / disabled)
     */
    readonly uncleanShutdown?: pulumi.Input<string>;
}
