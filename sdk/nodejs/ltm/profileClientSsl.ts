// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * `f5bigip.ltm.ProfileClientSsl` Manages client SSL profiles on a BIG-IP
 *
 * Resources should be named with their "full path". The full path is the combination of the partition + name (example: /Common/my-pool ) or  partition + directory + name of the resource  (example: /Common/test/my-pool )
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as f5bigip from "@pulumi/f5bigip";
 *
 * const test_ClientSsl = new f5bigip.ltm.ProfileClientSsl("test-ClientSsl", {
 *     name: "/Common/test-ClientSsl",
 *     defaultsFrom: "/Common/clientssl",
 *     authenticate: "always",
 *     ciphers: "DEFAULT",
 * });
 * ```
 *
 * ## Importing
 *
 * An existing client-ssl profile can be imported into this resource by supplying client-ssl profile Name in `full path` as `id`.
 * An example is below:
 * ```sh
 * $ terraform import bigip_ltm_profile_client_ssl.test-ClientSsl-import /Common/test-ClientSsl
 * ```
 */
export class ProfileClientSsl extends pulumi.CustomResource {
    /**
     * Get an existing ProfileClientSsl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProfileClientSslState, opts?: pulumi.CustomResourceOptions): ProfileClientSsl {
        return new ProfileClientSsl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'f5bigip:ltm/profileClientSsl:ProfileClientSsl';

    /**
     * Returns true if the given object is an instance of ProfileClientSsl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProfileClientSsl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProfileClientSsl.__pulumiType;
    }

    /**
     * Alert time out
     */
    public readonly alertTimeout!: pulumi.Output<string>;
    /**
     * Instructs the system to use the specified CRL file even if it has expired. The default is `disabled`.
     */
    public readonly allowExpiredCrl!: pulumi.Output<string>;
    /**
     * Enables or disables acceptance of non-SSL connections, When creating a new profile, the setting is provided by the parent profile
     */
    public readonly allowNonSsl!: pulumi.Output<string>;
    /**
     * Specifies the frequency of client authentication for an SSL session.When `once`,specifies that the system authenticates the client once for an SSL session.
     * When `always`, specifies that the system authenticates the client once for an SSL session and also upon reuse of that session.
     */
    public readonly authenticate!: pulumi.Output<string>;
    /**
     * Specifies the maximum number of certificates to be traversed in a client certificate chain
     */
    public readonly authenticateDepth!: pulumi.Output<number>;
    /**
     * Specifies the client certificate to use in SSL client certificate constrained delegation. This certificate will be used if client does not provide a cert during the SSL handshake. The default value is none.
     */
    public readonly c3dClientFallbackCert!: pulumi.Output<string>;
    /**
     * Specifies the BIG-IP action when the OCSP responder returns unknown status. The default value is drop, which causes the onnection to be dropped. Conversely, you can specify ignore, which causes the connection to ignore the unknown status and continue.
     */
    public readonly c3dDropUnknownOcspStatus!: pulumi.Output<string>;
    /**
     * Specifies the SSL client certificate constrained delegation OCSP object that the BIG-IP SSL should use to connect to the OCSP responder and check the client certificate status.
     */
    public readonly c3dOcsp!: pulumi.Output<string>;
    /**
     * (Trusted Certificate Authorities)Specifies a client CA that the system trusts. The default is `None`.
     */
    public readonly caFile!: pulumi.Output<string>;
    /**
     * Cache size (sessions).
     */
    public readonly cacheSize!: pulumi.Output<number>;
    /**
     * Cache time out
     */
    public readonly cacheTimeout!: pulumi.Output<number>;
    /**
     * Specifies a cert name for use.
     */
    public readonly cert!: pulumi.Output<string>;
    /**
     * Cert extension includes for ssl forward proxy
     */
    public readonly certExtensionIncludes!: pulumi.Output<string[]>;
    /**
     * @deprecated This Field 'cert_key_chain' going to deprecate in future version, please specify with cert,key,chain,passphrase as separate attribute.
     */
    public readonly certKeyChain!: pulumi.Output<outputs.ltm.ProfileClientSslCertKeyChain | undefined>;
    /**
     * Life span of the certificate in days for ssl forward proxy
     */
    public readonly certLifeSpan!: pulumi.Output<number>;
    /**
     * Cert lookup by ip address and port enabled / disabled
     */
    public readonly certLookupByIpaddrPort!: pulumi.Output<string>;
    /**
     * Contains a certificate chain that is relevant to the certificate and key mentioned earlier.This key is optional
     */
    public readonly chain!: pulumi.Output<string>;
    /**
     * Specifies the cipher group for the SSL server profile. It is mutually exclusive with the argument, `ciphers`. The default value is `none`.
     */
    public readonly cipherGroup!: pulumi.Output<string>;
    /**
     * Specifies the list of ciphers that the system supports. When creating a new profile, the default cipher list is provided by the parent profile.
     */
    public readonly ciphers!: pulumi.Output<string>;
    /**
     * (Advertised Certificate Authorities)Specifies that the CAs that the system advertises to clients is being trusted by the profile. The default is `None`.
     */
    public readonly clientCertCa!: pulumi.Output<string>;
    /**
     * Specifies the name of a file containing a list of revoked client certificates. The default is `None`.
     */
    public readonly crlFile!: pulumi.Output<string>;
    /**
     * Parent profile for this clientssl profile.Once this value has been set, it cannot be changed. Default value is `/Common/clientssl`. It Should Full path `/partition/profile_name`
     */
    public readonly defaultsFrom!: pulumi.Output<string | undefined>;
    /**
     * Forward proxy bypass default action. (enabled / disabled)
     */
    public readonly forwardProxyBypassDefaultAction!: pulumi.Output<string>;
    /**
     * full path of the profile
     */
    public readonly fullPath!: pulumi.Output<string>;
    /**
     * generation
     */
    public readonly generation!: pulumi.Output<number>;
    /**
     * Generic alerts enabled / disabled.
     */
    public readonly genericAlert!: pulumi.Output<string>;
    /**
     * Handshake time out (seconds)
     */
    public readonly handshakeTimeout!: pulumi.Output<string>;
    /**
     * Inherit cert key chain
     */
    public readonly inheritCertKeychain!: pulumi.Output<string>;
    /**
     * Contains a key name
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * ModSSL Methods enabled / disabled. Default is disabled.
     */
    public readonly modSslMethods!: pulumi.Output<string>;
    /**
     * ModSSL Methods enabled / disabled. Default is disabled.
     */
    public readonly mode!: pulumi.Output<string>;
    /**
     * Specifies the name of the profile.Name of Profile should be full path.The full path is the combination of the `partition + profile name`,For example `/Common/test-clientssl-profile`.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies whether the system uses OCSP stapling. The default value is `disabled`.
     */
    public readonly ocspStapling!: pulumi.Output<string | undefined>;
    /**
     * name of partition
     */
    public readonly partition!: pulumi.Output<string>;
    /**
     * Client Certificate Constrained Delegation CA passphrase
     */
    public readonly passphrase!: pulumi.Output<string>;
    /**
     * Specifies the way the system handles client certificates.When ignore, specifies that the system ignores certificates from client systems.When require, specifies that the system requires a client to present a valid certificate.When request, specifies that the system requests a valid certificate from a client but always authenticate the client.
     */
    public readonly peerCertMode!: pulumi.Output<string>;
    /**
     * Proxy CA Cert
     */
    public readonly proxyCaCert!: pulumi.Output<string>;
    /**
     * Proxy CA Key
     */
    public readonly proxyCaKey!: pulumi.Output<string>;
    /**
     * Proxy CA Passphrase
     */
    public readonly proxyCaPassphrase!: pulumi.Output<string>;
    /**
     * Proxy SSL enabled / disabled. Default is disabled.
     */
    public readonly proxySsl!: pulumi.Output<string>;
    /**
     * Proxy SSL passthrough enabled / disabled. Default is disabled.
     */
    public readonly proxySslPassthrough!: pulumi.Output<string>;
    /**
     * Renogotiate Period (seconds)
     */
    public readonly renegotiatePeriod!: pulumi.Output<string>;
    /**
     * Renogotiate Size
     */
    public readonly renegotiateSize!: pulumi.Output<string>;
    /**
     * Enables or disables SSL renegotiation.When creating a new profile, the setting is provided by the parent profile
     */
    public readonly renegotiation!: pulumi.Output<string>;
    /**
     * When `true`, client certificate is retained in SSL session.
     */
    public readonly retainCertificate!: pulumi.Output<string>;
    /**
     * Specifies the method of secure renegotiations for SSL connections. When creating a new profile, the setting is provided by the parent profile.
     * When `request` is set the system request secure renegotation of SSL connections.
     * `require` is a default setting and when set the system permits initial SSL handshakes from clients but terminates renegotiations from unpatched clients.
     * The `require-strict` setting the system requires strict renegotiation of SSL connections. In this mode the system refuses connections to insecure servers, and terminates existing SSL connections to insecure servers
     */
    public readonly secureRenegotiation!: pulumi.Output<string>;
    /**
     * Specifies the fully qualified DNS hostname of the server used in Server Name Indication communications. When creating a new profile, the setting is provided by the parent profile.The server name can also be a wildcard string containing the asterisk `*` character.
     */
    public readonly serverName!: pulumi.Output<string>;
    /**
     * Session Mirroring (enabled / disabled)
     */
    public readonly sessionMirroring!: pulumi.Output<string>;
    /**
     * Session Ticket (enabled / disabled)
     */
    public readonly sessionTicket!: pulumi.Output<string>;
    /**
     * Indicates that the system uses this profile as the default SSL profile when there is no match to the server name, or when the client provides no SNI extension support.When creating a new profile, the setting is provided by the parent profile.
     * There can be only one SSL profile with this setting enabled.
     */
    public readonly sniDefault!: pulumi.Output<string>;
    /**
     * Requires that the network peers also provide SNI support, this setting only takes effect when `sniDefault` is set to `true`.When creating a new profile, the setting is provided by the parent profile
     */
    public readonly sniRequire!: pulumi.Output<string>;
    /**
     * Enables or disables SSL client certificate constrained delegation. The default option is disabled. Conversely, you can specify enabled to use the SSL client certificate constrained delegation.
     */
    public readonly sslC3d!: pulumi.Output<string>;
    /**
     * Specifies whether SSL forward proxy feature is enabled or not. The default value is disabled.
     */
    public readonly sslForwardProxy!: pulumi.Output<string>;
    /**
     * Specifies whether SSL forward proxy bypass feature is enabled or not. The default value is disabled.
     */
    public readonly sslForwardProxyBypass!: pulumi.Output<string>;
    /**
     * SSL sign hash (any, sha1, sha256, sha384)
     */
    public readonly sslSignHash!: pulumi.Output<string>;
    /**
     * Enables or disables the resumption of SSL sessions after an unclean shutdown.When creating a new profile, the setting is provided by the parent profile.
     */
    public readonly strictResume!: pulumi.Output<string>;
    /**
     * List of Enabled selection from a set of industry standard options for handling SSL processing.By default,
     * Don't insert empty fragments and No TLSv1.3 are listed as Enabled Options. `Usage` : tmOptions    = ["dont-insert-empty-fragments","no-tlsv1.3"]
     */
    public readonly tmOptions!: pulumi.Output<string[]>;
    /**
     * Unclean Shutdown (enabled / disabled)
     */
    public readonly uncleanShutdown!: pulumi.Output<string>;

    /**
     * Create a ProfileClientSsl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProfileClientSslArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProfileClientSslArgs | ProfileClientSslState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProfileClientSslState | undefined;
            resourceInputs["alertTimeout"] = state ? state.alertTimeout : undefined;
            resourceInputs["allowExpiredCrl"] = state ? state.allowExpiredCrl : undefined;
            resourceInputs["allowNonSsl"] = state ? state.allowNonSsl : undefined;
            resourceInputs["authenticate"] = state ? state.authenticate : undefined;
            resourceInputs["authenticateDepth"] = state ? state.authenticateDepth : undefined;
            resourceInputs["c3dClientFallbackCert"] = state ? state.c3dClientFallbackCert : undefined;
            resourceInputs["c3dDropUnknownOcspStatus"] = state ? state.c3dDropUnknownOcspStatus : undefined;
            resourceInputs["c3dOcsp"] = state ? state.c3dOcsp : undefined;
            resourceInputs["caFile"] = state ? state.caFile : undefined;
            resourceInputs["cacheSize"] = state ? state.cacheSize : undefined;
            resourceInputs["cacheTimeout"] = state ? state.cacheTimeout : undefined;
            resourceInputs["cert"] = state ? state.cert : undefined;
            resourceInputs["certExtensionIncludes"] = state ? state.certExtensionIncludes : undefined;
            resourceInputs["certKeyChain"] = state ? state.certKeyChain : undefined;
            resourceInputs["certLifeSpan"] = state ? state.certLifeSpan : undefined;
            resourceInputs["certLookupByIpaddrPort"] = state ? state.certLookupByIpaddrPort : undefined;
            resourceInputs["chain"] = state ? state.chain : undefined;
            resourceInputs["cipherGroup"] = state ? state.cipherGroup : undefined;
            resourceInputs["ciphers"] = state ? state.ciphers : undefined;
            resourceInputs["clientCertCa"] = state ? state.clientCertCa : undefined;
            resourceInputs["crlFile"] = state ? state.crlFile : undefined;
            resourceInputs["defaultsFrom"] = state ? state.defaultsFrom : undefined;
            resourceInputs["forwardProxyBypassDefaultAction"] = state ? state.forwardProxyBypassDefaultAction : undefined;
            resourceInputs["fullPath"] = state ? state.fullPath : undefined;
            resourceInputs["generation"] = state ? state.generation : undefined;
            resourceInputs["genericAlert"] = state ? state.genericAlert : undefined;
            resourceInputs["handshakeTimeout"] = state ? state.handshakeTimeout : undefined;
            resourceInputs["inheritCertKeychain"] = state ? state.inheritCertKeychain : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["modSslMethods"] = state ? state.modSslMethods : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ocspStapling"] = state ? state.ocspStapling : undefined;
            resourceInputs["partition"] = state ? state.partition : undefined;
            resourceInputs["passphrase"] = state ? state.passphrase : undefined;
            resourceInputs["peerCertMode"] = state ? state.peerCertMode : undefined;
            resourceInputs["proxyCaCert"] = state ? state.proxyCaCert : undefined;
            resourceInputs["proxyCaKey"] = state ? state.proxyCaKey : undefined;
            resourceInputs["proxyCaPassphrase"] = state ? state.proxyCaPassphrase : undefined;
            resourceInputs["proxySsl"] = state ? state.proxySsl : undefined;
            resourceInputs["proxySslPassthrough"] = state ? state.proxySslPassthrough : undefined;
            resourceInputs["renegotiatePeriod"] = state ? state.renegotiatePeriod : undefined;
            resourceInputs["renegotiateSize"] = state ? state.renegotiateSize : undefined;
            resourceInputs["renegotiation"] = state ? state.renegotiation : undefined;
            resourceInputs["retainCertificate"] = state ? state.retainCertificate : undefined;
            resourceInputs["secureRenegotiation"] = state ? state.secureRenegotiation : undefined;
            resourceInputs["serverName"] = state ? state.serverName : undefined;
            resourceInputs["sessionMirroring"] = state ? state.sessionMirroring : undefined;
            resourceInputs["sessionTicket"] = state ? state.sessionTicket : undefined;
            resourceInputs["sniDefault"] = state ? state.sniDefault : undefined;
            resourceInputs["sniRequire"] = state ? state.sniRequire : undefined;
            resourceInputs["sslC3d"] = state ? state.sslC3d : undefined;
            resourceInputs["sslForwardProxy"] = state ? state.sslForwardProxy : undefined;
            resourceInputs["sslForwardProxyBypass"] = state ? state.sslForwardProxyBypass : undefined;
            resourceInputs["sslSignHash"] = state ? state.sslSignHash : undefined;
            resourceInputs["strictResume"] = state ? state.strictResume : undefined;
            resourceInputs["tmOptions"] = state ? state.tmOptions : undefined;
            resourceInputs["uncleanShutdown"] = state ? state.uncleanShutdown : undefined;
        } else {
            const args = argsOrState as ProfileClientSslArgs | undefined;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["alertTimeout"] = args ? args.alertTimeout : undefined;
            resourceInputs["allowExpiredCrl"] = args ? args.allowExpiredCrl : undefined;
            resourceInputs["allowNonSsl"] = args ? args.allowNonSsl : undefined;
            resourceInputs["authenticate"] = args ? args.authenticate : undefined;
            resourceInputs["authenticateDepth"] = args ? args.authenticateDepth : undefined;
            resourceInputs["c3dClientFallbackCert"] = args ? args.c3dClientFallbackCert : undefined;
            resourceInputs["c3dDropUnknownOcspStatus"] = args ? args.c3dDropUnknownOcspStatus : undefined;
            resourceInputs["c3dOcsp"] = args ? args.c3dOcsp : undefined;
            resourceInputs["caFile"] = args ? args.caFile : undefined;
            resourceInputs["cacheSize"] = args ? args.cacheSize : undefined;
            resourceInputs["cacheTimeout"] = args ? args.cacheTimeout : undefined;
            resourceInputs["cert"] = args ? args.cert : undefined;
            resourceInputs["certExtensionIncludes"] = args ? args.certExtensionIncludes : undefined;
            resourceInputs["certKeyChain"] = args ? args.certKeyChain : undefined;
            resourceInputs["certLifeSpan"] = args ? args.certLifeSpan : undefined;
            resourceInputs["certLookupByIpaddrPort"] = args ? args.certLookupByIpaddrPort : undefined;
            resourceInputs["chain"] = args ? args.chain : undefined;
            resourceInputs["cipherGroup"] = args ? args.cipherGroup : undefined;
            resourceInputs["ciphers"] = args ? args.ciphers : undefined;
            resourceInputs["clientCertCa"] = args ? args.clientCertCa : undefined;
            resourceInputs["crlFile"] = args ? args.crlFile : undefined;
            resourceInputs["defaultsFrom"] = args ? args.defaultsFrom : undefined;
            resourceInputs["forwardProxyBypassDefaultAction"] = args ? args.forwardProxyBypassDefaultAction : undefined;
            resourceInputs["fullPath"] = args ? args.fullPath : undefined;
            resourceInputs["generation"] = args ? args.generation : undefined;
            resourceInputs["genericAlert"] = args ? args.genericAlert : undefined;
            resourceInputs["handshakeTimeout"] = args ? args.handshakeTimeout : undefined;
            resourceInputs["inheritCertKeychain"] = args ? args.inheritCertKeychain : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["modSslMethods"] = args ? args.modSslMethods : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ocspStapling"] = args ? args.ocspStapling : undefined;
            resourceInputs["partition"] = args ? args.partition : undefined;
            resourceInputs["passphrase"] = args?.passphrase ? pulumi.secret(args.passphrase) : undefined;
            resourceInputs["peerCertMode"] = args ? args.peerCertMode : undefined;
            resourceInputs["proxyCaCert"] = args ? args.proxyCaCert : undefined;
            resourceInputs["proxyCaKey"] = args ? args.proxyCaKey : undefined;
            resourceInputs["proxyCaPassphrase"] = args ? args.proxyCaPassphrase : undefined;
            resourceInputs["proxySsl"] = args ? args.proxySsl : undefined;
            resourceInputs["proxySslPassthrough"] = args ? args.proxySslPassthrough : undefined;
            resourceInputs["renegotiatePeriod"] = args ? args.renegotiatePeriod : undefined;
            resourceInputs["renegotiateSize"] = args ? args.renegotiateSize : undefined;
            resourceInputs["renegotiation"] = args ? args.renegotiation : undefined;
            resourceInputs["retainCertificate"] = args ? args.retainCertificate : undefined;
            resourceInputs["secureRenegotiation"] = args ? args.secureRenegotiation : undefined;
            resourceInputs["serverName"] = args ? args.serverName : undefined;
            resourceInputs["sessionMirroring"] = args ? args.sessionMirroring : undefined;
            resourceInputs["sessionTicket"] = args ? args.sessionTicket : undefined;
            resourceInputs["sniDefault"] = args ? args.sniDefault : undefined;
            resourceInputs["sniRequire"] = args ? args.sniRequire : undefined;
            resourceInputs["sslC3d"] = args ? args.sslC3d : undefined;
            resourceInputs["sslForwardProxy"] = args ? args.sslForwardProxy : undefined;
            resourceInputs["sslForwardProxyBypass"] = args ? args.sslForwardProxyBypass : undefined;
            resourceInputs["sslSignHash"] = args ? args.sslSignHash : undefined;
            resourceInputs["strictResume"] = args ? args.strictResume : undefined;
            resourceInputs["tmOptions"] = args ? args.tmOptions : undefined;
            resourceInputs["uncleanShutdown"] = args ? args.uncleanShutdown : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["passphrase"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ProfileClientSsl.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProfileClientSsl resources.
 */
export interface ProfileClientSslState {
    /**
     * Alert time out
     */
    alertTimeout?: pulumi.Input<string>;
    /**
     * Instructs the system to use the specified CRL file even if it has expired. The default is `disabled`.
     */
    allowExpiredCrl?: pulumi.Input<string>;
    /**
     * Enables or disables acceptance of non-SSL connections, When creating a new profile, the setting is provided by the parent profile
     */
    allowNonSsl?: pulumi.Input<string>;
    /**
     * Specifies the frequency of client authentication for an SSL session.When `once`,specifies that the system authenticates the client once for an SSL session.
     * When `always`, specifies that the system authenticates the client once for an SSL session and also upon reuse of that session.
     */
    authenticate?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of certificates to be traversed in a client certificate chain
     */
    authenticateDepth?: pulumi.Input<number>;
    /**
     * Specifies the client certificate to use in SSL client certificate constrained delegation. This certificate will be used if client does not provide a cert during the SSL handshake. The default value is none.
     */
    c3dClientFallbackCert?: pulumi.Input<string>;
    /**
     * Specifies the BIG-IP action when the OCSP responder returns unknown status. The default value is drop, which causes the onnection to be dropped. Conversely, you can specify ignore, which causes the connection to ignore the unknown status and continue.
     */
    c3dDropUnknownOcspStatus?: pulumi.Input<string>;
    /**
     * Specifies the SSL client certificate constrained delegation OCSP object that the BIG-IP SSL should use to connect to the OCSP responder and check the client certificate status.
     */
    c3dOcsp?: pulumi.Input<string>;
    /**
     * (Trusted Certificate Authorities)Specifies a client CA that the system trusts. The default is `None`.
     */
    caFile?: pulumi.Input<string>;
    /**
     * Cache size (sessions).
     */
    cacheSize?: pulumi.Input<number>;
    /**
     * Cache time out
     */
    cacheTimeout?: pulumi.Input<number>;
    /**
     * Specifies a cert name for use.
     */
    cert?: pulumi.Input<string>;
    /**
     * Cert extension includes for ssl forward proxy
     */
    certExtensionIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * @deprecated This Field 'cert_key_chain' going to deprecate in future version, please specify with cert,key,chain,passphrase as separate attribute.
     */
    certKeyChain?: pulumi.Input<inputs.ltm.ProfileClientSslCertKeyChain>;
    /**
     * Life span of the certificate in days for ssl forward proxy
     */
    certLifeSpan?: pulumi.Input<number>;
    /**
     * Cert lookup by ip address and port enabled / disabled
     */
    certLookupByIpaddrPort?: pulumi.Input<string>;
    /**
     * Contains a certificate chain that is relevant to the certificate and key mentioned earlier.This key is optional
     */
    chain?: pulumi.Input<string>;
    /**
     * Specifies the cipher group for the SSL server profile. It is mutually exclusive with the argument, `ciphers`. The default value is `none`.
     */
    cipherGroup?: pulumi.Input<string>;
    /**
     * Specifies the list of ciphers that the system supports. When creating a new profile, the default cipher list is provided by the parent profile.
     */
    ciphers?: pulumi.Input<string>;
    /**
     * (Advertised Certificate Authorities)Specifies that the CAs that the system advertises to clients is being trusted by the profile. The default is `None`.
     */
    clientCertCa?: pulumi.Input<string>;
    /**
     * Specifies the name of a file containing a list of revoked client certificates. The default is `None`.
     */
    crlFile?: pulumi.Input<string>;
    /**
     * Parent profile for this clientssl profile.Once this value has been set, it cannot be changed. Default value is `/Common/clientssl`. It Should Full path `/partition/profile_name`
     */
    defaultsFrom?: pulumi.Input<string>;
    /**
     * Forward proxy bypass default action. (enabled / disabled)
     */
    forwardProxyBypassDefaultAction?: pulumi.Input<string>;
    /**
     * full path of the profile
     */
    fullPath?: pulumi.Input<string>;
    /**
     * generation
     */
    generation?: pulumi.Input<number>;
    /**
     * Generic alerts enabled / disabled.
     */
    genericAlert?: pulumi.Input<string>;
    /**
     * Handshake time out (seconds)
     */
    handshakeTimeout?: pulumi.Input<string>;
    /**
     * Inherit cert key chain
     */
    inheritCertKeychain?: pulumi.Input<string>;
    /**
     * Contains a key name
     */
    key?: pulumi.Input<string>;
    /**
     * ModSSL Methods enabled / disabled. Default is disabled.
     */
    modSslMethods?: pulumi.Input<string>;
    /**
     * ModSSL Methods enabled / disabled. Default is disabled.
     */
    mode?: pulumi.Input<string>;
    /**
     * Specifies the name of the profile.Name of Profile should be full path.The full path is the combination of the `partition + profile name`,For example `/Common/test-clientssl-profile`.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies whether the system uses OCSP stapling. The default value is `disabled`.
     */
    ocspStapling?: pulumi.Input<string>;
    /**
     * name of partition
     */
    partition?: pulumi.Input<string>;
    /**
     * Client Certificate Constrained Delegation CA passphrase
     */
    passphrase?: pulumi.Input<string>;
    /**
     * Specifies the way the system handles client certificates.When ignore, specifies that the system ignores certificates from client systems.When require, specifies that the system requires a client to present a valid certificate.When request, specifies that the system requests a valid certificate from a client but always authenticate the client.
     */
    peerCertMode?: pulumi.Input<string>;
    /**
     * Proxy CA Cert
     */
    proxyCaCert?: pulumi.Input<string>;
    /**
     * Proxy CA Key
     */
    proxyCaKey?: pulumi.Input<string>;
    /**
     * Proxy CA Passphrase
     */
    proxyCaPassphrase?: pulumi.Input<string>;
    /**
     * Proxy SSL enabled / disabled. Default is disabled.
     */
    proxySsl?: pulumi.Input<string>;
    /**
     * Proxy SSL passthrough enabled / disabled. Default is disabled.
     */
    proxySslPassthrough?: pulumi.Input<string>;
    /**
     * Renogotiate Period (seconds)
     */
    renegotiatePeriod?: pulumi.Input<string>;
    /**
     * Renogotiate Size
     */
    renegotiateSize?: pulumi.Input<string>;
    /**
     * Enables or disables SSL renegotiation.When creating a new profile, the setting is provided by the parent profile
     */
    renegotiation?: pulumi.Input<string>;
    /**
     * When `true`, client certificate is retained in SSL session.
     */
    retainCertificate?: pulumi.Input<string>;
    /**
     * Specifies the method of secure renegotiations for SSL connections. When creating a new profile, the setting is provided by the parent profile.
     * When `request` is set the system request secure renegotation of SSL connections.
     * `require` is a default setting and when set the system permits initial SSL handshakes from clients but terminates renegotiations from unpatched clients.
     * The `require-strict` setting the system requires strict renegotiation of SSL connections. In this mode the system refuses connections to insecure servers, and terminates existing SSL connections to insecure servers
     */
    secureRenegotiation?: pulumi.Input<string>;
    /**
     * Specifies the fully qualified DNS hostname of the server used in Server Name Indication communications. When creating a new profile, the setting is provided by the parent profile.The server name can also be a wildcard string containing the asterisk `*` character.
     */
    serverName?: pulumi.Input<string>;
    /**
     * Session Mirroring (enabled / disabled)
     */
    sessionMirroring?: pulumi.Input<string>;
    /**
     * Session Ticket (enabled / disabled)
     */
    sessionTicket?: pulumi.Input<string>;
    /**
     * Indicates that the system uses this profile as the default SSL profile when there is no match to the server name, or when the client provides no SNI extension support.When creating a new profile, the setting is provided by the parent profile.
     * There can be only one SSL profile with this setting enabled.
     */
    sniDefault?: pulumi.Input<string>;
    /**
     * Requires that the network peers also provide SNI support, this setting only takes effect when `sniDefault` is set to `true`.When creating a new profile, the setting is provided by the parent profile
     */
    sniRequire?: pulumi.Input<string>;
    /**
     * Enables or disables SSL client certificate constrained delegation. The default option is disabled. Conversely, you can specify enabled to use the SSL client certificate constrained delegation.
     */
    sslC3d?: pulumi.Input<string>;
    /**
     * Specifies whether SSL forward proxy feature is enabled or not. The default value is disabled.
     */
    sslForwardProxy?: pulumi.Input<string>;
    /**
     * Specifies whether SSL forward proxy bypass feature is enabled or not. The default value is disabled.
     */
    sslForwardProxyBypass?: pulumi.Input<string>;
    /**
     * SSL sign hash (any, sha1, sha256, sha384)
     */
    sslSignHash?: pulumi.Input<string>;
    /**
     * Enables or disables the resumption of SSL sessions after an unclean shutdown.When creating a new profile, the setting is provided by the parent profile.
     */
    strictResume?: pulumi.Input<string>;
    /**
     * List of Enabled selection from a set of industry standard options for handling SSL processing.By default,
     * Don't insert empty fragments and No TLSv1.3 are listed as Enabled Options. `Usage` : tmOptions    = ["dont-insert-empty-fragments","no-tlsv1.3"]
     */
    tmOptions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unclean Shutdown (enabled / disabled)
     */
    uncleanShutdown?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProfileClientSsl resource.
 */
export interface ProfileClientSslArgs {
    /**
     * Alert time out
     */
    alertTimeout?: pulumi.Input<string>;
    /**
     * Instructs the system to use the specified CRL file even if it has expired. The default is `disabled`.
     */
    allowExpiredCrl?: pulumi.Input<string>;
    /**
     * Enables or disables acceptance of non-SSL connections, When creating a new profile, the setting is provided by the parent profile
     */
    allowNonSsl?: pulumi.Input<string>;
    /**
     * Specifies the frequency of client authentication for an SSL session.When `once`,specifies that the system authenticates the client once for an SSL session.
     * When `always`, specifies that the system authenticates the client once for an SSL session and also upon reuse of that session.
     */
    authenticate?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of certificates to be traversed in a client certificate chain
     */
    authenticateDepth?: pulumi.Input<number>;
    /**
     * Specifies the client certificate to use in SSL client certificate constrained delegation. This certificate will be used if client does not provide a cert during the SSL handshake. The default value is none.
     */
    c3dClientFallbackCert?: pulumi.Input<string>;
    /**
     * Specifies the BIG-IP action when the OCSP responder returns unknown status. The default value is drop, which causes the onnection to be dropped. Conversely, you can specify ignore, which causes the connection to ignore the unknown status and continue.
     */
    c3dDropUnknownOcspStatus?: pulumi.Input<string>;
    /**
     * Specifies the SSL client certificate constrained delegation OCSP object that the BIG-IP SSL should use to connect to the OCSP responder and check the client certificate status.
     */
    c3dOcsp?: pulumi.Input<string>;
    /**
     * (Trusted Certificate Authorities)Specifies a client CA that the system trusts. The default is `None`.
     */
    caFile?: pulumi.Input<string>;
    /**
     * Cache size (sessions).
     */
    cacheSize?: pulumi.Input<number>;
    /**
     * Cache time out
     */
    cacheTimeout?: pulumi.Input<number>;
    /**
     * Specifies a cert name for use.
     */
    cert?: pulumi.Input<string>;
    /**
     * Cert extension includes for ssl forward proxy
     */
    certExtensionIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * @deprecated This Field 'cert_key_chain' going to deprecate in future version, please specify with cert,key,chain,passphrase as separate attribute.
     */
    certKeyChain?: pulumi.Input<inputs.ltm.ProfileClientSslCertKeyChain>;
    /**
     * Life span of the certificate in days for ssl forward proxy
     */
    certLifeSpan?: pulumi.Input<number>;
    /**
     * Cert lookup by ip address and port enabled / disabled
     */
    certLookupByIpaddrPort?: pulumi.Input<string>;
    /**
     * Contains a certificate chain that is relevant to the certificate and key mentioned earlier.This key is optional
     */
    chain?: pulumi.Input<string>;
    /**
     * Specifies the cipher group for the SSL server profile. It is mutually exclusive with the argument, `ciphers`. The default value is `none`.
     */
    cipherGroup?: pulumi.Input<string>;
    /**
     * Specifies the list of ciphers that the system supports. When creating a new profile, the default cipher list is provided by the parent profile.
     */
    ciphers?: pulumi.Input<string>;
    /**
     * (Advertised Certificate Authorities)Specifies that the CAs that the system advertises to clients is being trusted by the profile. The default is `None`.
     */
    clientCertCa?: pulumi.Input<string>;
    /**
     * Specifies the name of a file containing a list of revoked client certificates. The default is `None`.
     */
    crlFile?: pulumi.Input<string>;
    /**
     * Parent profile for this clientssl profile.Once this value has been set, it cannot be changed. Default value is `/Common/clientssl`. It Should Full path `/partition/profile_name`
     */
    defaultsFrom?: pulumi.Input<string>;
    /**
     * Forward proxy bypass default action. (enabled / disabled)
     */
    forwardProxyBypassDefaultAction?: pulumi.Input<string>;
    /**
     * full path of the profile
     */
    fullPath?: pulumi.Input<string>;
    /**
     * generation
     */
    generation?: pulumi.Input<number>;
    /**
     * Generic alerts enabled / disabled.
     */
    genericAlert?: pulumi.Input<string>;
    /**
     * Handshake time out (seconds)
     */
    handshakeTimeout?: pulumi.Input<string>;
    /**
     * Inherit cert key chain
     */
    inheritCertKeychain?: pulumi.Input<string>;
    /**
     * Contains a key name
     */
    key?: pulumi.Input<string>;
    /**
     * ModSSL Methods enabled / disabled. Default is disabled.
     */
    modSslMethods?: pulumi.Input<string>;
    /**
     * ModSSL Methods enabled / disabled. Default is disabled.
     */
    mode?: pulumi.Input<string>;
    /**
     * Specifies the name of the profile.Name of Profile should be full path.The full path is the combination of the `partition + profile name`,For example `/Common/test-clientssl-profile`.
     */
    name: pulumi.Input<string>;
    /**
     * Specifies whether the system uses OCSP stapling. The default value is `disabled`.
     */
    ocspStapling?: pulumi.Input<string>;
    /**
     * name of partition
     */
    partition?: pulumi.Input<string>;
    /**
     * Client Certificate Constrained Delegation CA passphrase
     */
    passphrase?: pulumi.Input<string>;
    /**
     * Specifies the way the system handles client certificates.When ignore, specifies that the system ignores certificates from client systems.When require, specifies that the system requires a client to present a valid certificate.When request, specifies that the system requests a valid certificate from a client but always authenticate the client.
     */
    peerCertMode?: pulumi.Input<string>;
    /**
     * Proxy CA Cert
     */
    proxyCaCert?: pulumi.Input<string>;
    /**
     * Proxy CA Key
     */
    proxyCaKey?: pulumi.Input<string>;
    /**
     * Proxy CA Passphrase
     */
    proxyCaPassphrase?: pulumi.Input<string>;
    /**
     * Proxy SSL enabled / disabled. Default is disabled.
     */
    proxySsl?: pulumi.Input<string>;
    /**
     * Proxy SSL passthrough enabled / disabled. Default is disabled.
     */
    proxySslPassthrough?: pulumi.Input<string>;
    /**
     * Renogotiate Period (seconds)
     */
    renegotiatePeriod?: pulumi.Input<string>;
    /**
     * Renogotiate Size
     */
    renegotiateSize?: pulumi.Input<string>;
    /**
     * Enables or disables SSL renegotiation.When creating a new profile, the setting is provided by the parent profile
     */
    renegotiation?: pulumi.Input<string>;
    /**
     * When `true`, client certificate is retained in SSL session.
     */
    retainCertificate?: pulumi.Input<string>;
    /**
     * Specifies the method of secure renegotiations for SSL connections. When creating a new profile, the setting is provided by the parent profile.
     * When `request` is set the system request secure renegotation of SSL connections.
     * `require` is a default setting and when set the system permits initial SSL handshakes from clients but terminates renegotiations from unpatched clients.
     * The `require-strict` setting the system requires strict renegotiation of SSL connections. In this mode the system refuses connections to insecure servers, and terminates existing SSL connections to insecure servers
     */
    secureRenegotiation?: pulumi.Input<string>;
    /**
     * Specifies the fully qualified DNS hostname of the server used in Server Name Indication communications. When creating a new profile, the setting is provided by the parent profile.The server name can also be a wildcard string containing the asterisk `*` character.
     */
    serverName?: pulumi.Input<string>;
    /**
     * Session Mirroring (enabled / disabled)
     */
    sessionMirroring?: pulumi.Input<string>;
    /**
     * Session Ticket (enabled / disabled)
     */
    sessionTicket?: pulumi.Input<string>;
    /**
     * Indicates that the system uses this profile as the default SSL profile when there is no match to the server name, or when the client provides no SNI extension support.When creating a new profile, the setting is provided by the parent profile.
     * There can be only one SSL profile with this setting enabled.
     */
    sniDefault?: pulumi.Input<string>;
    /**
     * Requires that the network peers also provide SNI support, this setting only takes effect when `sniDefault` is set to `true`.When creating a new profile, the setting is provided by the parent profile
     */
    sniRequire?: pulumi.Input<string>;
    /**
     * Enables or disables SSL client certificate constrained delegation. The default option is disabled. Conversely, you can specify enabled to use the SSL client certificate constrained delegation.
     */
    sslC3d?: pulumi.Input<string>;
    /**
     * Specifies whether SSL forward proxy feature is enabled or not. The default value is disabled.
     */
    sslForwardProxy?: pulumi.Input<string>;
    /**
     * Specifies whether SSL forward proxy bypass feature is enabled or not. The default value is disabled.
     */
    sslForwardProxyBypass?: pulumi.Input<string>;
    /**
     * SSL sign hash (any, sha1, sha256, sha384)
     */
    sslSignHash?: pulumi.Input<string>;
    /**
     * Enables or disables the resumption of SSL sessions after an unclean shutdown.When creating a new profile, the setting is provided by the parent profile.
     */
    strictResume?: pulumi.Input<string>;
    /**
     * List of Enabled selection from a set of industry standard options for handling SSL processing.By default,
     * Don't insert empty fragments and No TLSv1.3 are listed as Enabled Options. `Usage` : tmOptions    = ["dont-insert-empty-fragments","no-tlsv1.3"]
     */
    tmOptions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unclean Shutdown (enabled / disabled)
     */
    uncleanShutdown?: pulumi.Input<string>;
}
