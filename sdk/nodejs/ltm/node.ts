// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Node extends pulumi.CustomResource {
    /**
     * Get an existing Node resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NodeState, opts?: pulumi.CustomResourceOptions): Node {
        return new Node(name, <any>state, { ...opts, id: id });
    }

    /**
     * Address of the node
     */
    public readonly address: pulumi.Output<string>;
    /**
     * Specifies the maximum number of connections allowed for the node or node address.
     */
    public readonly connectionLimit: pulumi.Output<number | undefined>;
    /**
     * Sets the dynamic ratio number for the node. Used for dynamic ratio load balancing.
     */
    public readonly dynamicRatio: pulumi.Output<number | undefined>;
    public readonly fqdn: pulumi.Output<{ addressFamily?: string, autopopulate?: string, downinterval?: number, interval?: string, name?: string } | undefined>;
    /**
     * Specifies the name of the monitor or monitor rule that you want to associate with the node.
     */
    public readonly monitor: pulumi.Output<string | undefined>;
    /**
     * Name of the node
     */
    public readonly name: pulumi.Output<string>;
    /**
     * Specifies the maximum number of connections per second allowed for a node or node address. The default value is
     * 'disabled'.
     */
    public readonly rateLimit: pulumi.Output<string | undefined>;
    /**
     * Marks the node up or down. The default value is user-up.
     */
    public readonly state: pulumi.Output<string | undefined>;

    /**
     * Create a Node resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NodeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NodeArgs | NodeState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: NodeState = argsOrState as NodeState | undefined;
            inputs["address"] = state ? state.address : undefined;
            inputs["connectionLimit"] = state ? state.connectionLimit : undefined;
            inputs["dynamicRatio"] = state ? state.dynamicRatio : undefined;
            inputs["fqdn"] = state ? state.fqdn : undefined;
            inputs["monitor"] = state ? state.monitor : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["rateLimit"] = state ? state.rateLimit : undefined;
            inputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as NodeArgs | undefined;
            if (!args || args.address === undefined) {
                throw new Error("Missing required property 'address'");
            }
            if (!args || args.name === undefined) {
                throw new Error("Missing required property 'name'");
            }
            inputs["address"] = args ? args.address : undefined;
            inputs["connectionLimit"] = args ? args.connectionLimit : undefined;
            inputs["dynamicRatio"] = args ? args.dynamicRatio : undefined;
            inputs["fqdn"] = args ? args.fqdn : undefined;
            inputs["monitor"] = args ? args.monitor : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["rateLimit"] = args ? args.rateLimit : undefined;
            inputs["state"] = args ? args.state : undefined;
        }
        super("f5bigip:ltm/node:Node", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Node resources.
 */
export interface NodeState {
    /**
     * Address of the node
     */
    readonly address?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of connections allowed for the node or node address.
     */
    readonly connectionLimit?: pulumi.Input<number>;
    /**
     * Sets the dynamic ratio number for the node. Used for dynamic ratio load balancing.
     */
    readonly dynamicRatio?: pulumi.Input<number>;
    readonly fqdn?: pulumi.Input<{ addressFamily?: pulumi.Input<string>, autopopulate?: pulumi.Input<string>, downinterval?: pulumi.Input<number>, interval?: pulumi.Input<string>, name?: pulumi.Input<string> }>;
    /**
     * Specifies the name of the monitor or monitor rule that you want to associate with the node.
     */
    readonly monitor?: pulumi.Input<string>;
    /**
     * Name of the node
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Specifies the maximum number of connections per second allowed for a node or node address. The default value is
     * 'disabled'.
     */
    readonly rateLimit?: pulumi.Input<string>;
    /**
     * Marks the node up or down. The default value is user-up.
     */
    readonly state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Node resource.
 */
export interface NodeArgs {
    /**
     * Address of the node
     */
    readonly address: pulumi.Input<string>;
    /**
     * Specifies the maximum number of connections allowed for the node or node address.
     */
    readonly connectionLimit?: pulumi.Input<number>;
    /**
     * Sets the dynamic ratio number for the node. Used for dynamic ratio load balancing.
     */
    readonly dynamicRatio?: pulumi.Input<number>;
    readonly fqdn?: pulumi.Input<{ addressFamily?: pulumi.Input<string>, autopopulate?: pulumi.Input<string>, downinterval?: pulumi.Input<number>, interval?: pulumi.Input<string>, name?: pulumi.Input<string> }>;
    /**
     * Specifies the name of the monitor or monitor rule that you want to associate with the node.
     */
    readonly monitor?: pulumi.Input<string>;
    /**
     * Name of the node
     */
    readonly name: pulumi.Input<string>;
    /**
     * Specifies the maximum number of connections per second allowed for a node or node address. The default value is
     * 'disabled'.
     */
    readonly rateLimit?: pulumi.Input<string>;
    /**
     * Marks the node up or down. The default value is user-up.
     */
    readonly state?: pulumi.Input<string>;
}
