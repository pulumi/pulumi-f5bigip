// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Configures a cookie persistence profile
 *
 * ## Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as f5bigip from "@pulumi/f5bigip";
 *
 * const testPpcookie = new f5bigip.ltm.PersistenceProfileCookie("test_ppcookie", {
 *     name: "/Common/terraform_cookie",
 *     defaultsFrom: "/Common/cookie",
 *     matchAcrossPools: "enabled",
 *     matchAcrossServices: "enabled",
 *     matchAcrossVirtuals: "enabled",
 *     timeout: 3600,
 *     overrideConnLimit: "enabled",
 *     alwaysSend: "enabled",
 *     cookieEncryption: "required",
 *     cookieEncryptionPassphrase: "iam",
 *     cookieName: "ham",
 *     expiration: "1:0:0",
 *     hashLength: 0,
 * });
 * ```
 *
 * ## Reference
 *
 * `name` - (Required) Name of the virtual address
 *
 * `defaultsFrom` - (Required) Parent cookie persistence profile
 *
 * `matchAcrossPools` (Optional) (enabled or disabled) match across pools with given persistence record
 *
 * `matchAcrossServices` (Optional) (enabled or disabled) match across services with given persistence record
 *
 * `matchAcrossVirtuals` (Optional) (enabled or disabled) match across virtual servers with given persistence record
 *
 * `method` (Optional) Specifies the type of cookie processing that the system uses. The default value is insert
 *
 * `mirror` (Optional) (enabled or disabled) mirror persistence record
 *
 * `timeout` (Optional) (enabled or disabled) Timeout for persistence of the session in seconds
 *
 * `overrideConnLimit` (Optional) (enabled or disabled) Enable or dissable pool member connection limits are overridden for persisted clients. Per-virtual connection limits remain hard limits and are not overridden.
 *
 * `alwaysSend` (Optional) (enabled or disabled) always send cookies
 *
 * `cookieEncryption` (Optional) (required, preferred, or disabled) To required, preferred, or disabled policy for cookie encryption
 *
 * `cookieEncryptionPassphrase` (Optional) (required, preferred, or disabled) Passphrase for encrypted cookies. The field is encrypted on the server and will always return differently then set.
 * If this is configured specify `ignoreChanges` under the `lifecycle` block to ignore returned encrypted value.
 *
 * `cookieName` (Optional) Name of the cookie to track persistence
 *
 * `expiration` (Optional) Expiration TTL for cookie specified in DAY:HOUR:MIN:SECONDS (Examples: 1:0:0:0 one day, 1:0:0 one hour, 30:0 thirty minutes)
 *
 * `hashLength` (Optional) (Integer) Length of hash to apply to cookie
 *
 * `hashOffset` (Optional) (Integer) Number of characters to skip in the cookie for the hash
 *
 * `httponly` (Optional) (enabled or disabled) Sending only over http
 *
 * ## Importing
 *
 * An cookie persistence profile can be imported into this resource by supplying the Name in `full path` as `id`.
 * An example is below:
 * ```sh
 * $ terraform import bigip_ltm_persistence_profile_cookie.test_ppcookie "/Common/terraform_cookie"
 * ```
 */
export class PersistenceProfileCookie extends pulumi.CustomResource {
    /**
     * Get an existing PersistenceProfileCookie resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PersistenceProfileCookieState, opts?: pulumi.CustomResourceOptions): PersistenceProfileCookie {
        return new PersistenceProfileCookie(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'f5bigip:ltm/persistenceProfileCookie:PersistenceProfileCookie';

    /**
     * Returns true if the given object is an instance of PersistenceProfileCookie.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PersistenceProfileCookie {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PersistenceProfileCookie.__pulumiType;
    }

    /**
     * To enable _ disable always sending cookies
     */
    declare public readonly alwaysSend: pulumi.Output<string>;
    declare public readonly appService: pulumi.Output<string>;
    /**
     * To required, preferred, or disabled policy for cookie encryption
     */
    declare public readonly cookieEncryption: pulumi.Output<string>;
    /**
     * Passphrase for encrypted cookies
     */
    declare public readonly cookieEncryptionPassphrase: pulumi.Output<string>;
    /**
     * Name of the cookie to track persistence
     */
    declare public readonly cookieName: pulumi.Output<string>;
    /**
     * Inherit defaults from parent profile
     */
    declare public readonly defaultsFrom: pulumi.Output<string>;
    /**
     * Expiration TTL for cookie specified in D:H:M:S or in seconds
     */
    declare public readonly expiration: pulumi.Output<string>;
    /**
     * Length of hash to apply to cookie
     */
    declare public readonly hashLength: pulumi.Output<number>;
    /**
     * Number of characters to skip in the cookie for the hash
     */
    declare public readonly hashOffset: pulumi.Output<number>;
    /**
     * To enable _ disable sending only over http
     */
    declare public readonly httponly: pulumi.Output<string>;
    /**
     * To enable _ disable match across pools with given persistence record
     */
    declare public readonly matchAcrossPools: pulumi.Output<string>;
    /**
     * To enable _ disable match across services with given persistence record
     */
    declare public readonly matchAcrossServices: pulumi.Output<string>;
    /**
     * To enable _ disable match across virtual servers with given persistence record
     */
    declare public readonly matchAcrossVirtuals: pulumi.Output<string>;
    /**
     * Specifies the type of cookie processing that the system uses
     */
    declare public readonly method: pulumi.Output<string>;
    /**
     * To enable _ disable
     */
    declare public readonly mirror: pulumi.Output<string>;
    /**
     * Name of the persistence profile
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * To enable _ disable that pool member connection limits are overridden for persisted clients. Per-virtual connection limits remain hard limits and are not overridden.
     */
    declare public readonly overrideConnLimit: pulumi.Output<string>;
    /**
     * Timeout for persistence of the session
     */
    declare public readonly timeout: pulumi.Output<number>;

    /**
     * Create a PersistenceProfileCookie resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PersistenceProfileCookieArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PersistenceProfileCookieArgs | PersistenceProfileCookieState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PersistenceProfileCookieState | undefined;
            resourceInputs["alwaysSend"] = state?.alwaysSend;
            resourceInputs["appService"] = state?.appService;
            resourceInputs["cookieEncryption"] = state?.cookieEncryption;
            resourceInputs["cookieEncryptionPassphrase"] = state?.cookieEncryptionPassphrase;
            resourceInputs["cookieName"] = state?.cookieName;
            resourceInputs["defaultsFrom"] = state?.defaultsFrom;
            resourceInputs["expiration"] = state?.expiration;
            resourceInputs["hashLength"] = state?.hashLength;
            resourceInputs["hashOffset"] = state?.hashOffset;
            resourceInputs["httponly"] = state?.httponly;
            resourceInputs["matchAcrossPools"] = state?.matchAcrossPools;
            resourceInputs["matchAcrossServices"] = state?.matchAcrossServices;
            resourceInputs["matchAcrossVirtuals"] = state?.matchAcrossVirtuals;
            resourceInputs["method"] = state?.method;
            resourceInputs["mirror"] = state?.mirror;
            resourceInputs["name"] = state?.name;
            resourceInputs["overrideConnLimit"] = state?.overrideConnLimit;
            resourceInputs["timeout"] = state?.timeout;
        } else {
            const args = argsOrState as PersistenceProfileCookieArgs | undefined;
            if (args?.defaultsFrom === undefined && !opts.urn) {
                throw new Error("Missing required property 'defaultsFrom'");
            }
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["alwaysSend"] = args?.alwaysSend;
            resourceInputs["appService"] = args?.appService;
            resourceInputs["cookieEncryption"] = args?.cookieEncryption;
            resourceInputs["cookieEncryptionPassphrase"] = args?.cookieEncryptionPassphrase;
            resourceInputs["cookieName"] = args?.cookieName;
            resourceInputs["defaultsFrom"] = args?.defaultsFrom;
            resourceInputs["expiration"] = args?.expiration;
            resourceInputs["hashLength"] = args?.hashLength;
            resourceInputs["hashOffset"] = args?.hashOffset;
            resourceInputs["httponly"] = args?.httponly;
            resourceInputs["matchAcrossPools"] = args?.matchAcrossPools;
            resourceInputs["matchAcrossServices"] = args?.matchAcrossServices;
            resourceInputs["matchAcrossVirtuals"] = args?.matchAcrossVirtuals;
            resourceInputs["method"] = args?.method;
            resourceInputs["mirror"] = args?.mirror;
            resourceInputs["name"] = args?.name;
            resourceInputs["overrideConnLimit"] = args?.overrideConnLimit;
            resourceInputs["timeout"] = args?.timeout;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PersistenceProfileCookie.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PersistenceProfileCookie resources.
 */
export interface PersistenceProfileCookieState {
    /**
     * To enable _ disable always sending cookies
     */
    alwaysSend?: pulumi.Input<string>;
    appService?: pulumi.Input<string>;
    /**
     * To required, preferred, or disabled policy for cookie encryption
     */
    cookieEncryption?: pulumi.Input<string>;
    /**
     * Passphrase for encrypted cookies
     */
    cookieEncryptionPassphrase?: pulumi.Input<string>;
    /**
     * Name of the cookie to track persistence
     */
    cookieName?: pulumi.Input<string>;
    /**
     * Inherit defaults from parent profile
     */
    defaultsFrom?: pulumi.Input<string>;
    /**
     * Expiration TTL for cookie specified in D:H:M:S or in seconds
     */
    expiration?: pulumi.Input<string>;
    /**
     * Length of hash to apply to cookie
     */
    hashLength?: pulumi.Input<number>;
    /**
     * Number of characters to skip in the cookie for the hash
     */
    hashOffset?: pulumi.Input<number>;
    /**
     * To enable _ disable sending only over http
     */
    httponly?: pulumi.Input<string>;
    /**
     * To enable _ disable match across pools with given persistence record
     */
    matchAcrossPools?: pulumi.Input<string>;
    /**
     * To enable _ disable match across services with given persistence record
     */
    matchAcrossServices?: pulumi.Input<string>;
    /**
     * To enable _ disable match across virtual servers with given persistence record
     */
    matchAcrossVirtuals?: pulumi.Input<string>;
    /**
     * Specifies the type of cookie processing that the system uses
     */
    method?: pulumi.Input<string>;
    /**
     * To enable _ disable
     */
    mirror?: pulumi.Input<string>;
    /**
     * Name of the persistence profile
     */
    name?: pulumi.Input<string>;
    /**
     * To enable _ disable that pool member connection limits are overridden for persisted clients. Per-virtual connection limits remain hard limits and are not overridden.
     */
    overrideConnLimit?: pulumi.Input<string>;
    /**
     * Timeout for persistence of the session
     */
    timeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a PersistenceProfileCookie resource.
 */
export interface PersistenceProfileCookieArgs {
    /**
     * To enable _ disable always sending cookies
     */
    alwaysSend?: pulumi.Input<string>;
    appService?: pulumi.Input<string>;
    /**
     * To required, preferred, or disabled policy for cookie encryption
     */
    cookieEncryption?: pulumi.Input<string>;
    /**
     * Passphrase for encrypted cookies
     */
    cookieEncryptionPassphrase?: pulumi.Input<string>;
    /**
     * Name of the cookie to track persistence
     */
    cookieName?: pulumi.Input<string>;
    /**
     * Inherit defaults from parent profile
     */
    defaultsFrom: pulumi.Input<string>;
    /**
     * Expiration TTL for cookie specified in D:H:M:S or in seconds
     */
    expiration?: pulumi.Input<string>;
    /**
     * Length of hash to apply to cookie
     */
    hashLength?: pulumi.Input<number>;
    /**
     * Number of characters to skip in the cookie for the hash
     */
    hashOffset?: pulumi.Input<number>;
    /**
     * To enable _ disable sending only over http
     */
    httponly?: pulumi.Input<string>;
    /**
     * To enable _ disable match across pools with given persistence record
     */
    matchAcrossPools?: pulumi.Input<string>;
    /**
     * To enable _ disable match across services with given persistence record
     */
    matchAcrossServices?: pulumi.Input<string>;
    /**
     * To enable _ disable match across virtual servers with given persistence record
     */
    matchAcrossVirtuals?: pulumi.Input<string>;
    /**
     * Specifies the type of cookie processing that the system uses
     */
    method?: pulumi.Input<string>;
    /**
     * To enable _ disable
     */
    mirror?: pulumi.Input<string>;
    /**
     * Name of the persistence profile
     */
    name: pulumi.Input<string>;
    /**
     * To enable _ disable that pool member connection limits are overridden for persisted clients. Per-virtual connection limits remain hard limits and are not overridden.
     */
    overrideConnLimit?: pulumi.Input<string>;
    /**
     * Timeout for persistence of the session
     */
    timeout?: pulumi.Input<number>;
}
