// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CipherGroupArgs, CipherGroupState } from "./cipherGroup";
export type CipherGroup = import("./cipherGroup").CipherGroup;
export const CipherGroup: typeof import("./cipherGroup").CipherGroup = null as any;
utilities.lazyLoad(exports, ["CipherGroup"], () => require("./cipherGroup"));

export { CipherRuleArgs, CipherRuleState } from "./cipherRule";
export type CipherRule = import("./cipherRule").CipherRule;
export const CipherRule: typeof import("./cipherRule").CipherRule = null as any;
utilities.lazyLoad(exports, ["CipherRule"], () => require("./cipherRule"));

export { DataGroupArgs, DataGroupState } from "./dataGroup";
export type DataGroup = import("./dataGroup").DataGroup;
export const DataGroup: typeof import("./dataGroup").DataGroup = null as any;
utilities.lazyLoad(exports, ["DataGroup"], () => require("./dataGroup"));

export { GetDataGroupArgs, GetDataGroupResult, GetDataGroupOutputArgs } from "./getDataGroup";
export const getDataGroup: typeof import("./getDataGroup").getDataGroup = null as any;
export const getDataGroupOutput: typeof import("./getDataGroup").getDataGroupOutput = null as any;
utilities.lazyLoad(exports, ["getDataGroup","getDataGroupOutput"], () => require("./getDataGroup"));

export { GetIruleArgs, GetIruleResult, GetIruleOutputArgs } from "./getIrule";
export const getIrule: typeof import("./getIrule").getIrule = null as any;
export const getIruleOutput: typeof import("./getIrule").getIruleOutput = null as any;
utilities.lazyLoad(exports, ["getIrule","getIruleOutput"], () => require("./getIrule"));

export { GetMonitorArgs, GetMonitorResult, GetMonitorOutputArgs } from "./getMonitor";
export const getMonitor: typeof import("./getMonitor").getMonitor = null as any;
export const getMonitorOutput: typeof import("./getMonitor").getMonitorOutput = null as any;
utilities.lazyLoad(exports, ["getMonitor","getMonitorOutput"], () => require("./getMonitor"));

export { GetNodeArgs, GetNodeResult, GetNodeOutputArgs } from "./getNode";
export const getNode: typeof import("./getNode").getNode = null as any;
export const getNodeOutput: typeof import("./getNode").getNodeOutput = null as any;
utilities.lazyLoad(exports, ["getNode","getNodeOutput"], () => require("./getNode"));

export { GetPolicyArgs, GetPolicyResult, GetPolicyOutputArgs } from "./getPolicy";
export const getPolicy: typeof import("./getPolicy").getPolicy = null as any;
export const getPolicyOutput: typeof import("./getPolicy").getPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPolicy","getPolicyOutput"], () => require("./getPolicy"));

export { GetPoolArgs, GetPoolResult, GetPoolOutputArgs } from "./getPool";
export const getPool: typeof import("./getPool").getPool = null as any;
export const getPoolOutput: typeof import("./getPool").getPoolOutput = null as any;
utilities.lazyLoad(exports, ["getPool","getPoolOutput"], () => require("./getPool"));

export { IRuleArgs, IRuleState } from "./irule";
export type IRule = import("./irule").IRule;
export const IRule: typeof import("./irule").IRule = null as any;
utilities.lazyLoad(exports, ["IRule"], () => require("./irule"));

export { MonitorArgs, MonitorState } from "./monitor";
export type Monitor = import("./monitor").Monitor;
export const Monitor: typeof import("./monitor").Monitor = null as any;
utilities.lazyLoad(exports, ["Monitor"], () => require("./monitor"));

export { NodeArgs, NodeState } from "./node";
export type Node = import("./node").Node;
export const Node: typeof import("./node").Node = null as any;
utilities.lazyLoad(exports, ["Node"], () => require("./node"));

export { PersistenceProfileCookieArgs, PersistenceProfileCookieState } from "./persistenceProfileCookie";
export type PersistenceProfileCookie = import("./persistenceProfileCookie").PersistenceProfileCookie;
export const PersistenceProfileCookie: typeof import("./persistenceProfileCookie").PersistenceProfileCookie = null as any;
utilities.lazyLoad(exports, ["PersistenceProfileCookie"], () => require("./persistenceProfileCookie"));

export { PersistenceProfileDstAddrArgs, PersistenceProfileDstAddrState } from "./persistenceProfileDstAddr";
export type PersistenceProfileDstAddr = import("./persistenceProfileDstAddr").PersistenceProfileDstAddr;
export const PersistenceProfileDstAddr: typeof import("./persistenceProfileDstAddr").PersistenceProfileDstAddr = null as any;
utilities.lazyLoad(exports, ["PersistenceProfileDstAddr"], () => require("./persistenceProfileDstAddr"));

export { PersistenceProfileSrcAddrArgs, PersistenceProfileSrcAddrState } from "./persistenceProfileSrcAddr";
export type PersistenceProfileSrcAddr = import("./persistenceProfileSrcAddr").PersistenceProfileSrcAddr;
export const PersistenceProfileSrcAddr: typeof import("./persistenceProfileSrcAddr").PersistenceProfileSrcAddr = null as any;
utilities.lazyLoad(exports, ["PersistenceProfileSrcAddr"], () => require("./persistenceProfileSrcAddr"));

export { PersistenceProfileSslArgs, PersistenceProfileSslState } from "./persistenceProfileSsl";
export type PersistenceProfileSsl = import("./persistenceProfileSsl").PersistenceProfileSsl;
export const PersistenceProfileSsl: typeof import("./persistenceProfileSsl").PersistenceProfileSsl = null as any;
utilities.lazyLoad(exports, ["PersistenceProfileSsl"], () => require("./persistenceProfileSsl"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export { PoolArgs, PoolState } from "./pool";
export type Pool = import("./pool").Pool;
export const Pool: typeof import("./pool").Pool = null as any;
utilities.lazyLoad(exports, ["Pool"], () => require("./pool"));

export { PoolAttachmentArgs, PoolAttachmentState } from "./poolAttachment";
export type PoolAttachment = import("./poolAttachment").PoolAttachment;
export const PoolAttachment: typeof import("./poolAttachment").PoolAttachment = null as any;
utilities.lazyLoad(exports, ["PoolAttachment"], () => require("./poolAttachment"));

export { ProfileBotDefenseArgs, ProfileBotDefenseState } from "./profileBotDefense";
export type ProfileBotDefense = import("./profileBotDefense").ProfileBotDefense;
export const ProfileBotDefense: typeof import("./profileBotDefense").ProfileBotDefense = null as any;
utilities.lazyLoad(exports, ["ProfileBotDefense"], () => require("./profileBotDefense"));

export { ProfileClientSslArgs, ProfileClientSslState } from "./profileClientSsl";
export type ProfileClientSsl = import("./profileClientSsl").ProfileClientSsl;
export const ProfileClientSsl: typeof import("./profileClientSsl").ProfileClientSsl = null as any;
utilities.lazyLoad(exports, ["ProfileClientSsl"], () => require("./profileClientSsl"));

export { ProfileFastHttpArgs, ProfileFastHttpState } from "./profileFastHttp";
export type ProfileFastHttp = import("./profileFastHttp").ProfileFastHttp;
export const ProfileFastHttp: typeof import("./profileFastHttp").ProfileFastHttp = null as any;
utilities.lazyLoad(exports, ["ProfileFastHttp"], () => require("./profileFastHttp"));

export { ProfileFastL4Args, ProfileFastL4State } from "./profileFastL4";
export type ProfileFastL4 = import("./profileFastL4").ProfileFastL4;
export const ProfileFastL4: typeof import("./profileFastL4").ProfileFastL4 = null as any;
utilities.lazyLoad(exports, ["ProfileFastL4"], () => require("./profileFastL4"));

export { ProfileFtpArgs, ProfileFtpState } from "./profileFtp";
export type ProfileFtp = import("./profileFtp").ProfileFtp;
export const ProfileFtp: typeof import("./profileFtp").ProfileFtp = null as any;
utilities.lazyLoad(exports, ["ProfileFtp"], () => require("./profileFtp"));

export { ProfileHttpArgs, ProfileHttpState } from "./profileHttp";
export type ProfileHttp = import("./profileHttp").ProfileHttp;
export const ProfileHttp: typeof import("./profileHttp").ProfileHttp = null as any;
utilities.lazyLoad(exports, ["ProfileHttp"], () => require("./profileHttp"));

export { ProfileHttp2Args, ProfileHttp2State } from "./profileHttp2";
export type ProfileHttp2 = import("./profileHttp2").ProfileHttp2;
export const ProfileHttp2: typeof import("./profileHttp2").ProfileHttp2 = null as any;
utilities.lazyLoad(exports, ["ProfileHttp2"], () => require("./profileHttp2"));

export { ProfileHttpCompressArgs, ProfileHttpCompressState } from "./profileHttpCompress";
export type ProfileHttpCompress = import("./profileHttpCompress").ProfileHttpCompress;
export const ProfileHttpCompress: typeof import("./profileHttpCompress").ProfileHttpCompress = null as any;
utilities.lazyLoad(exports, ["ProfileHttpCompress"], () => require("./profileHttpCompress"));

export { ProfileOneConnectArgs, ProfileOneConnectState } from "./profileOneConnect";
export type ProfileOneConnect = import("./profileOneConnect").ProfileOneConnect;
export const ProfileOneConnect: typeof import("./profileOneConnect").ProfileOneConnect = null as any;
utilities.lazyLoad(exports, ["ProfileOneConnect"], () => require("./profileOneConnect"));

export { ProfileRewriteArgs, ProfileRewriteState } from "./profileRewrite";
export type ProfileRewrite = import("./profileRewrite").ProfileRewrite;
export const ProfileRewrite: typeof import("./profileRewrite").ProfileRewrite = null as any;
utilities.lazyLoad(exports, ["ProfileRewrite"], () => require("./profileRewrite"));

export { ProfileRewriteUriRulesArgs, ProfileRewriteUriRulesState } from "./profileRewriteUriRules";
export type ProfileRewriteUriRules = import("./profileRewriteUriRules").ProfileRewriteUriRules;
export const ProfileRewriteUriRules: typeof import("./profileRewriteUriRules").ProfileRewriteUriRules = null as any;
utilities.lazyLoad(exports, ["ProfileRewriteUriRules"], () => require("./profileRewriteUriRules"));

export { ProfileServerSslArgs, ProfileServerSslState } from "./profileServerSsl";
export type ProfileServerSsl = import("./profileServerSsl").ProfileServerSsl;
export const ProfileServerSsl: typeof import("./profileServerSsl").ProfileServerSsl = null as any;
utilities.lazyLoad(exports, ["ProfileServerSsl"], () => require("./profileServerSsl"));

export { ProfileTcpArgs, ProfileTcpState } from "./profileTcp";
export type ProfileTcp = import("./profileTcp").ProfileTcp;
export const ProfileTcp: typeof import("./profileTcp").ProfileTcp = null as any;
utilities.lazyLoad(exports, ["ProfileTcp"], () => require("./profileTcp"));

export { ProfileWebAccelerationArgs, ProfileWebAccelerationState } from "./profileWebAcceleration";
export type ProfileWebAcceleration = import("./profileWebAcceleration").ProfileWebAcceleration;
export const ProfileWebAcceleration: typeof import("./profileWebAcceleration").ProfileWebAcceleration = null as any;
utilities.lazyLoad(exports, ["ProfileWebAcceleration"], () => require("./profileWebAcceleration"));

export { RequestLogProfileArgs, RequestLogProfileState } from "./requestLogProfile";
export type RequestLogProfile = import("./requestLogProfile").RequestLogProfile;
export const RequestLogProfile: typeof import("./requestLogProfile").RequestLogProfile = null as any;
utilities.lazyLoad(exports, ["RequestLogProfile"], () => require("./requestLogProfile"));

export { SnatArgs, SnatState } from "./snat";
export type Snat = import("./snat").Snat;
export const Snat: typeof import("./snat").Snat = null as any;
utilities.lazyLoad(exports, ["Snat"], () => require("./snat"));

export { SnatPoolArgs, SnatPoolState } from "./snatPool";
export type SnatPool = import("./snatPool").SnatPool;
export const SnatPool: typeof import("./snatPool").SnatPool = null as any;
utilities.lazyLoad(exports, ["SnatPool"], () => require("./snatPool"));

export { VirtualAddressArgs, VirtualAddressState } from "./virtualAddress";
export type VirtualAddress = import("./virtualAddress").VirtualAddress;
export const VirtualAddress: typeof import("./virtualAddress").VirtualAddress = null as any;
utilities.lazyLoad(exports, ["VirtualAddress"], () => require("./virtualAddress"));

export { VirtualServerArgs, VirtualServerState } from "./virtualServer";
export type VirtualServer = import("./virtualServer").VirtualServer;
export const VirtualServer: typeof import("./virtualServer").VirtualServer = null as any;
utilities.lazyLoad(exports, ["VirtualServer"], () => require("./virtualServer"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "f5bigip:ltm/cipherGroup:CipherGroup":
                return new CipherGroup(name, <any>undefined, { urn })
            case "f5bigip:ltm/cipherRule:CipherRule":
                return new CipherRule(name, <any>undefined, { urn })
            case "f5bigip:ltm/dataGroup:DataGroup":
                return new DataGroup(name, <any>undefined, { urn })
            case "f5bigip:ltm/iRule:IRule":
                return new IRule(name, <any>undefined, { urn })
            case "f5bigip:ltm/monitor:Monitor":
                return new Monitor(name, <any>undefined, { urn })
            case "f5bigip:ltm/node:Node":
                return new Node(name, <any>undefined, { urn })
            case "f5bigip:ltm/persistenceProfileCookie:PersistenceProfileCookie":
                return new PersistenceProfileCookie(name, <any>undefined, { urn })
            case "f5bigip:ltm/persistenceProfileDstAddr:PersistenceProfileDstAddr":
                return new PersistenceProfileDstAddr(name, <any>undefined, { urn })
            case "f5bigip:ltm/persistenceProfileSrcAddr:PersistenceProfileSrcAddr":
                return new PersistenceProfileSrcAddr(name, <any>undefined, { urn })
            case "f5bigip:ltm/persistenceProfileSsl:PersistenceProfileSsl":
                return new PersistenceProfileSsl(name, <any>undefined, { urn })
            case "f5bigip:ltm/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "f5bigip:ltm/pool:Pool":
                return new Pool(name, <any>undefined, { urn })
            case "f5bigip:ltm/poolAttachment:PoolAttachment":
                return new PoolAttachment(name, <any>undefined, { urn })
            case "f5bigip:ltm/profileBotDefense:ProfileBotDefense":
                return new ProfileBotDefense(name, <any>undefined, { urn })
            case "f5bigip:ltm/profileClientSsl:ProfileClientSsl":
                return new ProfileClientSsl(name, <any>undefined, { urn })
            case "f5bigip:ltm/profileFastHttp:ProfileFastHttp":
                return new ProfileFastHttp(name, <any>undefined, { urn })
            case "f5bigip:ltm/profileFastL4:ProfileFastL4":
                return new ProfileFastL4(name, <any>undefined, { urn })
            case "f5bigip:ltm/profileFtp:ProfileFtp":
                return new ProfileFtp(name, <any>undefined, { urn })
            case "f5bigip:ltm/profileHttp2:ProfileHttp2":
                return new ProfileHttp2(name, <any>undefined, { urn })
            case "f5bigip:ltm/profileHttp:ProfileHttp":
                return new ProfileHttp(name, <any>undefined, { urn })
            case "f5bigip:ltm/profileHttpCompress:ProfileHttpCompress":
                return new ProfileHttpCompress(name, <any>undefined, { urn })
            case "f5bigip:ltm/profileOneConnect:ProfileOneConnect":
                return new ProfileOneConnect(name, <any>undefined, { urn })
            case "f5bigip:ltm/profileRewrite:ProfileRewrite":
                return new ProfileRewrite(name, <any>undefined, { urn })
            case "f5bigip:ltm/profileRewriteUriRules:ProfileRewriteUriRules":
                return new ProfileRewriteUriRules(name, <any>undefined, { urn })
            case "f5bigip:ltm/profileServerSsl:ProfileServerSsl":
                return new ProfileServerSsl(name, <any>undefined, { urn })
            case "f5bigip:ltm/profileTcp:ProfileTcp":
                return new ProfileTcp(name, <any>undefined, { urn })
            case "f5bigip:ltm/profileWebAcceleration:ProfileWebAcceleration":
                return new ProfileWebAcceleration(name, <any>undefined, { urn })
            case "f5bigip:ltm/requestLogProfile:RequestLogProfile":
                return new RequestLogProfile(name, <any>undefined, { urn })
            case "f5bigip:ltm/snat:Snat":
                return new Snat(name, <any>undefined, { urn })
            case "f5bigip:ltm/snatPool:SnatPool":
                return new SnatPool(name, <any>undefined, { urn })
            case "f5bigip:ltm/virtualAddress:VirtualAddress":
                return new VirtualAddress(name, <any>undefined, { urn })
            case "f5bigip:ltm/virtualServer:VirtualServer":
                return new VirtualServer(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("f5bigip", "ltm/cipherGroup", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/cipherRule", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/dataGroup", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/iRule", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/monitor", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/node", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/persistenceProfileCookie", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/persistenceProfileDstAddr", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/persistenceProfileSrcAddr", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/persistenceProfileSsl", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/policy", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/pool", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/poolAttachment", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/profileBotDefense", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/profileClientSsl", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/profileFastHttp", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/profileFastL4", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/profileFtp", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/profileHttp", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/profileHttp2", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/profileHttpCompress", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/profileOneConnect", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/profileRewrite", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/profileRewriteUriRules", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/profileServerSsl", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/profileTcp", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/profileWebAcceleration", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/requestLogProfile", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/snat", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/snatPool", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/virtualAddress", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ltm/virtualServer", _module)
