// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * `f5bigip.ltm.ProfileServerSsl` Manages server SSL profiles on a BIG-IP
 *
 * Resources should be named with their "full path". The full path is the combination of the partition + name (example: /Common/my-pool ) or  partition + directory + name of the resource  (example: /Common/test/my-pool )
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as f5bigip from "@pulumi/f5bigip";
 *
 * const test_ServerSsl = new f5bigip.ltm.ProfileServerSsl("test-ServerSsl", {
 *     name: "/Common/test-ServerSsl",
 *     defaultsFrom: "/Common/serverssl",
 *     authenticate: "always",
 *     ciphers: "DEFAULT",
 * });
 * ```
 *
 * ## Importing
 *
 * An existing server-ssl profile can be imported into this resource by supplying server-ssl profile Name in `full path` as `id`.
 * An example is below:
 * ```sh
 * $ terraform import bigip_ltm_profile_server_ssl.test-ServerSsl-import /Common/test-ServerSsl
 *
 * ```
 */
export class ProfileServerSsl extends pulumi.CustomResource {
    /**
     * Get an existing ProfileServerSsl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProfileServerSslState, opts?: pulumi.CustomResourceOptions): ProfileServerSsl {
        return new ProfileServerSsl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'f5bigip:ltm/profileServerSsl:ProfileServerSsl';

    /**
     * Returns true if the given object is an instance of ProfileServerSsl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProfileServerSsl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProfileServerSsl.__pulumiType;
    }

    /**
     * Alert time out
     */
    declare public readonly alertTimeout: pulumi.Output<string>;
    /**
     * Specifies the frequency of server authentication for an SSL session.When `once`,specifies that the system authenticates the server once for an SSL session.
     * When `always`, specifies that the system authenticates the server once for an SSL session and also upon reuse of that session.
     */
    declare public readonly authenticate: pulumi.Output<string>;
    /**
     * Client certificate chain traversal depth.  Default 9.
     */
    declare public readonly authenticateDepth: pulumi.Output<number>;
    /**
     * Specifies the name of the certificate file that is used as the certification authority certificate when SSL client certificate constrained delegation is enabled. The certificate should be generated and installed by you on the system. When selecting this option, type a certificate file name.
     */
    declare public readonly c3dCaCert: pulumi.Output<string | undefined>;
    /**
     * Specifies the name of the key file that is used as the certification authority key when SSL client certificate constrained delegation is enabled. The key should be generated and installed by you on the system. When selecting this option, type a key file name.
     *
     * * `c3d-ca-passphrase` (Optional) Specifies the passphrase of the key file that is used as the certification authority key when SSL client certificate constrained delegation is enabled. When selecting this option, type the passphrase corresponding to the selected c3d-ca-key.
     *
     * * `c3d-cert-extension-custom-oids` (Optional) Specifies the custom extension OID of the client certificates to be included in the generated certificates using SSL client certificate constrained delegation.
     */
    declare public readonly c3dCaKey: pulumi.Output<string | undefined>;
    /**
     * CA Passphrase. Default
     */
    declare public readonly c3dCaPassphrase: pulumi.Output<string>;
    /**
     * Certificate Extensions List.  Default
     */
    declare public readonly c3dCertExtensionCustomOids: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the extensions of the client certificates to be included in the generated certificates using SSL client certificate constrained delegation. For example, { basic-constraints }. The default value is { basic-constraints extended-key-usage key-usage subject-alternative-name }. The extensions are:
     *
     * basic-constraints
     * Basic constraints are used to indicate whether the certificate belongs
     * to a CA.
     *
     * extended-key-usage
     * Extended Key Usage is used, typically on a leaf certificate, to
     * indicate the purpose of the public key contained in the certificate.
     *
     * key-usage
     * Key Usage provides a bitmap specifying the cryptographic operations
     * which may be performed using the public key contained in the
     * certificate; for example, it could indicate that the key should be
     * used for signature but not for encipherment.
     *
     * subject-alternative-name
     * Subject Alternative Name allows identities to be bound to the subject
     * of the certificate. These identities may be included in addition to
     * or in place of the identity in the subject field of the certificate.
     *
     * * `c3d-cert-lifespan` Specifies the lifespan of the certificate generated using the SSL client certificate constrained delegation. The default value is 24.
     */
    declare public readonly c3dCertExtensionIncludes: pulumi.Output<string[] | undefined>;
    /**
     * Certificate Lifespan.  Default
     */
    declare public readonly c3dCertLifespan: pulumi.Output<number>;
    /**
     * CA Passphrase. Default enabled
     */
    declare public readonly c3dCertificateExtensions: pulumi.Output<string>;
    /**
     * Client certificate file path.  Default None.
     */
    declare public readonly caFile: pulumi.Output<string>;
    /**
     * Cache size (sessions).
     */
    declare public readonly cacheSize: pulumi.Output<number>;
    /**
     * Cache time out
     */
    declare public readonly cacheTimeout: pulumi.Output<number>;
    /**
     * Specifies the name of the certificate that the system uses for server-side SSL processing.
     */
    declare public readonly cert: pulumi.Output<string | undefined>;
    /**
     * Specifies the certificates-key chain to associate with the SSL profile
     */
    declare public readonly chain: pulumi.Output<string | undefined>;
    /**
     * Specifies the cipher group for the SSL server profile. It is mutually exclusive with the argument, `ciphers`. The default value is `none`.
     */
    declare public readonly cipherGroup: pulumi.Output<string | undefined>;
    /**
     * Specifies the list of ciphers that the system supports. When creating a new profile, the default cipher list is provided by the parent profile.
     */
    declare public readonly ciphers: pulumi.Output<string>;
    /**
     * The parent template of this monitor template. Once this value has been set, it cannot be changed. By default, this value is `/Common/serverssl`.
     */
    declare public readonly defaultsFrom: pulumi.Output<string | undefined>;
    /**
     * Response if the cert is expired (drop / ignore).
     */
    declare public readonly expireCertResponseControl: pulumi.Output<string>;
    /**
     * full path of the profile
     */
    declare public readonly fullPath: pulumi.Output<string>;
    /**
     * generation
     */
    declare public readonly generation: pulumi.Output<number>;
    /**
     * Generic alerts enabled / disabled.
     */
    declare public readonly genericAlert: pulumi.Output<string>;
    /**
     * Handshake time out (seconds)
     */
    declare public readonly handshakeTimeout: pulumi.Output<string>;
    /**
     * Specifies the file name of the SSL key.
     */
    declare public readonly key: pulumi.Output<string | undefined>;
    /**
     * ModSSL Methods enabled / disabled.  Default is disabled.
     */
    declare public readonly modSslMethods: pulumi.Output<string>;
    /**
     * ModSSL Methods enabled / disabled.  Default is disabled.
     */
    declare public readonly mode: pulumi.Output<string>;
    /**
     * Specifies the name of the profile.Name of Profile should be full path,full path is the combination of the `partition + profile name`. For example `/Common/test-serverssl-profile`.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * name of partition
     */
    declare public readonly partition: pulumi.Output<string>;
    /**
     * Client Certificate Constrained Delegation CA passphrase
     */
    declare public readonly passphrase: pulumi.Output<string>;
    /**
     * Specifies the way the system handles client certificates.When ignore, specifies that the system ignores certificates from client systems.When require, specifies that the system requires a client to present a valid certificate.When request, specifies that the system requests a valid certificate from a client but always authenticate the client.
     */
    declare public readonly peerCertMode: pulumi.Output<string>;
    /**
     * Proxy CA Cert
     */
    declare public readonly proxyCaCert: pulumi.Output<string>;
    /**
     * Proxy CA Key
     */
    declare public readonly proxyCaKey: pulumi.Output<string>;
    /**
     * Proxy SSL enabled / disabled.  Default is disabled.
     */
    declare public readonly proxySsl: pulumi.Output<string>;
    /**
     * Renogotiate Period (seconds)
     */
    declare public readonly renegotiatePeriod: pulumi.Output<string>;
    /**
     * Renogotiate Size
     */
    declare public readonly renegotiateSize: pulumi.Output<string>;
    /**
     * Enables or disables SSL renegotiation.When creating a new profile, the setting is provided by the parent profile
     */
    declare public readonly renegotiation: pulumi.Output<string>;
    /**
     * When `true`, client certificate is retained in SSL session.
     */
    declare public readonly retainCertificate: pulumi.Output<string>;
    /**
     * Specifies the method of secure renegotiations for SSL connections. When creating a new profile, the setting is provided by the parent profile.
     * When `request` is set the system request secure renegotation of SSL connections.
     * `require` is a default setting and when set the system permits initial SSL handshakes from clients but terminates renegotiations from unpatched clients.
     * The `require-strict` setting the system requires strict renegotiation of SSL connections. In this mode the system refuses connections to insecure servers, and terminates existing SSL connections to insecure servers
     */
    declare public readonly secureRenegotiation: pulumi.Output<string>;
    /**
     * Specifies the fully qualified DNS hostname of the server used in Server Name Indication communications. When creating a new profile, the setting is provided by the parent profile.The server name can also be a wildcard string containing the asterisk `*` character.
     */
    declare public readonly serverName: pulumi.Output<string>;
    /**
     * Session Mirroring (enabled / disabled)
     */
    declare public readonly sessionMirroring: pulumi.Output<string>;
    /**
     * Session Ticket (enabled / disabled)
     */
    declare public readonly sessionTicket: pulumi.Output<string>;
    /**
     * Indicates that the system uses this profile as the default SSL profile when there is no match to the server name, or when the client provides no SNI extension support.When creating a new profile, the setting is provided by the parent profile.
     * There can be only one SSL profile with this setting enabled.
     */
    declare public readonly sniDefault: pulumi.Output<string>;
    /**
     * Requires that the network peers also provide SNI support, this setting only takes effect when `sniDefault` is set to `true`.When creating a new profile, the setting is provided by the parent profile
     */
    declare public readonly sniRequire: pulumi.Output<string>;
    /**
     * Enables or disables SSL forward proxy bypass on receiving
     * handshake_failure, protocolVersion or unsupportedExtension alert message during the serverside SSL handshake. When enabled and there is an SSL handshake_failure, protocolVersion or unsupportedExtension alert during the serverside SSL handshake, SSL traffic bypasses the BIG-IP system untouched, without decryption/encryption. The default value is disabled. Conversely, you can specify enabled to use this feature.
     */
    declare public readonly sslC3d: pulumi.Output<string | undefined>;
    /**
     * Specifies whether SSL forward proxy feature is enabled or not. The default value is disabled.
     */
    declare public readonly sslForwardProxy: pulumi.Output<string>;
    /**
     * Specifies whether SSL forward proxy bypass feature is enabled or not. The default value is disabled.
     */
    declare public readonly sslForwardProxyBypass: pulumi.Output<string>;
    /**
     * SSL sign hash (any, sha1, sha256, sha384)
     */
    declare public readonly sslSignHash: pulumi.Output<string>;
    /**
     * Enables or disables the resumption of SSL sessions after an unclean shutdown.When creating a new profile, the setting is provided by the parent profile.
     */
    declare public readonly strictResume: pulumi.Output<string>;
    /**
     * List of Enabled selection from a set of industry standard options for handling SSL processing.By default,
     * Don't insert empty fragments and No TLSv1.3 are listed as Enabled Options. `Usage` : tmOptions    = ["dont-insert-empty-fragments","no-tlsv1.3"]
     */
    declare public readonly tmOptions: pulumi.Output<string[]>;
    /**
     * Unclean Shutdown (enabled / disabled)
     */
    declare public readonly uncleanShutdown: pulumi.Output<string>;
    /**
     * Unclean Shutdown (drop / ignore)
     */
    declare public readonly untrustedCertResponseControl: pulumi.Output<string>;

    /**
     * Create a ProfileServerSsl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProfileServerSslArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProfileServerSslArgs | ProfileServerSslState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProfileServerSslState | undefined;
            resourceInputs["alertTimeout"] = state?.alertTimeout;
            resourceInputs["authenticate"] = state?.authenticate;
            resourceInputs["authenticateDepth"] = state?.authenticateDepth;
            resourceInputs["c3dCaCert"] = state?.c3dCaCert;
            resourceInputs["c3dCaKey"] = state?.c3dCaKey;
            resourceInputs["c3dCaPassphrase"] = state?.c3dCaPassphrase;
            resourceInputs["c3dCertExtensionCustomOids"] = state?.c3dCertExtensionCustomOids;
            resourceInputs["c3dCertExtensionIncludes"] = state?.c3dCertExtensionIncludes;
            resourceInputs["c3dCertLifespan"] = state?.c3dCertLifespan;
            resourceInputs["c3dCertificateExtensions"] = state?.c3dCertificateExtensions;
            resourceInputs["caFile"] = state?.caFile;
            resourceInputs["cacheSize"] = state?.cacheSize;
            resourceInputs["cacheTimeout"] = state?.cacheTimeout;
            resourceInputs["cert"] = state?.cert;
            resourceInputs["chain"] = state?.chain;
            resourceInputs["cipherGroup"] = state?.cipherGroup;
            resourceInputs["ciphers"] = state?.ciphers;
            resourceInputs["defaultsFrom"] = state?.defaultsFrom;
            resourceInputs["expireCertResponseControl"] = state?.expireCertResponseControl;
            resourceInputs["fullPath"] = state?.fullPath;
            resourceInputs["generation"] = state?.generation;
            resourceInputs["genericAlert"] = state?.genericAlert;
            resourceInputs["handshakeTimeout"] = state?.handshakeTimeout;
            resourceInputs["key"] = state?.key;
            resourceInputs["modSslMethods"] = state?.modSslMethods;
            resourceInputs["mode"] = state?.mode;
            resourceInputs["name"] = state?.name;
            resourceInputs["partition"] = state?.partition;
            resourceInputs["passphrase"] = state?.passphrase;
            resourceInputs["peerCertMode"] = state?.peerCertMode;
            resourceInputs["proxyCaCert"] = state?.proxyCaCert;
            resourceInputs["proxyCaKey"] = state?.proxyCaKey;
            resourceInputs["proxySsl"] = state?.proxySsl;
            resourceInputs["renegotiatePeriod"] = state?.renegotiatePeriod;
            resourceInputs["renegotiateSize"] = state?.renegotiateSize;
            resourceInputs["renegotiation"] = state?.renegotiation;
            resourceInputs["retainCertificate"] = state?.retainCertificate;
            resourceInputs["secureRenegotiation"] = state?.secureRenegotiation;
            resourceInputs["serverName"] = state?.serverName;
            resourceInputs["sessionMirroring"] = state?.sessionMirroring;
            resourceInputs["sessionTicket"] = state?.sessionTicket;
            resourceInputs["sniDefault"] = state?.sniDefault;
            resourceInputs["sniRequire"] = state?.sniRequire;
            resourceInputs["sslC3d"] = state?.sslC3d;
            resourceInputs["sslForwardProxy"] = state?.sslForwardProxy;
            resourceInputs["sslForwardProxyBypass"] = state?.sslForwardProxyBypass;
            resourceInputs["sslSignHash"] = state?.sslSignHash;
            resourceInputs["strictResume"] = state?.strictResume;
            resourceInputs["tmOptions"] = state?.tmOptions;
            resourceInputs["uncleanShutdown"] = state?.uncleanShutdown;
            resourceInputs["untrustedCertResponseControl"] = state?.untrustedCertResponseControl;
        } else {
            const args = argsOrState as ProfileServerSslArgs | undefined;
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["alertTimeout"] = args?.alertTimeout;
            resourceInputs["authenticate"] = args?.authenticate;
            resourceInputs["authenticateDepth"] = args?.authenticateDepth;
            resourceInputs["c3dCaCert"] = args?.c3dCaCert;
            resourceInputs["c3dCaKey"] = args?.c3dCaKey;
            resourceInputs["c3dCaPassphrase"] = args?.c3dCaPassphrase;
            resourceInputs["c3dCertExtensionCustomOids"] = args?.c3dCertExtensionCustomOids;
            resourceInputs["c3dCertExtensionIncludes"] = args?.c3dCertExtensionIncludes;
            resourceInputs["c3dCertLifespan"] = args?.c3dCertLifespan;
            resourceInputs["c3dCertificateExtensions"] = args?.c3dCertificateExtensions;
            resourceInputs["caFile"] = args?.caFile;
            resourceInputs["cacheSize"] = args?.cacheSize;
            resourceInputs["cacheTimeout"] = args?.cacheTimeout;
            resourceInputs["cert"] = args?.cert;
            resourceInputs["chain"] = args?.chain;
            resourceInputs["cipherGroup"] = args?.cipherGroup;
            resourceInputs["ciphers"] = args?.ciphers;
            resourceInputs["defaultsFrom"] = args?.defaultsFrom;
            resourceInputs["expireCertResponseControl"] = args?.expireCertResponseControl;
            resourceInputs["fullPath"] = args?.fullPath;
            resourceInputs["generation"] = args?.generation;
            resourceInputs["genericAlert"] = args?.genericAlert;
            resourceInputs["handshakeTimeout"] = args?.handshakeTimeout;
            resourceInputs["key"] = args?.key;
            resourceInputs["modSslMethods"] = args?.modSslMethods;
            resourceInputs["mode"] = args?.mode;
            resourceInputs["name"] = args?.name;
            resourceInputs["partition"] = args?.partition;
            resourceInputs["passphrase"] = args?.passphrase ? pulumi.secret(args.passphrase) : undefined;
            resourceInputs["peerCertMode"] = args?.peerCertMode;
            resourceInputs["proxyCaCert"] = args?.proxyCaCert;
            resourceInputs["proxyCaKey"] = args?.proxyCaKey;
            resourceInputs["proxySsl"] = args?.proxySsl;
            resourceInputs["renegotiatePeriod"] = args?.renegotiatePeriod;
            resourceInputs["renegotiateSize"] = args?.renegotiateSize;
            resourceInputs["renegotiation"] = args?.renegotiation;
            resourceInputs["retainCertificate"] = args?.retainCertificate;
            resourceInputs["secureRenegotiation"] = args?.secureRenegotiation;
            resourceInputs["serverName"] = args?.serverName;
            resourceInputs["sessionMirroring"] = args?.sessionMirroring;
            resourceInputs["sessionTicket"] = args?.sessionTicket;
            resourceInputs["sniDefault"] = args?.sniDefault;
            resourceInputs["sniRequire"] = args?.sniRequire;
            resourceInputs["sslC3d"] = args?.sslC3d;
            resourceInputs["sslForwardProxy"] = args?.sslForwardProxy;
            resourceInputs["sslForwardProxyBypass"] = args?.sslForwardProxyBypass;
            resourceInputs["sslSignHash"] = args?.sslSignHash;
            resourceInputs["strictResume"] = args?.strictResume;
            resourceInputs["tmOptions"] = args?.tmOptions;
            resourceInputs["uncleanShutdown"] = args?.uncleanShutdown;
            resourceInputs["untrustedCertResponseControl"] = args?.untrustedCertResponseControl;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["passphrase"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ProfileServerSsl.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProfileServerSsl resources.
 */
export interface ProfileServerSslState {
    /**
     * Alert time out
     */
    alertTimeout?: pulumi.Input<string>;
    /**
     * Specifies the frequency of server authentication for an SSL session.When `once`,specifies that the system authenticates the server once for an SSL session.
     * When `always`, specifies that the system authenticates the server once for an SSL session and also upon reuse of that session.
     */
    authenticate?: pulumi.Input<string>;
    /**
     * Client certificate chain traversal depth.  Default 9.
     */
    authenticateDepth?: pulumi.Input<number>;
    /**
     * Specifies the name of the certificate file that is used as the certification authority certificate when SSL client certificate constrained delegation is enabled. The certificate should be generated and installed by you on the system. When selecting this option, type a certificate file name.
     */
    c3dCaCert?: pulumi.Input<string>;
    /**
     * Specifies the name of the key file that is used as the certification authority key when SSL client certificate constrained delegation is enabled. The key should be generated and installed by you on the system. When selecting this option, type a key file name.
     *
     * * `c3d-ca-passphrase` (Optional) Specifies the passphrase of the key file that is used as the certification authority key when SSL client certificate constrained delegation is enabled. When selecting this option, type the passphrase corresponding to the selected c3d-ca-key.
     *
     * * `c3d-cert-extension-custom-oids` (Optional) Specifies the custom extension OID of the client certificates to be included in the generated certificates using SSL client certificate constrained delegation.
     */
    c3dCaKey?: pulumi.Input<string>;
    /**
     * CA Passphrase. Default
     */
    c3dCaPassphrase?: pulumi.Input<string>;
    /**
     * Certificate Extensions List.  Default
     */
    c3dCertExtensionCustomOids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the extensions of the client certificates to be included in the generated certificates using SSL client certificate constrained delegation. For example, { basic-constraints }. The default value is { basic-constraints extended-key-usage key-usage subject-alternative-name }. The extensions are:
     *
     * basic-constraints
     * Basic constraints are used to indicate whether the certificate belongs
     * to a CA.
     *
     * extended-key-usage
     * Extended Key Usage is used, typically on a leaf certificate, to
     * indicate the purpose of the public key contained in the certificate.
     *
     * key-usage
     * Key Usage provides a bitmap specifying the cryptographic operations
     * which may be performed using the public key contained in the
     * certificate; for example, it could indicate that the key should be
     * used for signature but not for encipherment.
     *
     * subject-alternative-name
     * Subject Alternative Name allows identities to be bound to the subject
     * of the certificate. These identities may be included in addition to
     * or in place of the identity in the subject field of the certificate.
     *
     * * `c3d-cert-lifespan` Specifies the lifespan of the certificate generated using the SSL client certificate constrained delegation. The default value is 24.
     */
    c3dCertExtensionIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Certificate Lifespan.  Default
     */
    c3dCertLifespan?: pulumi.Input<number>;
    /**
     * CA Passphrase. Default enabled
     */
    c3dCertificateExtensions?: pulumi.Input<string>;
    /**
     * Client certificate file path.  Default None.
     */
    caFile?: pulumi.Input<string>;
    /**
     * Cache size (sessions).
     */
    cacheSize?: pulumi.Input<number>;
    /**
     * Cache time out
     */
    cacheTimeout?: pulumi.Input<number>;
    /**
     * Specifies the name of the certificate that the system uses for server-side SSL processing.
     */
    cert?: pulumi.Input<string>;
    /**
     * Specifies the certificates-key chain to associate with the SSL profile
     */
    chain?: pulumi.Input<string>;
    /**
     * Specifies the cipher group for the SSL server profile. It is mutually exclusive with the argument, `ciphers`. The default value is `none`.
     */
    cipherGroup?: pulumi.Input<string>;
    /**
     * Specifies the list of ciphers that the system supports. When creating a new profile, the default cipher list is provided by the parent profile.
     */
    ciphers?: pulumi.Input<string>;
    /**
     * The parent template of this monitor template. Once this value has been set, it cannot be changed. By default, this value is `/Common/serverssl`.
     */
    defaultsFrom?: pulumi.Input<string>;
    /**
     * Response if the cert is expired (drop / ignore).
     */
    expireCertResponseControl?: pulumi.Input<string>;
    /**
     * full path of the profile
     */
    fullPath?: pulumi.Input<string>;
    /**
     * generation
     */
    generation?: pulumi.Input<number>;
    /**
     * Generic alerts enabled / disabled.
     */
    genericAlert?: pulumi.Input<string>;
    /**
     * Handshake time out (seconds)
     */
    handshakeTimeout?: pulumi.Input<string>;
    /**
     * Specifies the file name of the SSL key.
     */
    key?: pulumi.Input<string>;
    /**
     * ModSSL Methods enabled / disabled.  Default is disabled.
     */
    modSslMethods?: pulumi.Input<string>;
    /**
     * ModSSL Methods enabled / disabled.  Default is disabled.
     */
    mode?: pulumi.Input<string>;
    /**
     * Specifies the name of the profile.Name of Profile should be full path,full path is the combination of the `partition + profile name`. For example `/Common/test-serverssl-profile`.
     */
    name?: pulumi.Input<string>;
    /**
     * name of partition
     */
    partition?: pulumi.Input<string>;
    /**
     * Client Certificate Constrained Delegation CA passphrase
     */
    passphrase?: pulumi.Input<string>;
    /**
     * Specifies the way the system handles client certificates.When ignore, specifies that the system ignores certificates from client systems.When require, specifies that the system requires a client to present a valid certificate.When request, specifies that the system requests a valid certificate from a client but always authenticate the client.
     */
    peerCertMode?: pulumi.Input<string>;
    /**
     * Proxy CA Cert
     */
    proxyCaCert?: pulumi.Input<string>;
    /**
     * Proxy CA Key
     */
    proxyCaKey?: pulumi.Input<string>;
    /**
     * Proxy SSL enabled / disabled.  Default is disabled.
     */
    proxySsl?: pulumi.Input<string>;
    /**
     * Renogotiate Period (seconds)
     */
    renegotiatePeriod?: pulumi.Input<string>;
    /**
     * Renogotiate Size
     */
    renegotiateSize?: pulumi.Input<string>;
    /**
     * Enables or disables SSL renegotiation.When creating a new profile, the setting is provided by the parent profile
     */
    renegotiation?: pulumi.Input<string>;
    /**
     * When `true`, client certificate is retained in SSL session.
     */
    retainCertificate?: pulumi.Input<string>;
    /**
     * Specifies the method of secure renegotiations for SSL connections. When creating a new profile, the setting is provided by the parent profile.
     * When `request` is set the system request secure renegotation of SSL connections.
     * `require` is a default setting and when set the system permits initial SSL handshakes from clients but terminates renegotiations from unpatched clients.
     * The `require-strict` setting the system requires strict renegotiation of SSL connections. In this mode the system refuses connections to insecure servers, and terminates existing SSL connections to insecure servers
     */
    secureRenegotiation?: pulumi.Input<string>;
    /**
     * Specifies the fully qualified DNS hostname of the server used in Server Name Indication communications. When creating a new profile, the setting is provided by the parent profile.The server name can also be a wildcard string containing the asterisk `*` character.
     */
    serverName?: pulumi.Input<string>;
    /**
     * Session Mirroring (enabled / disabled)
     */
    sessionMirroring?: pulumi.Input<string>;
    /**
     * Session Ticket (enabled / disabled)
     */
    sessionTicket?: pulumi.Input<string>;
    /**
     * Indicates that the system uses this profile as the default SSL profile when there is no match to the server name, or when the client provides no SNI extension support.When creating a new profile, the setting is provided by the parent profile.
     * There can be only one SSL profile with this setting enabled.
     */
    sniDefault?: pulumi.Input<string>;
    /**
     * Requires that the network peers also provide SNI support, this setting only takes effect when `sniDefault` is set to `true`.When creating a new profile, the setting is provided by the parent profile
     */
    sniRequire?: pulumi.Input<string>;
    /**
     * Enables or disables SSL forward proxy bypass on receiving
     * handshake_failure, protocolVersion or unsupportedExtension alert message during the serverside SSL handshake. When enabled and there is an SSL handshake_failure, protocolVersion or unsupportedExtension alert during the serverside SSL handshake, SSL traffic bypasses the BIG-IP system untouched, without decryption/encryption. The default value is disabled. Conversely, you can specify enabled to use this feature.
     */
    sslC3d?: pulumi.Input<string>;
    /**
     * Specifies whether SSL forward proxy feature is enabled or not. The default value is disabled.
     */
    sslForwardProxy?: pulumi.Input<string>;
    /**
     * Specifies whether SSL forward proxy bypass feature is enabled or not. The default value is disabled.
     */
    sslForwardProxyBypass?: pulumi.Input<string>;
    /**
     * SSL sign hash (any, sha1, sha256, sha384)
     */
    sslSignHash?: pulumi.Input<string>;
    /**
     * Enables or disables the resumption of SSL sessions after an unclean shutdown.When creating a new profile, the setting is provided by the parent profile.
     */
    strictResume?: pulumi.Input<string>;
    /**
     * List of Enabled selection from a set of industry standard options for handling SSL processing.By default,
     * Don't insert empty fragments and No TLSv1.3 are listed as Enabled Options. `Usage` : tmOptions    = ["dont-insert-empty-fragments","no-tlsv1.3"]
     */
    tmOptions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unclean Shutdown (enabled / disabled)
     */
    uncleanShutdown?: pulumi.Input<string>;
    /**
     * Unclean Shutdown (drop / ignore)
     */
    untrustedCertResponseControl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProfileServerSsl resource.
 */
export interface ProfileServerSslArgs {
    /**
     * Alert time out
     */
    alertTimeout?: pulumi.Input<string>;
    /**
     * Specifies the frequency of server authentication for an SSL session.When `once`,specifies that the system authenticates the server once for an SSL session.
     * When `always`, specifies that the system authenticates the server once for an SSL session and also upon reuse of that session.
     */
    authenticate?: pulumi.Input<string>;
    /**
     * Client certificate chain traversal depth.  Default 9.
     */
    authenticateDepth?: pulumi.Input<number>;
    /**
     * Specifies the name of the certificate file that is used as the certification authority certificate when SSL client certificate constrained delegation is enabled. The certificate should be generated and installed by you on the system. When selecting this option, type a certificate file name.
     */
    c3dCaCert?: pulumi.Input<string>;
    /**
     * Specifies the name of the key file that is used as the certification authority key when SSL client certificate constrained delegation is enabled. The key should be generated and installed by you on the system. When selecting this option, type a key file name.
     *
     * * `c3d-ca-passphrase` (Optional) Specifies the passphrase of the key file that is used as the certification authority key when SSL client certificate constrained delegation is enabled. When selecting this option, type the passphrase corresponding to the selected c3d-ca-key.
     *
     * * `c3d-cert-extension-custom-oids` (Optional) Specifies the custom extension OID of the client certificates to be included in the generated certificates using SSL client certificate constrained delegation.
     */
    c3dCaKey?: pulumi.Input<string>;
    /**
     * CA Passphrase. Default
     */
    c3dCaPassphrase?: pulumi.Input<string>;
    /**
     * Certificate Extensions List.  Default
     */
    c3dCertExtensionCustomOids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the extensions of the client certificates to be included in the generated certificates using SSL client certificate constrained delegation. For example, { basic-constraints }. The default value is { basic-constraints extended-key-usage key-usage subject-alternative-name }. The extensions are:
     *
     * basic-constraints
     * Basic constraints are used to indicate whether the certificate belongs
     * to a CA.
     *
     * extended-key-usage
     * Extended Key Usage is used, typically on a leaf certificate, to
     * indicate the purpose of the public key contained in the certificate.
     *
     * key-usage
     * Key Usage provides a bitmap specifying the cryptographic operations
     * which may be performed using the public key contained in the
     * certificate; for example, it could indicate that the key should be
     * used for signature but not for encipherment.
     *
     * subject-alternative-name
     * Subject Alternative Name allows identities to be bound to the subject
     * of the certificate. These identities may be included in addition to
     * or in place of the identity in the subject field of the certificate.
     *
     * * `c3d-cert-lifespan` Specifies the lifespan of the certificate generated using the SSL client certificate constrained delegation. The default value is 24.
     */
    c3dCertExtensionIncludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Certificate Lifespan.  Default
     */
    c3dCertLifespan?: pulumi.Input<number>;
    /**
     * CA Passphrase. Default enabled
     */
    c3dCertificateExtensions?: pulumi.Input<string>;
    /**
     * Client certificate file path.  Default None.
     */
    caFile?: pulumi.Input<string>;
    /**
     * Cache size (sessions).
     */
    cacheSize?: pulumi.Input<number>;
    /**
     * Cache time out
     */
    cacheTimeout?: pulumi.Input<number>;
    /**
     * Specifies the name of the certificate that the system uses for server-side SSL processing.
     */
    cert?: pulumi.Input<string>;
    /**
     * Specifies the certificates-key chain to associate with the SSL profile
     */
    chain?: pulumi.Input<string>;
    /**
     * Specifies the cipher group for the SSL server profile. It is mutually exclusive with the argument, `ciphers`. The default value is `none`.
     */
    cipherGroup?: pulumi.Input<string>;
    /**
     * Specifies the list of ciphers that the system supports. When creating a new profile, the default cipher list is provided by the parent profile.
     */
    ciphers?: pulumi.Input<string>;
    /**
     * The parent template of this monitor template. Once this value has been set, it cannot be changed. By default, this value is `/Common/serverssl`.
     */
    defaultsFrom?: pulumi.Input<string>;
    /**
     * Response if the cert is expired (drop / ignore).
     */
    expireCertResponseControl?: pulumi.Input<string>;
    /**
     * full path of the profile
     */
    fullPath?: pulumi.Input<string>;
    /**
     * generation
     */
    generation?: pulumi.Input<number>;
    /**
     * Generic alerts enabled / disabled.
     */
    genericAlert?: pulumi.Input<string>;
    /**
     * Handshake time out (seconds)
     */
    handshakeTimeout?: pulumi.Input<string>;
    /**
     * Specifies the file name of the SSL key.
     */
    key?: pulumi.Input<string>;
    /**
     * ModSSL Methods enabled / disabled.  Default is disabled.
     */
    modSslMethods?: pulumi.Input<string>;
    /**
     * ModSSL Methods enabled / disabled.  Default is disabled.
     */
    mode?: pulumi.Input<string>;
    /**
     * Specifies the name of the profile.Name of Profile should be full path,full path is the combination of the `partition + profile name`. For example `/Common/test-serverssl-profile`.
     */
    name: pulumi.Input<string>;
    /**
     * name of partition
     */
    partition?: pulumi.Input<string>;
    /**
     * Client Certificate Constrained Delegation CA passphrase
     */
    passphrase?: pulumi.Input<string>;
    /**
     * Specifies the way the system handles client certificates.When ignore, specifies that the system ignores certificates from client systems.When require, specifies that the system requires a client to present a valid certificate.When request, specifies that the system requests a valid certificate from a client but always authenticate the client.
     */
    peerCertMode?: pulumi.Input<string>;
    /**
     * Proxy CA Cert
     */
    proxyCaCert?: pulumi.Input<string>;
    /**
     * Proxy CA Key
     */
    proxyCaKey?: pulumi.Input<string>;
    /**
     * Proxy SSL enabled / disabled.  Default is disabled.
     */
    proxySsl?: pulumi.Input<string>;
    /**
     * Renogotiate Period (seconds)
     */
    renegotiatePeriod?: pulumi.Input<string>;
    /**
     * Renogotiate Size
     */
    renegotiateSize?: pulumi.Input<string>;
    /**
     * Enables or disables SSL renegotiation.When creating a new profile, the setting is provided by the parent profile
     */
    renegotiation?: pulumi.Input<string>;
    /**
     * When `true`, client certificate is retained in SSL session.
     */
    retainCertificate?: pulumi.Input<string>;
    /**
     * Specifies the method of secure renegotiations for SSL connections. When creating a new profile, the setting is provided by the parent profile.
     * When `request` is set the system request secure renegotation of SSL connections.
     * `require` is a default setting and when set the system permits initial SSL handshakes from clients but terminates renegotiations from unpatched clients.
     * The `require-strict` setting the system requires strict renegotiation of SSL connections. In this mode the system refuses connections to insecure servers, and terminates existing SSL connections to insecure servers
     */
    secureRenegotiation?: pulumi.Input<string>;
    /**
     * Specifies the fully qualified DNS hostname of the server used in Server Name Indication communications. When creating a new profile, the setting is provided by the parent profile.The server name can also be a wildcard string containing the asterisk `*` character.
     */
    serverName?: pulumi.Input<string>;
    /**
     * Session Mirroring (enabled / disabled)
     */
    sessionMirroring?: pulumi.Input<string>;
    /**
     * Session Ticket (enabled / disabled)
     */
    sessionTicket?: pulumi.Input<string>;
    /**
     * Indicates that the system uses this profile as the default SSL profile when there is no match to the server name, or when the client provides no SNI extension support.When creating a new profile, the setting is provided by the parent profile.
     * There can be only one SSL profile with this setting enabled.
     */
    sniDefault?: pulumi.Input<string>;
    /**
     * Requires that the network peers also provide SNI support, this setting only takes effect when `sniDefault` is set to `true`.When creating a new profile, the setting is provided by the parent profile
     */
    sniRequire?: pulumi.Input<string>;
    /**
     * Enables or disables SSL forward proxy bypass on receiving
     * handshake_failure, protocolVersion or unsupportedExtension alert message during the serverside SSL handshake. When enabled and there is an SSL handshake_failure, protocolVersion or unsupportedExtension alert during the serverside SSL handshake, SSL traffic bypasses the BIG-IP system untouched, without decryption/encryption. The default value is disabled. Conversely, you can specify enabled to use this feature.
     */
    sslC3d?: pulumi.Input<string>;
    /**
     * Specifies whether SSL forward proxy feature is enabled or not. The default value is disabled.
     */
    sslForwardProxy?: pulumi.Input<string>;
    /**
     * Specifies whether SSL forward proxy bypass feature is enabled or not. The default value is disabled.
     */
    sslForwardProxyBypass?: pulumi.Input<string>;
    /**
     * SSL sign hash (any, sha1, sha256, sha384)
     */
    sslSignHash?: pulumi.Input<string>;
    /**
     * Enables or disables the resumption of SSL sessions after an unclean shutdown.When creating a new profile, the setting is provided by the parent profile.
     */
    strictResume?: pulumi.Input<string>;
    /**
     * List of Enabled selection from a set of industry standard options for handling SSL processing.By default,
     * Don't insert empty fragments and No TLSv1.3 are listed as Enabled Options. `Usage` : tmOptions    = ["dont-insert-empty-fragments","no-tlsv1.3"]
     */
    tmOptions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unclean Shutdown (enabled / disabled)
     */
    uncleanShutdown?: pulumi.Input<string>;
    /**
     * Unclean Shutdown (drop / ignore)
     */
    untrustedCertResponseControl?: pulumi.Input<string>;
}
