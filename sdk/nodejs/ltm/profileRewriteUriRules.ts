// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * `f5bigip.ltm.ProfileRewriteUriRules` Configures uri rewrite rules attached to the ltm rewrite profile
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as f5bigip from "@pulumi/f5bigip";
 *
 * const tftest = new f5bigip.ltm.ProfileRewrite("tftest", {
 *     name: "/Common/tf_profile",
 *     defaultsFrom: "/Common/rewrite",
 *     rewriteMode: "uri-translation",
 * });
 * const tftestrule1 = new f5bigip.ltm.ProfileRewriteUriRules("tftestrule1", {
 *     profileName: tftest.name,
 *     ruleName: "tf_rule",
 *     ruleType: "request",
 *     clients: [{
 *         host: "www.foo.com",
 *         scheme: "https",
 *     }],
 *     servers: [{
 *         host: "www.bar.com",
 *         path: "/this/",
 *         scheme: "https",
 *         port: "8888",
 *     }],
 * });
 * const tftestrule2 = new f5bigip.ltm.ProfileRewriteUriRules("tftestrule2", {
 *     profileName: tftest.name,
 *     ruleName: "tf_rule2",
 *     clients: [{
 *         host: "www.baz.com",
 *         path: "/that/",
 *         scheme: "ftp",
 *         port: "8888",
 *     }],
 *     servers: [{
 *         host: "www.buz.com",
 *         path: "/those/",
 *         scheme: "ftps",
 *     }],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export class ProfileRewriteUriRules extends pulumi.CustomResource {
    /**
     * Get an existing ProfileRewriteUriRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProfileRewriteUriRulesState, opts?: pulumi.CustomResourceOptions): ProfileRewriteUriRules {
        return new ProfileRewriteUriRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'f5bigip:ltm/profileRewriteUriRules:ProfileRewriteUriRules';

    /**
     * Returns true if the given object is an instance of ProfileRewriteUriRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProfileRewriteUriRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProfileRewriteUriRules.__pulumiType;
    }

    /**
     * Block type. Each request is block type with following arguments.
     */
    public readonly clients!: pulumi.Output<outputs.ltm.ProfileRewriteUriRulesClient[]>;
    /**
     * Name of the rewrite profile. ( policy name should be in full path which is combination of partition and policy name )
     */
    public readonly profileName!: pulumi.Output<string>;
    /**
     * Specifies the name of the uri rule.
     */
    public readonly ruleName!: pulumi.Output<string>;
    /**
     * Specifies the type of the uri rule. Valid choices are: `request, response, both`. Default value is: `both`
     */
    public readonly ruleType!: pulumi.Output<string | undefined>;
    /**
     * Block type. Each request is block type with following arguments.
     */
    public readonly servers!: pulumi.Output<outputs.ltm.ProfileRewriteUriRulesServer[]>;

    /**
     * Create a ProfileRewriteUriRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProfileRewriteUriRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProfileRewriteUriRulesArgs | ProfileRewriteUriRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProfileRewriteUriRulesState | undefined;
            resourceInputs["clients"] = state ? state.clients : undefined;
            resourceInputs["profileName"] = state ? state.profileName : undefined;
            resourceInputs["ruleName"] = state ? state.ruleName : undefined;
            resourceInputs["ruleType"] = state ? state.ruleType : undefined;
            resourceInputs["servers"] = state ? state.servers : undefined;
        } else {
            const args = argsOrState as ProfileRewriteUriRulesArgs | undefined;
            if ((!args || args.clients === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clients'");
            }
            if ((!args || args.profileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profileName'");
            }
            if ((!args || args.ruleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleName'");
            }
            if ((!args || args.servers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servers'");
            }
            resourceInputs["clients"] = args ? args.clients : undefined;
            resourceInputs["profileName"] = args ? args.profileName : undefined;
            resourceInputs["ruleName"] = args ? args.ruleName : undefined;
            resourceInputs["ruleType"] = args ? args.ruleType : undefined;
            resourceInputs["servers"] = args ? args.servers : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProfileRewriteUriRules.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProfileRewriteUriRules resources.
 */
export interface ProfileRewriteUriRulesState {
    /**
     * Block type. Each request is block type with following arguments.
     */
    clients?: pulumi.Input<pulumi.Input<inputs.ltm.ProfileRewriteUriRulesClient>[]>;
    /**
     * Name of the rewrite profile. ( policy name should be in full path which is combination of partition and policy name )
     */
    profileName?: pulumi.Input<string>;
    /**
     * Specifies the name of the uri rule.
     */
    ruleName?: pulumi.Input<string>;
    /**
     * Specifies the type of the uri rule. Valid choices are: `request, response, both`. Default value is: `both`
     */
    ruleType?: pulumi.Input<string>;
    /**
     * Block type. Each request is block type with following arguments.
     */
    servers?: pulumi.Input<pulumi.Input<inputs.ltm.ProfileRewriteUriRulesServer>[]>;
}

/**
 * The set of arguments for constructing a ProfileRewriteUriRules resource.
 */
export interface ProfileRewriteUriRulesArgs {
    /**
     * Block type. Each request is block type with following arguments.
     */
    clients: pulumi.Input<pulumi.Input<inputs.ltm.ProfileRewriteUriRulesClient>[]>;
    /**
     * Name of the rewrite profile. ( policy name should be in full path which is combination of partition and policy name )
     */
    profileName: pulumi.Input<string>;
    /**
     * Specifies the name of the uri rule.
     */
    ruleName: pulumi.Input<string>;
    /**
     * Specifies the type of the uri rule. Valid choices are: `request, response, both`. Default value is: `both`
     */
    ruleType?: pulumi.Input<string>;
    /**
     * Block type. Each request is block type with following arguments.
     */
    servers: pulumi.Input<pulumi.Input<inputs.ltm.ProfileRewriteUriRulesServer>[]>;
}
