// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class DataGroup extends pulumi.CustomResource {
    /**
     * Get an existing DataGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataGroupState, opts?: pulumi.CustomResourceOptions): DataGroup {
        return new DataGroup(name, <any>state, { ...opts, id: id });
    }

    /**
     * Name of the Data Group List
     */
    public readonly name: pulumi.Output<string>;
    public readonly records: pulumi.Output<{ data?: string, name: string }[] | undefined>;
    /**
     * The Data Group type (string, ip, integer)
     */
    public readonly type: pulumi.Output<string>;

    /**
     * Create a DataGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataGroupArgs | DataGroupState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: DataGroupState = argsOrState as DataGroupState | undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["records"] = state ? state.records : undefined;
            inputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DataGroupArgs | undefined;
            if (!args || args.name === undefined) {
                throw new Error("Missing required property 'name'");
            }
            if (!args || args.type === undefined) {
                throw new Error("Missing required property 'type'");
            }
            inputs["name"] = args ? args.name : undefined;
            inputs["records"] = args ? args.records : undefined;
            inputs["type"] = args ? args.type : undefined;
        }
        super("f5bigip:ltm/dataGroup:DataGroup", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DataGroup resources.
 */
export interface DataGroupState {
    /**
     * Name of the Data Group List
     */
    readonly name?: pulumi.Input<string>;
    readonly records?: pulumi.Input<pulumi.Input<{ data?: pulumi.Input<string>, name: pulumi.Input<string> }>[]>;
    /**
     * The Data Group type (string, ip, integer)
     */
    readonly type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DataGroup resource.
 */
export interface DataGroupArgs {
    /**
     * Name of the Data Group List
     */
    readonly name: pulumi.Input<string>;
    readonly records?: pulumi.Input<pulumi.Input<{ data?: pulumi.Input<string>, name: pulumi.Input<string> }>[]>;
    /**
     * The Data Group type (string, ip, integer)
     */
    readonly type: pulumi.Input<string>;
}
