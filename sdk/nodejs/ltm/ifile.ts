// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * `f5bigip.ltm.Ifile` This resource creates an LTM iFile on F5 BIG-IP that references an existing system iFile.
 * LTM iFiles are used in iRules and LTM policies to access file content for traffic processing and decision making.
 *
 * ## Example Usage
 *
 * ### Using LTM iFile in iRule
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as f5bigip from "@pulumi/f5bigip";
 *
 * const serverList = new f5bigip.sys.Ifile("server_list", {
 *     name: "server-mapping",
 *     partition: "Production",
 *     content: `web1:10.1.1.10
 * web2:10.1.1.11
 * web3:10.1.1.12
 * `,
 * });
 * const ltmServers = new f5bigip.ltm.Ifile("ltm_servers", {
 *     name: "ltm-server-mapping",
 *     partition: "Production",
 *     fileName: "/Production/server-mapping",
 * });
 * const serverSelector = new f5bigip.ltm.IRule("server_selector", {
 *     name: "select-server-rule",
 *     irule: `when HTTP_REQUEST {
 *   set server_map [ifile get ltm-server-mapping]
 *   # Process server mapping logic
 *   foreach line [split server_map \\"\\
 * \\"] {
 *     set parts [split line \\":\\"]
 *     # Implement server selection logic
 *   }
 * }
 * `,
 * });
 * ```
 *
 * ## Notes
 *
 * * The referenced system iFile (specified in `fileName`) must exist before creating the LTM iFile.
 * * LTM iFiles are primarily used in iRules and LTM policies for traffic processing.
 * * Changes to `name`, `partition`, or `subPath` will force recreation of the resource.
 * * The LTM iFile acts as a reference to the system iFile and doesn't store content directly.
 * * Use `f5bigip.sys.Ifile` to upload file content, then reference it with `f5bigip.ltm.Ifile` for LTM usage.
 *
 * ## Related Resources
 *
 * * `f5bigip.sys.Ifile` - Creates system iFiles with content
 * * `f5bigip.ltm.IRule` - Creates iRules that can reference LTM iFiles
 * * `f5bigip.ltm.Policy` - Creates LTM policies that can use LTM iFiles
 *
 * ## Import
 *
 * LTM iFiles can be imported using their full path:
 *
 * bash
 *
 * ```sh
 * $ pulumi import f5bigip:ltm/ifile:Ifile example /Common/my-ltm-ifile
 * ```
 *
 * For iFiles with sub-paths:
 *
 * bash
 *
 * ```sh
 * $ pulumi import f5bigip:ltm/ifile:Ifile example /Common/templates/my-ltm-ifile
 * ```
 */
export class Ifile extends pulumi.CustomResource {
    /**
     * Get an existing Ifile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IfileState, opts?: pulumi.CustomResourceOptions): Ifile {
        return new Ifile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'f5bigip:ltm/ifile:Ifile';

    /**
     * Returns true if the given object is an instance of Ifile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ifile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ifile.__pulumiType;
    }

    /**
     * The system iFile name to reference (e.g., `/Common/my-sys-ifile`). This should reference an existing system iFile created with `f5bigip.sys.Ifile`.
     */
    declare public readonly fileName: pulumi.Output<string>;
    /**
     * The complete path of the LTM iFile on the BIG-IP system.
     */
    declare public /*out*/ readonly fullPath: pulumi.Output<string>;
    /**
     * Name of the LTM iFile to be created on BIG-IP.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Partition where the LTM iFile will be created. Defaults to `Common`.
     */
    declare public readonly partition: pulumi.Output<string | undefined>;
    /**
     * Subdirectory within the partition for organizing iFiles.
     */
    declare public readonly subPath: pulumi.Output<string | undefined>;

    /**
     * Create a Ifile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IfileArgs | IfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IfileState | undefined;
            resourceInputs["fileName"] = state?.fileName;
            resourceInputs["fullPath"] = state?.fullPath;
            resourceInputs["name"] = state?.name;
            resourceInputs["partition"] = state?.partition;
            resourceInputs["subPath"] = state?.subPath;
        } else {
            const args = argsOrState as IfileArgs | undefined;
            if (args?.fileName === undefined && !opts.urn) {
                throw new Error("Missing required property 'fileName'");
            }
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["fileName"] = args?.fileName;
            resourceInputs["name"] = args?.name;
            resourceInputs["partition"] = args?.partition;
            resourceInputs["subPath"] = args?.subPath;
            resourceInputs["fullPath"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ifile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Ifile resources.
 */
export interface IfileState {
    /**
     * The system iFile name to reference (e.g., `/Common/my-sys-ifile`). This should reference an existing system iFile created with `f5bigip.sys.Ifile`.
     */
    fileName?: pulumi.Input<string>;
    /**
     * The complete path of the LTM iFile on the BIG-IP system.
     */
    fullPath?: pulumi.Input<string>;
    /**
     * Name of the LTM iFile to be created on BIG-IP.
     */
    name?: pulumi.Input<string>;
    /**
     * Partition where the LTM iFile will be created. Defaults to `Common`.
     */
    partition?: pulumi.Input<string>;
    /**
     * Subdirectory within the partition for organizing iFiles.
     */
    subPath?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ifile resource.
 */
export interface IfileArgs {
    /**
     * The system iFile name to reference (e.g., `/Common/my-sys-ifile`). This should reference an existing system iFile created with `f5bigip.sys.Ifile`.
     */
    fileName: pulumi.Input<string>;
    /**
     * Name of the LTM iFile to be created on BIG-IP.
     */
    name: pulumi.Input<string>;
    /**
     * Partition where the LTM iFile will be created. Defaults to `Common`.
     */
    partition?: pulumi.Input<string>;
    /**
     * Subdirectory within the partition for organizing iFiles.
     */
    subPath?: pulumi.Input<string>;
}
