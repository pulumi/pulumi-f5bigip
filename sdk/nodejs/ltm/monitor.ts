// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Monitor extends pulumi.CustomResource {
    /**
     * Get an existing Monitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorState, opts?: pulumi.CustomResourceOptions): Monitor {
        return new Monitor(name, <any>state, { ...opts, id: id });
    }

    /**
     * Existing monitor to inherit from. Must be one of /Common/http, /Common/https, /Common/icmp or /Common/gateway-icmp.
     */
    public readonly defaultsFrom: pulumi.Output<string | undefined>;
    /**
     * Alias for the destination
     */
    public readonly destination: pulumi.Output<string | undefined>;
    /**
     * Check interval in seconds
     */
    public readonly interval: pulumi.Output<number | undefined>;
    public readonly ipDscp: pulumi.Output<number | undefined>;
    public readonly manualResume: pulumi.Output<string | undefined>;
    /**
     * Name of the monitor
     */
    public readonly name: pulumi.Output<string>;
    /**
     * Existing monitor to inherit from. Must be one of /Common/http, /Common/https, /Common/icmp or /Common/gateway-icmp.
     */
    public readonly parent: pulumi.Output<string>;
    /**
     * Expected response string.
     */
    public readonly receive: pulumi.Output<string | undefined>;
    /**
     * Expected response string.
     */
    public readonly receiveDisable: pulumi.Output<string | undefined>;
    public readonly reverse: pulumi.Output<string | undefined>;
    /**
     * Request string to send.
     */
    public readonly send: pulumi.Output<string | undefined>;
    /**
     * Time in seconds
     */
    public readonly timeUntilUp: pulumi.Output<number | undefined>;
    /**
     * Timeout in seconds
     */
    public readonly timeout: pulumi.Output<number | undefined>;
    public readonly transparent: pulumi.Output<string | undefined>;

    /**
     * Create a Monitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorArgs | MonitorState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: MonitorState = argsOrState as MonitorState | undefined;
            inputs["defaultsFrom"] = state ? state.defaultsFrom : undefined;
            inputs["destination"] = state ? state.destination : undefined;
            inputs["interval"] = state ? state.interval : undefined;
            inputs["ipDscp"] = state ? state.ipDscp : undefined;
            inputs["manualResume"] = state ? state.manualResume : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["parent"] = state ? state.parent : undefined;
            inputs["receive"] = state ? state.receive : undefined;
            inputs["receiveDisable"] = state ? state.receiveDisable : undefined;
            inputs["reverse"] = state ? state.reverse : undefined;
            inputs["send"] = state ? state.send : undefined;
            inputs["timeUntilUp"] = state ? state.timeUntilUp : undefined;
            inputs["timeout"] = state ? state.timeout : undefined;
            inputs["transparent"] = state ? state.transparent : undefined;
        } else {
            const args = argsOrState as MonitorArgs | undefined;
            if (!args || args.name === undefined) {
                throw new Error("Missing required property 'name'");
            }
            if (!args || args.parent === undefined) {
                throw new Error("Missing required property 'parent'");
            }
            inputs["defaultsFrom"] = args ? args.defaultsFrom : undefined;
            inputs["destination"] = args ? args.destination : undefined;
            inputs["interval"] = args ? args.interval : undefined;
            inputs["ipDscp"] = args ? args.ipDscp : undefined;
            inputs["manualResume"] = args ? args.manualResume : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["parent"] = args ? args.parent : undefined;
            inputs["receive"] = args ? args.receive : undefined;
            inputs["receiveDisable"] = args ? args.receiveDisable : undefined;
            inputs["reverse"] = args ? args.reverse : undefined;
            inputs["send"] = args ? args.send : undefined;
            inputs["timeUntilUp"] = args ? args.timeUntilUp : undefined;
            inputs["timeout"] = args ? args.timeout : undefined;
            inputs["transparent"] = args ? args.transparent : undefined;
        }
        super("f5bigip:ltm/monitor:Monitor", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Monitor resources.
 */
export interface MonitorState {
    /**
     * Existing monitor to inherit from. Must be one of /Common/http, /Common/https, /Common/icmp or /Common/gateway-icmp.
     */
    readonly defaultsFrom?: pulumi.Input<string>;
    /**
     * Alias for the destination
     */
    readonly destination?: pulumi.Input<string>;
    /**
     * Check interval in seconds
     */
    readonly interval?: pulumi.Input<number>;
    readonly ipDscp?: pulumi.Input<number>;
    readonly manualResume?: pulumi.Input<string>;
    /**
     * Name of the monitor
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Existing monitor to inherit from. Must be one of /Common/http, /Common/https, /Common/icmp or /Common/gateway-icmp.
     */
    readonly parent?: pulumi.Input<string>;
    /**
     * Expected response string.
     */
    readonly receive?: pulumi.Input<string>;
    /**
     * Expected response string.
     */
    readonly receiveDisable?: pulumi.Input<string>;
    readonly reverse?: pulumi.Input<string>;
    /**
     * Request string to send.
     */
    readonly send?: pulumi.Input<string>;
    /**
     * Time in seconds
     */
    readonly timeUntilUp?: pulumi.Input<number>;
    /**
     * Timeout in seconds
     */
    readonly timeout?: pulumi.Input<number>;
    readonly transparent?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Monitor resource.
 */
export interface MonitorArgs {
    /**
     * Existing monitor to inherit from. Must be one of /Common/http, /Common/https, /Common/icmp or /Common/gateway-icmp.
     */
    readonly defaultsFrom?: pulumi.Input<string>;
    /**
     * Alias for the destination
     */
    readonly destination?: pulumi.Input<string>;
    /**
     * Check interval in seconds
     */
    readonly interval?: pulumi.Input<number>;
    readonly ipDscp?: pulumi.Input<number>;
    readonly manualResume?: pulumi.Input<string>;
    /**
     * Name of the monitor
     */
    readonly name: pulumi.Input<string>;
    /**
     * Existing monitor to inherit from. Must be one of /Common/http, /Common/https, /Common/icmp or /Common/gateway-icmp.
     */
    readonly parent: pulumi.Input<string>;
    /**
     * Expected response string.
     */
    readonly receive?: pulumi.Input<string>;
    /**
     * Expected response string.
     */
    readonly receiveDisable?: pulumi.Input<string>;
    readonly reverse?: pulumi.Input<string>;
    /**
     * Request string to send.
     */
    readonly send?: pulumi.Input<string>;
    /**
     * Time in seconds
     */
    readonly timeUntilUp?: pulumi.Input<number>;
    /**
     * Timeout in seconds
     */
    readonly timeout?: pulumi.Input<number>;
    readonly transparent?: pulumi.Input<string>;
}
