// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class ProfileHttp2 extends pulumi.CustomResource {
    /**
     * Get an existing ProfileHttp2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProfileHttp2State, opts?: pulumi.CustomResourceOptions): ProfileHttp2 {
        return new ProfileHttp2(name, <any>state, { ...opts, id: id });
    }

    /**
     * Servers Address
     */
    public readonly activationModes: pulumi.Output<string[] | undefined>;
    /**
     * Use the parent Http2 profile
     */
    public readonly concurrentStreamsPerConnection: pulumi.Output<number | undefined>;
    /**
     * Use the parent Http2 profile
     */
    public readonly connectionIdleTimeout: pulumi.Output<number | undefined>;
    /**
     * Use the parent Http2 profile
     */
    public readonly defaultsFrom: pulumi.Output<string | undefined>;
    /**
     * Use the parent Http2 profile
     */
    public readonly headerTableSize: pulumi.Output<number | undefined>;
    /**
     * Name of the Http2 Profile
     */
    public readonly name: pulumi.Output<string>;

    /**
     * Create a ProfileHttp2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProfileHttp2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProfileHttp2Args | ProfileHttp2State, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: ProfileHttp2State = argsOrState as ProfileHttp2State | undefined;
            inputs["activationModes"] = state ? state.activationModes : undefined;
            inputs["concurrentStreamsPerConnection"] = state ? state.concurrentStreamsPerConnection : undefined;
            inputs["connectionIdleTimeout"] = state ? state.connectionIdleTimeout : undefined;
            inputs["defaultsFrom"] = state ? state.defaultsFrom : undefined;
            inputs["headerTableSize"] = state ? state.headerTableSize : undefined;
            inputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as ProfileHttp2Args | undefined;
            if (!args || args.name === undefined) {
                throw new Error("Missing required property 'name'");
            }
            inputs["activationModes"] = args ? args.activationModes : undefined;
            inputs["concurrentStreamsPerConnection"] = args ? args.concurrentStreamsPerConnection : undefined;
            inputs["connectionIdleTimeout"] = args ? args.connectionIdleTimeout : undefined;
            inputs["defaultsFrom"] = args ? args.defaultsFrom : undefined;
            inputs["headerTableSize"] = args ? args.headerTableSize : undefined;
            inputs["name"] = args ? args.name : undefined;
        }
        super("f5bigip:ltm/profileHttp2:ProfileHttp2", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProfileHttp2 resources.
 */
export interface ProfileHttp2State {
    /**
     * Servers Address
     */
    readonly activationModes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Use the parent Http2 profile
     */
    readonly concurrentStreamsPerConnection?: pulumi.Input<number>;
    /**
     * Use the parent Http2 profile
     */
    readonly connectionIdleTimeout?: pulumi.Input<number>;
    /**
     * Use the parent Http2 profile
     */
    readonly defaultsFrom?: pulumi.Input<string>;
    /**
     * Use the parent Http2 profile
     */
    readonly headerTableSize?: pulumi.Input<number>;
    /**
     * Name of the Http2 Profile
     */
    readonly name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProfileHttp2 resource.
 */
export interface ProfileHttp2Args {
    /**
     * Servers Address
     */
    readonly activationModes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Use the parent Http2 profile
     */
    readonly concurrentStreamsPerConnection?: pulumi.Input<number>;
    /**
     * Use the parent Http2 profile
     */
    readonly connectionIdleTimeout?: pulumi.Input<number>;
    /**
     * Use the parent Http2 profile
     */
    readonly defaultsFrom?: pulumi.Input<string>;
    /**
     * Use the parent Http2 profile
     */
    readonly headerTableSize?: pulumi.Input<number>;
    /**
     * Name of the Http2 Profile
     */
    readonly name: pulumi.Input<string>;
}
