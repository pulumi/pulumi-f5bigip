// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * `f5bigip.net.Route` Manages a route configuration
 *
 * For resources should be named with their "full path". The full path is the combination of the partition + name of the resource. For example /Common/my-pool.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as f5bigip from "@pulumi/f5bigip";
 *
 * const route2 = new f5bigip.net.Route("route2", {
 *     gw: "1.1.1.2",
 *     name: "/Common/external-route",
 *     network: "10.10.10.0/24",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export class Route extends pulumi.CustomResource {
    /**
     * Get an existing Route resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouteState, opts?: pulumi.CustomResourceOptions): Route {
        return new Route(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'f5bigip:net/route:Route';

    /**
     * Returns true if the given object is an instance of Route.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Route {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Route.__pulumiType;
    }

    /**
     * Specifies a gateway address for the route.
     */
    public readonly gw!: pulumi.Output<string | undefined>;
    /**
     * Name of the route.Name of Route should be full path,full path is the combination of the `partition + route name`,For ex: `/Common/test-net-route`.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The destination subnet and netmask for the route.
     */
    public readonly network!: pulumi.Output<string>;
    /**
     * reject route
     */
    public readonly reject!: pulumi.Output<boolean | undefined>;
    /**
     * tunnel_ref to route traffic
     */
    public readonly tunnelRef!: pulumi.Output<string | undefined>;

    /**
     * Create a Route resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouteArgs | RouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouteState | undefined;
            resourceInputs["gw"] = state ? state.gw : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["reject"] = state ? state.reject : undefined;
            resourceInputs["tunnelRef"] = state ? state.tunnelRef : undefined;
        } else {
            const args = argsOrState as RouteArgs | undefined;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.network === undefined) && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            resourceInputs["gw"] = args ? args.gw : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["reject"] = args ? args.reject : undefined;
            resourceInputs["tunnelRef"] = args ? args.tunnelRef : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Route.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Route resources.
 */
export interface RouteState {
    /**
     * Specifies a gateway address for the route.
     */
    gw?: pulumi.Input<string>;
    /**
     * Name of the route.Name of Route should be full path,full path is the combination of the `partition + route name`,For ex: `/Common/test-net-route`.
     */
    name?: pulumi.Input<string>;
    /**
     * The destination subnet and netmask for the route.
     */
    network?: pulumi.Input<string>;
    /**
     * reject route
     */
    reject?: pulumi.Input<boolean>;
    /**
     * tunnel_ref to route traffic
     */
    tunnelRef?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Route resource.
 */
export interface RouteArgs {
    /**
     * Specifies a gateway address for the route.
     */
    gw?: pulumi.Input<string>;
    /**
     * Name of the route.Name of Route should be full path,full path is the combination of the `partition + route name`,For ex: `/Common/test-net-route`.
     */
    name: pulumi.Input<string>;
    /**
     * The destination subnet and netmask for the route.
     */
    network: pulumi.Input<string>;
    /**
     * reject route
     */
    reject?: pulumi.Input<boolean>;
    /**
     * tunnel_ref to route traffic
     */
    tunnelRef?: pulumi.Input<string>;
}
