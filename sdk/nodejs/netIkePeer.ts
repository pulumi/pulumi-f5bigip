// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `f5bigip.NetIkePeer` Manages a ikePeer configuration
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as f5bigip from "@pulumi/f5bigip";
 *
 * const example1 = new f5bigip.NetIkePeer("example1", {
 *     name: "example1",
 *     localAddress: "192.16.81.240",
 *     profile: "/Common/dslite",
 * });
 * ```
 */
export class NetIkePeer extends pulumi.CustomResource {
    /**
     * Get an existing NetIkePeer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetIkePeerState, opts?: pulumi.CustomResourceOptions): NetIkePeer {
        return new NetIkePeer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'f5bigip:index/netIkePeer:NetIkePeer';

    /**
     * Returns true if the given object is an instance of NetIkePeer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetIkePeer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetIkePeer.__pulumiType;
    }

    /**
     * The application service that the object belongs to
     */
    declare public readonly appService: pulumi.Output<string | undefined>;
    /**
     * the trusted root and intermediate certificate authorities
     */
    declare public readonly caCertFile: pulumi.Output<string>;
    /**
     * Specifies the file name of the Certificate Revocation List. Only supported in IKEv1
     */
    declare public readonly crlFile: pulumi.Output<string>;
    /**
     * User defined description
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * Specifies the number of seconds between Dead Peer Detection messages
     */
    declare public readonly dpdDelay: pulumi.Output<number>;
    /**
     * Enable or disable the generation of Security Policy Database entries(SPD) when the device is the responder of the IKE remote node
     */
    declare public readonly generatePolicy: pulumi.Output<string>;
    /**
     * Defines the lifetime in minutes of an IKE SA which will be proposed in the phase 1 negotiations
     */
    declare public readonly lifetime: pulumi.Output<number>;
    /**
     * Defines the exchange mode for phase 1 when racoon is the initiator, or the acceptable exchange mode when racoon is the responder
     */
    declare public readonly mode: pulumi.Output<string>;
    /**
     * Specifies the name of the certificate file object
     */
    declare public readonly myCertFile: pulumi.Output<string>;
    /**
     * Specifies the name of the certificate key file object
     */
    declare public readonly myCertKeyFile: pulumi.Output<string>;
    /**
     * Specifies the passphrase of the key used for my-cert-key-file
     */
    declare public readonly myCertKeyPassphrase: pulumi.Output<string>;
    /**
     * Specifies the identifier type sent to the remote host to use in the phase 1 negotiation
     */
    declare public readonly myIdType: pulumi.Output<string>;
    /**
     * Specifies the identifier value sent to the remote host in the phase 1 negotiation
     */
    declare public readonly myIdValue: pulumi.Output<string>;
    /**
     * Name of the ike_peer
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Enables use of the NAT-Traversal IPsec extension
     */
    declare public readonly natTraversal: pulumi.Output<string>;
    /**
     * Specifies whether the local IKE agent can be the initiator of the IKE negotiation with this ike-peer
     */
    declare public readonly passive: pulumi.Output<string>;
    /**
     * Specifies the peer’s certificate for authentication
     */
    declare public readonly peersCertFile: pulumi.Output<string>;
    /**
     * Specifies that the only peers-cert-type supported is certfile
     */
    declare public readonly peersCertType: pulumi.Output<string>;
    /**
     * Specifies which of address, fqdn, asn1dn, user-fqdn or keyid-tag types to use as peers-id-type
     */
    declare public readonly peersIdType: pulumi.Output<string>;
    /**
     * Specifies the peer’s identifier to be received
     */
    declare public readonly peersIdValue: pulumi.Output<string>;
    /**
     * Specifies the authentication method used for phase 1 negotiation
     */
    declare public readonly phase1AuthMethod: pulumi.Output<string>;
    /**
     * Specifies the encryption algorithm used for the isakmp phase 1 negotiation
     */
    declare public readonly phase1EncryptAlgorithm: pulumi.Output<string>;
    /**
     * Defines the hash algorithm used for the isakmp phase 1 negotiation
     */
    declare public readonly phase1HashAlgorithm: pulumi.Output<string>;
    /**
     * Defines the Diffie-Hellman group for key exchange to provide perfect forward secrecy
     */
    declare public readonly phase1PerfectForwardSecrecy: pulumi.Output<string>;
    /**
     * Specifies the preshared key for ISAKMP SAs
     */
    declare public readonly presharedKey: pulumi.Output<string | undefined>;
    /**
     * Display the encrypted preshared-key for the IKE remote node
     */
    declare public readonly presharedKeyEncrypted: pulumi.Output<string>;
    /**
     * Specifies the pseudo-random function used to derive keying material for all cryptographic operations
     */
    declare public readonly prf: pulumi.Output<string>;
    /**
     * If this value is enabled, both values of ID payloads in the phase 2 exchange are used as the addresses of end-point of IPsec-SAs
     */
    declare public readonly proxySupport: pulumi.Output<string>;
    /**
     * Specifies the IP address of the IKE remote node
     */
    declare public readonly remoteAddress: pulumi.Output<string>;
    /**
     * Specifies the replay window size of the IPsec SAs negotiated with the IKE remote node
     */
    declare public readonly replayWindowSize: pulumi.Output<number>;
    /**
     * Enables or disables this IKE remote node
     */
    declare public readonly state: pulumi.Output<string>;
    /**
     * Specifies the names of the traffic-selector objects associated with this ike-peer
     */
    declare public readonly trafficSelectors: pulumi.Output<string[]>;
    /**
     * Specifies whether to verify the certificate chain of the remote peer based on the trusted certificates in ca-cert-file
     */
    declare public readonly verifyCert: pulumi.Output<string>;
    /**
     * Specifies which version of IKE to be used
     */
    declare public readonly versions: pulumi.Output<string[]>;

    /**
     * Create a NetIkePeer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetIkePeerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetIkePeerArgs | NetIkePeerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetIkePeerState | undefined;
            resourceInputs["appService"] = state?.appService;
            resourceInputs["caCertFile"] = state?.caCertFile;
            resourceInputs["crlFile"] = state?.crlFile;
            resourceInputs["description"] = state?.description;
            resourceInputs["dpdDelay"] = state?.dpdDelay;
            resourceInputs["generatePolicy"] = state?.generatePolicy;
            resourceInputs["lifetime"] = state?.lifetime;
            resourceInputs["mode"] = state?.mode;
            resourceInputs["myCertFile"] = state?.myCertFile;
            resourceInputs["myCertKeyFile"] = state?.myCertKeyFile;
            resourceInputs["myCertKeyPassphrase"] = state?.myCertKeyPassphrase;
            resourceInputs["myIdType"] = state?.myIdType;
            resourceInputs["myIdValue"] = state?.myIdValue;
            resourceInputs["name"] = state?.name;
            resourceInputs["natTraversal"] = state?.natTraversal;
            resourceInputs["passive"] = state?.passive;
            resourceInputs["peersCertFile"] = state?.peersCertFile;
            resourceInputs["peersCertType"] = state?.peersCertType;
            resourceInputs["peersIdType"] = state?.peersIdType;
            resourceInputs["peersIdValue"] = state?.peersIdValue;
            resourceInputs["phase1AuthMethod"] = state?.phase1AuthMethod;
            resourceInputs["phase1EncryptAlgorithm"] = state?.phase1EncryptAlgorithm;
            resourceInputs["phase1HashAlgorithm"] = state?.phase1HashAlgorithm;
            resourceInputs["phase1PerfectForwardSecrecy"] = state?.phase1PerfectForwardSecrecy;
            resourceInputs["presharedKey"] = state?.presharedKey;
            resourceInputs["presharedKeyEncrypted"] = state?.presharedKeyEncrypted;
            resourceInputs["prf"] = state?.prf;
            resourceInputs["proxySupport"] = state?.proxySupport;
            resourceInputs["remoteAddress"] = state?.remoteAddress;
            resourceInputs["replayWindowSize"] = state?.replayWindowSize;
            resourceInputs["state"] = state?.state;
            resourceInputs["trafficSelectors"] = state?.trafficSelectors;
            resourceInputs["verifyCert"] = state?.verifyCert;
            resourceInputs["versions"] = state?.versions;
        } else {
            const args = argsOrState as NetIkePeerArgs | undefined;
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if (args?.remoteAddress === undefined && !opts.urn) {
                throw new Error("Missing required property 'remoteAddress'");
            }
            resourceInputs["appService"] = args?.appService;
            resourceInputs["caCertFile"] = args?.caCertFile;
            resourceInputs["crlFile"] = args?.crlFile;
            resourceInputs["description"] = args?.description;
            resourceInputs["dpdDelay"] = args?.dpdDelay;
            resourceInputs["generatePolicy"] = args?.generatePolicy;
            resourceInputs["lifetime"] = args?.lifetime;
            resourceInputs["mode"] = args?.mode;
            resourceInputs["myCertFile"] = args?.myCertFile;
            resourceInputs["myCertKeyFile"] = args?.myCertKeyFile;
            resourceInputs["myCertKeyPassphrase"] = args?.myCertKeyPassphrase;
            resourceInputs["myIdType"] = args?.myIdType;
            resourceInputs["myIdValue"] = args?.myIdValue;
            resourceInputs["name"] = args?.name;
            resourceInputs["natTraversal"] = args?.natTraversal;
            resourceInputs["passive"] = args?.passive;
            resourceInputs["peersCertFile"] = args?.peersCertFile;
            resourceInputs["peersCertType"] = args?.peersCertType;
            resourceInputs["peersIdType"] = args?.peersIdType;
            resourceInputs["peersIdValue"] = args?.peersIdValue;
            resourceInputs["phase1AuthMethod"] = args?.phase1AuthMethod;
            resourceInputs["phase1EncryptAlgorithm"] = args?.phase1EncryptAlgorithm;
            resourceInputs["phase1HashAlgorithm"] = args?.phase1HashAlgorithm;
            resourceInputs["phase1PerfectForwardSecrecy"] = args?.phase1PerfectForwardSecrecy;
            resourceInputs["presharedKey"] = args?.presharedKey;
            resourceInputs["presharedKeyEncrypted"] = args?.presharedKeyEncrypted;
            resourceInputs["prf"] = args?.prf;
            resourceInputs["proxySupport"] = args?.proxySupport;
            resourceInputs["remoteAddress"] = args?.remoteAddress;
            resourceInputs["replayWindowSize"] = args?.replayWindowSize;
            resourceInputs["state"] = args?.state;
            resourceInputs["trafficSelectors"] = args?.trafficSelectors;
            resourceInputs["verifyCert"] = args?.verifyCert;
            resourceInputs["versions"] = args?.versions;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetIkePeer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetIkePeer resources.
 */
export interface NetIkePeerState {
    /**
     * The application service that the object belongs to
     */
    appService?: pulumi.Input<string>;
    /**
     * the trusted root and intermediate certificate authorities
     */
    caCertFile?: pulumi.Input<string>;
    /**
     * Specifies the file name of the Certificate Revocation List. Only supported in IKEv1
     */
    crlFile?: pulumi.Input<string>;
    /**
     * User defined description
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the number of seconds between Dead Peer Detection messages
     */
    dpdDelay?: pulumi.Input<number>;
    /**
     * Enable or disable the generation of Security Policy Database entries(SPD) when the device is the responder of the IKE remote node
     */
    generatePolicy?: pulumi.Input<string>;
    /**
     * Defines the lifetime in minutes of an IKE SA which will be proposed in the phase 1 negotiations
     */
    lifetime?: pulumi.Input<number>;
    /**
     * Defines the exchange mode for phase 1 when racoon is the initiator, or the acceptable exchange mode when racoon is the responder
     */
    mode?: pulumi.Input<string>;
    /**
     * Specifies the name of the certificate file object
     */
    myCertFile?: pulumi.Input<string>;
    /**
     * Specifies the name of the certificate key file object
     */
    myCertKeyFile?: pulumi.Input<string>;
    /**
     * Specifies the passphrase of the key used for my-cert-key-file
     */
    myCertKeyPassphrase?: pulumi.Input<string>;
    /**
     * Specifies the identifier type sent to the remote host to use in the phase 1 negotiation
     */
    myIdType?: pulumi.Input<string>;
    /**
     * Specifies the identifier value sent to the remote host in the phase 1 negotiation
     */
    myIdValue?: pulumi.Input<string>;
    /**
     * Name of the ike_peer
     */
    name?: pulumi.Input<string>;
    /**
     * Enables use of the NAT-Traversal IPsec extension
     */
    natTraversal?: pulumi.Input<string>;
    /**
     * Specifies whether the local IKE agent can be the initiator of the IKE negotiation with this ike-peer
     */
    passive?: pulumi.Input<string>;
    /**
     * Specifies the peer’s certificate for authentication
     */
    peersCertFile?: pulumi.Input<string>;
    /**
     * Specifies that the only peers-cert-type supported is certfile
     */
    peersCertType?: pulumi.Input<string>;
    /**
     * Specifies which of address, fqdn, asn1dn, user-fqdn or keyid-tag types to use as peers-id-type
     */
    peersIdType?: pulumi.Input<string>;
    /**
     * Specifies the peer’s identifier to be received
     */
    peersIdValue?: pulumi.Input<string>;
    /**
     * Specifies the authentication method used for phase 1 negotiation
     */
    phase1AuthMethod?: pulumi.Input<string>;
    /**
     * Specifies the encryption algorithm used for the isakmp phase 1 negotiation
     */
    phase1EncryptAlgorithm?: pulumi.Input<string>;
    /**
     * Defines the hash algorithm used for the isakmp phase 1 negotiation
     */
    phase1HashAlgorithm?: pulumi.Input<string>;
    /**
     * Defines the Diffie-Hellman group for key exchange to provide perfect forward secrecy
     */
    phase1PerfectForwardSecrecy?: pulumi.Input<string>;
    /**
     * Specifies the preshared key for ISAKMP SAs
     */
    presharedKey?: pulumi.Input<string>;
    /**
     * Display the encrypted preshared-key for the IKE remote node
     */
    presharedKeyEncrypted?: pulumi.Input<string>;
    /**
     * Specifies the pseudo-random function used to derive keying material for all cryptographic operations
     */
    prf?: pulumi.Input<string>;
    /**
     * If this value is enabled, both values of ID payloads in the phase 2 exchange are used as the addresses of end-point of IPsec-SAs
     */
    proxySupport?: pulumi.Input<string>;
    /**
     * Specifies the IP address of the IKE remote node
     */
    remoteAddress?: pulumi.Input<string>;
    /**
     * Specifies the replay window size of the IPsec SAs negotiated with the IKE remote node
     */
    replayWindowSize?: pulumi.Input<number>;
    /**
     * Enables or disables this IKE remote node
     */
    state?: pulumi.Input<string>;
    /**
     * Specifies the names of the traffic-selector objects associated with this ike-peer
     */
    trafficSelectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies whether to verify the certificate chain of the remote peer based on the trusted certificates in ca-cert-file
     */
    verifyCert?: pulumi.Input<string>;
    /**
     * Specifies which version of IKE to be used
     */
    versions?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a NetIkePeer resource.
 */
export interface NetIkePeerArgs {
    /**
     * The application service that the object belongs to
     */
    appService?: pulumi.Input<string>;
    /**
     * the trusted root and intermediate certificate authorities
     */
    caCertFile?: pulumi.Input<string>;
    /**
     * Specifies the file name of the Certificate Revocation List. Only supported in IKEv1
     */
    crlFile?: pulumi.Input<string>;
    /**
     * User defined description
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the number of seconds between Dead Peer Detection messages
     */
    dpdDelay?: pulumi.Input<number>;
    /**
     * Enable or disable the generation of Security Policy Database entries(SPD) when the device is the responder of the IKE remote node
     */
    generatePolicy?: pulumi.Input<string>;
    /**
     * Defines the lifetime in minutes of an IKE SA which will be proposed in the phase 1 negotiations
     */
    lifetime?: pulumi.Input<number>;
    /**
     * Defines the exchange mode for phase 1 when racoon is the initiator, or the acceptable exchange mode when racoon is the responder
     */
    mode?: pulumi.Input<string>;
    /**
     * Specifies the name of the certificate file object
     */
    myCertFile?: pulumi.Input<string>;
    /**
     * Specifies the name of the certificate key file object
     */
    myCertKeyFile?: pulumi.Input<string>;
    /**
     * Specifies the passphrase of the key used for my-cert-key-file
     */
    myCertKeyPassphrase?: pulumi.Input<string>;
    /**
     * Specifies the identifier type sent to the remote host to use in the phase 1 negotiation
     */
    myIdType?: pulumi.Input<string>;
    /**
     * Specifies the identifier value sent to the remote host in the phase 1 negotiation
     */
    myIdValue?: pulumi.Input<string>;
    /**
     * Name of the ike_peer
     */
    name: pulumi.Input<string>;
    /**
     * Enables use of the NAT-Traversal IPsec extension
     */
    natTraversal?: pulumi.Input<string>;
    /**
     * Specifies whether the local IKE agent can be the initiator of the IKE negotiation with this ike-peer
     */
    passive?: pulumi.Input<string>;
    /**
     * Specifies the peer’s certificate for authentication
     */
    peersCertFile?: pulumi.Input<string>;
    /**
     * Specifies that the only peers-cert-type supported is certfile
     */
    peersCertType?: pulumi.Input<string>;
    /**
     * Specifies which of address, fqdn, asn1dn, user-fqdn or keyid-tag types to use as peers-id-type
     */
    peersIdType?: pulumi.Input<string>;
    /**
     * Specifies the peer’s identifier to be received
     */
    peersIdValue?: pulumi.Input<string>;
    /**
     * Specifies the authentication method used for phase 1 negotiation
     */
    phase1AuthMethod?: pulumi.Input<string>;
    /**
     * Specifies the encryption algorithm used for the isakmp phase 1 negotiation
     */
    phase1EncryptAlgorithm?: pulumi.Input<string>;
    /**
     * Defines the hash algorithm used for the isakmp phase 1 negotiation
     */
    phase1HashAlgorithm?: pulumi.Input<string>;
    /**
     * Defines the Diffie-Hellman group for key exchange to provide perfect forward secrecy
     */
    phase1PerfectForwardSecrecy?: pulumi.Input<string>;
    /**
     * Specifies the preshared key for ISAKMP SAs
     */
    presharedKey?: pulumi.Input<string>;
    /**
     * Display the encrypted preshared-key for the IKE remote node
     */
    presharedKeyEncrypted?: pulumi.Input<string>;
    /**
     * Specifies the pseudo-random function used to derive keying material for all cryptographic operations
     */
    prf?: pulumi.Input<string>;
    /**
     * If this value is enabled, both values of ID payloads in the phase 2 exchange are used as the addresses of end-point of IPsec-SAs
     */
    proxySupport?: pulumi.Input<string>;
    /**
     * Specifies the IP address of the IKE remote node
     */
    remoteAddress: pulumi.Input<string>;
    /**
     * Specifies the replay window size of the IPsec SAs negotiated with the IKE remote node
     */
    replayWindowSize?: pulumi.Input<number>;
    /**
     * Enables or disables this IKE remote node
     */
    state?: pulumi.Input<string>;
    /**
     * Specifies the names of the traffic-selector objects associated with this ike-peer
     */
    trafficSelectors?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies whether to verify the certificate chain of the remote peer based on the trusted certificates in ca-cert-file
     */
    verifyCert?: pulumi.Input<string>;
    /**
     * Specifies which version of IKE to be used
     */
    versions?: pulumi.Input<pulumi.Input<string>[]>;
}
