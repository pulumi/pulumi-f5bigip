// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * `f5bigip.vcmp.Guest` Manages a vCMP guest configuration
 *
 * Resource does not wait for vCMP guest to reach the desired state, it only ensures that a desired configuration is set on the target device.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as f5bigip from "@pulumi/f5bigip";
 *
 * const vcmp_test = new f5bigip.vcmp.Guest("vcmp-test", {
 *     name: "tf_guest",
 *     initialImage: "12.1.2.iso",
 *     mgmtNetwork: "bridged",
 *     mgmtAddress: "10.1.1.1/24",
 *     mgmtRoute: "none",
 *     state: "provisioned",
 *     coresPerSlot: 2,
 *     numberOfSlots: 1,
 *     minNumberOfSlots: 1,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export class Guest extends pulumi.CustomResource {
    /**
     * Get an existing Guest resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GuestState, opts?: pulumi.CustomResourceOptions): Guest {
        return new Guest(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'f5bigip:vcmp/guest:Guest';

    /**
     * Returns true if the given object is an instance of Guest.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Guest {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Guest.__pulumiType;
    }

    /**
     * Contains those slots to which the guest is allowed to be assigned.
     */
    public readonly allowedSlots!: pulumi.Output<number[]>;
    /**
     * Specifies the number of cores the system allocates to the guest.
     */
    public readonly coresPerSlot!: pulumi.Output<number>;
    /**
     * Indicates if virtual disk associated with vCMP guest should be removed during remove operation.  The default is `true`
     */
    public readonly deleteVirtualDisk!: pulumi.Output<boolean | undefined>;
    /**
     * Resource name including prepended partition path.
     */
    public /*out*/ readonly fullPath!: pulumi.Output<string>;
    /**
     * Specifies the hotfix ISO image file which is applied on top of the base image.
     */
    public readonly initialHotfix!: pulumi.Output<string>;
    /**
     * Specifies the base software release ISO image file for installing the TMOS hypervisor instance.
     */
    public readonly initialImage!: pulumi.Output<string>;
    /**
     * Specifies the IP address and subnet or subnet mask you use to access the guest when you want to manage a module running within the guest.
     */
    public readonly mgmtAddress!: pulumi.Output<string>;
    /**
     * Specifies the method by which the management address is used in the vCMP guest. options : [`bridged`,`isolated`,`host-only`].
     */
    public readonly mgmtNetwork!: pulumi.Output<string>;
    /**
     * Specifies the gateway address for the `mgmtAddress`. Can be set to `none` to remove the value from the configuration.
     */
    public readonly mgmtRoute!: pulumi.Output<string>;
    /**
     * Specifies the minimum number of slots the guest must be assigned to in order to deploy.
     */
    public readonly minNumberOfSlots!: pulumi.Output<number>;
    /**
     * Name of the vCMP guest
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the number of slots for the system to use when creating the guest.
     */
    public readonly numberOfSlots!: pulumi.Output<number>;
    /**
     * Specifies the state of the vCMP guest on the system. options : [`configured`,`provisioned`,`deployed`].
     */
    public readonly state!: pulumi.Output<string>;
    /**
     * Virtual disk associated with vCMP guest.
     */
    public /*out*/ readonly virtualDisk!: pulumi.Output<string>;
    /**
     * Specifies the list of VLANs the vCMP guest uses to communicate with other guests, the host, and with the external network. The naming format must be the combination of the partition + name. For example /Common/my-vlan
     */
    public readonly vlans!: pulumi.Output<string[]>;

    /**
     * Create a Guest resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GuestArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GuestArgs | GuestState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GuestState | undefined;
            resourceInputs["allowedSlots"] = state ? state.allowedSlots : undefined;
            resourceInputs["coresPerSlot"] = state ? state.coresPerSlot : undefined;
            resourceInputs["deleteVirtualDisk"] = state ? state.deleteVirtualDisk : undefined;
            resourceInputs["fullPath"] = state ? state.fullPath : undefined;
            resourceInputs["initialHotfix"] = state ? state.initialHotfix : undefined;
            resourceInputs["initialImage"] = state ? state.initialImage : undefined;
            resourceInputs["mgmtAddress"] = state ? state.mgmtAddress : undefined;
            resourceInputs["mgmtNetwork"] = state ? state.mgmtNetwork : undefined;
            resourceInputs["mgmtRoute"] = state ? state.mgmtRoute : undefined;
            resourceInputs["minNumberOfSlots"] = state ? state.minNumberOfSlots : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numberOfSlots"] = state ? state.numberOfSlots : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["virtualDisk"] = state ? state.virtualDisk : undefined;
            resourceInputs["vlans"] = state ? state.vlans : undefined;
        } else {
            const args = argsOrState as GuestArgs | undefined;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["allowedSlots"] = args ? args.allowedSlots : undefined;
            resourceInputs["coresPerSlot"] = args ? args.coresPerSlot : undefined;
            resourceInputs["deleteVirtualDisk"] = args ? args.deleteVirtualDisk : undefined;
            resourceInputs["initialHotfix"] = args ? args.initialHotfix : undefined;
            resourceInputs["initialImage"] = args ? args.initialImage : undefined;
            resourceInputs["mgmtAddress"] = args ? args.mgmtAddress : undefined;
            resourceInputs["mgmtNetwork"] = args ? args.mgmtNetwork : undefined;
            resourceInputs["mgmtRoute"] = args ? args.mgmtRoute : undefined;
            resourceInputs["minNumberOfSlots"] = args ? args.minNumberOfSlots : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["numberOfSlots"] = args ? args.numberOfSlots : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["vlans"] = args ? args.vlans : undefined;
            resourceInputs["fullPath"] = undefined /*out*/;
            resourceInputs["virtualDisk"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Guest.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Guest resources.
 */
export interface GuestState {
    /**
     * Contains those slots to which the guest is allowed to be assigned.
     */
    allowedSlots?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Specifies the number of cores the system allocates to the guest.
     */
    coresPerSlot?: pulumi.Input<number>;
    /**
     * Indicates if virtual disk associated with vCMP guest should be removed during remove operation.  The default is `true`
     */
    deleteVirtualDisk?: pulumi.Input<boolean>;
    /**
     * Resource name including prepended partition path.
     */
    fullPath?: pulumi.Input<string>;
    /**
     * Specifies the hotfix ISO image file which is applied on top of the base image.
     */
    initialHotfix?: pulumi.Input<string>;
    /**
     * Specifies the base software release ISO image file for installing the TMOS hypervisor instance.
     */
    initialImage?: pulumi.Input<string>;
    /**
     * Specifies the IP address and subnet or subnet mask you use to access the guest when you want to manage a module running within the guest.
     */
    mgmtAddress?: pulumi.Input<string>;
    /**
     * Specifies the method by which the management address is used in the vCMP guest. options : [`bridged`,`isolated`,`host-only`].
     */
    mgmtNetwork?: pulumi.Input<string>;
    /**
     * Specifies the gateway address for the `mgmtAddress`. Can be set to `none` to remove the value from the configuration.
     */
    mgmtRoute?: pulumi.Input<string>;
    /**
     * Specifies the minimum number of slots the guest must be assigned to in order to deploy.
     */
    minNumberOfSlots?: pulumi.Input<number>;
    /**
     * Name of the vCMP guest
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the number of slots for the system to use when creating the guest.
     */
    numberOfSlots?: pulumi.Input<number>;
    /**
     * Specifies the state of the vCMP guest on the system. options : [`configured`,`provisioned`,`deployed`].
     */
    state?: pulumi.Input<string>;
    /**
     * Virtual disk associated with vCMP guest.
     */
    virtualDisk?: pulumi.Input<string>;
    /**
     * Specifies the list of VLANs the vCMP guest uses to communicate with other guests, the host, and with the external network. The naming format must be the combination of the partition + name. For example /Common/my-vlan
     */
    vlans?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Guest resource.
 */
export interface GuestArgs {
    /**
     * Contains those slots to which the guest is allowed to be assigned.
     */
    allowedSlots?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Specifies the number of cores the system allocates to the guest.
     */
    coresPerSlot?: pulumi.Input<number>;
    /**
     * Indicates if virtual disk associated with vCMP guest should be removed during remove operation.  The default is `true`
     */
    deleteVirtualDisk?: pulumi.Input<boolean>;
    /**
     * Specifies the hotfix ISO image file which is applied on top of the base image.
     */
    initialHotfix?: pulumi.Input<string>;
    /**
     * Specifies the base software release ISO image file for installing the TMOS hypervisor instance.
     */
    initialImage?: pulumi.Input<string>;
    /**
     * Specifies the IP address and subnet or subnet mask you use to access the guest when you want to manage a module running within the guest.
     */
    mgmtAddress?: pulumi.Input<string>;
    /**
     * Specifies the method by which the management address is used in the vCMP guest. options : [`bridged`,`isolated`,`host-only`].
     */
    mgmtNetwork?: pulumi.Input<string>;
    /**
     * Specifies the gateway address for the `mgmtAddress`. Can be set to `none` to remove the value from the configuration.
     */
    mgmtRoute?: pulumi.Input<string>;
    /**
     * Specifies the minimum number of slots the guest must be assigned to in order to deploy.
     */
    minNumberOfSlots?: pulumi.Input<number>;
    /**
     * Name of the vCMP guest
     */
    name: pulumi.Input<string>;
    /**
     * Specifies the number of slots for the system to use when creating the guest.
     */
    numberOfSlots?: pulumi.Input<number>;
    /**
     * Specifies the state of the vCMP guest on the system. options : [`configured`,`provisioned`,`deployed`].
     */
    state?: pulumi.Input<string>;
    /**
     * Specifies the list of VLANs the vCMP guest uses to communicate with other guests, the host, and with the external network. The naming format must be the combination of the partition + name. For example /Common/my-vlan
     */
    vlans?: pulumi.Input<pulumi.Input<string>[]>;
}
