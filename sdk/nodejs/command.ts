// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `f5bigip.Command` Run TMSH commands on F5 devices
 *
 * This resource is helpful to send TMSH command to an BIG-IP node and returns the results read from the device
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as f5bigip from "@pulumi/f5bigip";
 *
 * //create ltm node
 * const test_command = new f5bigip.Command("test-command", {
 *     commands: ["delete ltm node 10.10.10.70"],
 *     when: "destroy",
 * });
 * ```
 */
export class Command extends pulumi.CustomResource {
    /**
     * Get an existing Command resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CommandState, opts?: pulumi.CustomResourceOptions): Command {
        return new Command(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'f5bigip:index/command:Command';

    /**
     * Returns true if the given object is an instance of Command.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Command {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Command.__pulumiType;
    }

    /**
     * The resulting output from the `commands` executed
     */
    public readonly commandResults!: pulumi.Output<string[]>;
    /**
     * The commands to send to the remote BIG-IP device over the configured provider. The resulting output from the command is returned and added to `commandResult`
     */
    public readonly commands!: pulumi.Output<string[]>;
    public readonly when!: pulumi.Output<string | undefined>;

    /**
     * Create a Command resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CommandArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CommandArgs | CommandState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as CommandState | undefined;
            inputs["commandResults"] = state ? state.commandResults : undefined;
            inputs["commands"] = state ? state.commands : undefined;
            inputs["when"] = state ? state.when : undefined;
        } else {
            const args = argsOrState as CommandArgs | undefined;
            if (!args || args.commands === undefined) {
                throw new Error("Missing required property 'commands'");
            }
            inputs["commandResults"] = args ? args.commandResults : undefined;
            inputs["commands"] = args ? args.commands : undefined;
            inputs["when"] = args ? args.when : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Command.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Command resources.
 */
export interface CommandState {
    /**
     * The resulting output from the `commands` executed
     */
    readonly commandResults?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The commands to send to the remote BIG-IP device over the configured provider. The resulting output from the command is returned and added to `commandResult`
     */
    readonly commands?: pulumi.Input<pulumi.Input<string>[]>;
    readonly when?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Command resource.
 */
export interface CommandArgs {
    /**
     * The resulting output from the `commands` executed
     */
    readonly commandResults?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The commands to send to the remote BIG-IP device over the configured provider. The resulting output from the command is returned and added to `commandResult`
     */
    readonly commands: pulumi.Input<pulumi.Input<string>[]>;
    readonly when?: pulumi.Input<string>;
}
