// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { GetCertificateArgs, GetCertificateResult, GetCertificateOutputArgs } from "./getCertificate";
export const getCertificate: typeof import("./getCertificate").getCertificate = null as any;
export const getCertificateOutput: typeof import("./getCertificate").getCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getCertificate","getCertificateOutput"], () => require("./getCertificate"));

export { GetVWanConfigArgs, GetVWanConfigResult, GetVWanConfigOutputArgs } from "./getVWanConfig";
export const getVWanConfig: typeof import("./getVWanConfig").getVWanConfig = null as any;
export const getVWanConfigOutput: typeof import("./getVWanConfig").getVWanConfigOutput = null as any;
utilities.lazyLoad(exports, ["getVWanConfig","getVWanConfigOutput"], () => require("./getVWanConfig"));

export { GetWafEntityParameterArgs, GetWafEntityParameterResult, GetWafEntityParameterOutputArgs } from "./getWafEntityParameter";
export const getWafEntityParameter: typeof import("./getWafEntityParameter").getWafEntityParameter = null as any;
export const getWafEntityParameterOutput: typeof import("./getWafEntityParameter").getWafEntityParameterOutput = null as any;
utilities.lazyLoad(exports, ["getWafEntityParameter","getWafEntityParameterOutput"], () => require("./getWafEntityParameter"));

export { GetWafEntityUrlArgs, GetWafEntityUrlResult, GetWafEntityUrlOutputArgs } from "./getWafEntityUrl";
export const getWafEntityUrl: typeof import("./getWafEntityUrl").getWafEntityUrl = null as any;
export const getWafEntityUrlOutput: typeof import("./getWafEntityUrl").getWafEntityUrlOutput = null as any;
utilities.lazyLoad(exports, ["getWafEntityUrl","getWafEntityUrlOutput"], () => require("./getWafEntityUrl"));

export { GetWafPbSuggestionsArgs, GetWafPbSuggestionsResult, GetWafPbSuggestionsOutputArgs } from "./getWafPbSuggestions";
export const getWafPbSuggestions: typeof import("./getWafPbSuggestions").getWafPbSuggestions = null as any;
export const getWafPbSuggestionsOutput: typeof import("./getWafPbSuggestions").getWafPbSuggestionsOutput = null as any;
utilities.lazyLoad(exports, ["getWafPbSuggestions","getWafPbSuggestionsOutput"], () => require("./getWafPbSuggestions"));

export { GetWafPolicyArgs, GetWafPolicyResult, GetWafPolicyOutputArgs } from "./getWafPolicy";
export const getWafPolicy: typeof import("./getWafPolicy").getWafPolicy = null as any;
export const getWafPolicyOutput: typeof import("./getWafPolicy").getWafPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getWafPolicy","getWafPolicyOutput"], () => require("./getWafPolicy"));

export { GetWafSignaturesArgs, GetWafSignaturesResult, GetWafSignaturesOutputArgs } from "./getWafSignatures";
export const getWafSignatures: typeof import("./getWafSignatures").getWafSignatures = null as any;
export const getWafSignaturesOutput: typeof import("./getWafSignatures").getWafSignaturesOutput = null as any;
utilities.lazyLoad(exports, ["getWafSignatures","getWafSignaturesOutput"], () => require("./getWafSignatures"));

export { KeyArgs, KeyState } from "./key";
export type Key = import("./key").Key;
export const Key: typeof import("./key").Key = null as any;
utilities.lazyLoad(exports, ["Key"], () => require("./key"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "f5bigip:ssl/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "f5bigip:ssl/key:Key":
                return new Key(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("f5bigip", "ssl/certificate", _module)
pulumi.runtime.registerResourceModule("f5bigip", "ssl/key", _module)
