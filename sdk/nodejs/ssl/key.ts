// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * `f5bigip.ssl.Key` This resource will import SSL certificate key on BIG-IP LTM.
 * Certificate key can be imported from certificate key files on the local disk, in PEM format
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as f5bigip from "@pulumi/f5bigip";
 * import * as std from "@pulumi/std";
 *
 * const test_key = new f5bigip.ssl.Key("test-key", {
 *     name: "serverkey.key",
 *     content: std.file({
 *         input: "serverkey.key",
 *     }).then(invoke => invoke.result),
 *     partition: "Common",
 * });
 * ```
 */
export class Key extends pulumi.CustomResource {
    /**
     * Get an existing Key resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeyState, opts?: pulumi.CustomResourceOptions): Key {
        return new Key(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'f5bigip:ssl/key:Key';

    /**
     * Returns true if the given object is an instance of Key.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Key {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Key.__pulumiType;
    }

    /**
     * Content of SSL certificate key present on local Disk
     */
    declare public readonly content: pulumi.Output<string>;
    /**
     * Full Path Name of ssl key
     */
    declare public readonly fullPath: pulumi.Output<string>;
    /**
     * Name of the SSL Certificate key to be Imported on to BIGIP
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Partition of ssl certificate key
     */
    declare public readonly partition: pulumi.Output<string | undefined>;
    /**
     * Passphrase on key.
     */
    declare public readonly passphrase: pulumi.Output<string | undefined>;

    /**
     * Create a Key resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeyArgs | KeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeyState | undefined;
            resourceInputs["content"] = state?.content;
            resourceInputs["fullPath"] = state?.fullPath;
            resourceInputs["name"] = state?.name;
            resourceInputs["partition"] = state?.partition;
            resourceInputs["passphrase"] = state?.passphrase;
        } else {
            const args = argsOrState as KeyArgs | undefined;
            if (args?.content === undefined && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            if (args?.name === undefined && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["content"] = args?.content ? pulumi.secret(args.content) : undefined;
            resourceInputs["fullPath"] = args?.fullPath;
            resourceInputs["name"] = args?.name;
            resourceInputs["partition"] = args?.partition;
            resourceInputs["passphrase"] = args?.passphrase ? pulumi.secret(args.passphrase) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["content", "passphrase"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Key.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Key resources.
 */
export interface KeyState {
    /**
     * Content of SSL certificate key present on local Disk
     */
    content?: pulumi.Input<string>;
    /**
     * Full Path Name of ssl key
     */
    fullPath?: pulumi.Input<string>;
    /**
     * Name of the SSL Certificate key to be Imported on to BIGIP
     */
    name?: pulumi.Input<string>;
    /**
     * Partition of ssl certificate key
     */
    partition?: pulumi.Input<string>;
    /**
     * Passphrase on key.
     */
    passphrase?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Key resource.
 */
export interface KeyArgs {
    /**
     * Content of SSL certificate key present on local Disk
     */
    content: pulumi.Input<string>;
    /**
     * Full Path Name of ssl key
     */
    fullPath?: pulumi.Input<string>;
    /**
     * Name of the SSL Certificate key to be Imported on to BIGIP
     */
    name: pulumi.Input<string>;
    /**
     * Partition of ssl certificate key
     */
    partition?: pulumi.Input<string>;
    /**
     * Passphrase on key.
     */
    passphrase?: pulumi.Input<string>;
}
