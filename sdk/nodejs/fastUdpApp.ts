// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * `f5bigip.FastUdpApp` This resource will create and manage FAST UDP applications on BIG-IP from provided JSON declaration.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as f5bigip from "@pulumi/f5bigip";
 *
 * const fast_udp_app = new f5bigip.FastUdpApp("fast-udp-app", {
 *     application: "udp_app_2",
 *     poolMembers: [{
 *         addresses: [
 *             "10.11.34.65",
 *             "56.43.23.76",
 *         ],
 *         connectionLimit: 4,
 *         port: 443,
 *         priorityGroup: 1,
 *         shareNodes: true,
 *     }],
 *     tenant: "udp_app_tenant",
 *     virtualServer: {
 *         ip: "11.12.16.30",
 *         port: 443,
 *     },
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export class FastUdpApp extends pulumi.CustomResource {
    /**
     * Get an existing FastUdpApp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FastUdpAppState, opts?: pulumi.CustomResourceOptions): FastUdpApp {
        return new FastUdpApp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'f5bigip:index/fastUdpApp:FastUdpApp';

    /**
     * Returns true if the given object is an instance of FastUdpApp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FastUdpApp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FastUdpApp.__pulumiType;
    }

    /**
     * Name of the FAST UDP application.
     */
    public readonly application!: pulumi.Output<string>;
    /**
     * Enables use of FastL4 profiles.
     */
    public readonly enableFastl4!: pulumi.Output<boolean | undefined>;
    /**
     * Name of an existing BIG-IP UDP pool monitor. Monitors are used to determine the health of the application on each server.
     */
    public readonly existingMonitor!: pulumi.Output<string | undefined>;
    /**
     * Name of an existing BIG-IP pool.
     */
    public readonly existingPool!: pulumi.Output<string | undefined>;
    /**
     * Name of an existing BIG-IP FastL4 or UDP profile.
     */
    public readonly existingProfile!: pulumi.Output<string | undefined>;
    /**
     * Name of an existing BIG-IP SNAT pool.
     */
    public readonly existingSnatPool!: pulumi.Output<string | undefined>;
    /**
     * Type of fallback persistence record to be created for each new client connection.
     */
    public readonly fallbackPersistence!: pulumi.Output<string | undefined>;
    /**
     * Json payload for FAST UDP application.
     */
    public /*out*/ readonly fastUdpJson!: pulumi.Output<string>;
    /**
     * Irules to attach to Virtual Server.
     */
    public readonly irules!: pulumi.Output<string[] | undefined>;
    /**
     * A `load balancing method` is an algorithm that the BIG-IP system uses to select a pool member for processing a request. F5 recommends the Least Connections load balancing method
     */
    public readonly loadBalancingMode!: pulumi.Output<string | undefined>;
    /**
     * `monitor` block takes input for FAST-Generated Pool Monitor.
     * See Pool Monitor below for more details.
     */
    public readonly monitor!: pulumi.Output<outputs.FastUdpAppMonitor | undefined>;
    /**
     * Name of an existing BIG-IP persistence profile to be used.
     */
    public readonly persistenceProfile!: pulumi.Output<string | undefined>;
    /**
     * Type of persistence profile to be created. Using this option will enable use of FAST generated persistence profiles.
     */
    public readonly persistenceType!: pulumi.Output<string | undefined>;
    /**
     * `poolMembers` block takes input for FAST-Generated Pool.
     * See Pool Members below for more details.
     */
    public readonly poolMembers!: pulumi.Output<outputs.FastUdpAppPoolMember[] | undefined>;
    /**
     * Existing security log profiles to enable.
     */
    public readonly securityLogProfiles!: pulumi.Output<string[] | undefined>;
    /**
     * Slow ramp temporarily throttles the number of connections to a new pool member. The recommended value is 300 seconds
     */
    public readonly slowRampTime!: pulumi.Output<number | undefined>;
    /**
     * List of address to be used for FAST-Generated SNAT Pool.
     */
    public readonly snatPoolAddresses!: pulumi.Output<string[] | undefined>;
    /**
     * Name of the FAST UDP application tenant.
     */
    public readonly tenant!: pulumi.Output<string>;
    /**
     * `virtualServer` block will provide `ip` and `port` options to be used for virtual server.
     * See virtual server below for more details.
     */
    public readonly virtualServer!: pulumi.Output<outputs.FastUdpAppVirtualServer | undefined>;
    /**
     * Names of existing VLANs to allow.
     */
    public readonly vlansAlloweds!: pulumi.Output<string[] | undefined>;
    /**
     * Names of existing VLANs to reject.
     */
    public readonly vlansRejecteds!: pulumi.Output<string[] | undefined>;

    /**
     * Create a FastUdpApp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FastUdpAppArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FastUdpAppArgs | FastUdpAppState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FastUdpAppState | undefined;
            resourceInputs["application"] = state ? state.application : undefined;
            resourceInputs["enableFastl4"] = state ? state.enableFastl4 : undefined;
            resourceInputs["existingMonitor"] = state ? state.existingMonitor : undefined;
            resourceInputs["existingPool"] = state ? state.existingPool : undefined;
            resourceInputs["existingProfile"] = state ? state.existingProfile : undefined;
            resourceInputs["existingSnatPool"] = state ? state.existingSnatPool : undefined;
            resourceInputs["fallbackPersistence"] = state ? state.fallbackPersistence : undefined;
            resourceInputs["fastUdpJson"] = state ? state.fastUdpJson : undefined;
            resourceInputs["irules"] = state ? state.irules : undefined;
            resourceInputs["loadBalancingMode"] = state ? state.loadBalancingMode : undefined;
            resourceInputs["monitor"] = state ? state.monitor : undefined;
            resourceInputs["persistenceProfile"] = state ? state.persistenceProfile : undefined;
            resourceInputs["persistenceType"] = state ? state.persistenceType : undefined;
            resourceInputs["poolMembers"] = state ? state.poolMembers : undefined;
            resourceInputs["securityLogProfiles"] = state ? state.securityLogProfiles : undefined;
            resourceInputs["slowRampTime"] = state ? state.slowRampTime : undefined;
            resourceInputs["snatPoolAddresses"] = state ? state.snatPoolAddresses : undefined;
            resourceInputs["tenant"] = state ? state.tenant : undefined;
            resourceInputs["virtualServer"] = state ? state.virtualServer : undefined;
            resourceInputs["vlansAlloweds"] = state ? state.vlansAlloweds : undefined;
            resourceInputs["vlansRejecteds"] = state ? state.vlansRejecteds : undefined;
        } else {
            const args = argsOrState as FastUdpAppArgs | undefined;
            if ((!args || args.application === undefined) && !opts.urn) {
                throw new Error("Missing required property 'application'");
            }
            if ((!args || args.tenant === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenant'");
            }
            resourceInputs["application"] = args ? args.application : undefined;
            resourceInputs["enableFastl4"] = args ? args.enableFastl4 : undefined;
            resourceInputs["existingMonitor"] = args ? args.existingMonitor : undefined;
            resourceInputs["existingPool"] = args ? args.existingPool : undefined;
            resourceInputs["existingProfile"] = args ? args.existingProfile : undefined;
            resourceInputs["existingSnatPool"] = args ? args.existingSnatPool : undefined;
            resourceInputs["fallbackPersistence"] = args ? args.fallbackPersistence : undefined;
            resourceInputs["irules"] = args ? args.irules : undefined;
            resourceInputs["loadBalancingMode"] = args ? args.loadBalancingMode : undefined;
            resourceInputs["monitor"] = args ? args.monitor : undefined;
            resourceInputs["persistenceProfile"] = args ? args.persistenceProfile : undefined;
            resourceInputs["persistenceType"] = args ? args.persistenceType : undefined;
            resourceInputs["poolMembers"] = args ? args.poolMembers : undefined;
            resourceInputs["securityLogProfiles"] = args ? args.securityLogProfiles : undefined;
            resourceInputs["slowRampTime"] = args ? args.slowRampTime : undefined;
            resourceInputs["snatPoolAddresses"] = args ? args.snatPoolAddresses : undefined;
            resourceInputs["tenant"] = args ? args.tenant : undefined;
            resourceInputs["virtualServer"] = args ? args.virtualServer : undefined;
            resourceInputs["vlansAlloweds"] = args ? args.vlansAlloweds : undefined;
            resourceInputs["vlansRejecteds"] = args ? args.vlansRejecteds : undefined;
            resourceInputs["fastUdpJson"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FastUdpApp.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FastUdpApp resources.
 */
export interface FastUdpAppState {
    /**
     * Name of the FAST UDP application.
     */
    application?: pulumi.Input<string>;
    /**
     * Enables use of FastL4 profiles.
     */
    enableFastl4?: pulumi.Input<boolean>;
    /**
     * Name of an existing BIG-IP UDP pool monitor. Monitors are used to determine the health of the application on each server.
     */
    existingMonitor?: pulumi.Input<string>;
    /**
     * Name of an existing BIG-IP pool.
     */
    existingPool?: pulumi.Input<string>;
    /**
     * Name of an existing BIG-IP FastL4 or UDP profile.
     */
    existingProfile?: pulumi.Input<string>;
    /**
     * Name of an existing BIG-IP SNAT pool.
     */
    existingSnatPool?: pulumi.Input<string>;
    /**
     * Type of fallback persistence record to be created for each new client connection.
     */
    fallbackPersistence?: pulumi.Input<string>;
    /**
     * Json payload for FAST UDP application.
     */
    fastUdpJson?: pulumi.Input<string>;
    /**
     * Irules to attach to Virtual Server.
     */
    irules?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A `load balancing method` is an algorithm that the BIG-IP system uses to select a pool member for processing a request. F5 recommends the Least Connections load balancing method
     */
    loadBalancingMode?: pulumi.Input<string>;
    /**
     * `monitor` block takes input for FAST-Generated Pool Monitor.
     * See Pool Monitor below for more details.
     */
    monitor?: pulumi.Input<inputs.FastUdpAppMonitor>;
    /**
     * Name of an existing BIG-IP persistence profile to be used.
     */
    persistenceProfile?: pulumi.Input<string>;
    /**
     * Type of persistence profile to be created. Using this option will enable use of FAST generated persistence profiles.
     */
    persistenceType?: pulumi.Input<string>;
    /**
     * `poolMembers` block takes input for FAST-Generated Pool.
     * See Pool Members below for more details.
     */
    poolMembers?: pulumi.Input<pulumi.Input<inputs.FastUdpAppPoolMember>[]>;
    /**
     * Existing security log profiles to enable.
     */
    securityLogProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Slow ramp temporarily throttles the number of connections to a new pool member. The recommended value is 300 seconds
     */
    slowRampTime?: pulumi.Input<number>;
    /**
     * List of address to be used for FAST-Generated SNAT Pool.
     */
    snatPoolAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the FAST UDP application tenant.
     */
    tenant?: pulumi.Input<string>;
    /**
     * `virtualServer` block will provide `ip` and `port` options to be used for virtual server.
     * See virtual server below for more details.
     */
    virtualServer?: pulumi.Input<inputs.FastUdpAppVirtualServer>;
    /**
     * Names of existing VLANs to allow.
     */
    vlansAlloweds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Names of existing VLANs to reject.
     */
    vlansRejecteds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a FastUdpApp resource.
 */
export interface FastUdpAppArgs {
    /**
     * Name of the FAST UDP application.
     */
    application: pulumi.Input<string>;
    /**
     * Enables use of FastL4 profiles.
     */
    enableFastl4?: pulumi.Input<boolean>;
    /**
     * Name of an existing BIG-IP UDP pool monitor. Monitors are used to determine the health of the application on each server.
     */
    existingMonitor?: pulumi.Input<string>;
    /**
     * Name of an existing BIG-IP pool.
     */
    existingPool?: pulumi.Input<string>;
    /**
     * Name of an existing BIG-IP FastL4 or UDP profile.
     */
    existingProfile?: pulumi.Input<string>;
    /**
     * Name of an existing BIG-IP SNAT pool.
     */
    existingSnatPool?: pulumi.Input<string>;
    /**
     * Type of fallback persistence record to be created for each new client connection.
     */
    fallbackPersistence?: pulumi.Input<string>;
    /**
     * Irules to attach to Virtual Server.
     */
    irules?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A `load balancing method` is an algorithm that the BIG-IP system uses to select a pool member for processing a request. F5 recommends the Least Connections load balancing method
     */
    loadBalancingMode?: pulumi.Input<string>;
    /**
     * `monitor` block takes input for FAST-Generated Pool Monitor.
     * See Pool Monitor below for more details.
     */
    monitor?: pulumi.Input<inputs.FastUdpAppMonitor>;
    /**
     * Name of an existing BIG-IP persistence profile to be used.
     */
    persistenceProfile?: pulumi.Input<string>;
    /**
     * Type of persistence profile to be created. Using this option will enable use of FAST generated persistence profiles.
     */
    persistenceType?: pulumi.Input<string>;
    /**
     * `poolMembers` block takes input for FAST-Generated Pool.
     * See Pool Members below for more details.
     */
    poolMembers?: pulumi.Input<pulumi.Input<inputs.FastUdpAppPoolMember>[]>;
    /**
     * Existing security log profiles to enable.
     */
    securityLogProfiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Slow ramp temporarily throttles the number of connections to a new pool member. The recommended value is 300 seconds
     */
    slowRampTime?: pulumi.Input<number>;
    /**
     * List of address to be used for FAST-Generated SNAT Pool.
     */
    snatPoolAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the FAST UDP application tenant.
     */
    tenant: pulumi.Input<string>;
    /**
     * `virtualServer` block will provide `ip` and `port` options to be used for virtual server.
     * See virtual server below for more details.
     */
    virtualServer?: pulumi.Input<inputs.FastUdpAppVirtualServer>;
    /**
     * Names of existing VLANs to allow.
     */
    vlansAlloweds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Names of existing VLANs to reject.
     */
    vlansRejecteds?: pulumi.Input<pulumi.Input<string>[]>;
}
