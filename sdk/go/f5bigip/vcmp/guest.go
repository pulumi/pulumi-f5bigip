// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vcmp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-f5bigip/sdk/v3/go/f5bigip/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// `vcmp.Guest` Manages a vCMP guest configuration
//
// Resource does not wait for vCMP guest to reach the desired state, it only ensures that a desired configuration is set on the target device.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-f5bigip/sdk/v3/go/f5bigip/vcmp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vcmp.NewGuest(ctx, "vcmp-test", &vcmp.GuestArgs{
//				CoresPerSlot:     pulumi.Int(2),
//				InitialImage:     pulumi.String("12.1.2.iso"),
//				MgmtAddress:      pulumi.String("10.1.1.1/24"),
//				MgmtNetwork:      pulumi.String("bridged"),
//				MgmtRoute:        pulumi.String("none"),
//				MinNumberOfSlots: pulumi.Int(1),
//				Name:             pulumi.String("tf_guest"),
//				NumberOfSlots:    pulumi.Int(1),
//				State:            pulumi.String("provisioned"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Guest struct {
	pulumi.CustomResourceState

	// Contains those slots to which the guest is allowed to be assigned.
	AllowedSlots pulumi.IntArrayOutput `pulumi:"allowedSlots"`
	// Specifies the number of cores the system allocates to the guest.
	CoresPerSlot pulumi.IntOutput `pulumi:"coresPerSlot"`
	// Indicates if virtual disk associated with vCMP guest should be removed during remove operation.  The default is `true`
	DeleteVirtualDisk pulumi.BoolPtrOutput `pulumi:"deleteVirtualDisk"`
	// Resource name including prepended partition path.
	FullPath pulumi.StringOutput `pulumi:"fullPath"`
	// Specifies the hotfix ISO image file which is applied on top of the base image.
	InitialHotfix pulumi.StringOutput `pulumi:"initialHotfix"`
	// Specifies the base software release ISO image file for installing the TMOS hypervisor instance.
	InitialImage pulumi.StringOutput `pulumi:"initialImage"`
	// Specifies the IP address and subnet or subnet mask you use to access the guest when you want to manage a module running within the guest.
	MgmtAddress pulumi.StringOutput `pulumi:"mgmtAddress"`
	// Specifies the method by which the management address is used in the vCMP guest. options : [`bridged`,`isolated`,`host-only`].
	MgmtNetwork pulumi.StringOutput `pulumi:"mgmtNetwork"`
	// Specifies the gateway address for the `mgmtAddress`. Can be set to `none` to remove the value from the configuration.
	MgmtRoute pulumi.StringOutput `pulumi:"mgmtRoute"`
	// Specifies the minimum number of slots the guest must be assigned to in order to deploy.
	MinNumberOfSlots pulumi.IntOutput `pulumi:"minNumberOfSlots"`
	// Name of the vCMP guest
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the number of slots for the system to use when creating the guest.
	NumberOfSlots pulumi.IntOutput `pulumi:"numberOfSlots"`
	// Specifies the state of the vCMP guest on the system. options : [`configured`,`provisioned`,`deployed`].
	State pulumi.StringOutput `pulumi:"state"`
	// Virtual disk associated with vCMP guest.
	VirtualDisk pulumi.StringOutput `pulumi:"virtualDisk"`
	// Specifies the list of VLANs the vCMP guest uses to communicate with other guests, the host, and with the external network. The naming format must be the combination of the partition + name. For example /Common/my-vlan
	Vlans pulumi.StringArrayOutput `pulumi:"vlans"`
}

// NewGuest registers a new resource with the given unique name, arguments, and options.
func NewGuest(ctx *pulumi.Context,
	name string, args *GuestArgs, opts ...pulumi.ResourceOption) (*Guest, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Guest
	err := ctx.RegisterResource("f5bigip:vcmp/guest:Guest", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGuest gets an existing Guest resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGuest(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GuestState, opts ...pulumi.ResourceOption) (*Guest, error) {
	var resource Guest
	err := ctx.ReadResource("f5bigip:vcmp/guest:Guest", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Guest resources.
type guestState struct {
	// Contains those slots to which the guest is allowed to be assigned.
	AllowedSlots []int `pulumi:"allowedSlots"`
	// Specifies the number of cores the system allocates to the guest.
	CoresPerSlot *int `pulumi:"coresPerSlot"`
	// Indicates if virtual disk associated with vCMP guest should be removed during remove operation.  The default is `true`
	DeleteVirtualDisk *bool `pulumi:"deleteVirtualDisk"`
	// Resource name including prepended partition path.
	FullPath *string `pulumi:"fullPath"`
	// Specifies the hotfix ISO image file which is applied on top of the base image.
	InitialHotfix *string `pulumi:"initialHotfix"`
	// Specifies the base software release ISO image file for installing the TMOS hypervisor instance.
	InitialImage *string `pulumi:"initialImage"`
	// Specifies the IP address and subnet or subnet mask you use to access the guest when you want to manage a module running within the guest.
	MgmtAddress *string `pulumi:"mgmtAddress"`
	// Specifies the method by which the management address is used in the vCMP guest. options : [`bridged`,`isolated`,`host-only`].
	MgmtNetwork *string `pulumi:"mgmtNetwork"`
	// Specifies the gateway address for the `mgmtAddress`. Can be set to `none` to remove the value from the configuration.
	MgmtRoute *string `pulumi:"mgmtRoute"`
	// Specifies the minimum number of slots the guest must be assigned to in order to deploy.
	MinNumberOfSlots *int `pulumi:"minNumberOfSlots"`
	// Name of the vCMP guest
	Name *string `pulumi:"name"`
	// Specifies the number of slots for the system to use when creating the guest.
	NumberOfSlots *int `pulumi:"numberOfSlots"`
	// Specifies the state of the vCMP guest on the system. options : [`configured`,`provisioned`,`deployed`].
	State *string `pulumi:"state"`
	// Virtual disk associated with vCMP guest.
	VirtualDisk *string `pulumi:"virtualDisk"`
	// Specifies the list of VLANs the vCMP guest uses to communicate with other guests, the host, and with the external network. The naming format must be the combination of the partition + name. For example /Common/my-vlan
	Vlans []string `pulumi:"vlans"`
}

type GuestState struct {
	// Contains those slots to which the guest is allowed to be assigned.
	AllowedSlots pulumi.IntArrayInput
	// Specifies the number of cores the system allocates to the guest.
	CoresPerSlot pulumi.IntPtrInput
	// Indicates if virtual disk associated with vCMP guest should be removed during remove operation.  The default is `true`
	DeleteVirtualDisk pulumi.BoolPtrInput
	// Resource name including prepended partition path.
	FullPath pulumi.StringPtrInput
	// Specifies the hotfix ISO image file which is applied on top of the base image.
	InitialHotfix pulumi.StringPtrInput
	// Specifies the base software release ISO image file for installing the TMOS hypervisor instance.
	InitialImage pulumi.StringPtrInput
	// Specifies the IP address and subnet or subnet mask you use to access the guest when you want to manage a module running within the guest.
	MgmtAddress pulumi.StringPtrInput
	// Specifies the method by which the management address is used in the vCMP guest. options : [`bridged`,`isolated`,`host-only`].
	MgmtNetwork pulumi.StringPtrInput
	// Specifies the gateway address for the `mgmtAddress`. Can be set to `none` to remove the value from the configuration.
	MgmtRoute pulumi.StringPtrInput
	// Specifies the minimum number of slots the guest must be assigned to in order to deploy.
	MinNumberOfSlots pulumi.IntPtrInput
	// Name of the vCMP guest
	Name pulumi.StringPtrInput
	// Specifies the number of slots for the system to use when creating the guest.
	NumberOfSlots pulumi.IntPtrInput
	// Specifies the state of the vCMP guest on the system. options : [`configured`,`provisioned`,`deployed`].
	State pulumi.StringPtrInput
	// Virtual disk associated with vCMP guest.
	VirtualDisk pulumi.StringPtrInput
	// Specifies the list of VLANs the vCMP guest uses to communicate with other guests, the host, and with the external network. The naming format must be the combination of the partition + name. For example /Common/my-vlan
	Vlans pulumi.StringArrayInput
}

func (GuestState) ElementType() reflect.Type {
	return reflect.TypeOf((*guestState)(nil)).Elem()
}

type guestArgs struct {
	// Contains those slots to which the guest is allowed to be assigned.
	AllowedSlots []int `pulumi:"allowedSlots"`
	// Specifies the number of cores the system allocates to the guest.
	CoresPerSlot *int `pulumi:"coresPerSlot"`
	// Indicates if virtual disk associated with vCMP guest should be removed during remove operation.  The default is `true`
	DeleteVirtualDisk *bool `pulumi:"deleteVirtualDisk"`
	// Specifies the hotfix ISO image file which is applied on top of the base image.
	InitialHotfix *string `pulumi:"initialHotfix"`
	// Specifies the base software release ISO image file for installing the TMOS hypervisor instance.
	InitialImage *string `pulumi:"initialImage"`
	// Specifies the IP address and subnet or subnet mask you use to access the guest when you want to manage a module running within the guest.
	MgmtAddress *string `pulumi:"mgmtAddress"`
	// Specifies the method by which the management address is used in the vCMP guest. options : [`bridged`,`isolated`,`host-only`].
	MgmtNetwork *string `pulumi:"mgmtNetwork"`
	// Specifies the gateway address for the `mgmtAddress`. Can be set to `none` to remove the value from the configuration.
	MgmtRoute *string `pulumi:"mgmtRoute"`
	// Specifies the minimum number of slots the guest must be assigned to in order to deploy.
	MinNumberOfSlots *int `pulumi:"minNumberOfSlots"`
	// Name of the vCMP guest
	Name string `pulumi:"name"`
	// Specifies the number of slots for the system to use when creating the guest.
	NumberOfSlots *int `pulumi:"numberOfSlots"`
	// Specifies the state of the vCMP guest on the system. options : [`configured`,`provisioned`,`deployed`].
	State *string `pulumi:"state"`
	// Specifies the list of VLANs the vCMP guest uses to communicate with other guests, the host, and with the external network. The naming format must be the combination of the partition + name. For example /Common/my-vlan
	Vlans []string `pulumi:"vlans"`
}

// The set of arguments for constructing a Guest resource.
type GuestArgs struct {
	// Contains those slots to which the guest is allowed to be assigned.
	AllowedSlots pulumi.IntArrayInput
	// Specifies the number of cores the system allocates to the guest.
	CoresPerSlot pulumi.IntPtrInput
	// Indicates if virtual disk associated with vCMP guest should be removed during remove operation.  The default is `true`
	DeleteVirtualDisk pulumi.BoolPtrInput
	// Specifies the hotfix ISO image file which is applied on top of the base image.
	InitialHotfix pulumi.StringPtrInput
	// Specifies the base software release ISO image file for installing the TMOS hypervisor instance.
	InitialImage pulumi.StringPtrInput
	// Specifies the IP address and subnet or subnet mask you use to access the guest when you want to manage a module running within the guest.
	MgmtAddress pulumi.StringPtrInput
	// Specifies the method by which the management address is used in the vCMP guest. options : [`bridged`,`isolated`,`host-only`].
	MgmtNetwork pulumi.StringPtrInput
	// Specifies the gateway address for the `mgmtAddress`. Can be set to `none` to remove the value from the configuration.
	MgmtRoute pulumi.StringPtrInput
	// Specifies the minimum number of slots the guest must be assigned to in order to deploy.
	MinNumberOfSlots pulumi.IntPtrInput
	// Name of the vCMP guest
	Name pulumi.StringInput
	// Specifies the number of slots for the system to use when creating the guest.
	NumberOfSlots pulumi.IntPtrInput
	// Specifies the state of the vCMP guest on the system. options : [`configured`,`provisioned`,`deployed`].
	State pulumi.StringPtrInput
	// Specifies the list of VLANs the vCMP guest uses to communicate with other guests, the host, and with the external network. The naming format must be the combination of the partition + name. For example /Common/my-vlan
	Vlans pulumi.StringArrayInput
}

func (GuestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*guestArgs)(nil)).Elem()
}

type GuestInput interface {
	pulumi.Input

	ToGuestOutput() GuestOutput
	ToGuestOutputWithContext(ctx context.Context) GuestOutput
}

func (*Guest) ElementType() reflect.Type {
	return reflect.TypeOf((**Guest)(nil)).Elem()
}

func (i *Guest) ToGuestOutput() GuestOutput {
	return i.ToGuestOutputWithContext(context.Background())
}

func (i *Guest) ToGuestOutputWithContext(ctx context.Context) GuestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuestOutput)
}

func (i *Guest) ToOutput(ctx context.Context) pulumix.Output[*Guest] {
	return pulumix.Output[*Guest]{
		OutputState: i.ToGuestOutputWithContext(ctx).OutputState,
	}
}

// GuestArrayInput is an input type that accepts GuestArray and GuestArrayOutput values.
// You can construct a concrete instance of `GuestArrayInput` via:
//
//	GuestArray{ GuestArgs{...} }
type GuestArrayInput interface {
	pulumi.Input

	ToGuestArrayOutput() GuestArrayOutput
	ToGuestArrayOutputWithContext(context.Context) GuestArrayOutput
}

type GuestArray []GuestInput

func (GuestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Guest)(nil)).Elem()
}

func (i GuestArray) ToGuestArrayOutput() GuestArrayOutput {
	return i.ToGuestArrayOutputWithContext(context.Background())
}

func (i GuestArray) ToGuestArrayOutputWithContext(ctx context.Context) GuestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuestArrayOutput)
}

func (i GuestArray) ToOutput(ctx context.Context) pulumix.Output[[]*Guest] {
	return pulumix.Output[[]*Guest]{
		OutputState: i.ToGuestArrayOutputWithContext(ctx).OutputState,
	}
}

// GuestMapInput is an input type that accepts GuestMap and GuestMapOutput values.
// You can construct a concrete instance of `GuestMapInput` via:
//
//	GuestMap{ "key": GuestArgs{...} }
type GuestMapInput interface {
	pulumi.Input

	ToGuestMapOutput() GuestMapOutput
	ToGuestMapOutputWithContext(context.Context) GuestMapOutput
}

type GuestMap map[string]GuestInput

func (GuestMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Guest)(nil)).Elem()
}

func (i GuestMap) ToGuestMapOutput() GuestMapOutput {
	return i.ToGuestMapOutputWithContext(context.Background())
}

func (i GuestMap) ToGuestMapOutputWithContext(ctx context.Context) GuestMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuestMapOutput)
}

func (i GuestMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Guest] {
	return pulumix.Output[map[string]*Guest]{
		OutputState: i.ToGuestMapOutputWithContext(ctx).OutputState,
	}
}

type GuestOutput struct{ *pulumi.OutputState }

func (GuestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Guest)(nil)).Elem()
}

func (o GuestOutput) ToGuestOutput() GuestOutput {
	return o
}

func (o GuestOutput) ToGuestOutputWithContext(ctx context.Context) GuestOutput {
	return o
}

func (o GuestOutput) ToOutput(ctx context.Context) pulumix.Output[*Guest] {
	return pulumix.Output[*Guest]{
		OutputState: o.OutputState,
	}
}

// Contains those slots to which the guest is allowed to be assigned.
func (o GuestOutput) AllowedSlots() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Guest) pulumi.IntArrayOutput { return v.AllowedSlots }).(pulumi.IntArrayOutput)
}

// Specifies the number of cores the system allocates to the guest.
func (o GuestOutput) CoresPerSlot() pulumi.IntOutput {
	return o.ApplyT(func(v *Guest) pulumi.IntOutput { return v.CoresPerSlot }).(pulumi.IntOutput)
}

// Indicates if virtual disk associated with vCMP guest should be removed during remove operation.  The default is `true`
func (o GuestOutput) DeleteVirtualDisk() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Guest) pulumi.BoolPtrOutput { return v.DeleteVirtualDisk }).(pulumi.BoolPtrOutput)
}

// Resource name including prepended partition path.
func (o GuestOutput) FullPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Guest) pulumi.StringOutput { return v.FullPath }).(pulumi.StringOutput)
}

// Specifies the hotfix ISO image file which is applied on top of the base image.
func (o GuestOutput) InitialHotfix() pulumi.StringOutput {
	return o.ApplyT(func(v *Guest) pulumi.StringOutput { return v.InitialHotfix }).(pulumi.StringOutput)
}

// Specifies the base software release ISO image file for installing the TMOS hypervisor instance.
func (o GuestOutput) InitialImage() pulumi.StringOutput {
	return o.ApplyT(func(v *Guest) pulumi.StringOutput { return v.InitialImage }).(pulumi.StringOutput)
}

// Specifies the IP address and subnet or subnet mask you use to access the guest when you want to manage a module running within the guest.
func (o GuestOutput) MgmtAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Guest) pulumi.StringOutput { return v.MgmtAddress }).(pulumi.StringOutput)
}

// Specifies the method by which the management address is used in the vCMP guest. options : [`bridged`,`isolated`,`host-only`].
func (o GuestOutput) MgmtNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v *Guest) pulumi.StringOutput { return v.MgmtNetwork }).(pulumi.StringOutput)
}

// Specifies the gateway address for the `mgmtAddress`. Can be set to `none` to remove the value from the configuration.
func (o GuestOutput) MgmtRoute() pulumi.StringOutput {
	return o.ApplyT(func(v *Guest) pulumi.StringOutput { return v.MgmtRoute }).(pulumi.StringOutput)
}

// Specifies the minimum number of slots the guest must be assigned to in order to deploy.
func (o GuestOutput) MinNumberOfSlots() pulumi.IntOutput {
	return o.ApplyT(func(v *Guest) pulumi.IntOutput { return v.MinNumberOfSlots }).(pulumi.IntOutput)
}

// Name of the vCMP guest
func (o GuestOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Guest) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the number of slots for the system to use when creating the guest.
func (o GuestOutput) NumberOfSlots() pulumi.IntOutput {
	return o.ApplyT(func(v *Guest) pulumi.IntOutput { return v.NumberOfSlots }).(pulumi.IntOutput)
}

// Specifies the state of the vCMP guest on the system. options : [`configured`,`provisioned`,`deployed`].
func (o GuestOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Guest) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Virtual disk associated with vCMP guest.
func (o GuestOutput) VirtualDisk() pulumi.StringOutput {
	return o.ApplyT(func(v *Guest) pulumi.StringOutput { return v.VirtualDisk }).(pulumi.StringOutput)
}

// Specifies the list of VLANs the vCMP guest uses to communicate with other guests, the host, and with the external network. The naming format must be the combination of the partition + name. For example /Common/my-vlan
func (o GuestOutput) Vlans() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Guest) pulumi.StringArrayOutput { return v.Vlans }).(pulumi.StringArrayOutput)
}

type GuestArrayOutput struct{ *pulumi.OutputState }

func (GuestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Guest)(nil)).Elem()
}

func (o GuestArrayOutput) ToGuestArrayOutput() GuestArrayOutput {
	return o
}

func (o GuestArrayOutput) ToGuestArrayOutputWithContext(ctx context.Context) GuestArrayOutput {
	return o
}

func (o GuestArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Guest] {
	return pulumix.Output[[]*Guest]{
		OutputState: o.OutputState,
	}
}

func (o GuestArrayOutput) Index(i pulumi.IntInput) GuestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Guest {
		return vs[0].([]*Guest)[vs[1].(int)]
	}).(GuestOutput)
}

type GuestMapOutput struct{ *pulumi.OutputState }

func (GuestMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Guest)(nil)).Elem()
}

func (o GuestMapOutput) ToGuestMapOutput() GuestMapOutput {
	return o
}

func (o GuestMapOutput) ToGuestMapOutputWithContext(ctx context.Context) GuestMapOutput {
	return o
}

func (o GuestMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Guest] {
	return pulumix.Output[map[string]*Guest]{
		OutputState: o.OutputState,
	}
}

func (o GuestMapOutput) MapIndex(k pulumi.StringInput) GuestOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Guest {
		return vs[0].(map[string]*Guest)[vs[1].(string)]
	}).(GuestOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GuestInput)(nil)).Elem(), &Guest{})
	pulumi.RegisterInputType(reflect.TypeOf((*GuestArrayInput)(nil)).Elem(), GuestArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GuestMapInput)(nil)).Elem(), GuestMap{})
	pulumi.RegisterOutputType(GuestOutput{})
	pulumi.RegisterOutputType(GuestArrayOutput{})
	pulumi.RegisterOutputType(GuestMapOutput{})
}
