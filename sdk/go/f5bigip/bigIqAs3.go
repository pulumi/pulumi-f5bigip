// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package f5bigip

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type BigIqAs3 struct {
	pulumi.CustomResourceState

	// AS3 json
	As3Json pulumi.StringOutput `pulumi:"as3Json"`
	// The registration key pool to use
	BigiqAddress pulumi.StringOutput `pulumi:"bigiqAddress"`
	// Login reference for token authentication (see BIG-IQ REST docs for details)
	BigiqLoginRef pulumi.StringPtrOutput `pulumi:"bigiqLoginRef"`
	// The registration key pool to use
	BigiqPassword pulumi.StringOutput `pulumi:"bigiqPassword"`
	// The registration key pool to use
	BigiqPort pulumi.StringPtrOutput `pulumi:"bigiqPort"`
	// Enable to use an external authentication source (LDAP, TACACS, etc)
	BigiqTokenAuth pulumi.BoolPtrOutput `pulumi:"bigiqTokenAuth"`
	// The registration key pool to use
	BigiqUser pulumi.StringOutput `pulumi:"bigiqUser"`
	// Name of Tenant
	TenantList pulumi.StringOutput `pulumi:"tenantList"`
}

// NewBigIqAs3 registers a new resource with the given unique name, arguments, and options.
func NewBigIqAs3(ctx *pulumi.Context,
	name string, args *BigIqAs3Args, opts ...pulumi.ResourceOption) (*BigIqAs3, error) {
	if args == nil || args.As3Json == nil {
		return nil, errors.New("missing required argument 'As3Json'")
	}
	if args == nil || args.BigiqAddress == nil {
		return nil, errors.New("missing required argument 'BigiqAddress'")
	}
	if args == nil || args.BigiqPassword == nil {
		return nil, errors.New("missing required argument 'BigiqPassword'")
	}
	if args == nil || args.BigiqUser == nil {
		return nil, errors.New("missing required argument 'BigiqUser'")
	}
	if args == nil {
		args = &BigIqAs3Args{}
	}
	var resource BigIqAs3
	err := ctx.RegisterResource("f5bigip:index/bigIqAs3:BigIqAs3", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBigIqAs3 gets an existing BigIqAs3 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBigIqAs3(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BigIqAs3State, opts ...pulumi.ResourceOption) (*BigIqAs3, error) {
	var resource BigIqAs3
	err := ctx.ReadResource("f5bigip:index/bigIqAs3:BigIqAs3", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BigIqAs3 resources.
type bigIqAs3State struct {
	// AS3 json
	As3Json *string `pulumi:"as3Json"`
	// The registration key pool to use
	BigiqAddress *string `pulumi:"bigiqAddress"`
	// Login reference for token authentication (see BIG-IQ REST docs for details)
	BigiqLoginRef *string `pulumi:"bigiqLoginRef"`
	// The registration key pool to use
	BigiqPassword *string `pulumi:"bigiqPassword"`
	// The registration key pool to use
	BigiqPort *string `pulumi:"bigiqPort"`
	// Enable to use an external authentication source (LDAP, TACACS, etc)
	BigiqTokenAuth *bool `pulumi:"bigiqTokenAuth"`
	// The registration key pool to use
	BigiqUser *string `pulumi:"bigiqUser"`
	// Name of Tenant
	TenantList *string `pulumi:"tenantList"`
}

type BigIqAs3State struct {
	// AS3 json
	As3Json pulumi.StringPtrInput
	// The registration key pool to use
	BigiqAddress pulumi.StringPtrInput
	// Login reference for token authentication (see BIG-IQ REST docs for details)
	BigiqLoginRef pulumi.StringPtrInput
	// The registration key pool to use
	BigiqPassword pulumi.StringPtrInput
	// The registration key pool to use
	BigiqPort pulumi.StringPtrInput
	// Enable to use an external authentication source (LDAP, TACACS, etc)
	BigiqTokenAuth pulumi.BoolPtrInput
	// The registration key pool to use
	BigiqUser pulumi.StringPtrInput
	// Name of Tenant
	TenantList pulumi.StringPtrInput
}

func (BigIqAs3State) ElementType() reflect.Type {
	return reflect.TypeOf((*bigIqAs3State)(nil)).Elem()
}

type bigIqAs3Args struct {
	// AS3 json
	As3Json string `pulumi:"as3Json"`
	// The registration key pool to use
	BigiqAddress string `pulumi:"bigiqAddress"`
	// Login reference for token authentication (see BIG-IQ REST docs for details)
	BigiqLoginRef *string `pulumi:"bigiqLoginRef"`
	// The registration key pool to use
	BigiqPassword string `pulumi:"bigiqPassword"`
	// The registration key pool to use
	BigiqPort *string `pulumi:"bigiqPort"`
	// Enable to use an external authentication source (LDAP, TACACS, etc)
	BigiqTokenAuth *bool `pulumi:"bigiqTokenAuth"`
	// The registration key pool to use
	BigiqUser string `pulumi:"bigiqUser"`
	// Name of Tenant
	TenantList *string `pulumi:"tenantList"`
}

// The set of arguments for constructing a BigIqAs3 resource.
type BigIqAs3Args struct {
	// AS3 json
	As3Json pulumi.StringInput
	// The registration key pool to use
	BigiqAddress pulumi.StringInput
	// Login reference for token authentication (see BIG-IQ REST docs for details)
	BigiqLoginRef pulumi.StringPtrInput
	// The registration key pool to use
	BigiqPassword pulumi.StringInput
	// The registration key pool to use
	BigiqPort pulumi.StringPtrInput
	// Enable to use an external authentication source (LDAP, TACACS, etc)
	BigiqTokenAuth pulumi.BoolPtrInput
	// The registration key pool to use
	BigiqUser pulumi.StringInput
	// Name of Tenant
	TenantList pulumi.StringPtrInput
}

func (BigIqAs3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*bigIqAs3Args)(nil)).Elem()
}

type BigIqAs3Input interface {
	pulumi.Input

	ToBigIqAs3Output() BigIqAs3Output
	ToBigIqAs3OutputWithContext(ctx context.Context) BigIqAs3Output
}

func (BigIqAs3) ElementType() reflect.Type {
	return reflect.TypeOf((*BigIqAs3)(nil)).Elem()
}

func (i BigIqAs3) ToBigIqAs3Output() BigIqAs3Output {
	return i.ToBigIqAs3OutputWithContext(context.Background())
}

func (i BigIqAs3) ToBigIqAs3OutputWithContext(ctx context.Context) BigIqAs3Output {
	return pulumi.ToOutputWithContext(ctx, i).(BigIqAs3Output)
}

type BigIqAs3Output struct {
	*pulumi.OutputState
}

func (BigIqAs3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*BigIqAs3Output)(nil)).Elem()
}

func (o BigIqAs3Output) ToBigIqAs3Output() BigIqAs3Output {
	return o
}

func (o BigIqAs3Output) ToBigIqAs3OutputWithContext(ctx context.Context) BigIqAs3Output {
	return o
}

func init() {
	pulumi.RegisterOutputType(BigIqAs3Output{})
}
