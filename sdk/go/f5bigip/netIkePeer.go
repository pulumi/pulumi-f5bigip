// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package f5bigip

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `NetIkePeer` Manages a ikePeer configuration
type NetIkePeer struct {
	pulumi.CustomResourceState

	// The application service that the object belongs to
	AppService pulumi.StringPtrOutput `pulumi:"appService"`
	// the trusted root and intermediate certificate authorities
	CaCertFile pulumi.StringOutput `pulumi:"caCertFile"`
	// Specifies the file name of the Certificate Revocation List. Only supported in IKEv1
	CrlFile pulumi.StringOutput `pulumi:"crlFile"`
	// User defined description
	Description pulumi.StringOutput `pulumi:"description"`
	// Specifies the number of seconds between Dead Peer Detection messages
	DpdDelay pulumi.IntOutput `pulumi:"dpdDelay"`
	// Enable or disable the generation of Security Policy Database entries(SPD) when the device is the responder of the IKE remote node
	GeneratePolicy pulumi.StringOutput `pulumi:"generatePolicy"`
	// Defines the lifetime in minutes of an IKE SA which will be proposed in the phase 1 negotiations
	Lifetime pulumi.IntOutput `pulumi:"lifetime"`
	// Defines the exchange mode for phase 1 when racoon is the initiator, or the acceptable exchange mode when racoon is the responder
	Mode pulumi.StringOutput `pulumi:"mode"`
	// Specifies the name of the certificate file object
	MyCertFile pulumi.StringOutput `pulumi:"myCertFile"`
	// Specifies the name of the certificate key file object
	MyCertKeyFile pulumi.StringOutput `pulumi:"myCertKeyFile"`
	// Specifies the passphrase of the key used for my-cert-key-file
	MyCertKeyPassphrase pulumi.StringOutput `pulumi:"myCertKeyPassphrase"`
	// Specifies the identifier type sent to the remote host to use in the phase 1 negotiation
	MyIdType pulumi.StringOutput `pulumi:"myIdType"`
	// Specifies the identifier value sent to the remote host in the phase 1 negotiation
	MyIdValue pulumi.StringOutput `pulumi:"myIdValue"`
	// Name of the ike_peer
	Name pulumi.StringOutput `pulumi:"name"`
	// Enables use of the NAT-Traversal IPsec extension
	NatTraversal pulumi.StringOutput `pulumi:"natTraversal"`
	// Specifies whether the local IKE agent can be the initiator of the IKE negotiation with this ike-peer
	Passive pulumi.StringOutput `pulumi:"passive"`
	// Specifies the peer’s certificate for authentication
	PeersCertFile pulumi.StringOutput `pulumi:"peersCertFile"`
	// Specifies that the only peers-cert-type supported is certfile
	PeersCertType pulumi.StringOutput `pulumi:"peersCertType"`
	// Specifies which of address, fqdn, asn1dn, user-fqdn or keyid-tag types to use as peers-id-type
	PeersIdType pulumi.StringOutput `pulumi:"peersIdType"`
	// Specifies the peer’s identifier to be received
	PeersIdValue pulumi.StringOutput `pulumi:"peersIdValue"`
	// Specifies the authentication method used for phase 1 negotiation
	Phase1AuthMethod pulumi.StringOutput `pulumi:"phase1AuthMethod"`
	// Specifies the encryption algorithm used for the isakmp phase 1 negotiation
	Phase1EncryptAlgorithm pulumi.StringOutput `pulumi:"phase1EncryptAlgorithm"`
	// Defines the hash algorithm used for the isakmp phase 1 negotiation
	Phase1HashAlgorithm pulumi.StringOutput `pulumi:"phase1HashAlgorithm"`
	// Defines the Diffie-Hellman group for key exchange to provide perfect forward secrecy
	Phase1PerfectForwardSecrecy pulumi.StringOutput `pulumi:"phase1PerfectForwardSecrecy"`
	// Specifies the preshared key for ISAKMP SAs
	PresharedKey pulumi.StringPtrOutput `pulumi:"presharedKey"`
	// Display the encrypted preshared-key for the IKE remote node
	PresharedKeyEncrypted pulumi.StringOutput `pulumi:"presharedKeyEncrypted"`
	// Specifies the pseudo-random function used to derive keying material for all cryptographic operations
	Prf pulumi.StringOutput `pulumi:"prf"`
	// If this value is enabled, both values of ID payloads in the phase 2 exchange are used as the addresses of end-point of IPsec-SAs
	ProxySupport pulumi.StringOutput `pulumi:"proxySupport"`
	// Specifies the IP address of the IKE remote node
	RemoteAddress pulumi.StringOutput `pulumi:"remoteAddress"`
	// Specifies the replay window size of the IPsec SAs negotiated with the IKE remote node
	ReplayWindowSize pulumi.IntOutput `pulumi:"replayWindowSize"`
	// Enables or disables this IKE remote node
	State pulumi.StringOutput `pulumi:"state"`
	// Specifies the names of the traffic-selector objects associated with this ike-peer
	TrafficSelectors pulumi.StringArrayOutput `pulumi:"trafficSelectors"`
	// Specifies whether to verify the certificate chain of the remote peer based on the trusted certificates in ca-cert-file
	VerifyCert pulumi.StringOutput `pulumi:"verifyCert"`
	// Specifies which version of IKE to be used
	Versions pulumi.StringArrayOutput `pulumi:"versions"`
}

// NewNetIkePeer registers a new resource with the given unique name, arguments, and options.
func NewNetIkePeer(ctx *pulumi.Context,
	name string, args *NetIkePeerArgs, opts ...pulumi.ResourceOption) (*NetIkePeer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.RemoteAddress == nil {
		return nil, errors.New("invalid value for required argument 'RemoteAddress'")
	}
	var resource NetIkePeer
	err := ctx.RegisterResource("f5bigip:index/netIkePeer:NetIkePeer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetIkePeer gets an existing NetIkePeer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetIkePeer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetIkePeerState, opts ...pulumi.ResourceOption) (*NetIkePeer, error) {
	var resource NetIkePeer
	err := ctx.ReadResource("f5bigip:index/netIkePeer:NetIkePeer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetIkePeer resources.
type netIkePeerState struct {
	// The application service that the object belongs to
	AppService *string `pulumi:"appService"`
	// the trusted root and intermediate certificate authorities
	CaCertFile *string `pulumi:"caCertFile"`
	// Specifies the file name of the Certificate Revocation List. Only supported in IKEv1
	CrlFile *string `pulumi:"crlFile"`
	// User defined description
	Description *string `pulumi:"description"`
	// Specifies the number of seconds between Dead Peer Detection messages
	DpdDelay *int `pulumi:"dpdDelay"`
	// Enable or disable the generation of Security Policy Database entries(SPD) when the device is the responder of the IKE remote node
	GeneratePolicy *string `pulumi:"generatePolicy"`
	// Defines the lifetime in minutes of an IKE SA which will be proposed in the phase 1 negotiations
	Lifetime *int `pulumi:"lifetime"`
	// Defines the exchange mode for phase 1 when racoon is the initiator, or the acceptable exchange mode when racoon is the responder
	Mode *string `pulumi:"mode"`
	// Specifies the name of the certificate file object
	MyCertFile *string `pulumi:"myCertFile"`
	// Specifies the name of the certificate key file object
	MyCertKeyFile *string `pulumi:"myCertKeyFile"`
	// Specifies the passphrase of the key used for my-cert-key-file
	MyCertKeyPassphrase *string `pulumi:"myCertKeyPassphrase"`
	// Specifies the identifier type sent to the remote host to use in the phase 1 negotiation
	MyIdType *string `pulumi:"myIdType"`
	// Specifies the identifier value sent to the remote host in the phase 1 negotiation
	MyIdValue *string `pulumi:"myIdValue"`
	// Name of the ike_peer
	Name *string `pulumi:"name"`
	// Enables use of the NAT-Traversal IPsec extension
	NatTraversal *string `pulumi:"natTraversal"`
	// Specifies whether the local IKE agent can be the initiator of the IKE negotiation with this ike-peer
	Passive *string `pulumi:"passive"`
	// Specifies the peer’s certificate for authentication
	PeersCertFile *string `pulumi:"peersCertFile"`
	// Specifies that the only peers-cert-type supported is certfile
	PeersCertType *string `pulumi:"peersCertType"`
	// Specifies which of address, fqdn, asn1dn, user-fqdn or keyid-tag types to use as peers-id-type
	PeersIdType *string `pulumi:"peersIdType"`
	// Specifies the peer’s identifier to be received
	PeersIdValue *string `pulumi:"peersIdValue"`
	// Specifies the authentication method used for phase 1 negotiation
	Phase1AuthMethod *string `pulumi:"phase1AuthMethod"`
	// Specifies the encryption algorithm used for the isakmp phase 1 negotiation
	Phase1EncryptAlgorithm *string `pulumi:"phase1EncryptAlgorithm"`
	// Defines the hash algorithm used for the isakmp phase 1 negotiation
	Phase1HashAlgorithm *string `pulumi:"phase1HashAlgorithm"`
	// Defines the Diffie-Hellman group for key exchange to provide perfect forward secrecy
	Phase1PerfectForwardSecrecy *string `pulumi:"phase1PerfectForwardSecrecy"`
	// Specifies the preshared key for ISAKMP SAs
	PresharedKey *string `pulumi:"presharedKey"`
	// Display the encrypted preshared-key for the IKE remote node
	PresharedKeyEncrypted *string `pulumi:"presharedKeyEncrypted"`
	// Specifies the pseudo-random function used to derive keying material for all cryptographic operations
	Prf *string `pulumi:"prf"`
	// If this value is enabled, both values of ID payloads in the phase 2 exchange are used as the addresses of end-point of IPsec-SAs
	ProxySupport *string `pulumi:"proxySupport"`
	// Specifies the IP address of the IKE remote node
	RemoteAddress *string `pulumi:"remoteAddress"`
	// Specifies the replay window size of the IPsec SAs negotiated with the IKE remote node
	ReplayWindowSize *int `pulumi:"replayWindowSize"`
	// Enables or disables this IKE remote node
	State *string `pulumi:"state"`
	// Specifies the names of the traffic-selector objects associated with this ike-peer
	TrafficSelectors []string `pulumi:"trafficSelectors"`
	// Specifies whether to verify the certificate chain of the remote peer based on the trusted certificates in ca-cert-file
	VerifyCert *string `pulumi:"verifyCert"`
	// Specifies which version of IKE to be used
	Versions []string `pulumi:"versions"`
}

type NetIkePeerState struct {
	// The application service that the object belongs to
	AppService pulumi.StringPtrInput
	// the trusted root and intermediate certificate authorities
	CaCertFile pulumi.StringPtrInput
	// Specifies the file name of the Certificate Revocation List. Only supported in IKEv1
	CrlFile pulumi.StringPtrInput
	// User defined description
	Description pulumi.StringPtrInput
	// Specifies the number of seconds between Dead Peer Detection messages
	DpdDelay pulumi.IntPtrInput
	// Enable or disable the generation of Security Policy Database entries(SPD) when the device is the responder of the IKE remote node
	GeneratePolicy pulumi.StringPtrInput
	// Defines the lifetime in minutes of an IKE SA which will be proposed in the phase 1 negotiations
	Lifetime pulumi.IntPtrInput
	// Defines the exchange mode for phase 1 when racoon is the initiator, or the acceptable exchange mode when racoon is the responder
	Mode pulumi.StringPtrInput
	// Specifies the name of the certificate file object
	MyCertFile pulumi.StringPtrInput
	// Specifies the name of the certificate key file object
	MyCertKeyFile pulumi.StringPtrInput
	// Specifies the passphrase of the key used for my-cert-key-file
	MyCertKeyPassphrase pulumi.StringPtrInput
	// Specifies the identifier type sent to the remote host to use in the phase 1 negotiation
	MyIdType pulumi.StringPtrInput
	// Specifies the identifier value sent to the remote host in the phase 1 negotiation
	MyIdValue pulumi.StringPtrInput
	// Name of the ike_peer
	Name pulumi.StringPtrInput
	// Enables use of the NAT-Traversal IPsec extension
	NatTraversal pulumi.StringPtrInput
	// Specifies whether the local IKE agent can be the initiator of the IKE negotiation with this ike-peer
	Passive pulumi.StringPtrInput
	// Specifies the peer’s certificate for authentication
	PeersCertFile pulumi.StringPtrInput
	// Specifies that the only peers-cert-type supported is certfile
	PeersCertType pulumi.StringPtrInput
	// Specifies which of address, fqdn, asn1dn, user-fqdn or keyid-tag types to use as peers-id-type
	PeersIdType pulumi.StringPtrInput
	// Specifies the peer’s identifier to be received
	PeersIdValue pulumi.StringPtrInput
	// Specifies the authentication method used for phase 1 negotiation
	Phase1AuthMethod pulumi.StringPtrInput
	// Specifies the encryption algorithm used for the isakmp phase 1 negotiation
	Phase1EncryptAlgorithm pulumi.StringPtrInput
	// Defines the hash algorithm used for the isakmp phase 1 negotiation
	Phase1HashAlgorithm pulumi.StringPtrInput
	// Defines the Diffie-Hellman group for key exchange to provide perfect forward secrecy
	Phase1PerfectForwardSecrecy pulumi.StringPtrInput
	// Specifies the preshared key for ISAKMP SAs
	PresharedKey pulumi.StringPtrInput
	// Display the encrypted preshared-key for the IKE remote node
	PresharedKeyEncrypted pulumi.StringPtrInput
	// Specifies the pseudo-random function used to derive keying material for all cryptographic operations
	Prf pulumi.StringPtrInput
	// If this value is enabled, both values of ID payloads in the phase 2 exchange are used as the addresses of end-point of IPsec-SAs
	ProxySupport pulumi.StringPtrInput
	// Specifies the IP address of the IKE remote node
	RemoteAddress pulumi.StringPtrInput
	// Specifies the replay window size of the IPsec SAs negotiated with the IKE remote node
	ReplayWindowSize pulumi.IntPtrInput
	// Enables or disables this IKE remote node
	State pulumi.StringPtrInput
	// Specifies the names of the traffic-selector objects associated with this ike-peer
	TrafficSelectors pulumi.StringArrayInput
	// Specifies whether to verify the certificate chain of the remote peer based on the trusted certificates in ca-cert-file
	VerifyCert pulumi.StringPtrInput
	// Specifies which version of IKE to be used
	Versions pulumi.StringArrayInput
}

func (NetIkePeerState) ElementType() reflect.Type {
	return reflect.TypeOf((*netIkePeerState)(nil)).Elem()
}

type netIkePeerArgs struct {
	// The application service that the object belongs to
	AppService *string `pulumi:"appService"`
	// the trusted root and intermediate certificate authorities
	CaCertFile *string `pulumi:"caCertFile"`
	// Specifies the file name of the Certificate Revocation List. Only supported in IKEv1
	CrlFile *string `pulumi:"crlFile"`
	// User defined description
	Description *string `pulumi:"description"`
	// Specifies the number of seconds between Dead Peer Detection messages
	DpdDelay *int `pulumi:"dpdDelay"`
	// Enable or disable the generation of Security Policy Database entries(SPD) when the device is the responder of the IKE remote node
	GeneratePolicy *string `pulumi:"generatePolicy"`
	// Defines the lifetime in minutes of an IKE SA which will be proposed in the phase 1 negotiations
	Lifetime *int `pulumi:"lifetime"`
	// Defines the exchange mode for phase 1 when racoon is the initiator, or the acceptable exchange mode when racoon is the responder
	Mode *string `pulumi:"mode"`
	// Specifies the name of the certificate file object
	MyCertFile *string `pulumi:"myCertFile"`
	// Specifies the name of the certificate key file object
	MyCertKeyFile *string `pulumi:"myCertKeyFile"`
	// Specifies the passphrase of the key used for my-cert-key-file
	MyCertKeyPassphrase *string `pulumi:"myCertKeyPassphrase"`
	// Specifies the identifier type sent to the remote host to use in the phase 1 negotiation
	MyIdType *string `pulumi:"myIdType"`
	// Specifies the identifier value sent to the remote host in the phase 1 negotiation
	MyIdValue *string `pulumi:"myIdValue"`
	// Name of the ike_peer
	Name string `pulumi:"name"`
	// Enables use of the NAT-Traversal IPsec extension
	NatTraversal *string `pulumi:"natTraversal"`
	// Specifies whether the local IKE agent can be the initiator of the IKE negotiation with this ike-peer
	Passive *string `pulumi:"passive"`
	// Specifies the peer’s certificate for authentication
	PeersCertFile *string `pulumi:"peersCertFile"`
	// Specifies that the only peers-cert-type supported is certfile
	PeersCertType *string `pulumi:"peersCertType"`
	// Specifies which of address, fqdn, asn1dn, user-fqdn or keyid-tag types to use as peers-id-type
	PeersIdType *string `pulumi:"peersIdType"`
	// Specifies the peer’s identifier to be received
	PeersIdValue *string `pulumi:"peersIdValue"`
	// Specifies the authentication method used for phase 1 negotiation
	Phase1AuthMethod *string `pulumi:"phase1AuthMethod"`
	// Specifies the encryption algorithm used for the isakmp phase 1 negotiation
	Phase1EncryptAlgorithm *string `pulumi:"phase1EncryptAlgorithm"`
	// Defines the hash algorithm used for the isakmp phase 1 negotiation
	Phase1HashAlgorithm *string `pulumi:"phase1HashAlgorithm"`
	// Defines the Diffie-Hellman group for key exchange to provide perfect forward secrecy
	Phase1PerfectForwardSecrecy *string `pulumi:"phase1PerfectForwardSecrecy"`
	// Specifies the preshared key for ISAKMP SAs
	PresharedKey *string `pulumi:"presharedKey"`
	// Display the encrypted preshared-key for the IKE remote node
	PresharedKeyEncrypted *string `pulumi:"presharedKeyEncrypted"`
	// Specifies the pseudo-random function used to derive keying material for all cryptographic operations
	Prf *string `pulumi:"prf"`
	// If this value is enabled, both values of ID payloads in the phase 2 exchange are used as the addresses of end-point of IPsec-SAs
	ProxySupport *string `pulumi:"proxySupport"`
	// Specifies the IP address of the IKE remote node
	RemoteAddress string `pulumi:"remoteAddress"`
	// Specifies the replay window size of the IPsec SAs negotiated with the IKE remote node
	ReplayWindowSize *int `pulumi:"replayWindowSize"`
	// Enables or disables this IKE remote node
	State *string `pulumi:"state"`
	// Specifies the names of the traffic-selector objects associated with this ike-peer
	TrafficSelectors []string `pulumi:"trafficSelectors"`
	// Specifies whether to verify the certificate chain of the remote peer based on the trusted certificates in ca-cert-file
	VerifyCert *string `pulumi:"verifyCert"`
	// Specifies which version of IKE to be used
	Versions []string `pulumi:"versions"`
}

// The set of arguments for constructing a NetIkePeer resource.
type NetIkePeerArgs struct {
	// The application service that the object belongs to
	AppService pulumi.StringPtrInput
	// the trusted root and intermediate certificate authorities
	CaCertFile pulumi.StringPtrInput
	// Specifies the file name of the Certificate Revocation List. Only supported in IKEv1
	CrlFile pulumi.StringPtrInput
	// User defined description
	Description pulumi.StringPtrInput
	// Specifies the number of seconds between Dead Peer Detection messages
	DpdDelay pulumi.IntPtrInput
	// Enable or disable the generation of Security Policy Database entries(SPD) when the device is the responder of the IKE remote node
	GeneratePolicy pulumi.StringPtrInput
	// Defines the lifetime in minutes of an IKE SA which will be proposed in the phase 1 negotiations
	Lifetime pulumi.IntPtrInput
	// Defines the exchange mode for phase 1 when racoon is the initiator, or the acceptable exchange mode when racoon is the responder
	Mode pulumi.StringPtrInput
	// Specifies the name of the certificate file object
	MyCertFile pulumi.StringPtrInput
	// Specifies the name of the certificate key file object
	MyCertKeyFile pulumi.StringPtrInput
	// Specifies the passphrase of the key used for my-cert-key-file
	MyCertKeyPassphrase pulumi.StringPtrInput
	// Specifies the identifier type sent to the remote host to use in the phase 1 negotiation
	MyIdType pulumi.StringPtrInput
	// Specifies the identifier value sent to the remote host in the phase 1 negotiation
	MyIdValue pulumi.StringPtrInput
	// Name of the ike_peer
	Name pulumi.StringInput
	// Enables use of the NAT-Traversal IPsec extension
	NatTraversal pulumi.StringPtrInput
	// Specifies whether the local IKE agent can be the initiator of the IKE negotiation with this ike-peer
	Passive pulumi.StringPtrInput
	// Specifies the peer’s certificate for authentication
	PeersCertFile pulumi.StringPtrInput
	// Specifies that the only peers-cert-type supported is certfile
	PeersCertType pulumi.StringPtrInput
	// Specifies which of address, fqdn, asn1dn, user-fqdn or keyid-tag types to use as peers-id-type
	PeersIdType pulumi.StringPtrInput
	// Specifies the peer’s identifier to be received
	PeersIdValue pulumi.StringPtrInput
	// Specifies the authentication method used for phase 1 negotiation
	Phase1AuthMethod pulumi.StringPtrInput
	// Specifies the encryption algorithm used for the isakmp phase 1 negotiation
	Phase1EncryptAlgorithm pulumi.StringPtrInput
	// Defines the hash algorithm used for the isakmp phase 1 negotiation
	Phase1HashAlgorithm pulumi.StringPtrInput
	// Defines the Diffie-Hellman group for key exchange to provide perfect forward secrecy
	Phase1PerfectForwardSecrecy pulumi.StringPtrInput
	// Specifies the preshared key for ISAKMP SAs
	PresharedKey pulumi.StringPtrInput
	// Display the encrypted preshared-key for the IKE remote node
	PresharedKeyEncrypted pulumi.StringPtrInput
	// Specifies the pseudo-random function used to derive keying material for all cryptographic operations
	Prf pulumi.StringPtrInput
	// If this value is enabled, both values of ID payloads in the phase 2 exchange are used as the addresses of end-point of IPsec-SAs
	ProxySupport pulumi.StringPtrInput
	// Specifies the IP address of the IKE remote node
	RemoteAddress pulumi.StringInput
	// Specifies the replay window size of the IPsec SAs negotiated with the IKE remote node
	ReplayWindowSize pulumi.IntPtrInput
	// Enables or disables this IKE remote node
	State pulumi.StringPtrInput
	// Specifies the names of the traffic-selector objects associated with this ike-peer
	TrafficSelectors pulumi.StringArrayInput
	// Specifies whether to verify the certificate chain of the remote peer based on the trusted certificates in ca-cert-file
	VerifyCert pulumi.StringPtrInput
	// Specifies which version of IKE to be used
	Versions pulumi.StringArrayInput
}

func (NetIkePeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*netIkePeerArgs)(nil)).Elem()
}

type NetIkePeerInput interface {
	pulumi.Input

	ToNetIkePeerOutput() NetIkePeerOutput
	ToNetIkePeerOutputWithContext(ctx context.Context) NetIkePeerOutput
}

func (*NetIkePeer) ElementType() reflect.Type {
	return reflect.TypeOf((**NetIkePeer)(nil)).Elem()
}

func (i *NetIkePeer) ToNetIkePeerOutput() NetIkePeerOutput {
	return i.ToNetIkePeerOutputWithContext(context.Background())
}

func (i *NetIkePeer) ToNetIkePeerOutputWithContext(ctx context.Context) NetIkePeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetIkePeerOutput)
}

// NetIkePeerArrayInput is an input type that accepts NetIkePeerArray and NetIkePeerArrayOutput values.
// You can construct a concrete instance of `NetIkePeerArrayInput` via:
//
//	NetIkePeerArray{ NetIkePeerArgs{...} }
type NetIkePeerArrayInput interface {
	pulumi.Input

	ToNetIkePeerArrayOutput() NetIkePeerArrayOutput
	ToNetIkePeerArrayOutputWithContext(context.Context) NetIkePeerArrayOutput
}

type NetIkePeerArray []NetIkePeerInput

func (NetIkePeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetIkePeer)(nil)).Elem()
}

func (i NetIkePeerArray) ToNetIkePeerArrayOutput() NetIkePeerArrayOutput {
	return i.ToNetIkePeerArrayOutputWithContext(context.Background())
}

func (i NetIkePeerArray) ToNetIkePeerArrayOutputWithContext(ctx context.Context) NetIkePeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetIkePeerArrayOutput)
}

// NetIkePeerMapInput is an input type that accepts NetIkePeerMap and NetIkePeerMapOutput values.
// You can construct a concrete instance of `NetIkePeerMapInput` via:
//
//	NetIkePeerMap{ "key": NetIkePeerArgs{...} }
type NetIkePeerMapInput interface {
	pulumi.Input

	ToNetIkePeerMapOutput() NetIkePeerMapOutput
	ToNetIkePeerMapOutputWithContext(context.Context) NetIkePeerMapOutput
}

type NetIkePeerMap map[string]NetIkePeerInput

func (NetIkePeerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetIkePeer)(nil)).Elem()
}

func (i NetIkePeerMap) ToNetIkePeerMapOutput() NetIkePeerMapOutput {
	return i.ToNetIkePeerMapOutputWithContext(context.Background())
}

func (i NetIkePeerMap) ToNetIkePeerMapOutputWithContext(ctx context.Context) NetIkePeerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetIkePeerMapOutput)
}

type NetIkePeerOutput struct{ *pulumi.OutputState }

func (NetIkePeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetIkePeer)(nil)).Elem()
}

func (o NetIkePeerOutput) ToNetIkePeerOutput() NetIkePeerOutput {
	return o
}

func (o NetIkePeerOutput) ToNetIkePeerOutputWithContext(ctx context.Context) NetIkePeerOutput {
	return o
}

// The application service that the object belongs to
func (o NetIkePeerOutput) AppService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringPtrOutput { return v.AppService }).(pulumi.StringPtrOutput)
}

// the trusted root and intermediate certificate authorities
func (o NetIkePeerOutput) CaCertFile() pulumi.StringOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringOutput { return v.CaCertFile }).(pulumi.StringOutput)
}

// Specifies the file name of the Certificate Revocation List. Only supported in IKEv1
func (o NetIkePeerOutput) CrlFile() pulumi.StringOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringOutput { return v.CrlFile }).(pulumi.StringOutput)
}

// User defined description
func (o NetIkePeerOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Specifies the number of seconds between Dead Peer Detection messages
func (o NetIkePeerOutput) DpdDelay() pulumi.IntOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.IntOutput { return v.DpdDelay }).(pulumi.IntOutput)
}

// Enable or disable the generation of Security Policy Database entries(SPD) when the device is the responder of the IKE remote node
func (o NetIkePeerOutput) GeneratePolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringOutput { return v.GeneratePolicy }).(pulumi.StringOutput)
}

// Defines the lifetime in minutes of an IKE SA which will be proposed in the phase 1 negotiations
func (o NetIkePeerOutput) Lifetime() pulumi.IntOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.IntOutput { return v.Lifetime }).(pulumi.IntOutput)
}

// Defines the exchange mode for phase 1 when racoon is the initiator, or the acceptable exchange mode when racoon is the responder
func (o NetIkePeerOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// Specifies the name of the certificate file object
func (o NetIkePeerOutput) MyCertFile() pulumi.StringOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringOutput { return v.MyCertFile }).(pulumi.StringOutput)
}

// Specifies the name of the certificate key file object
func (o NetIkePeerOutput) MyCertKeyFile() pulumi.StringOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringOutput { return v.MyCertKeyFile }).(pulumi.StringOutput)
}

// Specifies the passphrase of the key used for my-cert-key-file
func (o NetIkePeerOutput) MyCertKeyPassphrase() pulumi.StringOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringOutput { return v.MyCertKeyPassphrase }).(pulumi.StringOutput)
}

// Specifies the identifier type sent to the remote host to use in the phase 1 negotiation
func (o NetIkePeerOutput) MyIdType() pulumi.StringOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringOutput { return v.MyIdType }).(pulumi.StringOutput)
}

// Specifies the identifier value sent to the remote host in the phase 1 negotiation
func (o NetIkePeerOutput) MyIdValue() pulumi.StringOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringOutput { return v.MyIdValue }).(pulumi.StringOutput)
}

// Name of the ike_peer
func (o NetIkePeerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enables use of the NAT-Traversal IPsec extension
func (o NetIkePeerOutput) NatTraversal() pulumi.StringOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringOutput { return v.NatTraversal }).(pulumi.StringOutput)
}

// Specifies whether the local IKE agent can be the initiator of the IKE negotiation with this ike-peer
func (o NetIkePeerOutput) Passive() pulumi.StringOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringOutput { return v.Passive }).(pulumi.StringOutput)
}

// Specifies the peer’s certificate for authentication
func (o NetIkePeerOutput) PeersCertFile() pulumi.StringOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringOutput { return v.PeersCertFile }).(pulumi.StringOutput)
}

// Specifies that the only peers-cert-type supported is certfile
func (o NetIkePeerOutput) PeersCertType() pulumi.StringOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringOutput { return v.PeersCertType }).(pulumi.StringOutput)
}

// Specifies which of address, fqdn, asn1dn, user-fqdn or keyid-tag types to use as peers-id-type
func (o NetIkePeerOutput) PeersIdType() pulumi.StringOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringOutput { return v.PeersIdType }).(pulumi.StringOutput)
}

// Specifies the peer’s identifier to be received
func (o NetIkePeerOutput) PeersIdValue() pulumi.StringOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringOutput { return v.PeersIdValue }).(pulumi.StringOutput)
}

// Specifies the authentication method used for phase 1 negotiation
func (o NetIkePeerOutput) Phase1AuthMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringOutput { return v.Phase1AuthMethod }).(pulumi.StringOutput)
}

// Specifies the encryption algorithm used for the isakmp phase 1 negotiation
func (o NetIkePeerOutput) Phase1EncryptAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringOutput { return v.Phase1EncryptAlgorithm }).(pulumi.StringOutput)
}

// Defines the hash algorithm used for the isakmp phase 1 negotiation
func (o NetIkePeerOutput) Phase1HashAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringOutput { return v.Phase1HashAlgorithm }).(pulumi.StringOutput)
}

// Defines the Diffie-Hellman group for key exchange to provide perfect forward secrecy
func (o NetIkePeerOutput) Phase1PerfectForwardSecrecy() pulumi.StringOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringOutput { return v.Phase1PerfectForwardSecrecy }).(pulumi.StringOutput)
}

// Specifies the preshared key for ISAKMP SAs
func (o NetIkePeerOutput) PresharedKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringPtrOutput { return v.PresharedKey }).(pulumi.StringPtrOutput)
}

// Display the encrypted preshared-key for the IKE remote node
func (o NetIkePeerOutput) PresharedKeyEncrypted() pulumi.StringOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringOutput { return v.PresharedKeyEncrypted }).(pulumi.StringOutput)
}

// Specifies the pseudo-random function used to derive keying material for all cryptographic operations
func (o NetIkePeerOutput) Prf() pulumi.StringOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringOutput { return v.Prf }).(pulumi.StringOutput)
}

// If this value is enabled, both values of ID payloads in the phase 2 exchange are used as the addresses of end-point of IPsec-SAs
func (o NetIkePeerOutput) ProxySupport() pulumi.StringOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringOutput { return v.ProxySupport }).(pulumi.StringOutput)
}

// Specifies the IP address of the IKE remote node
func (o NetIkePeerOutput) RemoteAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringOutput { return v.RemoteAddress }).(pulumi.StringOutput)
}

// Specifies the replay window size of the IPsec SAs negotiated with the IKE remote node
func (o NetIkePeerOutput) ReplayWindowSize() pulumi.IntOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.IntOutput { return v.ReplayWindowSize }).(pulumi.IntOutput)
}

// Enables or disables this IKE remote node
func (o NetIkePeerOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Specifies the names of the traffic-selector objects associated with this ike-peer
func (o NetIkePeerOutput) TrafficSelectors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringArrayOutput { return v.TrafficSelectors }).(pulumi.StringArrayOutput)
}

// Specifies whether to verify the certificate chain of the remote peer based on the trusted certificates in ca-cert-file
func (o NetIkePeerOutput) VerifyCert() pulumi.StringOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringOutput { return v.VerifyCert }).(pulumi.StringOutput)
}

// Specifies which version of IKE to be used
func (o NetIkePeerOutput) Versions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetIkePeer) pulumi.StringArrayOutput { return v.Versions }).(pulumi.StringArrayOutput)
}

type NetIkePeerArrayOutput struct{ *pulumi.OutputState }

func (NetIkePeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetIkePeer)(nil)).Elem()
}

func (o NetIkePeerArrayOutput) ToNetIkePeerArrayOutput() NetIkePeerArrayOutput {
	return o
}

func (o NetIkePeerArrayOutput) ToNetIkePeerArrayOutputWithContext(ctx context.Context) NetIkePeerArrayOutput {
	return o
}

func (o NetIkePeerArrayOutput) Index(i pulumi.IntInput) NetIkePeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetIkePeer {
		return vs[0].([]*NetIkePeer)[vs[1].(int)]
	}).(NetIkePeerOutput)
}

type NetIkePeerMapOutput struct{ *pulumi.OutputState }

func (NetIkePeerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetIkePeer)(nil)).Elem()
}

func (o NetIkePeerMapOutput) ToNetIkePeerMapOutput() NetIkePeerMapOutput {
	return o
}

func (o NetIkePeerMapOutput) ToNetIkePeerMapOutputWithContext(ctx context.Context) NetIkePeerMapOutput {
	return o
}

func (o NetIkePeerMapOutput) MapIndex(k pulumi.StringInput) NetIkePeerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetIkePeer {
		return vs[0].(map[string]*NetIkePeer)[vs[1].(string)]
	}).(NetIkePeerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetIkePeerInput)(nil)).Elem(), &NetIkePeer{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetIkePeerArrayInput)(nil)).Elem(), NetIkePeerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetIkePeerMapInput)(nil)).Elem(), NetIkePeerMap{})
	pulumi.RegisterOutputType(NetIkePeerOutput{})
	pulumi.RegisterOutputType(NetIkePeerArrayOutput{})
	pulumi.RegisterOutputType(NetIkePeerMapOutput{})
}
