// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package cm

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// `cm.Device` provides details about a specific bigip
//
// This resource is helpful when configuring the BIG-IP device in cluster or in HA mode.
//
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-bigip/blob/master/website/docs/r/bigip_cm_device.html.markdown.
type Device struct {
	pulumi.CustomResourceState

	// IP address used for config sync
	ConfigsyncIp pulumi.StringOutput `pulumi:"configsyncIp"`
	// IP address used for state mirroring
	MirrorIp pulumi.StringPtrOutput `pulumi:"mirrorIp"`
	// Secondary IP address used for state mirroring
	MirrorSecondaryIp pulumi.StringPtrOutput `pulumi:"mirrorSecondaryIp"`
	// Address of the Device which needs to be Deviceensed
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewDevice registers a new resource with the given unique name, arguments, and options.
func NewDevice(ctx *pulumi.Context,
	name string, args *DeviceArgs, opts ...pulumi.ResourceOption) (*Device, error) {
	if args == nil || args.ConfigsyncIp == nil {
		return nil, errors.New("missing required argument 'ConfigsyncIp'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil {
		args = &DeviceArgs{}
	}
	var resource Device
	err := ctx.RegisterResource("f5bigip:cm/device:Device", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDevice gets an existing Device resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeviceState, opts ...pulumi.ResourceOption) (*Device, error) {
	var resource Device
	err := ctx.ReadResource("f5bigip:cm/device:Device", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Device resources.
type deviceState struct {
	// IP address used for config sync
	ConfigsyncIp *string `pulumi:"configsyncIp"`
	// IP address used for state mirroring
	MirrorIp *string `pulumi:"mirrorIp"`
	// Secondary IP address used for state mirroring
	MirrorSecondaryIp *string `pulumi:"mirrorSecondaryIp"`
	// Address of the Device which needs to be Deviceensed
	Name *string `pulumi:"name"`
}

type DeviceState struct {
	// IP address used for config sync
	ConfigsyncIp pulumi.StringPtrInput
	// IP address used for state mirroring
	MirrorIp pulumi.StringPtrInput
	// Secondary IP address used for state mirroring
	MirrorSecondaryIp pulumi.StringPtrInput
	// Address of the Device which needs to be Deviceensed
	Name pulumi.StringPtrInput
}

func (DeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceState)(nil)).Elem()
}

type deviceArgs struct {
	// IP address used for config sync
	ConfigsyncIp string `pulumi:"configsyncIp"`
	// IP address used for state mirroring
	MirrorIp *string `pulumi:"mirrorIp"`
	// Secondary IP address used for state mirroring
	MirrorSecondaryIp *string `pulumi:"mirrorSecondaryIp"`
	// Address of the Device which needs to be Deviceensed
	Name string `pulumi:"name"`
}

// The set of arguments for constructing a Device resource.
type DeviceArgs struct {
	// IP address used for config sync
	ConfigsyncIp pulumi.StringInput
	// IP address used for state mirroring
	MirrorIp pulumi.StringPtrInput
	// Secondary IP address used for state mirroring
	MirrorSecondaryIp pulumi.StringPtrInput
	// Address of the Device which needs to be Deviceensed
	Name pulumi.StringInput
}

func (DeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deviceArgs)(nil)).Elem()
}
