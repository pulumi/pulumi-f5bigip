// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cm

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// `bigip_cm_device` provides details about a specific bigip
// 
// This resource is helpful when configuring the BIG-IP device in cluster or in HA mode.
type Device struct {
	s *pulumi.ResourceState
}

// NewDevice registers a new resource with the given unique name, arguments, and options.
func NewDevice(ctx *pulumi.Context,
	name string, args *DeviceArgs, opts ...pulumi.ResourceOpt) (*Device, error) {
	if args == nil || args.ConfigsyncIp == nil {
		return nil, errors.New("missing required argument 'ConfigsyncIp'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["configsyncIp"] = nil
		inputs["mirrorIp"] = nil
		inputs["mirrorSecondaryIp"] = nil
		inputs["name"] = nil
	} else {
		inputs["configsyncIp"] = args.ConfigsyncIp
		inputs["mirrorIp"] = args.MirrorIp
		inputs["mirrorSecondaryIp"] = args.MirrorSecondaryIp
		inputs["name"] = args.Name
	}
	s, err := ctx.RegisterResource("f5bigip:cm/device:Device", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Device{s: s}, nil
}

// GetDevice gets an existing Device resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDevice(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DeviceState, opts ...pulumi.ResourceOpt) (*Device, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["configsyncIp"] = state.ConfigsyncIp
		inputs["mirrorIp"] = state.MirrorIp
		inputs["mirrorSecondaryIp"] = state.MirrorSecondaryIp
		inputs["name"] = state.Name
	}
	s, err := ctx.ReadResource("f5bigip:cm/device:Device", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Device{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Device) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Device) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// IP address used for config sync
func (r *Device) ConfigsyncIp() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["configsyncIp"])
}

// IP address used for state mirroring
func (r *Device) MirrorIp() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["mirrorIp"])
}

// Secondary IP address used for state mirroring
func (r *Device) MirrorSecondaryIp() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["mirrorSecondaryIp"])
}

// Address of the Device which needs to be Deviceensed
func (r *Device) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Input properties used for looking up and filtering Device resources.
type DeviceState struct {
	// IP address used for config sync
	ConfigsyncIp interface{}
	// IP address used for state mirroring
	MirrorIp interface{}
	// Secondary IP address used for state mirroring
	MirrorSecondaryIp interface{}
	// Address of the Device which needs to be Deviceensed
	Name interface{}
}

// The set of arguments for constructing a Device resource.
type DeviceArgs struct {
	// IP address used for config sync
	ConfigsyncIp interface{}
	// IP address used for state mirroring
	MirrorIp interface{}
	// Secondary IP address used for state mirroring
	MirrorSecondaryIp interface{}
	// Address of the Device which needs to be Deviceensed
	Name interface{}
}
