// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package f5bigip

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type EventServiceDiscovery struct {
	pulumi.CustomResourceState

	Nodes EventServiceDiscoveryNodeArrayOutput `pulumi:"nodes"`
	// Name of the partition/tenant
	Taskid pulumi.StringOutput `pulumi:"taskid"`
}

// NewEventServiceDiscovery registers a new resource with the given unique name, arguments, and options.
func NewEventServiceDiscovery(ctx *pulumi.Context,
	name string, args *EventServiceDiscoveryArgs, opts ...pulumi.ResourceOption) (*EventServiceDiscovery, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Taskid == nil {
		return nil, errors.New("invalid value for required argument 'Taskid'")
	}
	var resource EventServiceDiscovery
	err := ctx.RegisterResource("f5bigip:index/eventServiceDiscovery:EventServiceDiscovery", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventServiceDiscovery gets an existing EventServiceDiscovery resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventServiceDiscovery(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventServiceDiscoveryState, opts ...pulumi.ResourceOption) (*EventServiceDiscovery, error) {
	var resource EventServiceDiscovery
	err := ctx.ReadResource("f5bigip:index/eventServiceDiscovery:EventServiceDiscovery", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventServiceDiscovery resources.
type eventServiceDiscoveryState struct {
	Nodes []EventServiceDiscoveryNode `pulumi:"nodes"`
	// Name of the partition/tenant
	Taskid *string `pulumi:"taskid"`
}

type EventServiceDiscoveryState struct {
	Nodes EventServiceDiscoveryNodeArrayInput
	// Name of the partition/tenant
	Taskid pulumi.StringPtrInput
}

func (EventServiceDiscoveryState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventServiceDiscoveryState)(nil)).Elem()
}

type eventServiceDiscoveryArgs struct {
	Nodes []EventServiceDiscoveryNode `pulumi:"nodes"`
	// Name of the partition/tenant
	Taskid string `pulumi:"taskid"`
}

// The set of arguments for constructing a EventServiceDiscovery resource.
type EventServiceDiscoveryArgs struct {
	Nodes EventServiceDiscoveryNodeArrayInput
	// Name of the partition/tenant
	Taskid pulumi.StringInput
}

func (EventServiceDiscoveryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventServiceDiscoveryArgs)(nil)).Elem()
}

type EventServiceDiscoveryInput interface {
	pulumi.Input

	ToEventServiceDiscoveryOutput() EventServiceDiscoveryOutput
	ToEventServiceDiscoveryOutputWithContext(ctx context.Context) EventServiceDiscoveryOutput
}

func (*EventServiceDiscovery) ElementType() reflect.Type {
	return reflect.TypeOf((*EventServiceDiscovery)(nil))
}

func (i *EventServiceDiscovery) ToEventServiceDiscoveryOutput() EventServiceDiscoveryOutput {
	return i.ToEventServiceDiscoveryOutputWithContext(context.Background())
}

func (i *EventServiceDiscovery) ToEventServiceDiscoveryOutputWithContext(ctx context.Context) EventServiceDiscoveryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventServiceDiscoveryOutput)
}

type EventServiceDiscoveryOutput struct {
	*pulumi.OutputState
}

func (EventServiceDiscoveryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventServiceDiscovery)(nil))
}

func (o EventServiceDiscoveryOutput) ToEventServiceDiscoveryOutput() EventServiceDiscoveryOutput {
	return o
}

func (o EventServiceDiscoveryOutput) ToEventServiceDiscoveryOutputWithContext(ctx context.Context) EventServiceDiscoveryOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(EventServiceDiscoveryOutput{})
}
