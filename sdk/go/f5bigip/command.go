// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package f5bigip

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// `.Command` Run TMSH commands on F5 devices
//
// This resource is helpful to send TMSH command to an BIG-IP node and returns the results read from the device
type Command struct {
	pulumi.CustomResourceState

	// The resulting output from the `commands` executed
	CommandResults pulumi.StringArrayOutput `pulumi:"commandResults"`
	// The commands to send to the remote BIG-IP device over the configured provider. The resulting output from the command is returned and added to `commandResult`
	Commands pulumi.StringArrayOutput `pulumi:"commands"`
	When     pulumi.StringPtrOutput   `pulumi:"when"`
}

// NewCommand registers a new resource with the given unique name, arguments, and options.
func NewCommand(ctx *pulumi.Context,
	name string, args *CommandArgs, opts ...pulumi.ResourceOption) (*Command, error) {
	if args == nil || args.Commands == nil {
		return nil, errors.New("missing required argument 'Commands'")
	}
	if args == nil {
		args = &CommandArgs{}
	}
	var resource Command
	err := ctx.RegisterResource("f5bigip:index/command:Command", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCommand gets an existing Command resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCommand(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CommandState, opts ...pulumi.ResourceOption) (*Command, error) {
	var resource Command
	err := ctx.ReadResource("f5bigip:index/command:Command", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Command resources.
type commandState struct {
	// The resulting output from the `commands` executed
	CommandResults []string `pulumi:"commandResults"`
	// The commands to send to the remote BIG-IP device over the configured provider. The resulting output from the command is returned and added to `commandResult`
	Commands []string `pulumi:"commands"`
	When     *string  `pulumi:"when"`
}

type CommandState struct {
	// The resulting output from the `commands` executed
	CommandResults pulumi.StringArrayInput
	// The commands to send to the remote BIG-IP device over the configured provider. The resulting output from the command is returned and added to `commandResult`
	Commands pulumi.StringArrayInput
	When     pulumi.StringPtrInput
}

func (CommandState) ElementType() reflect.Type {
	return reflect.TypeOf((*commandState)(nil)).Elem()
}

type commandArgs struct {
	// The resulting output from the `commands` executed
	CommandResults []string `pulumi:"commandResults"`
	// The commands to send to the remote BIG-IP device over the configured provider. The resulting output from the command is returned and added to `commandResult`
	Commands []string `pulumi:"commands"`
	When     *string  `pulumi:"when"`
}

// The set of arguments for constructing a Command resource.
type CommandArgs struct {
	// The resulting output from the `commands` executed
	CommandResults pulumi.StringArrayInput
	// The commands to send to the remote BIG-IP device over the configured provider. The resulting output from the command is returned and added to `commandResult`
	Commands pulumi.StringArrayInput
	When     pulumi.StringPtrInput
}

func (CommandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*commandArgs)(nil)).Elem()
}
