// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ltm

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// `bigip_ltm_virtual_address` Configures Virtual Server
// 
// For resources should be named with their "full path". The full path is the combination of the partition + name of the resource. For example /Common/my-pool.
type VirtualAddress struct {
	s *pulumi.ResourceState
}

// NewVirtualAddress registers a new resource with the given unique name, arguments, and options.
func NewVirtualAddress(ctx *pulumi.Context,
	name string, args *VirtualAddressArgs, opts ...pulumi.ResourceOpt) (*VirtualAddress, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["advertizeRoute"] = nil
		inputs["arp"] = nil
		inputs["autoDelete"] = nil
		inputs["connLimit"] = nil
		inputs["enabled"] = nil
		inputs["icmpEcho"] = nil
		inputs["name"] = nil
		inputs["trafficGroup"] = nil
	} else {
		inputs["advertizeRoute"] = args.AdvertizeRoute
		inputs["arp"] = args.Arp
		inputs["autoDelete"] = args.AutoDelete
		inputs["connLimit"] = args.ConnLimit
		inputs["enabled"] = args.Enabled
		inputs["icmpEcho"] = args.IcmpEcho
		inputs["name"] = args.Name
		inputs["trafficGroup"] = args.TrafficGroup
	}
	s, err := ctx.RegisterResource("f5bigip:ltm/virtualAddress:VirtualAddress", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VirtualAddress{s: s}, nil
}

// GetVirtualAddress gets an existing VirtualAddress resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualAddress(ctx *pulumi.Context,
	name string, id pulumi.ID, state *VirtualAddressState, opts ...pulumi.ResourceOpt) (*VirtualAddress, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["advertizeRoute"] = state.AdvertizeRoute
		inputs["arp"] = state.Arp
		inputs["autoDelete"] = state.AutoDelete
		inputs["connLimit"] = state.ConnLimit
		inputs["enabled"] = state.Enabled
		inputs["icmpEcho"] = state.IcmpEcho
		inputs["name"] = state.Name
		inputs["trafficGroup"] = state.TrafficGroup
	}
	s, err := ctx.ReadResource("f5bigip:ltm/virtualAddress:VirtualAddress", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VirtualAddress{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *VirtualAddress) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *VirtualAddress) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Enabled dynamic routing of the address
func (r *VirtualAddress) AdvertizeRoute() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["advertizeRoute"])
}

// Enable or disable ARP for the virtual address
func (r *VirtualAddress) Arp() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["arp"])
}

// Automatically delete the virtual address with the virtual server
func (r *VirtualAddress) AutoDelete() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["autoDelete"])
}

// Max number of connections for virtual address
func (r *VirtualAddress) ConnLimit() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["connLimit"])
}

// Enable or disable the virtual address
func (r *VirtualAddress) Enabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enabled"])
}

// Enable/Disable ICMP response to the virtual address
func (r *VirtualAddress) IcmpEcho() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["icmpEcho"])
}

// Name of the virtual address
func (r *VirtualAddress) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Specify the partition and traffic group
func (r *VirtualAddress) TrafficGroup() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["trafficGroup"])
}

// Input properties used for looking up and filtering VirtualAddress resources.
type VirtualAddressState struct {
	// Enabled dynamic routing of the address
	AdvertizeRoute interface{}
	// Enable or disable ARP for the virtual address
	Arp interface{}
	// Automatically delete the virtual address with the virtual server
	AutoDelete interface{}
	// Max number of connections for virtual address
	ConnLimit interface{}
	// Enable or disable the virtual address
	Enabled interface{}
	// Enable/Disable ICMP response to the virtual address
	IcmpEcho interface{}
	// Name of the virtual address
	Name interface{}
	// Specify the partition and traffic group
	TrafficGroup interface{}
}

// The set of arguments for constructing a VirtualAddress resource.
type VirtualAddressArgs struct {
	// Enabled dynamic routing of the address
	AdvertizeRoute interface{}
	// Enable or disable ARP for the virtual address
	Arp interface{}
	// Automatically delete the virtual address with the virtual server
	AutoDelete interface{}
	// Max number of connections for virtual address
	ConnLimit interface{}
	// Enable or disable the virtual address
	Enabled interface{}
	// Enable/Disable ICMP response to the virtual address
	IcmpEcho interface{}
	// Name of the virtual address
	Name interface{}
	// Specify the partition and traffic group
	TrafficGroup interface{}
}
