// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ltm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-f5bigip/sdk/v3/go/f5bigip/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `ltm.ProfileServerSsl` Manages server SSL profiles on a BIG-IP
//
// Resources should be named with their "full path". The full path is the combination of the partition + name (example: /Common/my-pool ) or  partition + directory + name of the resource  (example: /Common/test/my-pool )
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-f5bigip/sdk/v3/go/f5bigip/ltm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ltm.NewProfileServerSsl(ctx, "test-ServerSsl", &ltm.ProfileServerSslArgs{
//				Name:         pulumi.String("/Common/test-ServerSsl"),
//				DefaultsFrom: pulumi.String("/Common/serverssl"),
//				Authenticate: pulumi.String("always"),
//				Ciphers:      pulumi.String("DEFAULT"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Importing
//
// An existing server-ssl profile can be imported into this resource by supplying server-ssl profile Name in `full path` as `id`.
// An example is below:
// ```sh
// $ terraform import bigip_ltm_profile_server_ssl.test-ServerSsl-import /Common/test-ServerSsl
//
// ```
type ProfileServerSsl struct {
	pulumi.CustomResourceState

	// Alert time out
	AlertTimeout pulumi.StringOutput `pulumi:"alertTimeout"`
	// Specifies the frequency of server authentication for an SSL session.When `once`,specifies that the system authenticates the server once for an SSL session.
	// When `always`, specifies that the system authenticates the server once for an SSL session and also upon reuse of that session.
	Authenticate pulumi.StringOutput `pulumi:"authenticate"`
	// Client certificate chain traversal depth. Default 9.
	AuthenticateDepth pulumi.IntOutput `pulumi:"authenticateDepth"`
	// Specifies the name of the certificate file that is used as the certification authority certificate when SSL client certificate constrained delegation is enabled. The certificate should be generated and installed by you on the system. When selecting this option, type a certificate file name.
	C3dCaCert pulumi.StringPtrOutput `pulumi:"c3dCaCert"`
	// Specifies the name of the key file that is used as the certification authority key when SSL client certificate constrained delegation is enabled. The key should be generated and installed by you on the system. When selecting this option, type a key file name.
	//
	// * `c3d-ca-passphrase` (Optional) Specifies the passphrase of the key file that is used as the certification authority key when SSL client certificate constrained delegation is enabled. When selecting this option, type the passphrase corresponding to the selected c3d-ca-key.
	//
	// * `c3d-cert-extension-custom-oids` (Optional) Specifies the custom extension OID of the client certificates to be included in the generated certificates using SSL client certificate constrained delegation.
	C3dCaKey pulumi.StringPtrOutput `pulumi:"c3dCaKey"`
	// CA Passphrase. Default
	C3dCaPassphrase pulumi.StringOutput `pulumi:"c3dCaPassphrase"`
	// Certificate Extensions List. Default
	C3dCertExtensionCustomOids pulumi.StringArrayOutput `pulumi:"c3dCertExtensionCustomOids"`
	// Specifies the extensions of the client certificates to be included in the generated certificates using SSL client certificate constrained delegation. For example, { basic-constraints }. The default value is { basic-constraints extended-key-usage key-usage subject-alternative-name }. The extensions are:
	//
	// basic-constraints
	// Basic constraints are used to indicate whether the certificate belongs
	// to a CA.
	//
	// extended-key-usage
	// Extended Key Usage is used, typically on a leaf certificate, to
	// indicate the purpose of the public key contained in the certificate.
	//
	// key-usage
	// Key Usage provides a bitmap specifying the cryptographic operations
	// which may be performed using the public key contained in the
	// certificate; for example, it could indicate that the key should be
	// used for signature but not for encipherment.
	//
	// subject-alternative-name
	// Subject Alternative Name allows identities to be bound to the subject
	// of the certificate. These identities may be included in addition to
	// or in place of the identity in the subject field of the certificate.
	//
	// * `c3d-cert-lifespan` Specifies the lifespan of the certificate generated using the SSL client certificate constrained delegation. The default value is 24.
	C3dCertExtensionIncludes pulumi.StringArrayOutput `pulumi:"c3dCertExtensionIncludes"`
	// Certificate Lifespan. Default
	C3dCertLifespan pulumi.IntOutput `pulumi:"c3dCertLifespan"`
	// CA Passphrase. Default enabled
	C3dCertificateExtensions pulumi.StringOutput `pulumi:"c3dCertificateExtensions"`
	// Client certificate file path. Default None.
	CaFile pulumi.StringOutput `pulumi:"caFile"`
	// Cache size (sessions).
	CacheSize pulumi.IntOutput `pulumi:"cacheSize"`
	// Cache time out
	CacheTimeout pulumi.IntOutput `pulumi:"cacheTimeout"`
	// Specifies the name of the certificate that the system uses for server-side SSL processing.
	Cert pulumi.StringPtrOutput `pulumi:"cert"`
	// Specifies the certificates-key chain to associate with the SSL profile
	Chain pulumi.StringPtrOutput `pulumi:"chain"`
	// Specifies the cipher group for the SSL server profile. It is mutually exclusive with the argument, `ciphers`. The default value is `none`.
	CipherGroup pulumi.StringPtrOutput `pulumi:"cipherGroup"`
	// Specifies the list of ciphers that the system supports. When creating a new profile, the default cipher list is provided by the parent profile.
	Ciphers pulumi.StringOutput `pulumi:"ciphers"`
	// The parent template of this monitor template. Once this value has been set, it cannot be changed. By default, this value is `/Common/serverssl`.
	DefaultsFrom pulumi.StringPtrOutput `pulumi:"defaultsFrom"`
	// Response if the cert is expired (drop / ignore).
	ExpireCertResponseControl pulumi.StringOutput `pulumi:"expireCertResponseControl"`
	// full path of the profile
	FullPath pulumi.StringOutput `pulumi:"fullPath"`
	// generation
	Generation pulumi.IntOutput `pulumi:"generation"`
	// Generic alerts enabled / disabled.
	GenericAlert pulumi.StringOutput `pulumi:"genericAlert"`
	// Handshake time out (seconds)
	HandshakeTimeout pulumi.StringOutput `pulumi:"handshakeTimeout"`
	// Specifies the file name of the SSL key.
	Key pulumi.StringPtrOutput `pulumi:"key"`
	// ModSSL Methods enabled / disabled. Default is disabled.
	ModSslMethods pulumi.StringOutput `pulumi:"modSslMethods"`
	// ModSSL Methods enabled / disabled. Default is disabled.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// Specifies the name of the profile.Name of Profile should be full path,full path is the combination of the `partition + profile name`. For example `/Common/test-serverssl-profile`.
	Name pulumi.StringOutput `pulumi:"name"`
	// name of partition
	Partition pulumi.StringOutput `pulumi:"partition"`
	// Client Certificate Constrained Delegation CA passphrase
	Passphrase pulumi.StringOutput `pulumi:"passphrase"`
	// Specifies the way the system handles client certificates.When ignore, specifies that the system ignores certificates from client systems.When require, specifies that the system requires a client to present a valid certificate.When request, specifies that the system requests a valid certificate from a client but always authenticate the client.
	PeerCertMode pulumi.StringOutput `pulumi:"peerCertMode"`
	// Proxy CA Cert
	ProxyCaCert pulumi.StringOutput `pulumi:"proxyCaCert"`
	// Proxy CA Key
	ProxyCaKey pulumi.StringOutput `pulumi:"proxyCaKey"`
	// Proxy SSL enabled / disabled. Default is disabled.
	ProxySsl pulumi.StringOutput `pulumi:"proxySsl"`
	// Renogotiate Period (seconds)
	RenegotiatePeriod pulumi.StringOutput `pulumi:"renegotiatePeriod"`
	// Renogotiate Size
	RenegotiateSize pulumi.StringOutput `pulumi:"renegotiateSize"`
	// Enables or disables SSL renegotiation.When creating a new profile, the setting is provided by the parent profile
	Renegotiation pulumi.StringOutput `pulumi:"renegotiation"`
	// When `true`, client certificate is retained in SSL session.
	RetainCertificate pulumi.StringOutput `pulumi:"retainCertificate"`
	// Specifies the method of secure renegotiations for SSL connections. When creating a new profile, the setting is provided by the parent profile.
	// When `request` is set the system request secure renegotation of SSL connections.
	// `require` is a default setting and when set the system permits initial SSL handshakes from clients but terminates renegotiations from unpatched clients.
	// The `require-strict` setting the system requires strict renegotiation of SSL connections. In this mode the system refuses connections to insecure servers, and terminates existing SSL connections to insecure servers
	SecureRenegotiation pulumi.StringOutput `pulumi:"secureRenegotiation"`
	// Specifies the fully qualified DNS hostname of the server used in Server Name Indication communications. When creating a new profile, the setting is provided by the parent profile.The server name can also be a wildcard string containing the asterisk `*` character.
	ServerName pulumi.StringOutput `pulumi:"serverName"`
	// Session Mirroring (enabled / disabled)
	SessionMirroring pulumi.StringOutput `pulumi:"sessionMirroring"`
	// Session Ticket (enabled / disabled)
	SessionTicket pulumi.StringOutput `pulumi:"sessionTicket"`
	// Indicates that the system uses this profile as the default SSL profile when there is no match to the server name, or when the client provides no SNI extension support.When creating a new profile, the setting is provided by the parent profile.
	// There can be only one SSL profile with this setting enabled.
	SniDefault pulumi.StringOutput `pulumi:"sniDefault"`
	// Requires that the network peers also provide SNI support, this setting only takes effect when `sniDefault` is set to `true`.When creating a new profile, the setting is provided by the parent profile
	SniRequire pulumi.StringOutput `pulumi:"sniRequire"`
	// Enables or disables SSL forward proxy bypass on receiving
	// handshake_failure, protocolVersion or unsupportedExtension alert message during the serverside SSL handshake. When enabled and there is an SSL handshake_failure, protocolVersion or unsupportedExtension alert during the serverside SSL handshake, SSL traffic bypasses the BIG-IP system untouched, without decryption/encryption. The default value is disabled. Conversely, you can specify enabled to use this feature.
	SslC3d pulumi.StringPtrOutput `pulumi:"sslC3d"`
	// Specifies whether SSL forward proxy feature is enabled or not. The default value is disabled.
	SslForwardProxy pulumi.StringOutput `pulumi:"sslForwardProxy"`
	// Specifies whether SSL forward proxy bypass feature is enabled or not. The default value is disabled.
	SslForwardProxyBypass pulumi.StringOutput `pulumi:"sslForwardProxyBypass"`
	// SSL sign hash (any, sha1, sha256, sha384)
	SslSignHash pulumi.StringOutput `pulumi:"sslSignHash"`
	// Enables or disables the resumption of SSL sessions after an unclean shutdown.When creating a new profile, the setting is provided by the parent profile.
	StrictResume pulumi.StringOutput `pulumi:"strictResume"`
	// List of Enabled selection from a set of industry standard options for handling SSL processing.By default,
	// Don't insert empty fragments and No TLSv1.3 are listed as Enabled Options. `Usage` : tmOptions    = ["dont-insert-empty-fragments","no-tlsv1.3"]
	TmOptions pulumi.StringArrayOutput `pulumi:"tmOptions"`
	// Unclean Shutdown (enabled / disabled)
	UncleanShutdown pulumi.StringOutput `pulumi:"uncleanShutdown"`
	// Unclean Shutdown (drop / ignore)
	UntrustedCertResponseControl pulumi.StringOutput `pulumi:"untrustedCertResponseControl"`
}

// NewProfileServerSsl registers a new resource with the given unique name, arguments, and options.
func NewProfileServerSsl(ctx *pulumi.Context,
	name string, args *ProfileServerSslArgs, opts ...pulumi.ResourceOption) (*ProfileServerSsl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Passphrase != nil {
		args.Passphrase = pulumi.ToSecret(args.Passphrase).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"passphrase",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProfileServerSsl
	err := ctx.RegisterResource("f5bigip:ltm/profileServerSsl:ProfileServerSsl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProfileServerSsl gets an existing ProfileServerSsl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProfileServerSsl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProfileServerSslState, opts ...pulumi.ResourceOption) (*ProfileServerSsl, error) {
	var resource ProfileServerSsl
	err := ctx.ReadResource("f5bigip:ltm/profileServerSsl:ProfileServerSsl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProfileServerSsl resources.
type profileServerSslState struct {
	// Alert time out
	AlertTimeout *string `pulumi:"alertTimeout"`
	// Specifies the frequency of server authentication for an SSL session.When `once`,specifies that the system authenticates the server once for an SSL session.
	// When `always`, specifies that the system authenticates the server once for an SSL session and also upon reuse of that session.
	Authenticate *string `pulumi:"authenticate"`
	// Client certificate chain traversal depth. Default 9.
	AuthenticateDepth *int `pulumi:"authenticateDepth"`
	// Specifies the name of the certificate file that is used as the certification authority certificate when SSL client certificate constrained delegation is enabled. The certificate should be generated and installed by you on the system. When selecting this option, type a certificate file name.
	C3dCaCert *string `pulumi:"c3dCaCert"`
	// Specifies the name of the key file that is used as the certification authority key when SSL client certificate constrained delegation is enabled. The key should be generated and installed by you on the system. When selecting this option, type a key file name.
	//
	// * `c3d-ca-passphrase` (Optional) Specifies the passphrase of the key file that is used as the certification authority key when SSL client certificate constrained delegation is enabled. When selecting this option, type the passphrase corresponding to the selected c3d-ca-key.
	//
	// * `c3d-cert-extension-custom-oids` (Optional) Specifies the custom extension OID of the client certificates to be included in the generated certificates using SSL client certificate constrained delegation.
	C3dCaKey *string `pulumi:"c3dCaKey"`
	// CA Passphrase. Default
	C3dCaPassphrase *string `pulumi:"c3dCaPassphrase"`
	// Certificate Extensions List. Default
	C3dCertExtensionCustomOids []string `pulumi:"c3dCertExtensionCustomOids"`
	// Specifies the extensions of the client certificates to be included in the generated certificates using SSL client certificate constrained delegation. For example, { basic-constraints }. The default value is { basic-constraints extended-key-usage key-usage subject-alternative-name }. The extensions are:
	//
	// basic-constraints
	// Basic constraints are used to indicate whether the certificate belongs
	// to a CA.
	//
	// extended-key-usage
	// Extended Key Usage is used, typically on a leaf certificate, to
	// indicate the purpose of the public key contained in the certificate.
	//
	// key-usage
	// Key Usage provides a bitmap specifying the cryptographic operations
	// which may be performed using the public key contained in the
	// certificate; for example, it could indicate that the key should be
	// used for signature but not for encipherment.
	//
	// subject-alternative-name
	// Subject Alternative Name allows identities to be bound to the subject
	// of the certificate. These identities may be included in addition to
	// or in place of the identity in the subject field of the certificate.
	//
	// * `c3d-cert-lifespan` Specifies the lifespan of the certificate generated using the SSL client certificate constrained delegation. The default value is 24.
	C3dCertExtensionIncludes []string `pulumi:"c3dCertExtensionIncludes"`
	// Certificate Lifespan. Default
	C3dCertLifespan *int `pulumi:"c3dCertLifespan"`
	// CA Passphrase. Default enabled
	C3dCertificateExtensions *string `pulumi:"c3dCertificateExtensions"`
	// Client certificate file path. Default None.
	CaFile *string `pulumi:"caFile"`
	// Cache size (sessions).
	CacheSize *int `pulumi:"cacheSize"`
	// Cache time out
	CacheTimeout *int `pulumi:"cacheTimeout"`
	// Specifies the name of the certificate that the system uses for server-side SSL processing.
	Cert *string `pulumi:"cert"`
	// Specifies the certificates-key chain to associate with the SSL profile
	Chain *string `pulumi:"chain"`
	// Specifies the cipher group for the SSL server profile. It is mutually exclusive with the argument, `ciphers`. The default value is `none`.
	CipherGroup *string `pulumi:"cipherGroup"`
	// Specifies the list of ciphers that the system supports. When creating a new profile, the default cipher list is provided by the parent profile.
	Ciphers *string `pulumi:"ciphers"`
	// The parent template of this monitor template. Once this value has been set, it cannot be changed. By default, this value is `/Common/serverssl`.
	DefaultsFrom *string `pulumi:"defaultsFrom"`
	// Response if the cert is expired (drop / ignore).
	ExpireCertResponseControl *string `pulumi:"expireCertResponseControl"`
	// full path of the profile
	FullPath *string `pulumi:"fullPath"`
	// generation
	Generation *int `pulumi:"generation"`
	// Generic alerts enabled / disabled.
	GenericAlert *string `pulumi:"genericAlert"`
	// Handshake time out (seconds)
	HandshakeTimeout *string `pulumi:"handshakeTimeout"`
	// Specifies the file name of the SSL key.
	Key *string `pulumi:"key"`
	// ModSSL Methods enabled / disabled. Default is disabled.
	ModSslMethods *string `pulumi:"modSslMethods"`
	// ModSSL Methods enabled / disabled. Default is disabled.
	Mode *string `pulumi:"mode"`
	// Specifies the name of the profile.Name of Profile should be full path,full path is the combination of the `partition + profile name`. For example `/Common/test-serverssl-profile`.
	Name *string `pulumi:"name"`
	// name of partition
	Partition *string `pulumi:"partition"`
	// Client Certificate Constrained Delegation CA passphrase
	Passphrase *string `pulumi:"passphrase"`
	// Specifies the way the system handles client certificates.When ignore, specifies that the system ignores certificates from client systems.When require, specifies that the system requires a client to present a valid certificate.When request, specifies that the system requests a valid certificate from a client but always authenticate the client.
	PeerCertMode *string `pulumi:"peerCertMode"`
	// Proxy CA Cert
	ProxyCaCert *string `pulumi:"proxyCaCert"`
	// Proxy CA Key
	ProxyCaKey *string `pulumi:"proxyCaKey"`
	// Proxy SSL enabled / disabled. Default is disabled.
	ProxySsl *string `pulumi:"proxySsl"`
	// Renogotiate Period (seconds)
	RenegotiatePeriod *string `pulumi:"renegotiatePeriod"`
	// Renogotiate Size
	RenegotiateSize *string `pulumi:"renegotiateSize"`
	// Enables or disables SSL renegotiation.When creating a new profile, the setting is provided by the parent profile
	Renegotiation *string `pulumi:"renegotiation"`
	// When `true`, client certificate is retained in SSL session.
	RetainCertificate *string `pulumi:"retainCertificate"`
	// Specifies the method of secure renegotiations for SSL connections. When creating a new profile, the setting is provided by the parent profile.
	// When `request` is set the system request secure renegotation of SSL connections.
	// `require` is a default setting and when set the system permits initial SSL handshakes from clients but terminates renegotiations from unpatched clients.
	// The `require-strict` setting the system requires strict renegotiation of SSL connections. In this mode the system refuses connections to insecure servers, and terminates existing SSL connections to insecure servers
	SecureRenegotiation *string `pulumi:"secureRenegotiation"`
	// Specifies the fully qualified DNS hostname of the server used in Server Name Indication communications. When creating a new profile, the setting is provided by the parent profile.The server name can also be a wildcard string containing the asterisk `*` character.
	ServerName *string `pulumi:"serverName"`
	// Session Mirroring (enabled / disabled)
	SessionMirroring *string `pulumi:"sessionMirroring"`
	// Session Ticket (enabled / disabled)
	SessionTicket *string `pulumi:"sessionTicket"`
	// Indicates that the system uses this profile as the default SSL profile when there is no match to the server name, or when the client provides no SNI extension support.When creating a new profile, the setting is provided by the parent profile.
	// There can be only one SSL profile with this setting enabled.
	SniDefault *string `pulumi:"sniDefault"`
	// Requires that the network peers also provide SNI support, this setting only takes effect when `sniDefault` is set to `true`.When creating a new profile, the setting is provided by the parent profile
	SniRequire *string `pulumi:"sniRequire"`
	// Enables or disables SSL forward proxy bypass on receiving
	// handshake_failure, protocolVersion or unsupportedExtension alert message during the serverside SSL handshake. When enabled and there is an SSL handshake_failure, protocolVersion or unsupportedExtension alert during the serverside SSL handshake, SSL traffic bypasses the BIG-IP system untouched, without decryption/encryption. The default value is disabled. Conversely, you can specify enabled to use this feature.
	SslC3d *string `pulumi:"sslC3d"`
	// Specifies whether SSL forward proxy feature is enabled or not. The default value is disabled.
	SslForwardProxy *string `pulumi:"sslForwardProxy"`
	// Specifies whether SSL forward proxy bypass feature is enabled or not. The default value is disabled.
	SslForwardProxyBypass *string `pulumi:"sslForwardProxyBypass"`
	// SSL sign hash (any, sha1, sha256, sha384)
	SslSignHash *string `pulumi:"sslSignHash"`
	// Enables or disables the resumption of SSL sessions after an unclean shutdown.When creating a new profile, the setting is provided by the parent profile.
	StrictResume *string `pulumi:"strictResume"`
	// List of Enabled selection from a set of industry standard options for handling SSL processing.By default,
	// Don't insert empty fragments and No TLSv1.3 are listed as Enabled Options. `Usage` : tmOptions    = ["dont-insert-empty-fragments","no-tlsv1.3"]
	TmOptions []string `pulumi:"tmOptions"`
	// Unclean Shutdown (enabled / disabled)
	UncleanShutdown *string `pulumi:"uncleanShutdown"`
	// Unclean Shutdown (drop / ignore)
	UntrustedCertResponseControl *string `pulumi:"untrustedCertResponseControl"`
}

type ProfileServerSslState struct {
	// Alert time out
	AlertTimeout pulumi.StringPtrInput
	// Specifies the frequency of server authentication for an SSL session.When `once`,specifies that the system authenticates the server once for an SSL session.
	// When `always`, specifies that the system authenticates the server once for an SSL session and also upon reuse of that session.
	Authenticate pulumi.StringPtrInput
	// Client certificate chain traversal depth. Default 9.
	AuthenticateDepth pulumi.IntPtrInput
	// Specifies the name of the certificate file that is used as the certification authority certificate when SSL client certificate constrained delegation is enabled. The certificate should be generated and installed by you on the system. When selecting this option, type a certificate file name.
	C3dCaCert pulumi.StringPtrInput
	// Specifies the name of the key file that is used as the certification authority key when SSL client certificate constrained delegation is enabled. The key should be generated and installed by you on the system. When selecting this option, type a key file name.
	//
	// * `c3d-ca-passphrase` (Optional) Specifies the passphrase of the key file that is used as the certification authority key when SSL client certificate constrained delegation is enabled. When selecting this option, type the passphrase corresponding to the selected c3d-ca-key.
	//
	// * `c3d-cert-extension-custom-oids` (Optional) Specifies the custom extension OID of the client certificates to be included in the generated certificates using SSL client certificate constrained delegation.
	C3dCaKey pulumi.StringPtrInput
	// CA Passphrase. Default
	C3dCaPassphrase pulumi.StringPtrInput
	// Certificate Extensions List. Default
	C3dCertExtensionCustomOids pulumi.StringArrayInput
	// Specifies the extensions of the client certificates to be included in the generated certificates using SSL client certificate constrained delegation. For example, { basic-constraints }. The default value is { basic-constraints extended-key-usage key-usage subject-alternative-name }. The extensions are:
	//
	// basic-constraints
	// Basic constraints are used to indicate whether the certificate belongs
	// to a CA.
	//
	// extended-key-usage
	// Extended Key Usage is used, typically on a leaf certificate, to
	// indicate the purpose of the public key contained in the certificate.
	//
	// key-usage
	// Key Usage provides a bitmap specifying the cryptographic operations
	// which may be performed using the public key contained in the
	// certificate; for example, it could indicate that the key should be
	// used for signature but not for encipherment.
	//
	// subject-alternative-name
	// Subject Alternative Name allows identities to be bound to the subject
	// of the certificate. These identities may be included in addition to
	// or in place of the identity in the subject field of the certificate.
	//
	// * `c3d-cert-lifespan` Specifies the lifespan of the certificate generated using the SSL client certificate constrained delegation. The default value is 24.
	C3dCertExtensionIncludes pulumi.StringArrayInput
	// Certificate Lifespan. Default
	C3dCertLifespan pulumi.IntPtrInput
	// CA Passphrase. Default enabled
	C3dCertificateExtensions pulumi.StringPtrInput
	// Client certificate file path. Default None.
	CaFile pulumi.StringPtrInput
	// Cache size (sessions).
	CacheSize pulumi.IntPtrInput
	// Cache time out
	CacheTimeout pulumi.IntPtrInput
	// Specifies the name of the certificate that the system uses for server-side SSL processing.
	Cert pulumi.StringPtrInput
	// Specifies the certificates-key chain to associate with the SSL profile
	Chain pulumi.StringPtrInput
	// Specifies the cipher group for the SSL server profile. It is mutually exclusive with the argument, `ciphers`. The default value is `none`.
	CipherGroup pulumi.StringPtrInput
	// Specifies the list of ciphers that the system supports. When creating a new profile, the default cipher list is provided by the parent profile.
	Ciphers pulumi.StringPtrInput
	// The parent template of this monitor template. Once this value has been set, it cannot be changed. By default, this value is `/Common/serverssl`.
	DefaultsFrom pulumi.StringPtrInput
	// Response if the cert is expired (drop / ignore).
	ExpireCertResponseControl pulumi.StringPtrInput
	// full path of the profile
	FullPath pulumi.StringPtrInput
	// generation
	Generation pulumi.IntPtrInput
	// Generic alerts enabled / disabled.
	GenericAlert pulumi.StringPtrInput
	// Handshake time out (seconds)
	HandshakeTimeout pulumi.StringPtrInput
	// Specifies the file name of the SSL key.
	Key pulumi.StringPtrInput
	// ModSSL Methods enabled / disabled. Default is disabled.
	ModSslMethods pulumi.StringPtrInput
	// ModSSL Methods enabled / disabled. Default is disabled.
	Mode pulumi.StringPtrInput
	// Specifies the name of the profile.Name of Profile should be full path,full path is the combination of the `partition + profile name`. For example `/Common/test-serverssl-profile`.
	Name pulumi.StringPtrInput
	// name of partition
	Partition pulumi.StringPtrInput
	// Client Certificate Constrained Delegation CA passphrase
	Passphrase pulumi.StringPtrInput
	// Specifies the way the system handles client certificates.When ignore, specifies that the system ignores certificates from client systems.When require, specifies that the system requires a client to present a valid certificate.When request, specifies that the system requests a valid certificate from a client but always authenticate the client.
	PeerCertMode pulumi.StringPtrInput
	// Proxy CA Cert
	ProxyCaCert pulumi.StringPtrInput
	// Proxy CA Key
	ProxyCaKey pulumi.StringPtrInput
	// Proxy SSL enabled / disabled. Default is disabled.
	ProxySsl pulumi.StringPtrInput
	// Renogotiate Period (seconds)
	RenegotiatePeriod pulumi.StringPtrInput
	// Renogotiate Size
	RenegotiateSize pulumi.StringPtrInput
	// Enables or disables SSL renegotiation.When creating a new profile, the setting is provided by the parent profile
	Renegotiation pulumi.StringPtrInput
	// When `true`, client certificate is retained in SSL session.
	RetainCertificate pulumi.StringPtrInput
	// Specifies the method of secure renegotiations for SSL connections. When creating a new profile, the setting is provided by the parent profile.
	// When `request` is set the system request secure renegotation of SSL connections.
	// `require` is a default setting and when set the system permits initial SSL handshakes from clients but terminates renegotiations from unpatched clients.
	// The `require-strict` setting the system requires strict renegotiation of SSL connections. In this mode the system refuses connections to insecure servers, and terminates existing SSL connections to insecure servers
	SecureRenegotiation pulumi.StringPtrInput
	// Specifies the fully qualified DNS hostname of the server used in Server Name Indication communications. When creating a new profile, the setting is provided by the parent profile.The server name can also be a wildcard string containing the asterisk `*` character.
	ServerName pulumi.StringPtrInput
	// Session Mirroring (enabled / disabled)
	SessionMirroring pulumi.StringPtrInput
	// Session Ticket (enabled / disabled)
	SessionTicket pulumi.StringPtrInput
	// Indicates that the system uses this profile as the default SSL profile when there is no match to the server name, or when the client provides no SNI extension support.When creating a new profile, the setting is provided by the parent profile.
	// There can be only one SSL profile with this setting enabled.
	SniDefault pulumi.StringPtrInput
	// Requires that the network peers also provide SNI support, this setting only takes effect when `sniDefault` is set to `true`.When creating a new profile, the setting is provided by the parent profile
	SniRequire pulumi.StringPtrInput
	// Enables or disables SSL forward proxy bypass on receiving
	// handshake_failure, protocolVersion or unsupportedExtension alert message during the serverside SSL handshake. When enabled and there is an SSL handshake_failure, protocolVersion or unsupportedExtension alert during the serverside SSL handshake, SSL traffic bypasses the BIG-IP system untouched, without decryption/encryption. The default value is disabled. Conversely, you can specify enabled to use this feature.
	SslC3d pulumi.StringPtrInput
	// Specifies whether SSL forward proxy feature is enabled or not. The default value is disabled.
	SslForwardProxy pulumi.StringPtrInput
	// Specifies whether SSL forward proxy bypass feature is enabled or not. The default value is disabled.
	SslForwardProxyBypass pulumi.StringPtrInput
	// SSL sign hash (any, sha1, sha256, sha384)
	SslSignHash pulumi.StringPtrInput
	// Enables or disables the resumption of SSL sessions after an unclean shutdown.When creating a new profile, the setting is provided by the parent profile.
	StrictResume pulumi.StringPtrInput
	// List of Enabled selection from a set of industry standard options for handling SSL processing.By default,
	// Don't insert empty fragments and No TLSv1.3 are listed as Enabled Options. `Usage` : tmOptions    = ["dont-insert-empty-fragments","no-tlsv1.3"]
	TmOptions pulumi.StringArrayInput
	// Unclean Shutdown (enabled / disabled)
	UncleanShutdown pulumi.StringPtrInput
	// Unclean Shutdown (drop / ignore)
	UntrustedCertResponseControl pulumi.StringPtrInput
}

func (ProfileServerSslState) ElementType() reflect.Type {
	return reflect.TypeOf((*profileServerSslState)(nil)).Elem()
}

type profileServerSslArgs struct {
	// Alert time out
	AlertTimeout *string `pulumi:"alertTimeout"`
	// Specifies the frequency of server authentication for an SSL session.When `once`,specifies that the system authenticates the server once for an SSL session.
	// When `always`, specifies that the system authenticates the server once for an SSL session and also upon reuse of that session.
	Authenticate *string `pulumi:"authenticate"`
	// Client certificate chain traversal depth. Default 9.
	AuthenticateDepth *int `pulumi:"authenticateDepth"`
	// Specifies the name of the certificate file that is used as the certification authority certificate when SSL client certificate constrained delegation is enabled. The certificate should be generated and installed by you on the system. When selecting this option, type a certificate file name.
	C3dCaCert *string `pulumi:"c3dCaCert"`
	// Specifies the name of the key file that is used as the certification authority key when SSL client certificate constrained delegation is enabled. The key should be generated and installed by you on the system. When selecting this option, type a key file name.
	//
	// * `c3d-ca-passphrase` (Optional) Specifies the passphrase of the key file that is used as the certification authority key when SSL client certificate constrained delegation is enabled. When selecting this option, type the passphrase corresponding to the selected c3d-ca-key.
	//
	// * `c3d-cert-extension-custom-oids` (Optional) Specifies the custom extension OID of the client certificates to be included in the generated certificates using SSL client certificate constrained delegation.
	C3dCaKey *string `pulumi:"c3dCaKey"`
	// CA Passphrase. Default
	C3dCaPassphrase *string `pulumi:"c3dCaPassphrase"`
	// Certificate Extensions List. Default
	C3dCertExtensionCustomOids []string `pulumi:"c3dCertExtensionCustomOids"`
	// Specifies the extensions of the client certificates to be included in the generated certificates using SSL client certificate constrained delegation. For example, { basic-constraints }. The default value is { basic-constraints extended-key-usage key-usage subject-alternative-name }. The extensions are:
	//
	// basic-constraints
	// Basic constraints are used to indicate whether the certificate belongs
	// to a CA.
	//
	// extended-key-usage
	// Extended Key Usage is used, typically on a leaf certificate, to
	// indicate the purpose of the public key contained in the certificate.
	//
	// key-usage
	// Key Usage provides a bitmap specifying the cryptographic operations
	// which may be performed using the public key contained in the
	// certificate; for example, it could indicate that the key should be
	// used for signature but not for encipherment.
	//
	// subject-alternative-name
	// Subject Alternative Name allows identities to be bound to the subject
	// of the certificate. These identities may be included in addition to
	// or in place of the identity in the subject field of the certificate.
	//
	// * `c3d-cert-lifespan` Specifies the lifespan of the certificate generated using the SSL client certificate constrained delegation. The default value is 24.
	C3dCertExtensionIncludes []string `pulumi:"c3dCertExtensionIncludes"`
	// Certificate Lifespan. Default
	C3dCertLifespan *int `pulumi:"c3dCertLifespan"`
	// CA Passphrase. Default enabled
	C3dCertificateExtensions *string `pulumi:"c3dCertificateExtensions"`
	// Client certificate file path. Default None.
	CaFile *string `pulumi:"caFile"`
	// Cache size (sessions).
	CacheSize *int `pulumi:"cacheSize"`
	// Cache time out
	CacheTimeout *int `pulumi:"cacheTimeout"`
	// Specifies the name of the certificate that the system uses for server-side SSL processing.
	Cert *string `pulumi:"cert"`
	// Specifies the certificates-key chain to associate with the SSL profile
	Chain *string `pulumi:"chain"`
	// Specifies the cipher group for the SSL server profile. It is mutually exclusive with the argument, `ciphers`. The default value is `none`.
	CipherGroup *string `pulumi:"cipherGroup"`
	// Specifies the list of ciphers that the system supports. When creating a new profile, the default cipher list is provided by the parent profile.
	Ciphers *string `pulumi:"ciphers"`
	// The parent template of this monitor template. Once this value has been set, it cannot be changed. By default, this value is `/Common/serverssl`.
	DefaultsFrom *string `pulumi:"defaultsFrom"`
	// Response if the cert is expired (drop / ignore).
	ExpireCertResponseControl *string `pulumi:"expireCertResponseControl"`
	// full path of the profile
	FullPath *string `pulumi:"fullPath"`
	// generation
	Generation *int `pulumi:"generation"`
	// Generic alerts enabled / disabled.
	GenericAlert *string `pulumi:"genericAlert"`
	// Handshake time out (seconds)
	HandshakeTimeout *string `pulumi:"handshakeTimeout"`
	// Specifies the file name of the SSL key.
	Key *string `pulumi:"key"`
	// ModSSL Methods enabled / disabled. Default is disabled.
	ModSslMethods *string `pulumi:"modSslMethods"`
	// ModSSL Methods enabled / disabled. Default is disabled.
	Mode *string `pulumi:"mode"`
	// Specifies the name of the profile.Name of Profile should be full path,full path is the combination of the `partition + profile name`. For example `/Common/test-serverssl-profile`.
	Name string `pulumi:"name"`
	// name of partition
	Partition *string `pulumi:"partition"`
	// Client Certificate Constrained Delegation CA passphrase
	Passphrase *string `pulumi:"passphrase"`
	// Specifies the way the system handles client certificates.When ignore, specifies that the system ignores certificates from client systems.When require, specifies that the system requires a client to present a valid certificate.When request, specifies that the system requests a valid certificate from a client but always authenticate the client.
	PeerCertMode *string `pulumi:"peerCertMode"`
	// Proxy CA Cert
	ProxyCaCert *string `pulumi:"proxyCaCert"`
	// Proxy CA Key
	ProxyCaKey *string `pulumi:"proxyCaKey"`
	// Proxy SSL enabled / disabled. Default is disabled.
	ProxySsl *string `pulumi:"proxySsl"`
	// Renogotiate Period (seconds)
	RenegotiatePeriod *string `pulumi:"renegotiatePeriod"`
	// Renogotiate Size
	RenegotiateSize *string `pulumi:"renegotiateSize"`
	// Enables or disables SSL renegotiation.When creating a new profile, the setting is provided by the parent profile
	Renegotiation *string `pulumi:"renegotiation"`
	// When `true`, client certificate is retained in SSL session.
	RetainCertificate *string `pulumi:"retainCertificate"`
	// Specifies the method of secure renegotiations for SSL connections. When creating a new profile, the setting is provided by the parent profile.
	// When `request` is set the system request secure renegotation of SSL connections.
	// `require` is a default setting and when set the system permits initial SSL handshakes from clients but terminates renegotiations from unpatched clients.
	// The `require-strict` setting the system requires strict renegotiation of SSL connections. In this mode the system refuses connections to insecure servers, and terminates existing SSL connections to insecure servers
	SecureRenegotiation *string `pulumi:"secureRenegotiation"`
	// Specifies the fully qualified DNS hostname of the server used in Server Name Indication communications. When creating a new profile, the setting is provided by the parent profile.The server name can also be a wildcard string containing the asterisk `*` character.
	ServerName *string `pulumi:"serverName"`
	// Session Mirroring (enabled / disabled)
	SessionMirroring *string `pulumi:"sessionMirroring"`
	// Session Ticket (enabled / disabled)
	SessionTicket *string `pulumi:"sessionTicket"`
	// Indicates that the system uses this profile as the default SSL profile when there is no match to the server name, or when the client provides no SNI extension support.When creating a new profile, the setting is provided by the parent profile.
	// There can be only one SSL profile with this setting enabled.
	SniDefault *string `pulumi:"sniDefault"`
	// Requires that the network peers also provide SNI support, this setting only takes effect when `sniDefault` is set to `true`.When creating a new profile, the setting is provided by the parent profile
	SniRequire *string `pulumi:"sniRequire"`
	// Enables or disables SSL forward proxy bypass on receiving
	// handshake_failure, protocolVersion or unsupportedExtension alert message during the serverside SSL handshake. When enabled and there is an SSL handshake_failure, protocolVersion or unsupportedExtension alert during the serverside SSL handshake, SSL traffic bypasses the BIG-IP system untouched, without decryption/encryption. The default value is disabled. Conversely, you can specify enabled to use this feature.
	SslC3d *string `pulumi:"sslC3d"`
	// Specifies whether SSL forward proxy feature is enabled or not. The default value is disabled.
	SslForwardProxy *string `pulumi:"sslForwardProxy"`
	// Specifies whether SSL forward proxy bypass feature is enabled or not. The default value is disabled.
	SslForwardProxyBypass *string `pulumi:"sslForwardProxyBypass"`
	// SSL sign hash (any, sha1, sha256, sha384)
	SslSignHash *string `pulumi:"sslSignHash"`
	// Enables or disables the resumption of SSL sessions after an unclean shutdown.When creating a new profile, the setting is provided by the parent profile.
	StrictResume *string `pulumi:"strictResume"`
	// List of Enabled selection from a set of industry standard options for handling SSL processing.By default,
	// Don't insert empty fragments and No TLSv1.3 are listed as Enabled Options. `Usage` : tmOptions    = ["dont-insert-empty-fragments","no-tlsv1.3"]
	TmOptions []string `pulumi:"tmOptions"`
	// Unclean Shutdown (enabled / disabled)
	UncleanShutdown *string `pulumi:"uncleanShutdown"`
	// Unclean Shutdown (drop / ignore)
	UntrustedCertResponseControl *string `pulumi:"untrustedCertResponseControl"`
}

// The set of arguments for constructing a ProfileServerSsl resource.
type ProfileServerSslArgs struct {
	// Alert time out
	AlertTimeout pulumi.StringPtrInput
	// Specifies the frequency of server authentication for an SSL session.When `once`,specifies that the system authenticates the server once for an SSL session.
	// When `always`, specifies that the system authenticates the server once for an SSL session and also upon reuse of that session.
	Authenticate pulumi.StringPtrInput
	// Client certificate chain traversal depth. Default 9.
	AuthenticateDepth pulumi.IntPtrInput
	// Specifies the name of the certificate file that is used as the certification authority certificate when SSL client certificate constrained delegation is enabled. The certificate should be generated and installed by you on the system. When selecting this option, type a certificate file name.
	C3dCaCert pulumi.StringPtrInput
	// Specifies the name of the key file that is used as the certification authority key when SSL client certificate constrained delegation is enabled. The key should be generated and installed by you on the system. When selecting this option, type a key file name.
	//
	// * `c3d-ca-passphrase` (Optional) Specifies the passphrase of the key file that is used as the certification authority key when SSL client certificate constrained delegation is enabled. When selecting this option, type the passphrase corresponding to the selected c3d-ca-key.
	//
	// * `c3d-cert-extension-custom-oids` (Optional) Specifies the custom extension OID of the client certificates to be included in the generated certificates using SSL client certificate constrained delegation.
	C3dCaKey pulumi.StringPtrInput
	// CA Passphrase. Default
	C3dCaPassphrase pulumi.StringPtrInput
	// Certificate Extensions List. Default
	C3dCertExtensionCustomOids pulumi.StringArrayInput
	// Specifies the extensions of the client certificates to be included in the generated certificates using SSL client certificate constrained delegation. For example, { basic-constraints }. The default value is { basic-constraints extended-key-usage key-usage subject-alternative-name }. The extensions are:
	//
	// basic-constraints
	// Basic constraints are used to indicate whether the certificate belongs
	// to a CA.
	//
	// extended-key-usage
	// Extended Key Usage is used, typically on a leaf certificate, to
	// indicate the purpose of the public key contained in the certificate.
	//
	// key-usage
	// Key Usage provides a bitmap specifying the cryptographic operations
	// which may be performed using the public key contained in the
	// certificate; for example, it could indicate that the key should be
	// used for signature but not for encipherment.
	//
	// subject-alternative-name
	// Subject Alternative Name allows identities to be bound to the subject
	// of the certificate. These identities may be included in addition to
	// or in place of the identity in the subject field of the certificate.
	//
	// * `c3d-cert-lifespan` Specifies the lifespan of the certificate generated using the SSL client certificate constrained delegation. The default value is 24.
	C3dCertExtensionIncludes pulumi.StringArrayInput
	// Certificate Lifespan. Default
	C3dCertLifespan pulumi.IntPtrInput
	// CA Passphrase. Default enabled
	C3dCertificateExtensions pulumi.StringPtrInput
	// Client certificate file path. Default None.
	CaFile pulumi.StringPtrInput
	// Cache size (sessions).
	CacheSize pulumi.IntPtrInput
	// Cache time out
	CacheTimeout pulumi.IntPtrInput
	// Specifies the name of the certificate that the system uses for server-side SSL processing.
	Cert pulumi.StringPtrInput
	// Specifies the certificates-key chain to associate with the SSL profile
	Chain pulumi.StringPtrInput
	// Specifies the cipher group for the SSL server profile. It is mutually exclusive with the argument, `ciphers`. The default value is `none`.
	CipherGroup pulumi.StringPtrInput
	// Specifies the list of ciphers that the system supports. When creating a new profile, the default cipher list is provided by the parent profile.
	Ciphers pulumi.StringPtrInput
	// The parent template of this monitor template. Once this value has been set, it cannot be changed. By default, this value is `/Common/serverssl`.
	DefaultsFrom pulumi.StringPtrInput
	// Response if the cert is expired (drop / ignore).
	ExpireCertResponseControl pulumi.StringPtrInput
	// full path of the profile
	FullPath pulumi.StringPtrInput
	// generation
	Generation pulumi.IntPtrInput
	// Generic alerts enabled / disabled.
	GenericAlert pulumi.StringPtrInput
	// Handshake time out (seconds)
	HandshakeTimeout pulumi.StringPtrInput
	// Specifies the file name of the SSL key.
	Key pulumi.StringPtrInput
	// ModSSL Methods enabled / disabled. Default is disabled.
	ModSslMethods pulumi.StringPtrInput
	// ModSSL Methods enabled / disabled. Default is disabled.
	Mode pulumi.StringPtrInput
	// Specifies the name of the profile.Name of Profile should be full path,full path is the combination of the `partition + profile name`. For example `/Common/test-serverssl-profile`.
	Name pulumi.StringInput
	// name of partition
	Partition pulumi.StringPtrInput
	// Client Certificate Constrained Delegation CA passphrase
	Passphrase pulumi.StringPtrInput
	// Specifies the way the system handles client certificates.When ignore, specifies that the system ignores certificates from client systems.When require, specifies that the system requires a client to present a valid certificate.When request, specifies that the system requests a valid certificate from a client but always authenticate the client.
	PeerCertMode pulumi.StringPtrInput
	// Proxy CA Cert
	ProxyCaCert pulumi.StringPtrInput
	// Proxy CA Key
	ProxyCaKey pulumi.StringPtrInput
	// Proxy SSL enabled / disabled. Default is disabled.
	ProxySsl pulumi.StringPtrInput
	// Renogotiate Period (seconds)
	RenegotiatePeriod pulumi.StringPtrInput
	// Renogotiate Size
	RenegotiateSize pulumi.StringPtrInput
	// Enables or disables SSL renegotiation.When creating a new profile, the setting is provided by the parent profile
	Renegotiation pulumi.StringPtrInput
	// When `true`, client certificate is retained in SSL session.
	RetainCertificate pulumi.StringPtrInput
	// Specifies the method of secure renegotiations for SSL connections. When creating a new profile, the setting is provided by the parent profile.
	// When `request` is set the system request secure renegotation of SSL connections.
	// `require` is a default setting and when set the system permits initial SSL handshakes from clients but terminates renegotiations from unpatched clients.
	// The `require-strict` setting the system requires strict renegotiation of SSL connections. In this mode the system refuses connections to insecure servers, and terminates existing SSL connections to insecure servers
	SecureRenegotiation pulumi.StringPtrInput
	// Specifies the fully qualified DNS hostname of the server used in Server Name Indication communications. When creating a new profile, the setting is provided by the parent profile.The server name can also be a wildcard string containing the asterisk `*` character.
	ServerName pulumi.StringPtrInput
	// Session Mirroring (enabled / disabled)
	SessionMirroring pulumi.StringPtrInput
	// Session Ticket (enabled / disabled)
	SessionTicket pulumi.StringPtrInput
	// Indicates that the system uses this profile as the default SSL profile when there is no match to the server name, or when the client provides no SNI extension support.When creating a new profile, the setting is provided by the parent profile.
	// There can be only one SSL profile with this setting enabled.
	SniDefault pulumi.StringPtrInput
	// Requires that the network peers also provide SNI support, this setting only takes effect when `sniDefault` is set to `true`.When creating a new profile, the setting is provided by the parent profile
	SniRequire pulumi.StringPtrInput
	// Enables or disables SSL forward proxy bypass on receiving
	// handshake_failure, protocolVersion or unsupportedExtension alert message during the serverside SSL handshake. When enabled and there is an SSL handshake_failure, protocolVersion or unsupportedExtension alert during the serverside SSL handshake, SSL traffic bypasses the BIG-IP system untouched, without decryption/encryption. The default value is disabled. Conversely, you can specify enabled to use this feature.
	SslC3d pulumi.StringPtrInput
	// Specifies whether SSL forward proxy feature is enabled or not. The default value is disabled.
	SslForwardProxy pulumi.StringPtrInput
	// Specifies whether SSL forward proxy bypass feature is enabled or not. The default value is disabled.
	SslForwardProxyBypass pulumi.StringPtrInput
	// SSL sign hash (any, sha1, sha256, sha384)
	SslSignHash pulumi.StringPtrInput
	// Enables or disables the resumption of SSL sessions after an unclean shutdown.When creating a new profile, the setting is provided by the parent profile.
	StrictResume pulumi.StringPtrInput
	// List of Enabled selection from a set of industry standard options for handling SSL processing.By default,
	// Don't insert empty fragments and No TLSv1.3 are listed as Enabled Options. `Usage` : tmOptions    = ["dont-insert-empty-fragments","no-tlsv1.3"]
	TmOptions pulumi.StringArrayInput
	// Unclean Shutdown (enabled / disabled)
	UncleanShutdown pulumi.StringPtrInput
	// Unclean Shutdown (drop / ignore)
	UntrustedCertResponseControl pulumi.StringPtrInput
}

func (ProfileServerSslArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*profileServerSslArgs)(nil)).Elem()
}

type ProfileServerSslInput interface {
	pulumi.Input

	ToProfileServerSslOutput() ProfileServerSslOutput
	ToProfileServerSslOutputWithContext(ctx context.Context) ProfileServerSslOutput
}

func (*ProfileServerSsl) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileServerSsl)(nil)).Elem()
}

func (i *ProfileServerSsl) ToProfileServerSslOutput() ProfileServerSslOutput {
	return i.ToProfileServerSslOutputWithContext(context.Background())
}

func (i *ProfileServerSsl) ToProfileServerSslOutputWithContext(ctx context.Context) ProfileServerSslOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileServerSslOutput)
}

// ProfileServerSslArrayInput is an input type that accepts ProfileServerSslArray and ProfileServerSslArrayOutput values.
// You can construct a concrete instance of `ProfileServerSslArrayInput` via:
//
//	ProfileServerSslArray{ ProfileServerSslArgs{...} }
type ProfileServerSslArrayInput interface {
	pulumi.Input

	ToProfileServerSslArrayOutput() ProfileServerSslArrayOutput
	ToProfileServerSslArrayOutputWithContext(context.Context) ProfileServerSslArrayOutput
}

type ProfileServerSslArray []ProfileServerSslInput

func (ProfileServerSslArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProfileServerSsl)(nil)).Elem()
}

func (i ProfileServerSslArray) ToProfileServerSslArrayOutput() ProfileServerSslArrayOutput {
	return i.ToProfileServerSslArrayOutputWithContext(context.Background())
}

func (i ProfileServerSslArray) ToProfileServerSslArrayOutputWithContext(ctx context.Context) ProfileServerSslArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileServerSslArrayOutput)
}

// ProfileServerSslMapInput is an input type that accepts ProfileServerSslMap and ProfileServerSslMapOutput values.
// You can construct a concrete instance of `ProfileServerSslMapInput` via:
//
//	ProfileServerSslMap{ "key": ProfileServerSslArgs{...} }
type ProfileServerSslMapInput interface {
	pulumi.Input

	ToProfileServerSslMapOutput() ProfileServerSslMapOutput
	ToProfileServerSslMapOutputWithContext(context.Context) ProfileServerSslMapOutput
}

type ProfileServerSslMap map[string]ProfileServerSslInput

func (ProfileServerSslMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProfileServerSsl)(nil)).Elem()
}

func (i ProfileServerSslMap) ToProfileServerSslMapOutput() ProfileServerSslMapOutput {
	return i.ToProfileServerSslMapOutputWithContext(context.Background())
}

func (i ProfileServerSslMap) ToProfileServerSslMapOutputWithContext(ctx context.Context) ProfileServerSslMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileServerSslMapOutput)
}

type ProfileServerSslOutput struct{ *pulumi.OutputState }

func (ProfileServerSslOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileServerSsl)(nil)).Elem()
}

func (o ProfileServerSslOutput) ToProfileServerSslOutput() ProfileServerSslOutput {
	return o
}

func (o ProfileServerSslOutput) ToProfileServerSslOutputWithContext(ctx context.Context) ProfileServerSslOutput {
	return o
}

// Alert time out
func (o ProfileServerSslOutput) AlertTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.AlertTimeout }).(pulumi.StringOutput)
}

// Specifies the frequency of server authentication for an SSL session.When `once`,specifies that the system authenticates the server once for an SSL session.
// When `always`, specifies that the system authenticates the server once for an SSL session and also upon reuse of that session.
func (o ProfileServerSslOutput) Authenticate() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.Authenticate }).(pulumi.StringOutput)
}

// Client certificate chain traversal depth. Default 9.
func (o ProfileServerSslOutput) AuthenticateDepth() pulumi.IntOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.IntOutput { return v.AuthenticateDepth }).(pulumi.IntOutput)
}

// Specifies the name of the certificate file that is used as the certification authority certificate when SSL client certificate constrained delegation is enabled. The certificate should be generated and installed by you on the system. When selecting this option, type a certificate file name.
func (o ProfileServerSslOutput) C3dCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringPtrOutput { return v.C3dCaCert }).(pulumi.StringPtrOutput)
}

// Specifies the name of the key file that is used as the certification authority key when SSL client certificate constrained delegation is enabled. The key should be generated and installed by you on the system. When selecting this option, type a key file name.
//
// * `c3d-ca-passphrase` (Optional) Specifies the passphrase of the key file that is used as the certification authority key when SSL client certificate constrained delegation is enabled. When selecting this option, type the passphrase corresponding to the selected c3d-ca-key.
//
// * `c3d-cert-extension-custom-oids` (Optional) Specifies the custom extension OID of the client certificates to be included in the generated certificates using SSL client certificate constrained delegation.
func (o ProfileServerSslOutput) C3dCaKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringPtrOutput { return v.C3dCaKey }).(pulumi.StringPtrOutput)
}

// CA Passphrase. Default
func (o ProfileServerSslOutput) C3dCaPassphrase() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.C3dCaPassphrase }).(pulumi.StringOutput)
}

// Certificate Extensions List. Default
func (o ProfileServerSslOutput) C3dCertExtensionCustomOids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringArrayOutput { return v.C3dCertExtensionCustomOids }).(pulumi.StringArrayOutput)
}

// Specifies the extensions of the client certificates to be included in the generated certificates using SSL client certificate constrained delegation. For example, { basic-constraints }. The default value is { basic-constraints extended-key-usage key-usage subject-alternative-name }. The extensions are:
//
// basic-constraints
// Basic constraints are used to indicate whether the certificate belongs
// to a CA.
//
// extended-key-usage
// Extended Key Usage is used, typically on a leaf certificate, to
// indicate the purpose of the public key contained in the certificate.
//
// key-usage
// Key Usage provides a bitmap specifying the cryptographic operations
// which may be performed using the public key contained in the
// certificate; for example, it could indicate that the key should be
// used for signature but not for encipherment.
//
// subject-alternative-name
// Subject Alternative Name allows identities to be bound to the subject
// of the certificate. These identities may be included in addition to
// or in place of the identity in the subject field of the certificate.
//
// * `c3d-cert-lifespan` Specifies the lifespan of the certificate generated using the SSL client certificate constrained delegation. The default value is 24.
func (o ProfileServerSslOutput) C3dCertExtensionIncludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringArrayOutput { return v.C3dCertExtensionIncludes }).(pulumi.StringArrayOutput)
}

// Certificate Lifespan. Default
func (o ProfileServerSslOutput) C3dCertLifespan() pulumi.IntOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.IntOutput { return v.C3dCertLifespan }).(pulumi.IntOutput)
}

// CA Passphrase. Default enabled
func (o ProfileServerSslOutput) C3dCertificateExtensions() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.C3dCertificateExtensions }).(pulumi.StringOutput)
}

// Client certificate file path. Default None.
func (o ProfileServerSslOutput) CaFile() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.CaFile }).(pulumi.StringOutput)
}

// Cache size (sessions).
func (o ProfileServerSslOutput) CacheSize() pulumi.IntOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.IntOutput { return v.CacheSize }).(pulumi.IntOutput)
}

// Cache time out
func (o ProfileServerSslOutput) CacheTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.IntOutput { return v.CacheTimeout }).(pulumi.IntOutput)
}

// Specifies the name of the certificate that the system uses for server-side SSL processing.
func (o ProfileServerSslOutput) Cert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringPtrOutput { return v.Cert }).(pulumi.StringPtrOutput)
}

// Specifies the certificates-key chain to associate with the SSL profile
func (o ProfileServerSslOutput) Chain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringPtrOutput { return v.Chain }).(pulumi.StringPtrOutput)
}

// Specifies the cipher group for the SSL server profile. It is mutually exclusive with the argument, `ciphers`. The default value is `none`.
func (o ProfileServerSslOutput) CipherGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringPtrOutput { return v.CipherGroup }).(pulumi.StringPtrOutput)
}

// Specifies the list of ciphers that the system supports. When creating a new profile, the default cipher list is provided by the parent profile.
func (o ProfileServerSslOutput) Ciphers() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.Ciphers }).(pulumi.StringOutput)
}

// The parent template of this monitor template. Once this value has been set, it cannot be changed. By default, this value is `/Common/serverssl`.
func (o ProfileServerSslOutput) DefaultsFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringPtrOutput { return v.DefaultsFrom }).(pulumi.StringPtrOutput)
}

// Response if the cert is expired (drop / ignore).
func (o ProfileServerSslOutput) ExpireCertResponseControl() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.ExpireCertResponseControl }).(pulumi.StringOutput)
}

// full path of the profile
func (o ProfileServerSslOutput) FullPath() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.FullPath }).(pulumi.StringOutput)
}

// generation
func (o ProfileServerSslOutput) Generation() pulumi.IntOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.IntOutput { return v.Generation }).(pulumi.IntOutput)
}

// Generic alerts enabled / disabled.
func (o ProfileServerSslOutput) GenericAlert() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.GenericAlert }).(pulumi.StringOutput)
}

// Handshake time out (seconds)
func (o ProfileServerSslOutput) HandshakeTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.HandshakeTimeout }).(pulumi.StringOutput)
}

// Specifies the file name of the SSL key.
func (o ProfileServerSslOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringPtrOutput { return v.Key }).(pulumi.StringPtrOutput)
}

// ModSSL Methods enabled / disabled. Default is disabled.
func (o ProfileServerSslOutput) ModSslMethods() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.ModSslMethods }).(pulumi.StringOutput)
}

// ModSSL Methods enabled / disabled. Default is disabled.
func (o ProfileServerSslOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// Specifies the name of the profile.Name of Profile should be full path,full path is the combination of the `partition + profile name`. For example `/Common/test-serverssl-profile`.
func (o ProfileServerSslOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// name of partition
func (o ProfileServerSslOutput) Partition() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.Partition }).(pulumi.StringOutput)
}

// Client Certificate Constrained Delegation CA passphrase
func (o ProfileServerSslOutput) Passphrase() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.Passphrase }).(pulumi.StringOutput)
}

// Specifies the way the system handles client certificates.When ignore, specifies that the system ignores certificates from client systems.When require, specifies that the system requires a client to present a valid certificate.When request, specifies that the system requests a valid certificate from a client but always authenticate the client.
func (o ProfileServerSslOutput) PeerCertMode() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.PeerCertMode }).(pulumi.StringOutput)
}

// Proxy CA Cert
func (o ProfileServerSslOutput) ProxyCaCert() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.ProxyCaCert }).(pulumi.StringOutput)
}

// Proxy CA Key
func (o ProfileServerSslOutput) ProxyCaKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.ProxyCaKey }).(pulumi.StringOutput)
}

// Proxy SSL enabled / disabled. Default is disabled.
func (o ProfileServerSslOutput) ProxySsl() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.ProxySsl }).(pulumi.StringOutput)
}

// Renogotiate Period (seconds)
func (o ProfileServerSslOutput) RenegotiatePeriod() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.RenegotiatePeriod }).(pulumi.StringOutput)
}

// Renogotiate Size
func (o ProfileServerSslOutput) RenegotiateSize() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.RenegotiateSize }).(pulumi.StringOutput)
}

// Enables or disables SSL renegotiation.When creating a new profile, the setting is provided by the parent profile
func (o ProfileServerSslOutput) Renegotiation() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.Renegotiation }).(pulumi.StringOutput)
}

// When `true`, client certificate is retained in SSL session.
func (o ProfileServerSslOutput) RetainCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.RetainCertificate }).(pulumi.StringOutput)
}

// Specifies the method of secure renegotiations for SSL connections. When creating a new profile, the setting is provided by the parent profile.
// When `request` is set the system request secure renegotation of SSL connections.
// `require` is a default setting and when set the system permits initial SSL handshakes from clients but terminates renegotiations from unpatched clients.
// The `require-strict` setting the system requires strict renegotiation of SSL connections. In this mode the system refuses connections to insecure servers, and terminates existing SSL connections to insecure servers
func (o ProfileServerSslOutput) SecureRenegotiation() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.SecureRenegotiation }).(pulumi.StringOutput)
}

// Specifies the fully qualified DNS hostname of the server used in Server Name Indication communications. When creating a new profile, the setting is provided by the parent profile.The server name can also be a wildcard string containing the asterisk `*` character.
func (o ProfileServerSslOutput) ServerName() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.ServerName }).(pulumi.StringOutput)
}

// Session Mirroring (enabled / disabled)
func (o ProfileServerSslOutput) SessionMirroring() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.SessionMirroring }).(pulumi.StringOutput)
}

// Session Ticket (enabled / disabled)
func (o ProfileServerSslOutput) SessionTicket() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.SessionTicket }).(pulumi.StringOutput)
}

// Indicates that the system uses this profile as the default SSL profile when there is no match to the server name, or when the client provides no SNI extension support.When creating a new profile, the setting is provided by the parent profile.
// There can be only one SSL profile with this setting enabled.
func (o ProfileServerSslOutput) SniDefault() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.SniDefault }).(pulumi.StringOutput)
}

// Requires that the network peers also provide SNI support, this setting only takes effect when `sniDefault` is set to `true`.When creating a new profile, the setting is provided by the parent profile
func (o ProfileServerSslOutput) SniRequire() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.SniRequire }).(pulumi.StringOutput)
}

// Enables or disables SSL forward proxy bypass on receiving
// handshake_failure, protocolVersion or unsupportedExtension alert message during the serverside SSL handshake. When enabled and there is an SSL handshake_failure, protocolVersion or unsupportedExtension alert during the serverside SSL handshake, SSL traffic bypasses the BIG-IP system untouched, without decryption/encryption. The default value is disabled. Conversely, you can specify enabled to use this feature.
func (o ProfileServerSslOutput) SslC3d() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringPtrOutput { return v.SslC3d }).(pulumi.StringPtrOutput)
}

// Specifies whether SSL forward proxy feature is enabled or not. The default value is disabled.
func (o ProfileServerSslOutput) SslForwardProxy() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.SslForwardProxy }).(pulumi.StringOutput)
}

// Specifies whether SSL forward proxy bypass feature is enabled or not. The default value is disabled.
func (o ProfileServerSslOutput) SslForwardProxyBypass() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.SslForwardProxyBypass }).(pulumi.StringOutput)
}

// SSL sign hash (any, sha1, sha256, sha384)
func (o ProfileServerSslOutput) SslSignHash() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.SslSignHash }).(pulumi.StringOutput)
}

// Enables or disables the resumption of SSL sessions after an unclean shutdown.When creating a new profile, the setting is provided by the parent profile.
func (o ProfileServerSslOutput) StrictResume() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.StrictResume }).(pulumi.StringOutput)
}

// List of Enabled selection from a set of industry standard options for handling SSL processing.By default,
// Don't insert empty fragments and No TLSv1.3 are listed as Enabled Options. `Usage` : tmOptions    = ["dont-insert-empty-fragments","no-tlsv1.3"]
func (o ProfileServerSslOutput) TmOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringArrayOutput { return v.TmOptions }).(pulumi.StringArrayOutput)
}

// Unclean Shutdown (enabled / disabled)
func (o ProfileServerSslOutput) UncleanShutdown() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.UncleanShutdown }).(pulumi.StringOutput)
}

// Unclean Shutdown (drop / ignore)
func (o ProfileServerSslOutput) UntrustedCertResponseControl() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileServerSsl) pulumi.StringOutput { return v.UntrustedCertResponseControl }).(pulumi.StringOutput)
}

type ProfileServerSslArrayOutput struct{ *pulumi.OutputState }

func (ProfileServerSslArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProfileServerSsl)(nil)).Elem()
}

func (o ProfileServerSslArrayOutput) ToProfileServerSslArrayOutput() ProfileServerSslArrayOutput {
	return o
}

func (o ProfileServerSslArrayOutput) ToProfileServerSslArrayOutputWithContext(ctx context.Context) ProfileServerSslArrayOutput {
	return o
}

func (o ProfileServerSslArrayOutput) Index(i pulumi.IntInput) ProfileServerSslOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProfileServerSsl {
		return vs[0].([]*ProfileServerSsl)[vs[1].(int)]
	}).(ProfileServerSslOutput)
}

type ProfileServerSslMapOutput struct{ *pulumi.OutputState }

func (ProfileServerSslMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProfileServerSsl)(nil)).Elem()
}

func (o ProfileServerSslMapOutput) ToProfileServerSslMapOutput() ProfileServerSslMapOutput {
	return o
}

func (o ProfileServerSslMapOutput) ToProfileServerSslMapOutputWithContext(ctx context.Context) ProfileServerSslMapOutput {
	return o
}

func (o ProfileServerSslMapOutput) MapIndex(k pulumi.StringInput) ProfileServerSslOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProfileServerSsl {
		return vs[0].(map[string]*ProfileServerSsl)[vs[1].(string)]
	}).(ProfileServerSslOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileServerSslInput)(nil)).Elem(), &ProfileServerSsl{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileServerSslArrayInput)(nil)).Elem(), ProfileServerSslArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileServerSslMapInput)(nil)).Elem(), ProfileServerSslMap{})
	pulumi.RegisterOutputType(ProfileServerSslOutput{})
	pulumi.RegisterOutputType(ProfileServerSslArrayOutput{})
	pulumi.RegisterOutputType(ProfileServerSslMapOutput{})
}
