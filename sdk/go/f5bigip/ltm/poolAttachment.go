// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ltm

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// `bigip_ltm_pool_attachment` Manages nodes membership in pools
// 
// Resources should be named with their "full path". The full path is the combination of the partition + name of the resource. For example /Common/my-pool.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-bigip/blob/master/website/docs/r/ltm_pool_attachment.html.markdown.
type PoolAttachment struct {
	s *pulumi.ResourceState
}

// NewPoolAttachment registers a new resource with the given unique name, arguments, and options.
func NewPoolAttachment(ctx *pulumi.Context,
	name string, args *PoolAttachmentArgs, opts ...pulumi.ResourceOpt) (*PoolAttachment, error) {
	if args == nil || args.Node == nil {
		return nil, errors.New("missing required argument 'Node'")
	}
	if args == nil || args.Pool == nil {
		return nil, errors.New("missing required argument 'Pool'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["node"] = nil
		inputs["pool"] = nil
	} else {
		inputs["node"] = args.Node
		inputs["pool"] = args.Pool
	}
	s, err := ctx.RegisterResource("f5bigip:ltm/poolAttachment:PoolAttachment", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &PoolAttachment{s: s}, nil
}

// GetPoolAttachment gets an existing PoolAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPoolAttachment(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PoolAttachmentState, opts ...pulumi.ResourceOpt) (*PoolAttachment, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["node"] = state.Node
		inputs["pool"] = state.Pool
	}
	s, err := ctx.ReadResource("f5bigip:ltm/poolAttachment:PoolAttachment", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &PoolAttachment{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *PoolAttachment) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *PoolAttachment) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Node to add to the pool in /Partition/NodeName:Port format (e.g. /Common/Node01:80)
func (r *PoolAttachment) Node() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["node"])
}

// Name of the pool in /Partition/Name format
func (r *PoolAttachment) Pool() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["pool"])
}

// Input properties used for looking up and filtering PoolAttachment resources.
type PoolAttachmentState struct {
	// Node to add to the pool in /Partition/NodeName:Port format (e.g. /Common/Node01:80)
	Node interface{}
	// Name of the pool in /Partition/Name format
	Pool interface{}
}

// The set of arguments for constructing a PoolAttachment resource.
type PoolAttachmentArgs struct {
	// Node to add to the pool in /Partition/NodeName:Port format (e.g. /Common/Node01:80)
	Node interface{}
	// Name of the pool in /Partition/Name format
	Pool interface{}
}
