// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ltm

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `ltm.ProfileFtp` Configures a custom profile_ftp.
//
// Resources should be named with their "full path". The full path is the combination of the partition + name (example: /Common/my-pool ) or  partition + directory + name of the resource  (example: /Common/test/my-pool )
//
// ## Example Usage
// ### For Bigip versions (14.x - 16.x)
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-f5bigip/sdk/v3/go/f5bigip/ltm"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ltm.NewProfileFtp(ctx, "sanjose_ftp_profile", &ltm.ProfileFtpArgs{
// 			AllowActiveMode:        pulumi.String("enabled"),
// 			DefaultsFrom:           pulumi.String("/Common/ftp"),
// 			Description:            pulumi.String("test-tftp-profile"),
// 			EnforceTlssessionReuse: pulumi.String("enabled"),
// 			FtpsMode:               pulumi.String("allow"),
// 			Name:                   pulumi.String("/Common/sanjose-ftp-profile"),
// 			Port:                   pulumi.Int(2020),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### For Bigip versions (12.x - 13.x)
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-f5bigip/sdk/v3/go/f5bigip/ltm"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ltm.NewProfileFtp(ctx, "sanjose_ftp_profile", &ltm.ProfileFtpArgs{
// 			AllowFtps:         pulumi.String("enabled"),
// 			DefaultsFrom:      pulumi.String("/Common/ftp"),
// 			Description:       pulumi.String("test-tftp-profile"),
// 			Name:              pulumi.String("/Common/sanjose-ftp-profile"),
// 			Port:              pulumi.Int(2020),
// 			TranslateExtended: pulumi.String("enabled"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Common Arguments for all versions
//
// * `security` - (Optional)Specifies, when checked (enabled), that the system inspects FTP traffic for security vulnerabilities using an FTP security profile. This option is available only on systems licensed for BIG-IP ASM.
//
// * `port` - (Optional)Allows you to configure the FTP service to run on an alternate port. The default is 20.
//
// * `logProfile` - (Optional)Configures the ALG log profile that controls logging
//
// * `logPublisher` - (Optional)Configures the log publisher that handles events logging for this profile
//
// *  `inheritParentProfile` - (Optional)Enables the FTP data channel to inherit the TCP profile used by the control channel.If disabled,the data channel uses FastL4 only.
//
// * `description` - (Optional)User defined description for FTP profile
type ProfileFtp struct {
	pulumi.CustomResourceState

	// Specifies, when selected (enabled), that the system allows FTP Active Transfer mode. The default value is enabled
	AllowActiveMode pulumi.StringPtrOutput `pulumi:"allowActiveMode"`
	// Allow explicit FTPS negotiation. The default is disabled.When enabled (selected), that the system allows explicit FTPS negotiation for SSL or TLS.
	AllowFtps pulumi.StringPtrOutput `pulumi:"allowFtps"`
	// The application service to which the object belongs.
	AppService pulumi.StringPtrOutput `pulumi:"appService"`
	// Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
	DefaultsFrom pulumi.StringOutput `pulumi:"defaultsFrom"`
	// User defined description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies, when selected (enabled), that the system enforces the data connection to reuse a TLS session. The default value is unchecked (disabled)
	EnforceTlssessionReuse pulumi.StringPtrOutput `pulumi:"enforceTlssessionReuse"`
	// Specifies if you want to Disallow, Allow, or Require FTPS mode. The default is Disallow
	FtpsMode pulumi.StringPtrOutput `pulumi:"ftpsMode"`
	// Enables the FTP data channel to inherit the TCP profile used by the control channel.If disabled,the data channel uses
	// FastL4 only.
	InheritParentProfile pulumi.StringPtrOutput `pulumi:"inheritParentProfile"`
	// inherent vlan list
	InheritVlanList pulumi.StringPtrOutput `pulumi:"inheritVlanList"`
	// Configures the ALG log profile that controls logging
	LogProfile pulumi.StringOutput `pulumi:"logProfile"`
	// Configures the log publisher that handles events logging for this profile
	LogPublisher pulumi.StringOutput `pulumi:"logPublisher"`
	// Name of the profile_ftp
	Name pulumi.StringOutput `pulumi:"name"`
	// Displays the administrative partition within which this profile resides
	Partition pulumi.StringOutput `pulumi:"partition"`
	// Specifies a service for the data channel port used for this FTP profile. The default port is ftp-data.
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// Enables secure FTP traffic for the BIG-IP Application Security Manager. You can set the security option only if the
	// system is licensed for the BIG-IP Application Security Manager. The default value is disabled.
	Security pulumi.StringOutput `pulumi:"security"`
	// Specifies, when selected (enabled), that the system uses ensures compatibility between IP version 4 and IP version 6 clients and servers when using the FTP protocol. The default is selected (enabled).
	TranslateExtended pulumi.StringPtrOutput `pulumi:"translateExtended"`
}

// NewProfileFtp registers a new resource with the given unique name, arguments, and options.
func NewProfileFtp(ctx *pulumi.Context,
	name string, args *ProfileFtpArgs, opts ...pulumi.ResourceOption) (*ProfileFtp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	var resource ProfileFtp
	err := ctx.RegisterResource("f5bigip:ltm/profileFtp:ProfileFtp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProfileFtp gets an existing ProfileFtp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProfileFtp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProfileFtpState, opts ...pulumi.ResourceOption) (*ProfileFtp, error) {
	var resource ProfileFtp
	err := ctx.ReadResource("f5bigip:ltm/profileFtp:ProfileFtp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProfileFtp resources.
type profileFtpState struct {
	// Specifies, when selected (enabled), that the system allows FTP Active Transfer mode. The default value is enabled
	AllowActiveMode *string `pulumi:"allowActiveMode"`
	// Allow explicit FTPS negotiation. The default is disabled.When enabled (selected), that the system allows explicit FTPS negotiation for SSL or TLS.
	AllowFtps *string `pulumi:"allowFtps"`
	// The application service to which the object belongs.
	AppService *string `pulumi:"appService"`
	// Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
	DefaultsFrom *string `pulumi:"defaultsFrom"`
	// User defined description
	Description *string `pulumi:"description"`
	// Specifies, when selected (enabled), that the system enforces the data connection to reuse a TLS session. The default value is unchecked (disabled)
	EnforceTlssessionReuse *string `pulumi:"enforceTlssessionReuse"`
	// Specifies if you want to Disallow, Allow, or Require FTPS mode. The default is Disallow
	FtpsMode *string `pulumi:"ftpsMode"`
	// Enables the FTP data channel to inherit the TCP profile used by the control channel.If disabled,the data channel uses
	// FastL4 only.
	InheritParentProfile *string `pulumi:"inheritParentProfile"`
	// inherent vlan list
	InheritVlanList *string `pulumi:"inheritVlanList"`
	// Configures the ALG log profile that controls logging
	LogProfile *string `pulumi:"logProfile"`
	// Configures the log publisher that handles events logging for this profile
	LogPublisher *string `pulumi:"logPublisher"`
	// Name of the profile_ftp
	Name *string `pulumi:"name"`
	// Displays the administrative partition within which this profile resides
	Partition *string `pulumi:"partition"`
	// Specifies a service for the data channel port used for this FTP profile. The default port is ftp-data.
	Port *int `pulumi:"port"`
	// Enables secure FTP traffic for the BIG-IP Application Security Manager. You can set the security option only if the
	// system is licensed for the BIG-IP Application Security Manager. The default value is disabled.
	Security *string `pulumi:"security"`
	// Specifies, when selected (enabled), that the system uses ensures compatibility between IP version 4 and IP version 6 clients and servers when using the FTP protocol. The default is selected (enabled).
	TranslateExtended *string `pulumi:"translateExtended"`
}

type ProfileFtpState struct {
	// Specifies, when selected (enabled), that the system allows FTP Active Transfer mode. The default value is enabled
	AllowActiveMode pulumi.StringPtrInput
	// Allow explicit FTPS negotiation. The default is disabled.When enabled (selected), that the system allows explicit FTPS negotiation for SSL or TLS.
	AllowFtps pulumi.StringPtrInput
	// The application service to which the object belongs.
	AppService pulumi.StringPtrInput
	// Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
	DefaultsFrom pulumi.StringPtrInput
	// User defined description
	Description pulumi.StringPtrInput
	// Specifies, when selected (enabled), that the system enforces the data connection to reuse a TLS session. The default value is unchecked (disabled)
	EnforceTlssessionReuse pulumi.StringPtrInput
	// Specifies if you want to Disallow, Allow, or Require FTPS mode. The default is Disallow
	FtpsMode pulumi.StringPtrInput
	// Enables the FTP data channel to inherit the TCP profile used by the control channel.If disabled,the data channel uses
	// FastL4 only.
	InheritParentProfile pulumi.StringPtrInput
	// inherent vlan list
	InheritVlanList pulumi.StringPtrInput
	// Configures the ALG log profile that controls logging
	LogProfile pulumi.StringPtrInput
	// Configures the log publisher that handles events logging for this profile
	LogPublisher pulumi.StringPtrInput
	// Name of the profile_ftp
	Name pulumi.StringPtrInput
	// Displays the administrative partition within which this profile resides
	Partition pulumi.StringPtrInput
	// Specifies a service for the data channel port used for this FTP profile. The default port is ftp-data.
	Port pulumi.IntPtrInput
	// Enables secure FTP traffic for the BIG-IP Application Security Manager. You can set the security option only if the
	// system is licensed for the BIG-IP Application Security Manager. The default value is disabled.
	Security pulumi.StringPtrInput
	// Specifies, when selected (enabled), that the system uses ensures compatibility between IP version 4 and IP version 6 clients and servers when using the FTP protocol. The default is selected (enabled).
	TranslateExtended pulumi.StringPtrInput
}

func (ProfileFtpState) ElementType() reflect.Type {
	return reflect.TypeOf((*profileFtpState)(nil)).Elem()
}

type profileFtpArgs struct {
	// Specifies, when selected (enabled), that the system allows FTP Active Transfer mode. The default value is enabled
	AllowActiveMode *string `pulumi:"allowActiveMode"`
	// Allow explicit FTPS negotiation. The default is disabled.When enabled (selected), that the system allows explicit FTPS negotiation for SSL or TLS.
	AllowFtps *string `pulumi:"allowFtps"`
	// The application service to which the object belongs.
	AppService *string `pulumi:"appService"`
	// Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
	DefaultsFrom *string `pulumi:"defaultsFrom"`
	// User defined description
	Description *string `pulumi:"description"`
	// Specifies, when selected (enabled), that the system enforces the data connection to reuse a TLS session. The default value is unchecked (disabled)
	EnforceTlssessionReuse *string `pulumi:"enforceTlssessionReuse"`
	// Specifies if you want to Disallow, Allow, or Require FTPS mode. The default is Disallow
	FtpsMode *string `pulumi:"ftpsMode"`
	// Enables the FTP data channel to inherit the TCP profile used by the control channel.If disabled,the data channel uses
	// FastL4 only.
	InheritParentProfile *string `pulumi:"inheritParentProfile"`
	// inherent vlan list
	InheritVlanList *string `pulumi:"inheritVlanList"`
	// Configures the ALG log profile that controls logging
	LogProfile *string `pulumi:"logProfile"`
	// Configures the log publisher that handles events logging for this profile
	LogPublisher *string `pulumi:"logPublisher"`
	// Name of the profile_ftp
	Name string `pulumi:"name"`
	// Displays the administrative partition within which this profile resides
	Partition *string `pulumi:"partition"`
	// Specifies a service for the data channel port used for this FTP profile. The default port is ftp-data.
	Port *int `pulumi:"port"`
	// Enables secure FTP traffic for the BIG-IP Application Security Manager. You can set the security option only if the
	// system is licensed for the BIG-IP Application Security Manager. The default value is disabled.
	Security *string `pulumi:"security"`
	// Specifies, when selected (enabled), that the system uses ensures compatibility between IP version 4 and IP version 6 clients and servers when using the FTP protocol. The default is selected (enabled).
	TranslateExtended *string `pulumi:"translateExtended"`
}

// The set of arguments for constructing a ProfileFtp resource.
type ProfileFtpArgs struct {
	// Specifies, when selected (enabled), that the system allows FTP Active Transfer mode. The default value is enabled
	AllowActiveMode pulumi.StringPtrInput
	// Allow explicit FTPS negotiation. The default is disabled.When enabled (selected), that the system allows explicit FTPS negotiation for SSL or TLS.
	AllowFtps pulumi.StringPtrInput
	// The application service to which the object belongs.
	AppService pulumi.StringPtrInput
	// Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
	DefaultsFrom pulumi.StringPtrInput
	// User defined description
	Description pulumi.StringPtrInput
	// Specifies, when selected (enabled), that the system enforces the data connection to reuse a TLS session. The default value is unchecked (disabled)
	EnforceTlssessionReuse pulumi.StringPtrInput
	// Specifies if you want to Disallow, Allow, or Require FTPS mode. The default is Disallow
	FtpsMode pulumi.StringPtrInput
	// Enables the FTP data channel to inherit the TCP profile used by the control channel.If disabled,the data channel uses
	// FastL4 only.
	InheritParentProfile pulumi.StringPtrInput
	// inherent vlan list
	InheritVlanList pulumi.StringPtrInput
	// Configures the ALG log profile that controls logging
	LogProfile pulumi.StringPtrInput
	// Configures the log publisher that handles events logging for this profile
	LogPublisher pulumi.StringPtrInput
	// Name of the profile_ftp
	Name pulumi.StringInput
	// Displays the administrative partition within which this profile resides
	Partition pulumi.StringPtrInput
	// Specifies a service for the data channel port used for this FTP profile. The default port is ftp-data.
	Port pulumi.IntPtrInput
	// Enables secure FTP traffic for the BIG-IP Application Security Manager. You can set the security option only if the
	// system is licensed for the BIG-IP Application Security Manager. The default value is disabled.
	Security pulumi.StringPtrInput
	// Specifies, when selected (enabled), that the system uses ensures compatibility between IP version 4 and IP version 6 clients and servers when using the FTP protocol. The default is selected (enabled).
	TranslateExtended pulumi.StringPtrInput
}

func (ProfileFtpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*profileFtpArgs)(nil)).Elem()
}

type ProfileFtpInput interface {
	pulumi.Input

	ToProfileFtpOutput() ProfileFtpOutput
	ToProfileFtpOutputWithContext(ctx context.Context) ProfileFtpOutput
}

func (*ProfileFtp) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileFtp)(nil))
}

func (i *ProfileFtp) ToProfileFtpOutput() ProfileFtpOutput {
	return i.ToProfileFtpOutputWithContext(context.Background())
}

func (i *ProfileFtp) ToProfileFtpOutputWithContext(ctx context.Context) ProfileFtpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileFtpOutput)
}

func (i *ProfileFtp) ToProfileFtpPtrOutput() ProfileFtpPtrOutput {
	return i.ToProfileFtpPtrOutputWithContext(context.Background())
}

func (i *ProfileFtp) ToProfileFtpPtrOutputWithContext(ctx context.Context) ProfileFtpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileFtpPtrOutput)
}

type ProfileFtpPtrInput interface {
	pulumi.Input

	ToProfileFtpPtrOutput() ProfileFtpPtrOutput
	ToProfileFtpPtrOutputWithContext(ctx context.Context) ProfileFtpPtrOutput
}

type profileFtpPtrType ProfileFtpArgs

func (*profileFtpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileFtp)(nil))
}

func (i *profileFtpPtrType) ToProfileFtpPtrOutput() ProfileFtpPtrOutput {
	return i.ToProfileFtpPtrOutputWithContext(context.Background())
}

func (i *profileFtpPtrType) ToProfileFtpPtrOutputWithContext(ctx context.Context) ProfileFtpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileFtpPtrOutput)
}

// ProfileFtpArrayInput is an input type that accepts ProfileFtpArray and ProfileFtpArrayOutput values.
// You can construct a concrete instance of `ProfileFtpArrayInput` via:
//
//          ProfileFtpArray{ ProfileFtpArgs{...} }
type ProfileFtpArrayInput interface {
	pulumi.Input

	ToProfileFtpArrayOutput() ProfileFtpArrayOutput
	ToProfileFtpArrayOutputWithContext(context.Context) ProfileFtpArrayOutput
}

type ProfileFtpArray []ProfileFtpInput

func (ProfileFtpArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*ProfileFtp)(nil))
}

func (i ProfileFtpArray) ToProfileFtpArrayOutput() ProfileFtpArrayOutput {
	return i.ToProfileFtpArrayOutputWithContext(context.Background())
}

func (i ProfileFtpArray) ToProfileFtpArrayOutputWithContext(ctx context.Context) ProfileFtpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileFtpArrayOutput)
}

// ProfileFtpMapInput is an input type that accepts ProfileFtpMap and ProfileFtpMapOutput values.
// You can construct a concrete instance of `ProfileFtpMapInput` via:
//
//          ProfileFtpMap{ "key": ProfileFtpArgs{...} }
type ProfileFtpMapInput interface {
	pulumi.Input

	ToProfileFtpMapOutput() ProfileFtpMapOutput
	ToProfileFtpMapOutputWithContext(context.Context) ProfileFtpMapOutput
}

type ProfileFtpMap map[string]ProfileFtpInput

func (ProfileFtpMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*ProfileFtp)(nil))
}

func (i ProfileFtpMap) ToProfileFtpMapOutput() ProfileFtpMapOutput {
	return i.ToProfileFtpMapOutputWithContext(context.Background())
}

func (i ProfileFtpMap) ToProfileFtpMapOutputWithContext(ctx context.Context) ProfileFtpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileFtpMapOutput)
}

type ProfileFtpOutput struct {
	*pulumi.OutputState
}

func (ProfileFtpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileFtp)(nil))
}

func (o ProfileFtpOutput) ToProfileFtpOutput() ProfileFtpOutput {
	return o
}

func (o ProfileFtpOutput) ToProfileFtpOutputWithContext(ctx context.Context) ProfileFtpOutput {
	return o
}

func (o ProfileFtpOutput) ToProfileFtpPtrOutput() ProfileFtpPtrOutput {
	return o.ToProfileFtpPtrOutputWithContext(context.Background())
}

func (o ProfileFtpOutput) ToProfileFtpPtrOutputWithContext(ctx context.Context) ProfileFtpPtrOutput {
	return o.ApplyT(func(v ProfileFtp) *ProfileFtp {
		return &v
	}).(ProfileFtpPtrOutput)
}

type ProfileFtpPtrOutput struct {
	*pulumi.OutputState
}

func (ProfileFtpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileFtp)(nil))
}

func (o ProfileFtpPtrOutput) ToProfileFtpPtrOutput() ProfileFtpPtrOutput {
	return o
}

func (o ProfileFtpPtrOutput) ToProfileFtpPtrOutputWithContext(ctx context.Context) ProfileFtpPtrOutput {
	return o
}

type ProfileFtpArrayOutput struct{ *pulumi.OutputState }

func (ProfileFtpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileFtp)(nil))
}

func (o ProfileFtpArrayOutput) ToProfileFtpArrayOutput() ProfileFtpArrayOutput {
	return o
}

func (o ProfileFtpArrayOutput) ToProfileFtpArrayOutputWithContext(ctx context.Context) ProfileFtpArrayOutput {
	return o
}

func (o ProfileFtpArrayOutput) Index(i pulumi.IntInput) ProfileFtpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProfileFtp {
		return vs[0].([]ProfileFtp)[vs[1].(int)]
	}).(ProfileFtpOutput)
}

type ProfileFtpMapOutput struct{ *pulumi.OutputState }

func (ProfileFtpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ProfileFtp)(nil))
}

func (o ProfileFtpMapOutput) ToProfileFtpMapOutput() ProfileFtpMapOutput {
	return o
}

func (o ProfileFtpMapOutput) ToProfileFtpMapOutputWithContext(ctx context.Context) ProfileFtpMapOutput {
	return o
}

func (o ProfileFtpMapOutput) MapIndex(k pulumi.StringInput) ProfileFtpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ProfileFtp {
		return vs[0].(map[string]ProfileFtp)[vs[1].(string)]
	}).(ProfileFtpOutput)
}

func init() {
	pulumi.RegisterOutputType(ProfileFtpOutput{})
	pulumi.RegisterOutputType(ProfileFtpPtrOutput{})
	pulumi.RegisterOutputType(ProfileFtpArrayOutput{})
	pulumi.RegisterOutputType(ProfileFtpMapOutput{})
}
