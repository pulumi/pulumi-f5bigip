// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ltm

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `ltm.ProfileHttp` Configures a custom profileHttp for use by health checks.
//
// For resources should be named with their "full path". The full path is the combination of the partition + name of the resource. For example /Common/my-pool.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-f5bigip/sdk/v3/go/f5bigip/ltm"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := ltm.NewProfileHttp(ctx, "sanjose_http", &ltm.ProfileHttpArgs{
// 			DefaultsFrom: pulumi.String("/Common/http"),
// 			FallbackHost: pulumi.String("titanic"),
// 			FallbackStatusCodes: pulumi.StringArray{
// 				pulumi.String("400"),
// 				pulumi.String("500"),
// 				pulumi.String("300"),
// 			},
// 			Name: pulumi.String("/Common/sanjose-http"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// BIG-IP LTM http profiles can be imported using the `name`, e.g. bash
//
// ```sh
//  $ pulumi import f5bigip:ltm/profileHttp:ProfileHttp test-http /Common/test-http
// ```
type ProfileHttp struct {
	pulumi.CustomResourceState

	// Enables or disables trusting the client IP address, and statistics from the client IP address, based on the request's XFF (X-forwarded-for) headers, if they exist.
	AcceptXff pulumi.StringOutput `pulumi:"acceptXff"`
	// The application service to which the object belongs.
	AppService pulumi.StringPtrOutput `pulumi:"appService"`
	// Specifies a quoted string for the basic authentication realm. The system sends this string to a client whenever authorization fails. The default value is `none`
	BasicAuthRealm pulumi.StringOutput `pulumi:"basicAuthRealm"`
	// Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
	DefaultsFrom pulumi.StringOutput `pulumi:"defaultsFrom"`
	// Specifies user-defined description.
	Description pulumi.StringOutput `pulumi:"description"`
	// Type a passphrase for cookie encryption.
	EncryptCookieSecret pulumi.StringPtrOutput `pulumi:"encryptCookieSecret"`
	// Type the cookie names for the system to encrypt.
	EncryptCookies pulumi.StringArrayOutput `pulumi:"encryptCookies"`
	// Specifies an HTTP fallback host. HTTP redirection allows you to redirect HTTP traffic to another protocol identifier, host name, port number
	FallbackHost pulumi.StringOutput `pulumi:"fallbackHost"`
	// Specifies one or more three-digit status codes that can be returned by an HTTP server,that should trigger a redirection to the fallback host.
	FallbackStatusCodes pulumi.StringArrayOutput `pulumi:"fallbackStatusCodes"`
	// Specifies the header string that you want to erase from an HTTP request. Default is `none`.
	HeadErase pulumi.StringOutput `pulumi:"headErase"`
	// Specifies a quoted header string that you want to insert into an HTTP request.Default is `none`.
	HeadInsert pulumi.StringOutput `pulumi:"headInsert"`
	// Specifies, when enabled, that the system inserts an X-Forwarded-For header in an HTTP request with the client IP address, to use with connection pooling. The default is `Disabled`.
	InsertXforwardedFor pulumi.StringOutput `pulumi:"insertXforwardedFor"`
	// Specifies the linear white space (LWS) separator that the system inserts when a header exceeds the maximum width you
	// specify in the LWS Maximum Columns setting.
	LwsSeparator pulumi.StringOutput `pulumi:"lwsSeparator"`
	// Specifies the linear white space (LWS) separator that the system inserts when a header exceeds the maximum width you specify in the LWS Maximum Columns setting.
	LwsWidth pulumi.IntOutput `pulumi:"lwsWidth"`
	// Specifies the name of the http profile,name of Profile should be full path. Full path is the combination of the `partition + profile name`,For example `/Common/test-http-profile`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enables the system to perform HTTP header transformations for the purpose of  keeping server-side connections open. This feature requires configuration of a OneConnect profile
	OneconnectTransformations pulumi.StringOutput `pulumi:"oneconnectTransformations"`
	// Specifies the proxy mode for this profile: reverse, explicit, or transparent. The default is `reverse`.
	ProxyType pulumi.StringOutput `pulumi:"proxyType"`
	// Specifies whether the system rewrites the URIs that are part of HTTP redirect (3XX) responses. The default is `none`.
	RedirectRewrite pulumi.StringOutput `pulumi:"redirectRewrite"`
	// Specifies how the system handles HTTP content that is chunked by a client. The default is `preserve`.
	RequestChunking pulumi.StringOutput `pulumi:"requestChunking"`
	// Specifies how the system handles HTTP content that is chunked by a server. The default is `selective`.
	ResponseChunking pulumi.StringOutput `pulumi:"responseChunking"`
	// Specifies headers that the BIG-IP system allows in an HTTP response.If you are specifying more than one header, separate the headers with a blank space.
	ResponseHeadersPermitteds pulumi.StringArrayOutput `pulumi:"responseHeadersPermitteds"`
	// Specifies the value of the Server header in responses that the BIG-IP itself generates. The default is BigIP. If no
	// string is specified, then no Server header will be added to such responses
	ServerAgentName pulumi.StringOutput `pulumi:"serverAgentName"`
	// Displays the administrative partition within which this profile resides.
	TmPartition pulumi.StringPtrOutput `pulumi:"tmPartition"`
	// Specifies the hostname to include into Via header
	ViaHostName pulumi.StringOutput `pulumi:"viaHostName"`
	// Specifies whether to append, remove, or preserve a Via header in an HTTP request
	ViaRequest pulumi.StringOutput `pulumi:"viaRequest"`
	// Specifies whether to append, remove, or preserve a Via header in an HTTP request
	ViaResponse pulumi.StringOutput `pulumi:"viaResponse"`
	// Specifies alternative XFF headers instead of the default X-forwarded-for header.
	XffAlternativeNames pulumi.StringArrayOutput `pulumi:"xffAlternativeNames"`
}

// NewProfileHttp registers a new resource with the given unique name, arguments, and options.
func NewProfileHttp(ctx *pulumi.Context,
	name string, args *ProfileHttpArgs, opts ...pulumi.ResourceOption) (*ProfileHttp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	var resource ProfileHttp
	err := ctx.RegisterResource("f5bigip:ltm/profileHttp:ProfileHttp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProfileHttp gets an existing ProfileHttp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProfileHttp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProfileHttpState, opts ...pulumi.ResourceOption) (*ProfileHttp, error) {
	var resource ProfileHttp
	err := ctx.ReadResource("f5bigip:ltm/profileHttp:ProfileHttp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProfileHttp resources.
type profileHttpState struct {
	// Enables or disables trusting the client IP address, and statistics from the client IP address, based on the request's XFF (X-forwarded-for) headers, if they exist.
	AcceptXff *string `pulumi:"acceptXff"`
	// The application service to which the object belongs.
	AppService *string `pulumi:"appService"`
	// Specifies a quoted string for the basic authentication realm. The system sends this string to a client whenever authorization fails. The default value is `none`
	BasicAuthRealm *string `pulumi:"basicAuthRealm"`
	// Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
	DefaultsFrom *string `pulumi:"defaultsFrom"`
	// Specifies user-defined description.
	Description *string `pulumi:"description"`
	// Type a passphrase for cookie encryption.
	EncryptCookieSecret *string `pulumi:"encryptCookieSecret"`
	// Type the cookie names for the system to encrypt.
	EncryptCookies []string `pulumi:"encryptCookies"`
	// Specifies an HTTP fallback host. HTTP redirection allows you to redirect HTTP traffic to another protocol identifier, host name, port number
	FallbackHost *string `pulumi:"fallbackHost"`
	// Specifies one or more three-digit status codes that can be returned by an HTTP server,that should trigger a redirection to the fallback host.
	FallbackStatusCodes []string `pulumi:"fallbackStatusCodes"`
	// Specifies the header string that you want to erase from an HTTP request. Default is `none`.
	HeadErase *string `pulumi:"headErase"`
	// Specifies a quoted header string that you want to insert into an HTTP request.Default is `none`.
	HeadInsert *string `pulumi:"headInsert"`
	// Specifies, when enabled, that the system inserts an X-Forwarded-For header in an HTTP request with the client IP address, to use with connection pooling. The default is `Disabled`.
	InsertXforwardedFor *string `pulumi:"insertXforwardedFor"`
	// Specifies the linear white space (LWS) separator that the system inserts when a header exceeds the maximum width you
	// specify in the LWS Maximum Columns setting.
	LwsSeparator *string `pulumi:"lwsSeparator"`
	// Specifies the linear white space (LWS) separator that the system inserts when a header exceeds the maximum width you specify in the LWS Maximum Columns setting.
	LwsWidth *int `pulumi:"lwsWidth"`
	// Specifies the name of the http profile,name of Profile should be full path. Full path is the combination of the `partition + profile name`,For example `/Common/test-http-profile`.
	Name *string `pulumi:"name"`
	// Enables the system to perform HTTP header transformations for the purpose of  keeping server-side connections open. This feature requires configuration of a OneConnect profile
	OneconnectTransformations *string `pulumi:"oneconnectTransformations"`
	// Specifies the proxy mode for this profile: reverse, explicit, or transparent. The default is `reverse`.
	ProxyType *string `pulumi:"proxyType"`
	// Specifies whether the system rewrites the URIs that are part of HTTP redirect (3XX) responses. The default is `none`.
	RedirectRewrite *string `pulumi:"redirectRewrite"`
	// Specifies how the system handles HTTP content that is chunked by a client. The default is `preserve`.
	RequestChunking *string `pulumi:"requestChunking"`
	// Specifies how the system handles HTTP content that is chunked by a server. The default is `selective`.
	ResponseChunking *string `pulumi:"responseChunking"`
	// Specifies headers that the BIG-IP system allows in an HTTP response.If you are specifying more than one header, separate the headers with a blank space.
	ResponseHeadersPermitteds []string `pulumi:"responseHeadersPermitteds"`
	// Specifies the value of the Server header in responses that the BIG-IP itself generates. The default is BigIP. If no
	// string is specified, then no Server header will be added to such responses
	ServerAgentName *string `pulumi:"serverAgentName"`
	// Displays the administrative partition within which this profile resides.
	TmPartition *string `pulumi:"tmPartition"`
	// Specifies the hostname to include into Via header
	ViaHostName *string `pulumi:"viaHostName"`
	// Specifies whether to append, remove, or preserve a Via header in an HTTP request
	ViaRequest *string `pulumi:"viaRequest"`
	// Specifies whether to append, remove, or preserve a Via header in an HTTP request
	ViaResponse *string `pulumi:"viaResponse"`
	// Specifies alternative XFF headers instead of the default X-forwarded-for header.
	XffAlternativeNames []string `pulumi:"xffAlternativeNames"`
}

type ProfileHttpState struct {
	// Enables or disables trusting the client IP address, and statistics from the client IP address, based on the request's XFF (X-forwarded-for) headers, if they exist.
	AcceptXff pulumi.StringPtrInput
	// The application service to which the object belongs.
	AppService pulumi.StringPtrInput
	// Specifies a quoted string for the basic authentication realm. The system sends this string to a client whenever authorization fails. The default value is `none`
	BasicAuthRealm pulumi.StringPtrInput
	// Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
	DefaultsFrom pulumi.StringPtrInput
	// Specifies user-defined description.
	Description pulumi.StringPtrInput
	// Type a passphrase for cookie encryption.
	EncryptCookieSecret pulumi.StringPtrInput
	// Type the cookie names for the system to encrypt.
	EncryptCookies pulumi.StringArrayInput
	// Specifies an HTTP fallback host. HTTP redirection allows you to redirect HTTP traffic to another protocol identifier, host name, port number
	FallbackHost pulumi.StringPtrInput
	// Specifies one or more three-digit status codes that can be returned by an HTTP server,that should trigger a redirection to the fallback host.
	FallbackStatusCodes pulumi.StringArrayInput
	// Specifies the header string that you want to erase from an HTTP request. Default is `none`.
	HeadErase pulumi.StringPtrInput
	// Specifies a quoted header string that you want to insert into an HTTP request.Default is `none`.
	HeadInsert pulumi.StringPtrInput
	// Specifies, when enabled, that the system inserts an X-Forwarded-For header in an HTTP request with the client IP address, to use with connection pooling. The default is `Disabled`.
	InsertXforwardedFor pulumi.StringPtrInput
	// Specifies the linear white space (LWS) separator that the system inserts when a header exceeds the maximum width you
	// specify in the LWS Maximum Columns setting.
	LwsSeparator pulumi.StringPtrInput
	// Specifies the linear white space (LWS) separator that the system inserts when a header exceeds the maximum width you specify in the LWS Maximum Columns setting.
	LwsWidth pulumi.IntPtrInput
	// Specifies the name of the http profile,name of Profile should be full path. Full path is the combination of the `partition + profile name`,For example `/Common/test-http-profile`.
	Name pulumi.StringPtrInput
	// Enables the system to perform HTTP header transformations for the purpose of  keeping server-side connections open. This feature requires configuration of a OneConnect profile
	OneconnectTransformations pulumi.StringPtrInput
	// Specifies the proxy mode for this profile: reverse, explicit, or transparent. The default is `reverse`.
	ProxyType pulumi.StringPtrInput
	// Specifies whether the system rewrites the URIs that are part of HTTP redirect (3XX) responses. The default is `none`.
	RedirectRewrite pulumi.StringPtrInput
	// Specifies how the system handles HTTP content that is chunked by a client. The default is `preserve`.
	RequestChunking pulumi.StringPtrInput
	// Specifies how the system handles HTTP content that is chunked by a server. The default is `selective`.
	ResponseChunking pulumi.StringPtrInput
	// Specifies headers that the BIG-IP system allows in an HTTP response.If you are specifying more than one header, separate the headers with a blank space.
	ResponseHeadersPermitteds pulumi.StringArrayInput
	// Specifies the value of the Server header in responses that the BIG-IP itself generates. The default is BigIP. If no
	// string is specified, then no Server header will be added to such responses
	ServerAgentName pulumi.StringPtrInput
	// Displays the administrative partition within which this profile resides.
	TmPartition pulumi.StringPtrInput
	// Specifies the hostname to include into Via header
	ViaHostName pulumi.StringPtrInput
	// Specifies whether to append, remove, or preserve a Via header in an HTTP request
	ViaRequest pulumi.StringPtrInput
	// Specifies whether to append, remove, or preserve a Via header in an HTTP request
	ViaResponse pulumi.StringPtrInput
	// Specifies alternative XFF headers instead of the default X-forwarded-for header.
	XffAlternativeNames pulumi.StringArrayInput
}

func (ProfileHttpState) ElementType() reflect.Type {
	return reflect.TypeOf((*profileHttpState)(nil)).Elem()
}

type profileHttpArgs struct {
	// Enables or disables trusting the client IP address, and statistics from the client IP address, based on the request's XFF (X-forwarded-for) headers, if they exist.
	AcceptXff *string `pulumi:"acceptXff"`
	// The application service to which the object belongs.
	AppService *string `pulumi:"appService"`
	// Specifies a quoted string for the basic authentication realm. The system sends this string to a client whenever authorization fails. The default value is `none`
	BasicAuthRealm *string `pulumi:"basicAuthRealm"`
	// Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
	DefaultsFrom *string `pulumi:"defaultsFrom"`
	// Specifies user-defined description.
	Description *string `pulumi:"description"`
	// Type a passphrase for cookie encryption.
	EncryptCookieSecret *string `pulumi:"encryptCookieSecret"`
	// Type the cookie names for the system to encrypt.
	EncryptCookies []string `pulumi:"encryptCookies"`
	// Specifies an HTTP fallback host. HTTP redirection allows you to redirect HTTP traffic to another protocol identifier, host name, port number
	FallbackHost *string `pulumi:"fallbackHost"`
	// Specifies one or more three-digit status codes that can be returned by an HTTP server,that should trigger a redirection to the fallback host.
	FallbackStatusCodes []string `pulumi:"fallbackStatusCodes"`
	// Specifies the header string that you want to erase from an HTTP request. Default is `none`.
	HeadErase *string `pulumi:"headErase"`
	// Specifies a quoted header string that you want to insert into an HTTP request.Default is `none`.
	HeadInsert *string `pulumi:"headInsert"`
	// Specifies, when enabled, that the system inserts an X-Forwarded-For header in an HTTP request with the client IP address, to use with connection pooling. The default is `Disabled`.
	InsertXforwardedFor *string `pulumi:"insertXforwardedFor"`
	// Specifies the linear white space (LWS) separator that the system inserts when a header exceeds the maximum width you
	// specify in the LWS Maximum Columns setting.
	LwsSeparator *string `pulumi:"lwsSeparator"`
	// Specifies the linear white space (LWS) separator that the system inserts when a header exceeds the maximum width you specify in the LWS Maximum Columns setting.
	LwsWidth *int `pulumi:"lwsWidth"`
	// Specifies the name of the http profile,name of Profile should be full path. Full path is the combination of the `partition + profile name`,For example `/Common/test-http-profile`.
	Name string `pulumi:"name"`
	// Enables the system to perform HTTP header transformations for the purpose of  keeping server-side connections open. This feature requires configuration of a OneConnect profile
	OneconnectTransformations *string `pulumi:"oneconnectTransformations"`
	// Specifies the proxy mode for this profile: reverse, explicit, or transparent. The default is `reverse`.
	ProxyType *string `pulumi:"proxyType"`
	// Specifies whether the system rewrites the URIs that are part of HTTP redirect (3XX) responses. The default is `none`.
	RedirectRewrite *string `pulumi:"redirectRewrite"`
	// Specifies how the system handles HTTP content that is chunked by a client. The default is `preserve`.
	RequestChunking *string `pulumi:"requestChunking"`
	// Specifies how the system handles HTTP content that is chunked by a server. The default is `selective`.
	ResponseChunking *string `pulumi:"responseChunking"`
	// Specifies headers that the BIG-IP system allows in an HTTP response.If you are specifying more than one header, separate the headers with a blank space.
	ResponseHeadersPermitteds []string `pulumi:"responseHeadersPermitteds"`
	// Specifies the value of the Server header in responses that the BIG-IP itself generates. The default is BigIP. If no
	// string is specified, then no Server header will be added to such responses
	ServerAgentName *string `pulumi:"serverAgentName"`
	// Displays the administrative partition within which this profile resides.
	TmPartition *string `pulumi:"tmPartition"`
	// Specifies the hostname to include into Via header
	ViaHostName *string `pulumi:"viaHostName"`
	// Specifies whether to append, remove, or preserve a Via header in an HTTP request
	ViaRequest *string `pulumi:"viaRequest"`
	// Specifies whether to append, remove, or preserve a Via header in an HTTP request
	ViaResponse *string `pulumi:"viaResponse"`
	// Specifies alternative XFF headers instead of the default X-forwarded-for header.
	XffAlternativeNames []string `pulumi:"xffAlternativeNames"`
}

// The set of arguments for constructing a ProfileHttp resource.
type ProfileHttpArgs struct {
	// Enables or disables trusting the client IP address, and statistics from the client IP address, based on the request's XFF (X-forwarded-for) headers, if they exist.
	AcceptXff pulumi.StringPtrInput
	// The application service to which the object belongs.
	AppService pulumi.StringPtrInput
	// Specifies a quoted string for the basic authentication realm. The system sends this string to a client whenever authorization fails. The default value is `none`
	BasicAuthRealm pulumi.StringPtrInput
	// Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
	DefaultsFrom pulumi.StringPtrInput
	// Specifies user-defined description.
	Description pulumi.StringPtrInput
	// Type a passphrase for cookie encryption.
	EncryptCookieSecret pulumi.StringPtrInput
	// Type the cookie names for the system to encrypt.
	EncryptCookies pulumi.StringArrayInput
	// Specifies an HTTP fallback host. HTTP redirection allows you to redirect HTTP traffic to another protocol identifier, host name, port number
	FallbackHost pulumi.StringPtrInput
	// Specifies one or more three-digit status codes that can be returned by an HTTP server,that should trigger a redirection to the fallback host.
	FallbackStatusCodes pulumi.StringArrayInput
	// Specifies the header string that you want to erase from an HTTP request. Default is `none`.
	HeadErase pulumi.StringPtrInput
	// Specifies a quoted header string that you want to insert into an HTTP request.Default is `none`.
	HeadInsert pulumi.StringPtrInput
	// Specifies, when enabled, that the system inserts an X-Forwarded-For header in an HTTP request with the client IP address, to use with connection pooling. The default is `Disabled`.
	InsertXforwardedFor pulumi.StringPtrInput
	// Specifies the linear white space (LWS) separator that the system inserts when a header exceeds the maximum width you
	// specify in the LWS Maximum Columns setting.
	LwsSeparator pulumi.StringPtrInput
	// Specifies the linear white space (LWS) separator that the system inserts when a header exceeds the maximum width you specify in the LWS Maximum Columns setting.
	LwsWidth pulumi.IntPtrInput
	// Specifies the name of the http profile,name of Profile should be full path. Full path is the combination of the `partition + profile name`,For example `/Common/test-http-profile`.
	Name pulumi.StringInput
	// Enables the system to perform HTTP header transformations for the purpose of  keeping server-side connections open. This feature requires configuration of a OneConnect profile
	OneconnectTransformations pulumi.StringPtrInput
	// Specifies the proxy mode for this profile: reverse, explicit, or transparent. The default is `reverse`.
	ProxyType pulumi.StringPtrInput
	// Specifies whether the system rewrites the URIs that are part of HTTP redirect (3XX) responses. The default is `none`.
	RedirectRewrite pulumi.StringPtrInput
	// Specifies how the system handles HTTP content that is chunked by a client. The default is `preserve`.
	RequestChunking pulumi.StringPtrInput
	// Specifies how the system handles HTTP content that is chunked by a server. The default is `selective`.
	ResponseChunking pulumi.StringPtrInput
	// Specifies headers that the BIG-IP system allows in an HTTP response.If you are specifying more than one header, separate the headers with a blank space.
	ResponseHeadersPermitteds pulumi.StringArrayInput
	// Specifies the value of the Server header in responses that the BIG-IP itself generates. The default is BigIP. If no
	// string is specified, then no Server header will be added to such responses
	ServerAgentName pulumi.StringPtrInput
	// Displays the administrative partition within which this profile resides.
	TmPartition pulumi.StringPtrInput
	// Specifies the hostname to include into Via header
	ViaHostName pulumi.StringPtrInput
	// Specifies whether to append, remove, or preserve a Via header in an HTTP request
	ViaRequest pulumi.StringPtrInput
	// Specifies whether to append, remove, or preserve a Via header in an HTTP request
	ViaResponse pulumi.StringPtrInput
	// Specifies alternative XFF headers instead of the default X-forwarded-for header.
	XffAlternativeNames pulumi.StringArrayInput
}

func (ProfileHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*profileHttpArgs)(nil)).Elem()
}

type ProfileHttpInput interface {
	pulumi.Input

	ToProfileHttpOutput() ProfileHttpOutput
	ToProfileHttpOutputWithContext(ctx context.Context) ProfileHttpOutput
}

func (*ProfileHttp) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileHttp)(nil))
}

func (i *ProfileHttp) ToProfileHttpOutput() ProfileHttpOutput {
	return i.ToProfileHttpOutputWithContext(context.Background())
}

func (i *ProfileHttp) ToProfileHttpOutputWithContext(ctx context.Context) ProfileHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileHttpOutput)
}

func (i *ProfileHttp) ToProfileHttpPtrOutput() ProfileHttpPtrOutput {
	return i.ToProfileHttpPtrOutputWithContext(context.Background())
}

func (i *ProfileHttp) ToProfileHttpPtrOutputWithContext(ctx context.Context) ProfileHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileHttpPtrOutput)
}

type ProfileHttpPtrInput interface {
	pulumi.Input

	ToProfileHttpPtrOutput() ProfileHttpPtrOutput
	ToProfileHttpPtrOutputWithContext(ctx context.Context) ProfileHttpPtrOutput
}

type profileHttpPtrType ProfileHttpArgs

func (*profileHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileHttp)(nil))
}

func (i *profileHttpPtrType) ToProfileHttpPtrOutput() ProfileHttpPtrOutput {
	return i.ToProfileHttpPtrOutputWithContext(context.Background())
}

func (i *profileHttpPtrType) ToProfileHttpPtrOutputWithContext(ctx context.Context) ProfileHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileHttpPtrOutput)
}

// ProfileHttpArrayInput is an input type that accepts ProfileHttpArray and ProfileHttpArrayOutput values.
// You can construct a concrete instance of `ProfileHttpArrayInput` via:
//
//          ProfileHttpArray{ ProfileHttpArgs{...} }
type ProfileHttpArrayInput interface {
	pulumi.Input

	ToProfileHttpArrayOutput() ProfileHttpArrayOutput
	ToProfileHttpArrayOutputWithContext(context.Context) ProfileHttpArrayOutput
}

type ProfileHttpArray []ProfileHttpInput

func (ProfileHttpArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*ProfileHttp)(nil))
}

func (i ProfileHttpArray) ToProfileHttpArrayOutput() ProfileHttpArrayOutput {
	return i.ToProfileHttpArrayOutputWithContext(context.Background())
}

func (i ProfileHttpArray) ToProfileHttpArrayOutputWithContext(ctx context.Context) ProfileHttpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileHttpArrayOutput)
}

// ProfileHttpMapInput is an input type that accepts ProfileHttpMap and ProfileHttpMapOutput values.
// You can construct a concrete instance of `ProfileHttpMapInput` via:
//
//          ProfileHttpMap{ "key": ProfileHttpArgs{...} }
type ProfileHttpMapInput interface {
	pulumi.Input

	ToProfileHttpMapOutput() ProfileHttpMapOutput
	ToProfileHttpMapOutputWithContext(context.Context) ProfileHttpMapOutput
}

type ProfileHttpMap map[string]ProfileHttpInput

func (ProfileHttpMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*ProfileHttp)(nil))
}

func (i ProfileHttpMap) ToProfileHttpMapOutput() ProfileHttpMapOutput {
	return i.ToProfileHttpMapOutputWithContext(context.Background())
}

func (i ProfileHttpMap) ToProfileHttpMapOutputWithContext(ctx context.Context) ProfileHttpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileHttpMapOutput)
}

type ProfileHttpOutput struct {
	*pulumi.OutputState
}

func (ProfileHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileHttp)(nil))
}

func (o ProfileHttpOutput) ToProfileHttpOutput() ProfileHttpOutput {
	return o
}

func (o ProfileHttpOutput) ToProfileHttpOutputWithContext(ctx context.Context) ProfileHttpOutput {
	return o
}

func (o ProfileHttpOutput) ToProfileHttpPtrOutput() ProfileHttpPtrOutput {
	return o.ToProfileHttpPtrOutputWithContext(context.Background())
}

func (o ProfileHttpOutput) ToProfileHttpPtrOutputWithContext(ctx context.Context) ProfileHttpPtrOutput {
	return o.ApplyT(func(v ProfileHttp) *ProfileHttp {
		return &v
	}).(ProfileHttpPtrOutput)
}

type ProfileHttpPtrOutput struct {
	*pulumi.OutputState
}

func (ProfileHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileHttp)(nil))
}

func (o ProfileHttpPtrOutput) ToProfileHttpPtrOutput() ProfileHttpPtrOutput {
	return o
}

func (o ProfileHttpPtrOutput) ToProfileHttpPtrOutputWithContext(ctx context.Context) ProfileHttpPtrOutput {
	return o
}

type ProfileHttpArrayOutput struct{ *pulumi.OutputState }

func (ProfileHttpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileHttp)(nil))
}

func (o ProfileHttpArrayOutput) ToProfileHttpArrayOutput() ProfileHttpArrayOutput {
	return o
}

func (o ProfileHttpArrayOutput) ToProfileHttpArrayOutputWithContext(ctx context.Context) ProfileHttpArrayOutput {
	return o
}

func (o ProfileHttpArrayOutput) Index(i pulumi.IntInput) ProfileHttpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProfileHttp {
		return vs[0].([]ProfileHttp)[vs[1].(int)]
	}).(ProfileHttpOutput)
}

type ProfileHttpMapOutput struct{ *pulumi.OutputState }

func (ProfileHttpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ProfileHttp)(nil))
}

func (o ProfileHttpMapOutput) ToProfileHttpMapOutput() ProfileHttpMapOutput {
	return o
}

func (o ProfileHttpMapOutput) ToProfileHttpMapOutputWithContext(ctx context.Context) ProfileHttpMapOutput {
	return o
}

func (o ProfileHttpMapOutput) MapIndex(k pulumi.StringInput) ProfileHttpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ProfileHttp {
		return vs[0].(map[string]ProfileHttp)[vs[1].(string)]
	}).(ProfileHttpOutput)
}

func init() {
	pulumi.RegisterOutputType(ProfileHttpOutput{})
	pulumi.RegisterOutputType(ProfileHttpPtrOutput{})
	pulumi.RegisterOutputType(ProfileHttpArrayOutput{})
	pulumi.RegisterOutputType(ProfileHttpMapOutput{})
}
