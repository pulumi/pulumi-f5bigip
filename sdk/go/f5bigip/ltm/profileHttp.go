// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ltm

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// `bigip_ltm_profile_http` Configures a custom profile_http for use by health checks.
// 
// For resources should be named with their "full path". The full path is the combination of the partition + name of the resource. For example /Common/my-pool.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-bigip/blob/master/website/docs/r/ltm_profile_http.html.markdown.
type ProfileHttp struct {
	s *pulumi.ResourceState
}

// NewProfileHttp registers a new resource with the given unique name, arguments, and options.
func NewProfileHttp(ctx *pulumi.Context,
	name string, args *ProfileHttpArgs, opts ...pulumi.ResourceOpt) (*ProfileHttp, error) {
	if args == nil || args.DefaultsFrom == nil {
		return nil, errors.New("missing required argument 'DefaultsFrom'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["acceptXff"] = nil
		inputs["appService"] = nil
		inputs["basicAuthRealm"] = nil
		inputs["defaultsFrom"] = nil
		inputs["description"] = nil
		inputs["encryptCookieSecret"] = nil
		inputs["encryptCookies"] = nil
		inputs["fallbackHost"] = nil
		inputs["fallbackStatusCodes"] = nil
		inputs["headErase"] = nil
		inputs["headInsert"] = nil
		inputs["insertXforwardedFor"] = nil
		inputs["lwsSeparator"] = nil
		inputs["name"] = nil
		inputs["oneconnectTransformations"] = nil
		inputs["proxyType"] = nil
		inputs["redirectRewrite"] = nil
		inputs["requestChunking"] = nil
		inputs["responseChunking"] = nil
		inputs["responseHeadersPermitteds"] = nil
		inputs["serverAgentName"] = nil
		inputs["tmPartition"] = nil
		inputs["viaHostName"] = nil
		inputs["viaRequest"] = nil
		inputs["viaResponse"] = nil
		inputs["xffAlternativeNames"] = nil
	} else {
		inputs["acceptXff"] = args.AcceptXff
		inputs["appService"] = args.AppService
		inputs["basicAuthRealm"] = args.BasicAuthRealm
		inputs["defaultsFrom"] = args.DefaultsFrom
		inputs["description"] = args.Description
		inputs["encryptCookieSecret"] = args.EncryptCookieSecret
		inputs["encryptCookies"] = args.EncryptCookies
		inputs["fallbackHost"] = args.FallbackHost
		inputs["fallbackStatusCodes"] = args.FallbackStatusCodes
		inputs["headErase"] = args.HeadErase
		inputs["headInsert"] = args.HeadInsert
		inputs["insertXforwardedFor"] = args.InsertXforwardedFor
		inputs["lwsSeparator"] = args.LwsSeparator
		inputs["name"] = args.Name
		inputs["oneconnectTransformations"] = args.OneconnectTransformations
		inputs["proxyType"] = args.ProxyType
		inputs["redirectRewrite"] = args.RedirectRewrite
		inputs["requestChunking"] = args.RequestChunking
		inputs["responseChunking"] = args.ResponseChunking
		inputs["responseHeadersPermitteds"] = args.ResponseHeadersPermitteds
		inputs["serverAgentName"] = args.ServerAgentName
		inputs["tmPartition"] = args.TmPartition
		inputs["viaHostName"] = args.ViaHostName
		inputs["viaRequest"] = args.ViaRequest
		inputs["viaResponse"] = args.ViaResponse
		inputs["xffAlternativeNames"] = args.XffAlternativeNames
	}
	s, err := ctx.RegisterResource("f5bigip:ltm/profileHttp:ProfileHttp", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProfileHttp{s: s}, nil
}

// GetProfileHttp gets an existing ProfileHttp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProfileHttp(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProfileHttpState, opts ...pulumi.ResourceOpt) (*ProfileHttp, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["acceptXff"] = state.AcceptXff
		inputs["appService"] = state.AppService
		inputs["basicAuthRealm"] = state.BasicAuthRealm
		inputs["defaultsFrom"] = state.DefaultsFrom
		inputs["description"] = state.Description
		inputs["encryptCookieSecret"] = state.EncryptCookieSecret
		inputs["encryptCookies"] = state.EncryptCookies
		inputs["fallbackHost"] = state.FallbackHost
		inputs["fallbackStatusCodes"] = state.FallbackStatusCodes
		inputs["headErase"] = state.HeadErase
		inputs["headInsert"] = state.HeadInsert
		inputs["insertXforwardedFor"] = state.InsertXforwardedFor
		inputs["lwsSeparator"] = state.LwsSeparator
		inputs["name"] = state.Name
		inputs["oneconnectTransformations"] = state.OneconnectTransformations
		inputs["proxyType"] = state.ProxyType
		inputs["redirectRewrite"] = state.RedirectRewrite
		inputs["requestChunking"] = state.RequestChunking
		inputs["responseChunking"] = state.ResponseChunking
		inputs["responseHeadersPermitteds"] = state.ResponseHeadersPermitteds
		inputs["serverAgentName"] = state.ServerAgentName
		inputs["tmPartition"] = state.TmPartition
		inputs["viaHostName"] = state.ViaHostName
		inputs["viaRequest"] = state.ViaRequest
		inputs["viaResponse"] = state.ViaResponse
		inputs["xffAlternativeNames"] = state.XffAlternativeNames
	}
	s, err := ctx.ReadResource("f5bigip:ltm/profileHttp:ProfileHttp", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProfileHttp{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ProfileHttp) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ProfileHttp) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Enables or disables trusting the client IP address, and statistics from the client IP address, based on the request's
// XFF (X-forwarded-for) headers, if they exist.
func (r *ProfileHttp) AcceptXff() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["acceptXff"])
}

// The application service to which the object belongs.
func (r *ProfileHttp) AppService() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["appService"])
}

// Specifies a quoted string for the basic authentication realm. The system sends this string to a client whenever authorization fails. The default value is none
func (r *ProfileHttp) BasicAuthRealm() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["basicAuthRealm"])
}

// Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
func (r *ProfileHttp) DefaultsFrom() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["defaultsFrom"])
}

// User defibned description
func (r *ProfileHttp) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// Specifies a passphrase for the cookie encryption
func (r *ProfileHttp) EncryptCookieSecret() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["encryptCookieSecret"])
}

// Encrypts specified cookies that the BIG-IP system sends to a client system
func (r *ProfileHttp) EncryptCookies() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["encryptCookies"])
}

// Specifies an HTTP fallback host. HTTP redirection allows you to redirect HTTP traffic to another protocol identifier, host name, port number
func (r *ProfileHttp) FallbackHost() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["fallbackHost"])
}

// Specifies one or more three-digit status codes that can be returned by an HTTP server.
func (r *ProfileHttp) FallbackStatusCodes() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["fallbackStatusCodes"])
}

// Specifies the header string that you want to erase from an HTTP request. You can also specify none
func (r *ProfileHttp) HeadErase() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["headErase"])
}

// Specifies a quoted header string that you want to insert into an HTTP request
func (r *ProfileHttp) HeadInsert() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["headInsert"])
}

// When using connection pooling, which allows clients to make use of other client requests' server-side connections, you can insert the X-Forwarded-For header and specify a client IP address
func (r *ProfileHttp) InsertXforwardedFor() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["insertXforwardedFor"])
}

// Specifies a quoted header string that you want to insert into an HTTP request. You can also specify none.
func (r *ProfileHttp) LwsSeparator() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["lwsSeparator"])
}

// Name of the profile_http
func (r *ProfileHttp) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Enables the system to perform HTTP header transformations for the purpose of  keeping server-side connections open. This feature requires configuration of a OneConnect profile
func (r *ProfileHttp) OneconnectTransformations() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["oneconnectTransformations"])
}

// Specifies the type of HTTP proxy.
func (r *ProfileHttp) ProxyType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["proxyType"])
}

// Specifies which of the application HTTP redirects the system rewrites to HTTPS.
func (r *ProfileHttp) RedirectRewrite() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["redirectRewrite"])
}

// Specifies how to handle chunked and unchunked requests.
func (r *ProfileHttp) RequestChunking() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["requestChunking"])
}

// Specifies how to handle chunked and unchunked responses.
func (r *ProfileHttp) ResponseChunking() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["responseChunking"])
}

// Specifies headers that the BIG-IP system allows in an HTTP response.
func (r *ProfileHttp) ResponseHeadersPermitteds() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["responseHeadersPermitteds"])
}

// Specifies the value of the Server header in responses that the BIG-IP itself generates. The default is BigIP. If no
// string is specified, then no Server header will be added to such responses
func (r *ProfileHttp) ServerAgentName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["serverAgentName"])
}

// Displays the administrative partition within which this profile resides.
func (r *ProfileHttp) TmPartition() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tmPartition"])
}

// Specifies the hostname to include into Via header
func (r *ProfileHttp) ViaHostName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["viaHostName"])
}

// Specifies whether to append, remove, or preserve a Via header in an HTTP request
func (r *ProfileHttp) ViaRequest() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["viaRequest"])
}

// Specifies whether to append, remove, or preserve a Via header in an HTTP request
func (r *ProfileHttp) ViaResponse() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["viaResponse"])
}

// Specifies alternative XFF headers instead of the default X-forwarded-for header
func (r *ProfileHttp) XffAlternativeNames() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["xffAlternativeNames"])
}

// Input properties used for looking up and filtering ProfileHttp resources.
type ProfileHttpState struct {
	// Enables or disables trusting the client IP address, and statistics from the client IP address, based on the request's
	// XFF (X-forwarded-for) headers, if they exist.
	AcceptXff interface{}
	// The application service to which the object belongs.
	AppService interface{}
	// Specifies a quoted string for the basic authentication realm. The system sends this string to a client whenever authorization fails. The default value is none
	BasicAuthRealm interface{}
	// Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
	DefaultsFrom interface{}
	// User defibned description
	Description interface{}
	// Specifies a passphrase for the cookie encryption
	EncryptCookieSecret interface{}
	// Encrypts specified cookies that the BIG-IP system sends to a client system
	EncryptCookies interface{}
	// Specifies an HTTP fallback host. HTTP redirection allows you to redirect HTTP traffic to another protocol identifier, host name, port number
	FallbackHost interface{}
	// Specifies one or more three-digit status codes that can be returned by an HTTP server.
	FallbackStatusCodes interface{}
	// Specifies the header string that you want to erase from an HTTP request. You can also specify none
	HeadErase interface{}
	// Specifies a quoted header string that you want to insert into an HTTP request
	HeadInsert interface{}
	// When using connection pooling, which allows clients to make use of other client requests' server-side connections, you can insert the X-Forwarded-For header and specify a client IP address
	InsertXforwardedFor interface{}
	// Specifies a quoted header string that you want to insert into an HTTP request. You can also specify none.
	LwsSeparator interface{}
	// Name of the profile_http
	Name interface{}
	// Enables the system to perform HTTP header transformations for the purpose of  keeping server-side connections open. This feature requires configuration of a OneConnect profile
	OneconnectTransformations interface{}
	// Specifies the type of HTTP proxy.
	ProxyType interface{}
	// Specifies which of the application HTTP redirects the system rewrites to HTTPS.
	RedirectRewrite interface{}
	// Specifies how to handle chunked and unchunked requests.
	RequestChunking interface{}
	// Specifies how to handle chunked and unchunked responses.
	ResponseChunking interface{}
	// Specifies headers that the BIG-IP system allows in an HTTP response.
	ResponseHeadersPermitteds interface{}
	// Specifies the value of the Server header in responses that the BIG-IP itself generates. The default is BigIP. If no
	// string is specified, then no Server header will be added to such responses
	ServerAgentName interface{}
	// Displays the administrative partition within which this profile resides.
	TmPartition interface{}
	// Specifies the hostname to include into Via header
	ViaHostName interface{}
	// Specifies whether to append, remove, or preserve a Via header in an HTTP request
	ViaRequest interface{}
	// Specifies whether to append, remove, or preserve a Via header in an HTTP request
	ViaResponse interface{}
	// Specifies alternative XFF headers instead of the default X-forwarded-for header
	XffAlternativeNames interface{}
}

// The set of arguments for constructing a ProfileHttp resource.
type ProfileHttpArgs struct {
	// Enables or disables trusting the client IP address, and statistics from the client IP address, based on the request's
	// XFF (X-forwarded-for) headers, if they exist.
	AcceptXff interface{}
	// The application service to which the object belongs.
	AppService interface{}
	// Specifies a quoted string for the basic authentication realm. The system sends this string to a client whenever authorization fails. The default value is none
	BasicAuthRealm interface{}
	// Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
	DefaultsFrom interface{}
	// User defibned description
	Description interface{}
	// Specifies a passphrase for the cookie encryption
	EncryptCookieSecret interface{}
	// Encrypts specified cookies that the BIG-IP system sends to a client system
	EncryptCookies interface{}
	// Specifies an HTTP fallback host. HTTP redirection allows you to redirect HTTP traffic to another protocol identifier, host name, port number
	FallbackHost interface{}
	// Specifies one or more three-digit status codes that can be returned by an HTTP server.
	FallbackStatusCodes interface{}
	// Specifies the header string that you want to erase from an HTTP request. You can also specify none
	HeadErase interface{}
	// Specifies a quoted header string that you want to insert into an HTTP request
	HeadInsert interface{}
	// When using connection pooling, which allows clients to make use of other client requests' server-side connections, you can insert the X-Forwarded-For header and specify a client IP address
	InsertXforwardedFor interface{}
	// Specifies a quoted header string that you want to insert into an HTTP request. You can also specify none.
	LwsSeparator interface{}
	// Name of the profile_http
	Name interface{}
	// Enables the system to perform HTTP header transformations for the purpose of  keeping server-side connections open. This feature requires configuration of a OneConnect profile
	OneconnectTransformations interface{}
	// Specifies the type of HTTP proxy.
	ProxyType interface{}
	// Specifies which of the application HTTP redirects the system rewrites to HTTPS.
	RedirectRewrite interface{}
	// Specifies how to handle chunked and unchunked requests.
	RequestChunking interface{}
	// Specifies how to handle chunked and unchunked responses.
	ResponseChunking interface{}
	// Specifies headers that the BIG-IP system allows in an HTTP response.
	ResponseHeadersPermitteds interface{}
	// Specifies the value of the Server header in responses that the BIG-IP itself generates. The default is BigIP. If no
	// string is specified, then no Server header will be added to such responses
	ServerAgentName interface{}
	// Displays the administrative partition within which this profile resides.
	TmPartition interface{}
	// Specifies the hostname to include into Via header
	ViaHostName interface{}
	// Specifies whether to append, remove, or preserve a Via header in an HTTP request
	ViaRequest interface{}
	// Specifies whether to append, remove, or preserve a Via header in an HTTP request
	ViaResponse interface{}
	// Specifies alternative XFF headers instead of the default X-forwarded-for header
	XffAlternativeNames interface{}
}
