// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ltm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-f5bigip/sdk/v3/go/f5bigip/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `ltm.ProfileRewriteUriRules` Configures uri rewrite rules attached to the ltm rewrite profile
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-f5bigip/sdk/v3/go/f5bigip/ltm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tftest, err := ltm.NewProfileRewrite(ctx, "tftest", &ltm.ProfileRewriteArgs{
//				Name:         pulumi.String("/Common/tf_profile"),
//				DefaultsFrom: pulumi.String("/Common/rewrite"),
//				RewriteMode:  pulumi.String("uri-translation"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ltm.NewProfileRewriteUriRules(ctx, "tftestrule1", &ltm.ProfileRewriteUriRulesArgs{
//				ProfileName: tftest.Name,
//				RuleName:    pulumi.String("tf_rule"),
//				RuleType:    pulumi.String("request"),
//				Clients: ltm.ProfileRewriteUriRulesClientArray{
//					&ltm.ProfileRewriteUriRulesClientArgs{
//						Host:   pulumi.String("www.foo.com"),
//						Scheme: pulumi.String("https"),
//					},
//				},
//				Servers: ltm.ProfileRewriteUriRulesServerArray{
//					&ltm.ProfileRewriteUriRulesServerArgs{
//						Host:   pulumi.String("www.bar.com"),
//						Path:   pulumi.String("/this/"),
//						Scheme: pulumi.String("https"),
//						Port:   pulumi.String("8888"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ltm.NewProfileRewriteUriRules(ctx, "tftestrule2", &ltm.ProfileRewriteUriRulesArgs{
//				ProfileName: tftest.Name,
//				RuleName:    pulumi.String("tf_rule2"),
//				Clients: ltm.ProfileRewriteUriRulesClientArray{
//					&ltm.ProfileRewriteUriRulesClientArgs{
//						Host:   pulumi.String("www.baz.com"),
//						Path:   pulumi.String("/that/"),
//						Scheme: pulumi.String("ftp"),
//						Port:   pulumi.String("8888"),
//					},
//				},
//				Servers: ltm.ProfileRewriteUriRulesServerArray{
//					&ltm.ProfileRewriteUriRulesServerArgs{
//						Host:   pulumi.String("www.buz.com"),
//						Path:   pulumi.String("/those/"),
//						Scheme: pulumi.String("ftps"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ProfileRewriteUriRules struct {
	pulumi.CustomResourceState

	// Block type. Each request is block type with following arguments.
	Clients ProfileRewriteUriRulesClientArrayOutput `pulumi:"clients"`
	// Name of the rewrite profile. ( policy name should be in full path which is combination of partition and policy name )
	ProfileName pulumi.StringOutput `pulumi:"profileName"`
	// Specifies the name of the uri rule.
	RuleName pulumi.StringOutput `pulumi:"ruleName"`
	// Specifies the type of the uri rule. Valid choices are: `request, response, both`. Default value is: `both`
	RuleType pulumi.StringPtrOutput `pulumi:"ruleType"`
	// Block type. Each request is block type with following arguments.
	Servers ProfileRewriteUriRulesServerArrayOutput `pulumi:"servers"`
}

// NewProfileRewriteUriRules registers a new resource with the given unique name, arguments, and options.
func NewProfileRewriteUriRules(ctx *pulumi.Context,
	name string, args *ProfileRewriteUriRulesArgs, opts ...pulumi.ResourceOption) (*ProfileRewriteUriRules, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Clients == nil {
		return nil, errors.New("invalid value for required argument 'Clients'")
	}
	if args.ProfileName == nil {
		return nil, errors.New("invalid value for required argument 'ProfileName'")
	}
	if args.RuleName == nil {
		return nil, errors.New("invalid value for required argument 'RuleName'")
	}
	if args.Servers == nil {
		return nil, errors.New("invalid value for required argument 'Servers'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProfileRewriteUriRules
	err := ctx.RegisterResource("f5bigip:ltm/profileRewriteUriRules:ProfileRewriteUriRules", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProfileRewriteUriRules gets an existing ProfileRewriteUriRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProfileRewriteUriRules(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProfileRewriteUriRulesState, opts ...pulumi.ResourceOption) (*ProfileRewriteUriRules, error) {
	var resource ProfileRewriteUriRules
	err := ctx.ReadResource("f5bigip:ltm/profileRewriteUriRules:ProfileRewriteUriRules", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProfileRewriteUriRules resources.
type profileRewriteUriRulesState struct {
	// Block type. Each request is block type with following arguments.
	Clients []ProfileRewriteUriRulesClient `pulumi:"clients"`
	// Name of the rewrite profile. ( policy name should be in full path which is combination of partition and policy name )
	ProfileName *string `pulumi:"profileName"`
	// Specifies the name of the uri rule.
	RuleName *string `pulumi:"ruleName"`
	// Specifies the type of the uri rule. Valid choices are: `request, response, both`. Default value is: `both`
	RuleType *string `pulumi:"ruleType"`
	// Block type. Each request is block type with following arguments.
	Servers []ProfileRewriteUriRulesServer `pulumi:"servers"`
}

type ProfileRewriteUriRulesState struct {
	// Block type. Each request is block type with following arguments.
	Clients ProfileRewriteUriRulesClientArrayInput
	// Name of the rewrite profile. ( policy name should be in full path which is combination of partition and policy name )
	ProfileName pulumi.StringPtrInput
	// Specifies the name of the uri rule.
	RuleName pulumi.StringPtrInput
	// Specifies the type of the uri rule. Valid choices are: `request, response, both`. Default value is: `both`
	RuleType pulumi.StringPtrInput
	// Block type. Each request is block type with following arguments.
	Servers ProfileRewriteUriRulesServerArrayInput
}

func (ProfileRewriteUriRulesState) ElementType() reflect.Type {
	return reflect.TypeOf((*profileRewriteUriRulesState)(nil)).Elem()
}

type profileRewriteUriRulesArgs struct {
	// Block type. Each request is block type with following arguments.
	Clients []ProfileRewriteUriRulesClient `pulumi:"clients"`
	// Name of the rewrite profile. ( policy name should be in full path which is combination of partition and policy name )
	ProfileName string `pulumi:"profileName"`
	// Specifies the name of the uri rule.
	RuleName string `pulumi:"ruleName"`
	// Specifies the type of the uri rule. Valid choices are: `request, response, both`. Default value is: `both`
	RuleType *string `pulumi:"ruleType"`
	// Block type. Each request is block type with following arguments.
	Servers []ProfileRewriteUriRulesServer `pulumi:"servers"`
}

// The set of arguments for constructing a ProfileRewriteUriRules resource.
type ProfileRewriteUriRulesArgs struct {
	// Block type. Each request is block type with following arguments.
	Clients ProfileRewriteUriRulesClientArrayInput
	// Name of the rewrite profile. ( policy name should be in full path which is combination of partition and policy name )
	ProfileName pulumi.StringInput
	// Specifies the name of the uri rule.
	RuleName pulumi.StringInput
	// Specifies the type of the uri rule. Valid choices are: `request, response, both`. Default value is: `both`
	RuleType pulumi.StringPtrInput
	// Block type. Each request is block type with following arguments.
	Servers ProfileRewriteUriRulesServerArrayInput
}

func (ProfileRewriteUriRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*profileRewriteUriRulesArgs)(nil)).Elem()
}

type ProfileRewriteUriRulesInput interface {
	pulumi.Input

	ToProfileRewriteUriRulesOutput() ProfileRewriteUriRulesOutput
	ToProfileRewriteUriRulesOutputWithContext(ctx context.Context) ProfileRewriteUriRulesOutput
}

func (*ProfileRewriteUriRules) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileRewriteUriRules)(nil)).Elem()
}

func (i *ProfileRewriteUriRules) ToProfileRewriteUriRulesOutput() ProfileRewriteUriRulesOutput {
	return i.ToProfileRewriteUriRulesOutputWithContext(context.Background())
}

func (i *ProfileRewriteUriRules) ToProfileRewriteUriRulesOutputWithContext(ctx context.Context) ProfileRewriteUriRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileRewriteUriRulesOutput)
}

// ProfileRewriteUriRulesArrayInput is an input type that accepts ProfileRewriteUriRulesArray and ProfileRewriteUriRulesArrayOutput values.
// You can construct a concrete instance of `ProfileRewriteUriRulesArrayInput` via:
//
//	ProfileRewriteUriRulesArray{ ProfileRewriteUriRulesArgs{...} }
type ProfileRewriteUriRulesArrayInput interface {
	pulumi.Input

	ToProfileRewriteUriRulesArrayOutput() ProfileRewriteUriRulesArrayOutput
	ToProfileRewriteUriRulesArrayOutputWithContext(context.Context) ProfileRewriteUriRulesArrayOutput
}

type ProfileRewriteUriRulesArray []ProfileRewriteUriRulesInput

func (ProfileRewriteUriRulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProfileRewriteUriRules)(nil)).Elem()
}

func (i ProfileRewriteUriRulesArray) ToProfileRewriteUriRulesArrayOutput() ProfileRewriteUriRulesArrayOutput {
	return i.ToProfileRewriteUriRulesArrayOutputWithContext(context.Background())
}

func (i ProfileRewriteUriRulesArray) ToProfileRewriteUriRulesArrayOutputWithContext(ctx context.Context) ProfileRewriteUriRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileRewriteUriRulesArrayOutput)
}

// ProfileRewriteUriRulesMapInput is an input type that accepts ProfileRewriteUriRulesMap and ProfileRewriteUriRulesMapOutput values.
// You can construct a concrete instance of `ProfileRewriteUriRulesMapInput` via:
//
//	ProfileRewriteUriRulesMap{ "key": ProfileRewriteUriRulesArgs{...} }
type ProfileRewriteUriRulesMapInput interface {
	pulumi.Input

	ToProfileRewriteUriRulesMapOutput() ProfileRewriteUriRulesMapOutput
	ToProfileRewriteUriRulesMapOutputWithContext(context.Context) ProfileRewriteUriRulesMapOutput
}

type ProfileRewriteUriRulesMap map[string]ProfileRewriteUriRulesInput

func (ProfileRewriteUriRulesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProfileRewriteUriRules)(nil)).Elem()
}

func (i ProfileRewriteUriRulesMap) ToProfileRewriteUriRulesMapOutput() ProfileRewriteUriRulesMapOutput {
	return i.ToProfileRewriteUriRulesMapOutputWithContext(context.Background())
}

func (i ProfileRewriteUriRulesMap) ToProfileRewriteUriRulesMapOutputWithContext(ctx context.Context) ProfileRewriteUriRulesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileRewriteUriRulesMapOutput)
}

type ProfileRewriteUriRulesOutput struct{ *pulumi.OutputState }

func (ProfileRewriteUriRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileRewriteUriRules)(nil)).Elem()
}

func (o ProfileRewriteUriRulesOutput) ToProfileRewriteUriRulesOutput() ProfileRewriteUriRulesOutput {
	return o
}

func (o ProfileRewriteUriRulesOutput) ToProfileRewriteUriRulesOutputWithContext(ctx context.Context) ProfileRewriteUriRulesOutput {
	return o
}

// Block type. Each request is block type with following arguments.
func (o ProfileRewriteUriRulesOutput) Clients() ProfileRewriteUriRulesClientArrayOutput {
	return o.ApplyT(func(v *ProfileRewriteUriRules) ProfileRewriteUriRulesClientArrayOutput { return v.Clients }).(ProfileRewriteUriRulesClientArrayOutput)
}

// Name of the rewrite profile. ( policy name should be in full path which is combination of partition and policy name )
func (o ProfileRewriteUriRulesOutput) ProfileName() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileRewriteUriRules) pulumi.StringOutput { return v.ProfileName }).(pulumi.StringOutput)
}

// Specifies the name of the uri rule.
func (o ProfileRewriteUriRulesOutput) RuleName() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileRewriteUriRules) pulumi.StringOutput { return v.RuleName }).(pulumi.StringOutput)
}

// Specifies the type of the uri rule. Valid choices are: `request, response, both`. Default value is: `both`
func (o ProfileRewriteUriRulesOutput) RuleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProfileRewriteUriRules) pulumi.StringPtrOutput { return v.RuleType }).(pulumi.StringPtrOutput)
}

// Block type. Each request is block type with following arguments.
func (o ProfileRewriteUriRulesOutput) Servers() ProfileRewriteUriRulesServerArrayOutput {
	return o.ApplyT(func(v *ProfileRewriteUriRules) ProfileRewriteUriRulesServerArrayOutput { return v.Servers }).(ProfileRewriteUriRulesServerArrayOutput)
}

type ProfileRewriteUriRulesArrayOutput struct{ *pulumi.OutputState }

func (ProfileRewriteUriRulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProfileRewriteUriRules)(nil)).Elem()
}

func (o ProfileRewriteUriRulesArrayOutput) ToProfileRewriteUriRulesArrayOutput() ProfileRewriteUriRulesArrayOutput {
	return o
}

func (o ProfileRewriteUriRulesArrayOutput) ToProfileRewriteUriRulesArrayOutputWithContext(ctx context.Context) ProfileRewriteUriRulesArrayOutput {
	return o
}

func (o ProfileRewriteUriRulesArrayOutput) Index(i pulumi.IntInput) ProfileRewriteUriRulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProfileRewriteUriRules {
		return vs[0].([]*ProfileRewriteUriRules)[vs[1].(int)]
	}).(ProfileRewriteUriRulesOutput)
}

type ProfileRewriteUriRulesMapOutput struct{ *pulumi.OutputState }

func (ProfileRewriteUriRulesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProfileRewriteUriRules)(nil)).Elem()
}

func (o ProfileRewriteUriRulesMapOutput) ToProfileRewriteUriRulesMapOutput() ProfileRewriteUriRulesMapOutput {
	return o
}

func (o ProfileRewriteUriRulesMapOutput) ToProfileRewriteUriRulesMapOutputWithContext(ctx context.Context) ProfileRewriteUriRulesMapOutput {
	return o
}

func (o ProfileRewriteUriRulesMapOutput) MapIndex(k pulumi.StringInput) ProfileRewriteUriRulesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProfileRewriteUriRules {
		return vs[0].(map[string]*ProfileRewriteUriRules)[vs[1].(string)]
	}).(ProfileRewriteUriRulesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileRewriteUriRulesInput)(nil)).Elem(), &ProfileRewriteUriRules{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileRewriteUriRulesArrayInput)(nil)).Elem(), ProfileRewriteUriRulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileRewriteUriRulesMapInput)(nil)).Elem(), ProfileRewriteUriRulesMap{})
	pulumi.RegisterOutputType(ProfileRewriteUriRulesOutput{})
	pulumi.RegisterOutputType(ProfileRewriteUriRulesArrayOutput{})
	pulumi.RegisterOutputType(ProfileRewriteUriRulesMapOutput{})
}
