// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ltm

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// `ltm.ProfileHttp2` Configures a custom profileHttp2 for use by health checks.
//
// For resources should be named with their "full path". The full path is the combination of the partition + name of the resource. For example /Common/my-pool.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-f5bigip/sdk/v2/go/f5bigip/ltm"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		nyhttp2, err := ltm.NewProfileHttp2(ctx, "nyhttp2", &ltm.ProfileHttp2Args{
// 			Name:                           pulumi.String("/Common/test-profile-http2"),
// 			FrameSize:                      pulumi.Int(2021),
// 			ReceiveWindow:                  pulumi.Int(31),
// 			WriteSize:                      pulumi.Int(16380),
// 			HeaderTableSize:                pulumi.Int(4092),
// 			IncludeContentLength:           pulumi.String("enabled"),
// 			EnforceTlsRequirements:         pulumi.String("enabled"),
// 			InsertHeader:                   pulumi.String("disabled"),
// 			ConcurrentStreamsPerConnection: pulumi.Int(30),
// 			ConnectionIdleTimeout:          pulumi.Int(100),
// 			ActivationModes: pulumi.StringArray{
// 				pulumi.String("always"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = ltm.NewProfileHttp2(ctx, "nyhttp2_child", &ltm.ProfileHttp2Args{
// 			Name:         pulumi.String("/Common/test-profile-http2-child"),
// 			DefaultsFrom: nyhttp2.Name,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ProfileHttp2 struct {
	pulumi.CustomResourceState

	// This setting specifies the condition that will cause the BIG-IP system to handle an incoming connection as an HTTP/2 connection, Allowed values : `[“alpn”]` (or) `[“always”]`.
	ActivationModes pulumi.StringArrayOutput `pulumi:"activationModes"`
	// Specifies how many concurrent requests are allowed to be outstanding on a single HTTP/2 connection.
	ConcurrentStreamsPerConnection pulumi.IntOutput `pulumi:"concurrentStreamsPerConnection"`
	// Specifies the number of seconds that a connection is idle before the connection is eligible for deletion.
	ConnectionIdleTimeout pulumi.IntOutput `pulumi:"connectionIdleTimeout"`
	// Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
	DefaultsFrom pulumi.StringOutput `pulumi:"defaultsFrom"`
	// Enable or disable enforcement of TLS requirements,Allowed Values : `"enabled"/"disabled"` [Default:`"enabled"`].
	EnforceTlsRequirements pulumi.StringOutput `pulumi:"enforceTlsRequirements"`
	// The size of the data frames, in bytes, that the HTTP/2 protocol sends to the client. `Default: 2048`.
	FrameSize pulumi.IntOutput `pulumi:"frameSize"`
	// The size of the header table, in KB, for the HTTP headers that the HTTP/2 protocol compresses to save bandwidth.
	HeaderTableSize pulumi.IntOutput `pulumi:"headerTableSize"`
	// Enable to include content-length in HTTP/2 headers,Default : disabled
	IncludeContentLength pulumi.StringOutput `pulumi:"includeContentLength"`
	// This setting specifies whether the BIG-IP system should add an HTTP header to the HTTP request to show that the request was received over HTTP/2, Allowed Values : `"enabled"/"disabled"` [ Default: `"disabled"`].
	InsertHeader pulumi.StringOutput `pulumi:"insertHeader"`
	// This setting specifies the name of the header that the BIG-IP system will add to the HTTP request when the Insert Header is enabled.
	InsertHeaderName pulumi.StringOutput `pulumi:"insertHeaderName"`
	// Name of Profile should be full path.The full path is the combination of the `partition + profile name`,For example `/Common/test-http2-profile`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The flow-control size for upload streams, in KB. `Default: 32`.
	ReceiveWindow pulumi.IntOutput `pulumi:"receiveWindow"`
	// The total size of combined data frames, in bytes, that the HTTP/2 protocol sends in a single write function. `Default: 16384`".
	WriteSize pulumi.IntOutput `pulumi:"writeSize"`
}

// NewProfileHttp2 registers a new resource with the given unique name, arguments, and options.
func NewProfileHttp2(ctx *pulumi.Context,
	name string, args *ProfileHttp2Args, opts ...pulumi.ResourceOption) (*ProfileHttp2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	var resource ProfileHttp2
	err := ctx.RegisterResource("f5bigip:ltm/profileHttp2:ProfileHttp2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProfileHttp2 gets an existing ProfileHttp2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProfileHttp2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProfileHttp2State, opts ...pulumi.ResourceOption) (*ProfileHttp2, error) {
	var resource ProfileHttp2
	err := ctx.ReadResource("f5bigip:ltm/profileHttp2:ProfileHttp2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProfileHttp2 resources.
type profileHttp2State struct {
	// This setting specifies the condition that will cause the BIG-IP system to handle an incoming connection as an HTTP/2 connection, Allowed values : `[“alpn”]` (or) `[“always”]`.
	ActivationModes []string `pulumi:"activationModes"`
	// Specifies how many concurrent requests are allowed to be outstanding on a single HTTP/2 connection.
	ConcurrentStreamsPerConnection *int `pulumi:"concurrentStreamsPerConnection"`
	// Specifies the number of seconds that a connection is idle before the connection is eligible for deletion.
	ConnectionIdleTimeout *int `pulumi:"connectionIdleTimeout"`
	// Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
	DefaultsFrom *string `pulumi:"defaultsFrom"`
	// Enable or disable enforcement of TLS requirements,Allowed Values : `"enabled"/"disabled"` [Default:`"enabled"`].
	EnforceTlsRequirements *string `pulumi:"enforceTlsRequirements"`
	// The size of the data frames, in bytes, that the HTTP/2 protocol sends to the client. `Default: 2048`.
	FrameSize *int `pulumi:"frameSize"`
	// The size of the header table, in KB, for the HTTP headers that the HTTP/2 protocol compresses to save bandwidth.
	HeaderTableSize *int `pulumi:"headerTableSize"`
	// Enable to include content-length in HTTP/2 headers,Default : disabled
	IncludeContentLength *string `pulumi:"includeContentLength"`
	// This setting specifies whether the BIG-IP system should add an HTTP header to the HTTP request to show that the request was received over HTTP/2, Allowed Values : `"enabled"/"disabled"` [ Default: `"disabled"`].
	InsertHeader *string `pulumi:"insertHeader"`
	// This setting specifies the name of the header that the BIG-IP system will add to the HTTP request when the Insert Header is enabled.
	InsertHeaderName *string `pulumi:"insertHeaderName"`
	// Name of Profile should be full path.The full path is the combination of the `partition + profile name`,For example `/Common/test-http2-profile`.
	Name *string `pulumi:"name"`
	// The flow-control size for upload streams, in KB. `Default: 32`.
	ReceiveWindow *int `pulumi:"receiveWindow"`
	// The total size of combined data frames, in bytes, that the HTTP/2 protocol sends in a single write function. `Default: 16384`".
	WriteSize *int `pulumi:"writeSize"`
}

type ProfileHttp2State struct {
	// This setting specifies the condition that will cause the BIG-IP system to handle an incoming connection as an HTTP/2 connection, Allowed values : `[“alpn”]` (or) `[“always”]`.
	ActivationModes pulumi.StringArrayInput
	// Specifies how many concurrent requests are allowed to be outstanding on a single HTTP/2 connection.
	ConcurrentStreamsPerConnection pulumi.IntPtrInput
	// Specifies the number of seconds that a connection is idle before the connection is eligible for deletion.
	ConnectionIdleTimeout pulumi.IntPtrInput
	// Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
	DefaultsFrom pulumi.StringPtrInput
	// Enable or disable enforcement of TLS requirements,Allowed Values : `"enabled"/"disabled"` [Default:`"enabled"`].
	EnforceTlsRequirements pulumi.StringPtrInput
	// The size of the data frames, in bytes, that the HTTP/2 protocol sends to the client. `Default: 2048`.
	FrameSize pulumi.IntPtrInput
	// The size of the header table, in KB, for the HTTP headers that the HTTP/2 protocol compresses to save bandwidth.
	HeaderTableSize pulumi.IntPtrInput
	// Enable to include content-length in HTTP/2 headers,Default : disabled
	IncludeContentLength pulumi.StringPtrInput
	// This setting specifies whether the BIG-IP system should add an HTTP header to the HTTP request to show that the request was received over HTTP/2, Allowed Values : `"enabled"/"disabled"` [ Default: `"disabled"`].
	InsertHeader pulumi.StringPtrInput
	// This setting specifies the name of the header that the BIG-IP system will add to the HTTP request when the Insert Header is enabled.
	InsertHeaderName pulumi.StringPtrInput
	// Name of Profile should be full path.The full path is the combination of the `partition + profile name`,For example `/Common/test-http2-profile`.
	Name pulumi.StringPtrInput
	// The flow-control size for upload streams, in KB. `Default: 32`.
	ReceiveWindow pulumi.IntPtrInput
	// The total size of combined data frames, in bytes, that the HTTP/2 protocol sends in a single write function. `Default: 16384`".
	WriteSize pulumi.IntPtrInput
}

func (ProfileHttp2State) ElementType() reflect.Type {
	return reflect.TypeOf((*profileHttp2State)(nil)).Elem()
}

type profileHttp2Args struct {
	// This setting specifies the condition that will cause the BIG-IP system to handle an incoming connection as an HTTP/2 connection, Allowed values : `[“alpn”]` (or) `[“always”]`.
	ActivationModes []string `pulumi:"activationModes"`
	// Specifies how many concurrent requests are allowed to be outstanding on a single HTTP/2 connection.
	ConcurrentStreamsPerConnection *int `pulumi:"concurrentStreamsPerConnection"`
	// Specifies the number of seconds that a connection is idle before the connection is eligible for deletion.
	ConnectionIdleTimeout *int `pulumi:"connectionIdleTimeout"`
	// Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
	DefaultsFrom *string `pulumi:"defaultsFrom"`
	// Enable or disable enforcement of TLS requirements,Allowed Values : `"enabled"/"disabled"` [Default:`"enabled"`].
	EnforceTlsRequirements *string `pulumi:"enforceTlsRequirements"`
	// The size of the data frames, in bytes, that the HTTP/2 protocol sends to the client. `Default: 2048`.
	FrameSize *int `pulumi:"frameSize"`
	// The size of the header table, in KB, for the HTTP headers that the HTTP/2 protocol compresses to save bandwidth.
	HeaderTableSize *int `pulumi:"headerTableSize"`
	// Enable to include content-length in HTTP/2 headers,Default : disabled
	IncludeContentLength *string `pulumi:"includeContentLength"`
	// This setting specifies whether the BIG-IP system should add an HTTP header to the HTTP request to show that the request was received over HTTP/2, Allowed Values : `"enabled"/"disabled"` [ Default: `"disabled"`].
	InsertHeader *string `pulumi:"insertHeader"`
	// This setting specifies the name of the header that the BIG-IP system will add to the HTTP request when the Insert Header is enabled.
	InsertHeaderName *string `pulumi:"insertHeaderName"`
	// Name of Profile should be full path.The full path is the combination of the `partition + profile name`,For example `/Common/test-http2-profile`.
	Name string `pulumi:"name"`
	// The flow-control size for upload streams, in KB. `Default: 32`.
	ReceiveWindow *int `pulumi:"receiveWindow"`
	// The total size of combined data frames, in bytes, that the HTTP/2 protocol sends in a single write function. `Default: 16384`".
	WriteSize *int `pulumi:"writeSize"`
}

// The set of arguments for constructing a ProfileHttp2 resource.
type ProfileHttp2Args struct {
	// This setting specifies the condition that will cause the BIG-IP system to handle an incoming connection as an HTTP/2 connection, Allowed values : `[“alpn”]` (or) `[“always”]`.
	ActivationModes pulumi.StringArrayInput
	// Specifies how many concurrent requests are allowed to be outstanding on a single HTTP/2 connection.
	ConcurrentStreamsPerConnection pulumi.IntPtrInput
	// Specifies the number of seconds that a connection is idle before the connection is eligible for deletion.
	ConnectionIdleTimeout pulumi.IntPtrInput
	// Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
	DefaultsFrom pulumi.StringPtrInput
	// Enable or disable enforcement of TLS requirements,Allowed Values : `"enabled"/"disabled"` [Default:`"enabled"`].
	EnforceTlsRequirements pulumi.StringPtrInput
	// The size of the data frames, in bytes, that the HTTP/2 protocol sends to the client. `Default: 2048`.
	FrameSize pulumi.IntPtrInput
	// The size of the header table, in KB, for the HTTP headers that the HTTP/2 protocol compresses to save bandwidth.
	HeaderTableSize pulumi.IntPtrInput
	// Enable to include content-length in HTTP/2 headers,Default : disabled
	IncludeContentLength pulumi.StringPtrInput
	// This setting specifies whether the BIG-IP system should add an HTTP header to the HTTP request to show that the request was received over HTTP/2, Allowed Values : `"enabled"/"disabled"` [ Default: `"disabled"`].
	InsertHeader pulumi.StringPtrInput
	// This setting specifies the name of the header that the BIG-IP system will add to the HTTP request when the Insert Header is enabled.
	InsertHeaderName pulumi.StringPtrInput
	// Name of Profile should be full path.The full path is the combination of the `partition + profile name`,For example `/Common/test-http2-profile`.
	Name pulumi.StringInput
	// The flow-control size for upload streams, in KB. `Default: 32`.
	ReceiveWindow pulumi.IntPtrInput
	// The total size of combined data frames, in bytes, that the HTTP/2 protocol sends in a single write function. `Default: 16384`".
	WriteSize pulumi.IntPtrInput
}

func (ProfileHttp2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*profileHttp2Args)(nil)).Elem()
}

type ProfileHttp2Input interface {
	pulumi.Input

	ToProfileHttp2Output() ProfileHttp2Output
	ToProfileHttp2OutputWithContext(ctx context.Context) ProfileHttp2Output
}

func (*ProfileHttp2) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileHttp2)(nil))
}

func (i *ProfileHttp2) ToProfileHttp2Output() ProfileHttp2Output {
	return i.ToProfileHttp2OutputWithContext(context.Background())
}

func (i *ProfileHttp2) ToProfileHttp2OutputWithContext(ctx context.Context) ProfileHttp2Output {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileHttp2Output)
}

func (i *ProfileHttp2) ToProfileHttp2PtrOutput() ProfileHttp2PtrOutput {
	return i.ToProfileHttp2PtrOutputWithContext(context.Background())
}

func (i *ProfileHttp2) ToProfileHttp2PtrOutputWithContext(ctx context.Context) ProfileHttp2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileHttp2PtrOutput)
}

type ProfileHttp2PtrInput interface {
	pulumi.Input

	ToProfileHttp2PtrOutput() ProfileHttp2PtrOutput
	ToProfileHttp2PtrOutputWithContext(ctx context.Context) ProfileHttp2PtrOutput
}

type profileHttp2PtrType ProfileHttp2Args

func (*profileHttp2PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileHttp2)(nil))
}

func (i *profileHttp2PtrType) ToProfileHttp2PtrOutput() ProfileHttp2PtrOutput {
	return i.ToProfileHttp2PtrOutputWithContext(context.Background())
}

func (i *profileHttp2PtrType) ToProfileHttp2PtrOutputWithContext(ctx context.Context) ProfileHttp2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileHttp2PtrOutput)
}

// ProfileHttp2ArrayInput is an input type that accepts ProfileHttp2Array and ProfileHttp2ArrayOutput values.
// You can construct a concrete instance of `ProfileHttp2ArrayInput` via:
//
//          ProfileHttp2Array{ ProfileHttp2Args{...} }
type ProfileHttp2ArrayInput interface {
	pulumi.Input

	ToProfileHttp2ArrayOutput() ProfileHttp2ArrayOutput
	ToProfileHttp2ArrayOutputWithContext(context.Context) ProfileHttp2ArrayOutput
}

type ProfileHttp2Array []ProfileHttp2Input

func (ProfileHttp2Array) ElementType() reflect.Type {
	return reflect.TypeOf(([]*ProfileHttp2)(nil))
}

func (i ProfileHttp2Array) ToProfileHttp2ArrayOutput() ProfileHttp2ArrayOutput {
	return i.ToProfileHttp2ArrayOutputWithContext(context.Background())
}

func (i ProfileHttp2Array) ToProfileHttp2ArrayOutputWithContext(ctx context.Context) ProfileHttp2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileHttp2ArrayOutput)
}

// ProfileHttp2MapInput is an input type that accepts ProfileHttp2Map and ProfileHttp2MapOutput values.
// You can construct a concrete instance of `ProfileHttp2MapInput` via:
//
//          ProfileHttp2Map{ "key": ProfileHttp2Args{...} }
type ProfileHttp2MapInput interface {
	pulumi.Input

	ToProfileHttp2MapOutput() ProfileHttp2MapOutput
	ToProfileHttp2MapOutputWithContext(context.Context) ProfileHttp2MapOutput
}

type ProfileHttp2Map map[string]ProfileHttp2Input

func (ProfileHttp2Map) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*ProfileHttp2)(nil))
}

func (i ProfileHttp2Map) ToProfileHttp2MapOutput() ProfileHttp2MapOutput {
	return i.ToProfileHttp2MapOutputWithContext(context.Background())
}

func (i ProfileHttp2Map) ToProfileHttp2MapOutputWithContext(ctx context.Context) ProfileHttp2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileHttp2MapOutput)
}

type ProfileHttp2Output struct {
	*pulumi.OutputState
}

func (ProfileHttp2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileHttp2)(nil))
}

func (o ProfileHttp2Output) ToProfileHttp2Output() ProfileHttp2Output {
	return o
}

func (o ProfileHttp2Output) ToProfileHttp2OutputWithContext(ctx context.Context) ProfileHttp2Output {
	return o
}

func (o ProfileHttp2Output) ToProfileHttp2PtrOutput() ProfileHttp2PtrOutput {
	return o.ToProfileHttp2PtrOutputWithContext(context.Background())
}

func (o ProfileHttp2Output) ToProfileHttp2PtrOutputWithContext(ctx context.Context) ProfileHttp2PtrOutput {
	return o.ApplyT(func(v ProfileHttp2) *ProfileHttp2 {
		return &v
	}).(ProfileHttp2PtrOutput)
}

type ProfileHttp2PtrOutput struct {
	*pulumi.OutputState
}

func (ProfileHttp2PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileHttp2)(nil))
}

func (o ProfileHttp2PtrOutput) ToProfileHttp2PtrOutput() ProfileHttp2PtrOutput {
	return o
}

func (o ProfileHttp2PtrOutput) ToProfileHttp2PtrOutputWithContext(ctx context.Context) ProfileHttp2PtrOutput {
	return o
}

type ProfileHttp2ArrayOutput struct{ *pulumi.OutputState }

func (ProfileHttp2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileHttp2)(nil))
}

func (o ProfileHttp2ArrayOutput) ToProfileHttp2ArrayOutput() ProfileHttp2ArrayOutput {
	return o
}

func (o ProfileHttp2ArrayOutput) ToProfileHttp2ArrayOutputWithContext(ctx context.Context) ProfileHttp2ArrayOutput {
	return o
}

func (o ProfileHttp2ArrayOutput) Index(i pulumi.IntInput) ProfileHttp2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProfileHttp2 {
		return vs[0].([]ProfileHttp2)[vs[1].(int)]
	}).(ProfileHttp2Output)
}

type ProfileHttp2MapOutput struct{ *pulumi.OutputState }

func (ProfileHttp2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ProfileHttp2)(nil))
}

func (o ProfileHttp2MapOutput) ToProfileHttp2MapOutput() ProfileHttp2MapOutput {
	return o
}

func (o ProfileHttp2MapOutput) ToProfileHttp2MapOutputWithContext(ctx context.Context) ProfileHttp2MapOutput {
	return o
}

func (o ProfileHttp2MapOutput) MapIndex(k pulumi.StringInput) ProfileHttp2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ProfileHttp2 {
		return vs[0].(map[string]ProfileHttp2)[vs[1].(string)]
	}).(ProfileHttp2Output)
}

func init() {
	pulumi.RegisterOutputType(ProfileHttp2Output{})
	pulumi.RegisterOutputType(ProfileHttp2PtrOutput{})
	pulumi.RegisterOutputType(ProfileHttp2ArrayOutput{})
	pulumi.RegisterOutputType(ProfileHttp2MapOutput{})
}
