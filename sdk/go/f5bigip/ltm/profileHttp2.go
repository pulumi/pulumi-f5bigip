// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ltm

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ProfileHttp2 struct {
	s *pulumi.ResourceState
}

// NewProfileHttp2 registers a new resource with the given unique name, arguments, and options.
func NewProfileHttp2(ctx *pulumi.Context,
	name string, args *ProfileHttp2Args, opts ...pulumi.ResourceOpt) (*ProfileHttp2, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["activationModes"] = nil
		inputs["concurrentStreamsPerConnection"] = nil
		inputs["connectionIdleTimeout"] = nil
		inputs["defaultsFrom"] = nil
		inputs["headerTableSize"] = nil
		inputs["name"] = nil
	} else {
		inputs["activationModes"] = args.ActivationModes
		inputs["concurrentStreamsPerConnection"] = args.ConcurrentStreamsPerConnection
		inputs["connectionIdleTimeout"] = args.ConnectionIdleTimeout
		inputs["defaultsFrom"] = args.DefaultsFrom
		inputs["headerTableSize"] = args.HeaderTableSize
		inputs["name"] = args.Name
	}
	s, err := ctx.RegisterResource("f5bigip:ltm/profileHttp2:ProfileHttp2", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProfileHttp2{s: s}, nil
}

// GetProfileHttp2 gets an existing ProfileHttp2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProfileHttp2(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProfileHttp2State, opts ...pulumi.ResourceOpt) (*ProfileHttp2, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["activationModes"] = state.ActivationModes
		inputs["concurrentStreamsPerConnection"] = state.ConcurrentStreamsPerConnection
		inputs["connectionIdleTimeout"] = state.ConnectionIdleTimeout
		inputs["defaultsFrom"] = state.DefaultsFrom
		inputs["headerTableSize"] = state.HeaderTableSize
		inputs["name"] = state.Name
	}
	s, err := ctx.ReadResource("f5bigip:ltm/profileHttp2:ProfileHttp2", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProfileHttp2{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ProfileHttp2) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ProfileHttp2) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Servers Address
func (r *ProfileHttp2) ActivationModes() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["activationModes"])
}

// Use the parent Http2 profile
func (r *ProfileHttp2) ConcurrentStreamsPerConnection() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["concurrentStreamsPerConnection"])
}

// Use the parent Http2 profile
func (r *ProfileHttp2) ConnectionIdleTimeout() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["connectionIdleTimeout"])
}

// Use the parent Http2 profile
func (r *ProfileHttp2) DefaultsFrom() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["defaultsFrom"])
}

// Use the parent Http2 profile
func (r *ProfileHttp2) HeaderTableSize() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["headerTableSize"])
}

// Name of the Http2 Profile
func (r *ProfileHttp2) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Input properties used for looking up and filtering ProfileHttp2 resources.
type ProfileHttp2State struct {
	// Servers Address
	ActivationModes interface{}
	// Use the parent Http2 profile
	ConcurrentStreamsPerConnection interface{}
	// Use the parent Http2 profile
	ConnectionIdleTimeout interface{}
	// Use the parent Http2 profile
	DefaultsFrom interface{}
	// Use the parent Http2 profile
	HeaderTableSize interface{}
	// Name of the Http2 Profile
	Name interface{}
}

// The set of arguments for constructing a ProfileHttp2 resource.
type ProfileHttp2Args struct {
	// Servers Address
	ActivationModes interface{}
	// Use the parent Http2 profile
	ConcurrentStreamsPerConnection interface{}
	// Use the parent Http2 profile
	ConnectionIdleTimeout interface{}
	// Use the parent Http2 profile
	DefaultsFrom interface{}
	// Use the parent Http2 profile
	HeaderTableSize interface{}
	// Name of the Http2 Profile
	Name interface{}
}
