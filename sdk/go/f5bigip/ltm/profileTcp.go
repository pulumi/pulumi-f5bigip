// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ltm

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ProfileTcp struct {
	s *pulumi.ResourceState
}

// NewProfileTcp registers a new resource with the given unique name, arguments, and options.
func NewProfileTcp(ctx *pulumi.Context,
	name string, args *ProfileTcpArgs, opts ...pulumi.ResourceOpt) (*ProfileTcp, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["closeWaitTimeout"] = nil
		inputs["defaultsFrom"] = nil
		inputs["deferredAccept"] = nil
		inputs["fastOpen"] = nil
		inputs["finwait2timeout"] = nil
		inputs["finwaitTimeout"] = nil
		inputs["idleTimeout"] = nil
		inputs["keepaliveInterval"] = nil
		inputs["name"] = nil
		inputs["partition"] = nil
	} else {
		inputs["closeWaitTimeout"] = args.CloseWaitTimeout
		inputs["defaultsFrom"] = args.DefaultsFrom
		inputs["deferredAccept"] = args.DeferredAccept
		inputs["fastOpen"] = args.FastOpen
		inputs["finwait2timeout"] = args.Finwait2timeout
		inputs["finwaitTimeout"] = args.FinwaitTimeout
		inputs["idleTimeout"] = args.IdleTimeout
		inputs["keepaliveInterval"] = args.KeepaliveInterval
		inputs["name"] = args.Name
		inputs["partition"] = args.Partition
	}
	s, err := ctx.RegisterResource("f5bigip:ltm/profileTcp:ProfileTcp", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProfileTcp{s: s}, nil
}

// GetProfileTcp gets an existing ProfileTcp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProfileTcp(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProfileTcpState, opts ...pulumi.ResourceOpt) (*ProfileTcp, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["closeWaitTimeout"] = state.CloseWaitTimeout
		inputs["defaultsFrom"] = state.DefaultsFrom
		inputs["deferredAccept"] = state.DeferredAccept
		inputs["fastOpen"] = state.FastOpen
		inputs["finwait2timeout"] = state.Finwait2timeout
		inputs["finwaitTimeout"] = state.FinwaitTimeout
		inputs["idleTimeout"] = state.IdleTimeout
		inputs["keepaliveInterval"] = state.KeepaliveInterval
		inputs["name"] = state.Name
		inputs["partition"] = state.Partition
	}
	s, err := ctx.ReadResource("f5bigip:ltm/profileTcp:ProfileTcp", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProfileTcp{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ProfileTcp) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ProfileTcp) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// close wait timer integer
func (r *ProfileTcp) CloseWaitTimeout() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["closeWaitTimeout"])
}

// Use the parent tcp profile
func (r *ProfileTcp) DefaultsFrom() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["defaultsFrom"])
}

// Defferred accept
func (r *ProfileTcp) DeferredAccept() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["deferredAccept"])
}

// fast_open value
func (r *ProfileTcp) FastOpen() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["fastOpen"])
}

// timer integer
func (r *ProfileTcp) Finwait2timeout() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["finwait2timeout"])
}

// fin wait timer integer
func (r *ProfileTcp) FinwaitTimeout() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["finwaitTimeout"])
}

// idle_timeout can be given value
func (r *ProfileTcp) IdleTimeout() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["idleTimeout"])
}

// keepalive_interval timer integer
func (r *ProfileTcp) KeepaliveInterval() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["keepaliveInterval"])
}

// Name of the TCP Profile
func (r *ProfileTcp) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// name of partition
func (r *ProfileTcp) Partition() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["partition"])
}

// Input properties used for looking up and filtering ProfileTcp resources.
type ProfileTcpState struct {
	// close wait timer integer
	CloseWaitTimeout interface{}
	// Use the parent tcp profile
	DefaultsFrom interface{}
	// Defferred accept
	DeferredAccept interface{}
	// fast_open value
	FastOpen interface{}
	// timer integer
	Finwait2timeout interface{}
	// fin wait timer integer
	FinwaitTimeout interface{}
	// idle_timeout can be given value
	IdleTimeout interface{}
	// keepalive_interval timer integer
	KeepaliveInterval interface{}
	// Name of the TCP Profile
	Name interface{}
	// name of partition
	Partition interface{}
}

// The set of arguments for constructing a ProfileTcp resource.
type ProfileTcpArgs struct {
	// close wait timer integer
	CloseWaitTimeout interface{}
	// Use the parent tcp profile
	DefaultsFrom interface{}
	// Defferred accept
	DeferredAccept interface{}
	// fast_open value
	FastOpen interface{}
	// timer integer
	Finwait2timeout interface{}
	// fin wait timer integer
	FinwaitTimeout interface{}
	// idle_timeout can be given value
	IdleTimeout interface{}
	// keepalive_interval timer integer
	KeepaliveInterval interface{}
	// Name of the TCP Profile
	Name interface{}
	// name of partition
	Partition interface{}
}
