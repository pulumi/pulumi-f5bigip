// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ltm

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// `bigip_ltm_profile_tcp` Configures a custom profile_tcp for use by health checks.
// 
// For resources should be named with their "full path". The full path is the combination of the partition + name of the resource. For example /Common/my-pool.
type ProfileTcp struct {
	s *pulumi.ResourceState
}

// NewProfileTcp registers a new resource with the given unique name, arguments, and options.
func NewProfileTcp(ctx *pulumi.Context,
	name string, args *ProfileTcpArgs, opts ...pulumi.ResourceOpt) (*ProfileTcp, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["closeWaitTimeout"] = nil
		inputs["defaultsFrom"] = nil
		inputs["deferredAccept"] = nil
		inputs["fastOpen"] = nil
		inputs["finwait2timeout"] = nil
		inputs["finwaitTimeout"] = nil
		inputs["idleTimeout"] = nil
		inputs["keepaliveInterval"] = nil
		inputs["name"] = nil
		inputs["partition"] = nil
	} else {
		inputs["closeWaitTimeout"] = args.CloseWaitTimeout
		inputs["defaultsFrom"] = args.DefaultsFrom
		inputs["deferredAccept"] = args.DeferredAccept
		inputs["fastOpen"] = args.FastOpen
		inputs["finwait2timeout"] = args.Finwait2timeout
		inputs["finwaitTimeout"] = args.FinwaitTimeout
		inputs["idleTimeout"] = args.IdleTimeout
		inputs["keepaliveInterval"] = args.KeepaliveInterval
		inputs["name"] = args.Name
		inputs["partition"] = args.Partition
	}
	s, err := ctx.RegisterResource("f5bigip:ltm/profileTcp:ProfileTcp", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProfileTcp{s: s}, nil
}

// GetProfileTcp gets an existing ProfileTcp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProfileTcp(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProfileTcpState, opts ...pulumi.ResourceOpt) (*ProfileTcp, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["closeWaitTimeout"] = state.CloseWaitTimeout
		inputs["defaultsFrom"] = state.DefaultsFrom
		inputs["deferredAccept"] = state.DeferredAccept
		inputs["fastOpen"] = state.FastOpen
		inputs["finwait2timeout"] = state.Finwait2timeout
		inputs["finwaitTimeout"] = state.FinwaitTimeout
		inputs["idleTimeout"] = state.IdleTimeout
		inputs["keepaliveInterval"] = state.KeepaliveInterval
		inputs["name"] = state.Name
		inputs["partition"] = state.Partition
	}
	s, err := ctx.ReadResource("f5bigip:ltm/profileTcp:ProfileTcp", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProfileTcp{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ProfileTcp) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ProfileTcp) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Specifies the number of seconds that a connection remains in a LAST-ACK state before quitting. A value of 0 represents a term of forever (or until the maxrtx of the FIN state). The default value is 5 seconds.
func (r *ProfileTcp) CloseWaitTimeout() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["closeWaitTimeout"])
}

// Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
func (r *ProfileTcp) DefaultsFrom() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["defaultsFrom"])
}

// Specifies, when enabled, that the system defers allocation of the connection chain context until the client response is received. This option is useful for dealing with 3-way handshake DOS attacks. The default value is disabled.
func (r *ProfileTcp) DeferredAccept() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["deferredAccept"])
}

// When enabled, permits TCP Fast Open, allowing properly equipped TCP clients to send data with the SYN packet.
func (r *ProfileTcp) FastOpen() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["fastOpen"])
}

// Specifies the number of seconds that a connection is in the FIN-WAIT-2 state before quitting. The default value is 300 seconds. A value of 0 (zero) represents a term of forever (or until the maxrtx of the FIN state).
func (r *ProfileTcp) Finwait2timeout() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["finwait2timeout"])
}

// Specifies the number of seconds that a connection is in the FIN-WAIT-1 or closing state before quitting. The default value is 5 seconds. A value of 0 (zero) represents a term of forever (or until the maxrtx of the FIN state). You can also specify immediate or indefinite.
func (r *ProfileTcp) FinwaitTimeout() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["finwaitTimeout"])
}

// Specifies the number of seconds that a connection is idle before the connection is eligible for deletion. The default value is 300 seconds.
func (r *ProfileTcp) IdleTimeout() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["idleTimeout"])
}

// Specifies the keep alive probe interval, in seconds. The default value is 1800 seconds.
func (r *ProfileTcp) KeepaliveInterval() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["keepaliveInterval"])
}

// Name of the profile_tcp
func (r *ProfileTcp) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Displays the administrative partition within which this profile resides
func (r *ProfileTcp) Partition() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["partition"])
}

// Input properties used for looking up and filtering ProfileTcp resources.
type ProfileTcpState struct {
	// Specifies the number of seconds that a connection remains in a LAST-ACK state before quitting. A value of 0 represents a term of forever (or until the maxrtx of the FIN state). The default value is 5 seconds.
	CloseWaitTimeout interface{}
	// Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
	DefaultsFrom interface{}
	// Specifies, when enabled, that the system defers allocation of the connection chain context until the client response is received. This option is useful for dealing with 3-way handshake DOS attacks. The default value is disabled.
	DeferredAccept interface{}
	// When enabled, permits TCP Fast Open, allowing properly equipped TCP clients to send data with the SYN packet.
	FastOpen interface{}
	// Specifies the number of seconds that a connection is in the FIN-WAIT-2 state before quitting. The default value is 300 seconds. A value of 0 (zero) represents a term of forever (or until the maxrtx of the FIN state).
	Finwait2timeout interface{}
	// Specifies the number of seconds that a connection is in the FIN-WAIT-1 or closing state before quitting. The default value is 5 seconds. A value of 0 (zero) represents a term of forever (or until the maxrtx of the FIN state). You can also specify immediate or indefinite.
	FinwaitTimeout interface{}
	// Specifies the number of seconds that a connection is idle before the connection is eligible for deletion. The default value is 300 seconds.
	IdleTimeout interface{}
	// Specifies the keep alive probe interval, in seconds. The default value is 1800 seconds.
	KeepaliveInterval interface{}
	// Name of the profile_tcp
	Name interface{}
	// Displays the administrative partition within which this profile resides
	Partition interface{}
}

// The set of arguments for constructing a ProfileTcp resource.
type ProfileTcpArgs struct {
	// Specifies the number of seconds that a connection remains in a LAST-ACK state before quitting. A value of 0 represents a term of forever (or until the maxrtx of the FIN state). The default value is 5 seconds.
	CloseWaitTimeout interface{}
	// Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
	DefaultsFrom interface{}
	// Specifies, when enabled, that the system defers allocation of the connection chain context until the client response is received. This option is useful for dealing with 3-way handshake DOS attacks. The default value is disabled.
	DeferredAccept interface{}
	// When enabled, permits TCP Fast Open, allowing properly equipped TCP clients to send data with the SYN packet.
	FastOpen interface{}
	// Specifies the number of seconds that a connection is in the FIN-WAIT-2 state before quitting. The default value is 300 seconds. A value of 0 (zero) represents a term of forever (or until the maxrtx of the FIN state).
	Finwait2timeout interface{}
	// Specifies the number of seconds that a connection is in the FIN-WAIT-1 or closing state before quitting. The default value is 5 seconds. A value of 0 (zero) represents a term of forever (or until the maxrtx of the FIN state). You can also specify immediate or indefinite.
	FinwaitTimeout interface{}
	// Specifies the number of seconds that a connection is idle before the connection is eligible for deletion. The default value is 300 seconds.
	IdleTimeout interface{}
	// Specifies the keep alive probe interval, in seconds. The default value is 1800 seconds.
	KeepaliveInterval interface{}
	// Name of the profile_tcp
	Name interface{}
	// Displays the administrative partition within which this profile resides
	Partition interface{}
}
