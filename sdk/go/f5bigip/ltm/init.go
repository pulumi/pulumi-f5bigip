// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ltm

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-f5bigip/sdk/v2/go/f5bigip"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "f5bigip:ltm/dataGroup:DataGroup":
		r, err = NewDataGroup(ctx, name, nil, pulumi.URN_(urn))
	case "f5bigip:ltm/iRule:IRule":
		r, err = NewIRule(ctx, name, nil, pulumi.URN_(urn))
	case "f5bigip:ltm/monitor:Monitor":
		r, err = NewMonitor(ctx, name, nil, pulumi.URN_(urn))
	case "f5bigip:ltm/node:Node":
		r, err = NewNode(ctx, name, nil, pulumi.URN_(urn))
	case "f5bigip:ltm/persistenceProfileCookie:PersistenceProfileCookie":
		r, err = NewPersistenceProfileCookie(ctx, name, nil, pulumi.URN_(urn))
	case "f5bigip:ltm/persistenceProfileDstAddr:PersistenceProfileDstAddr":
		r, err = NewPersistenceProfileDstAddr(ctx, name, nil, pulumi.URN_(urn))
	case "f5bigip:ltm/persistenceProfileSrcAddr:PersistenceProfileSrcAddr":
		r, err = NewPersistenceProfileSrcAddr(ctx, name, nil, pulumi.URN_(urn))
	case "f5bigip:ltm/persistenceProfileSsl:PersistenceProfileSsl":
		r, err = NewPersistenceProfileSsl(ctx, name, nil, pulumi.URN_(urn))
	case "f5bigip:ltm/policy:Policy":
		r, err = NewPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "f5bigip:ltm/pool:Pool":
		r, err = NewPool(ctx, name, nil, pulumi.URN_(urn))
	case "f5bigip:ltm/poolAttachment:PoolAttachment":
		r, err = NewPoolAttachment(ctx, name, nil, pulumi.URN_(urn))
	case "f5bigip:ltm/profileClientSsl:ProfileClientSsl":
		r, err = NewProfileClientSsl(ctx, name, nil, pulumi.URN_(urn))
	case "f5bigip:ltm/profileFastHttp:ProfileFastHttp":
		r, err = NewProfileFastHttp(ctx, name, nil, pulumi.URN_(urn))
	case "f5bigip:ltm/profileFastL4:ProfileFastL4":
		r, err = NewProfileFastL4(ctx, name, nil, pulumi.URN_(urn))
	case "f5bigip:ltm/profileHttp2:ProfileHttp2":
		r, err = NewProfileHttp2(ctx, name, nil, pulumi.URN_(urn))
	case "f5bigip:ltm/profileHttp:ProfileHttp":
		r, err = NewProfileHttp(ctx, name, nil, pulumi.URN_(urn))
	case "f5bigip:ltm/profileHttpCompress:ProfileHttpCompress":
		r, err = NewProfileHttpCompress(ctx, name, nil, pulumi.URN_(urn))
	case "f5bigip:ltm/profileOneConnect:ProfileOneConnect":
		r, err = NewProfileOneConnect(ctx, name, nil, pulumi.URN_(urn))
	case "f5bigip:ltm/profileServerSsl:ProfileServerSsl":
		r, err = NewProfileServerSsl(ctx, name, nil, pulumi.URN_(urn))
	case "f5bigip:ltm/profileTcp:ProfileTcp":
		r, err = NewProfileTcp(ctx, name, nil, pulumi.URN_(urn))
	case "f5bigip:ltm/snat:Snat":
		r, err = NewSnat(ctx, name, nil, pulumi.URN_(urn))
	case "f5bigip:ltm/snatPool:SnatPool":
		r, err = NewSnatPool(ctx, name, nil, pulumi.URN_(urn))
	case "f5bigip:ltm/virtualAddress:VirtualAddress":
		r, err = NewVirtualAddress(ctx, name, nil, pulumi.URN_(urn))
	case "f5bigip:ltm/virtualServer:VirtualServer":
		r, err = NewVirtualServer(ctx, name, nil, pulumi.URN_(urn))
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	return
}

func init() {
	version, err := f5bigip.PkgVersion()
	if err != nil {
		fmt.Println("failed to determine package version. defaulting to v1: %v", err)
	}
	pulumi.RegisterResourceModule(
		"f5bigip",
		"ltm/dataGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"ltm/iRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"ltm/monitor",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"ltm/node",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"ltm/persistenceProfileCookie",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"ltm/persistenceProfileDstAddr",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"ltm/persistenceProfileSrcAddr",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"ltm/persistenceProfileSsl",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"ltm/policy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"ltm/pool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"ltm/poolAttachment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"ltm/profileClientSsl",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"ltm/profileFastHttp",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"ltm/profileFastL4",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"ltm/profileHttp",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"ltm/profileHttp2",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"ltm/profileHttpCompress",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"ltm/profileOneConnect",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"ltm/profileServerSsl",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"ltm/profileTcp",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"ltm/snat",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"ltm/snatPool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"ltm/virtualAddress",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"ltm/virtualServer",
		&module{version},
	)
}
