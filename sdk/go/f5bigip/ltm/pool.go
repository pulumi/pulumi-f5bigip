// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ltm

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// `bigip_ltm_pool` Manages a pool configuration.
// 
// Resources should be named with their "full path". The full path is the combination of the partition + name of the resource. For example /Common/my-pool.
type Pool struct {
	s *pulumi.ResourceState
}

// NewPool registers a new resource with the given unique name, arguments, and options.
func NewPool(ctx *pulumi.Context,
	name string, args *PoolArgs, opts ...pulumi.ResourceOpt) (*Pool, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["allowNat"] = nil
		inputs["allowSnat"] = nil
		inputs["loadBalancingMode"] = nil
		inputs["monitors"] = nil
		inputs["name"] = nil
		inputs["reselectTries"] = nil
		inputs["serviceDownAction"] = nil
		inputs["slowRampTime"] = nil
	} else {
		inputs["allowNat"] = args.AllowNat
		inputs["allowSnat"] = args.AllowSnat
		inputs["loadBalancingMode"] = args.LoadBalancingMode
		inputs["monitors"] = args.Monitors
		inputs["name"] = args.Name
		inputs["reselectTries"] = args.ReselectTries
		inputs["serviceDownAction"] = args.ServiceDownAction
		inputs["slowRampTime"] = args.SlowRampTime
	}
	s, err := ctx.RegisterResource("f5bigip:ltm/pool:Pool", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Pool{s: s}, nil
}

// GetPool gets an existing Pool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPool(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PoolState, opts ...pulumi.ResourceOpt) (*Pool, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["allowNat"] = state.AllowNat
		inputs["allowSnat"] = state.AllowSnat
		inputs["loadBalancingMode"] = state.LoadBalancingMode
		inputs["monitors"] = state.Monitors
		inputs["name"] = state.Name
		inputs["reselectTries"] = state.ReselectTries
		inputs["serviceDownAction"] = state.ServiceDownAction
		inputs["slowRampTime"] = state.SlowRampTime
	}
	s, err := ctx.ReadResource("f5bigip:ltm/pool:Pool", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Pool{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Pool) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Pool) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Allow NAT
func (r *Pool) AllowNat() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["allowNat"])
}

// Allow SNAT
func (r *Pool) AllowSnat() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["allowSnat"])
}

// Possible values: round-robin, ...
func (r *Pool) LoadBalancingMode() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["loadBalancingMode"])
}

// List of monitor names to associate with the pool
func (r *Pool) Monitors() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["monitors"])
}

// Name of the pool
func (r *Pool) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Number of times the system tries to select a new pool member after a failure.
func (r *Pool) ReselectTries() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["reselectTries"])
}

// Possible values: none, reset, reselect, drop
func (r *Pool) ServiceDownAction() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["serviceDownAction"])
}

// Slow ramp time for pool members
func (r *Pool) SlowRampTime() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["slowRampTime"])
}

// Input properties used for looking up and filtering Pool resources.
type PoolState struct {
	// Allow NAT
	AllowNat interface{}
	// Allow SNAT
	AllowSnat interface{}
	// Possible values: round-robin, ...
	LoadBalancingMode interface{}
	// List of monitor names to associate with the pool
	Monitors interface{}
	// Name of the pool
	Name interface{}
	// Number of times the system tries to select a new pool member after a failure.
	ReselectTries interface{}
	// Possible values: none, reset, reselect, drop
	ServiceDownAction interface{}
	// Slow ramp time for pool members
	SlowRampTime interface{}
}

// The set of arguments for constructing a Pool resource.
type PoolArgs struct {
	// Allow NAT
	AllowNat interface{}
	// Allow SNAT
	AllowSnat interface{}
	// Possible values: round-robin, ...
	LoadBalancingMode interface{}
	// List of monitor names to associate with the pool
	Monitors interface{}
	// Name of the pool
	Name interface{}
	// Number of times the system tries to select a new pool member after a failure.
	ReselectTries interface{}
	// Possible values: none, reset, reselect, drop
	ServiceDownAction interface{}
	// Slow ramp time for pool members
	SlowRampTime interface{}
}
