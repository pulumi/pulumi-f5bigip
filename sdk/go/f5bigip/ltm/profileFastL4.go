// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ltm

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ProfileFastL4 struct {
	s *pulumi.ResourceState
}

// NewProfileFastL4 registers a new resource with the given unique name, arguments, and options.
func NewProfileFastL4(ctx *pulumi.Context,
	name string, args *ProfileFastL4Args, opts ...pulumi.ResourceOpt) (*ProfileFastL4, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["clientTimeout"] = nil
		inputs["defaultsFrom"] = nil
		inputs["explicitflowMigration"] = nil
		inputs["hardwareSyncookie"] = nil
		inputs["idleTimeout"] = nil
		inputs["iptosToclient"] = nil
		inputs["iptosToserver"] = nil
		inputs["keepaliveInterval"] = nil
		inputs["name"] = nil
		inputs["partition"] = nil
	} else {
		inputs["clientTimeout"] = args.ClientTimeout
		inputs["defaultsFrom"] = args.DefaultsFrom
		inputs["explicitflowMigration"] = args.ExplicitflowMigration
		inputs["hardwareSyncookie"] = args.HardwareSyncookie
		inputs["idleTimeout"] = args.IdleTimeout
		inputs["iptosToclient"] = args.IptosToclient
		inputs["iptosToserver"] = args.IptosToserver
		inputs["keepaliveInterval"] = args.KeepaliveInterval
		inputs["name"] = args.Name
		inputs["partition"] = args.Partition
	}
	s, err := ctx.RegisterResource("f5bigip:ltm/profileFastL4:ProfileFastL4", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProfileFastL4{s: s}, nil
}

// GetProfileFastL4 gets an existing ProfileFastL4 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProfileFastL4(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProfileFastL4State, opts ...pulumi.ResourceOpt) (*ProfileFastL4, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["clientTimeout"] = state.ClientTimeout
		inputs["defaultsFrom"] = state.DefaultsFrom
		inputs["explicitflowMigration"] = state.ExplicitflowMigration
		inputs["hardwareSyncookie"] = state.HardwareSyncookie
		inputs["idleTimeout"] = state.IdleTimeout
		inputs["iptosToclient"] = state.IptosToclient
		inputs["iptosToserver"] = state.IptosToserver
		inputs["keepaliveInterval"] = state.KeepaliveInterval
		inputs["name"] = state.Name
		inputs["partition"] = state.Partition
	}
	s, err := ctx.ReadResource("f5bigip:ltm/profileFastL4:ProfileFastL4", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProfileFastL4{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ProfileFastL4) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ProfileFastL4) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Use the parent Fastl4 profile
func (r *ProfileFastL4) ClientTimeout() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["clientTimeout"])
}

// Use the parent Fastl4 profile
func (r *ProfileFastL4) DefaultsFrom() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["defaultsFrom"])
}

// Use the parent Fastl4 profile
func (r *ProfileFastL4) ExplicitflowMigration() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["explicitflowMigration"])
}

// Use the parent Fastl4 profile
func (r *ProfileFastL4) HardwareSyncookie() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["hardwareSyncookie"])
}

// Use the parent Fastl4 profile
func (r *ProfileFastL4) IdleTimeout() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["idleTimeout"])
}

// Use the parent Fastl4 profile
func (r *ProfileFastL4) IptosToclient() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["iptosToclient"])
}

// Use the parent Fastl4 profile
func (r *ProfileFastL4) IptosToserver() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["iptosToserver"])
}

// Use the parent Fastl4 profile
func (r *ProfileFastL4) KeepaliveInterval() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["keepaliveInterval"])
}

// Name of the Fastl4 Profile
func (r *ProfileFastL4) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// name of partition
func (r *ProfileFastL4) Partition() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["partition"])
}

// Input properties used for looking up and filtering ProfileFastL4 resources.
type ProfileFastL4State struct {
	// Use the parent Fastl4 profile
	ClientTimeout interface{}
	// Use the parent Fastl4 profile
	DefaultsFrom interface{}
	// Use the parent Fastl4 profile
	ExplicitflowMigration interface{}
	// Use the parent Fastl4 profile
	HardwareSyncookie interface{}
	// Use the parent Fastl4 profile
	IdleTimeout interface{}
	// Use the parent Fastl4 profile
	IptosToclient interface{}
	// Use the parent Fastl4 profile
	IptosToserver interface{}
	// Use the parent Fastl4 profile
	KeepaliveInterval interface{}
	// Name of the Fastl4 Profile
	Name interface{}
	// name of partition
	Partition interface{}
}

// The set of arguments for constructing a ProfileFastL4 resource.
type ProfileFastL4Args struct {
	// Use the parent Fastl4 profile
	ClientTimeout interface{}
	// Use the parent Fastl4 profile
	DefaultsFrom interface{}
	// Use the parent Fastl4 profile
	ExplicitflowMigration interface{}
	// Use the parent Fastl4 profile
	HardwareSyncookie interface{}
	// Use the parent Fastl4 profile
	IdleTimeout interface{}
	// Use the parent Fastl4 profile
	IptosToclient interface{}
	// Use the parent Fastl4 profile
	IptosToserver interface{}
	// Use the parent Fastl4 profile
	KeepaliveInterval interface{}
	// Name of the Fastl4 Profile
	Name interface{}
	// name of partition
	Partition interface{}
}
