// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ltm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DataGroupRecord struct {
	// , sets the value of the record's `data` attribute, specifying a value here will create a record in the form of `name := data`
	Data *string `pulumi:"data"`
	// , sets the value of the record's `name` attribute, must be of type defined in `type` attribute
	Name string `pulumi:"name"`
}

// DataGroupRecordInput is an input type that accepts DataGroupRecordArgs and DataGroupRecordOutput values.
// You can construct a concrete instance of `DataGroupRecordInput` via:
//
//	DataGroupRecordArgs{...}
type DataGroupRecordInput interface {
	pulumi.Input

	ToDataGroupRecordOutput() DataGroupRecordOutput
	ToDataGroupRecordOutputWithContext(context.Context) DataGroupRecordOutput
}

type DataGroupRecordArgs struct {
	// , sets the value of the record's `data` attribute, specifying a value here will create a record in the form of `name := data`
	Data pulumi.StringPtrInput `pulumi:"data"`
	// , sets the value of the record's `name` attribute, must be of type defined in `type` attribute
	Name pulumi.StringInput `pulumi:"name"`
}

func (DataGroupRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataGroupRecord)(nil)).Elem()
}

func (i DataGroupRecordArgs) ToDataGroupRecordOutput() DataGroupRecordOutput {
	return i.ToDataGroupRecordOutputWithContext(context.Background())
}

func (i DataGroupRecordArgs) ToDataGroupRecordOutputWithContext(ctx context.Context) DataGroupRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataGroupRecordOutput)
}

// DataGroupRecordArrayInput is an input type that accepts DataGroupRecordArray and DataGroupRecordArrayOutput values.
// You can construct a concrete instance of `DataGroupRecordArrayInput` via:
//
//	DataGroupRecordArray{ DataGroupRecordArgs{...} }
type DataGroupRecordArrayInput interface {
	pulumi.Input

	ToDataGroupRecordArrayOutput() DataGroupRecordArrayOutput
	ToDataGroupRecordArrayOutputWithContext(context.Context) DataGroupRecordArrayOutput
}

type DataGroupRecordArray []DataGroupRecordInput

func (DataGroupRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataGroupRecord)(nil)).Elem()
}

func (i DataGroupRecordArray) ToDataGroupRecordArrayOutput() DataGroupRecordArrayOutput {
	return i.ToDataGroupRecordArrayOutputWithContext(context.Background())
}

func (i DataGroupRecordArray) ToDataGroupRecordArrayOutputWithContext(ctx context.Context) DataGroupRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataGroupRecordArrayOutput)
}

type DataGroupRecordOutput struct{ *pulumi.OutputState }

func (DataGroupRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataGroupRecord)(nil)).Elem()
}

func (o DataGroupRecordOutput) ToDataGroupRecordOutput() DataGroupRecordOutput {
	return o
}

func (o DataGroupRecordOutput) ToDataGroupRecordOutputWithContext(ctx context.Context) DataGroupRecordOutput {
	return o
}

// , sets the value of the record's `data` attribute, specifying a value here will create a record in the form of `name := data`
func (o DataGroupRecordOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataGroupRecord) *string { return v.Data }).(pulumi.StringPtrOutput)
}

// , sets the value of the record's `name` attribute, must be of type defined in `type` attribute
func (o DataGroupRecordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DataGroupRecord) string { return v.Name }).(pulumi.StringOutput)
}

type DataGroupRecordArrayOutput struct{ *pulumi.OutputState }

func (DataGroupRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataGroupRecord)(nil)).Elem()
}

func (o DataGroupRecordArrayOutput) ToDataGroupRecordArrayOutput() DataGroupRecordArrayOutput {
	return o
}

func (o DataGroupRecordArrayOutput) ToDataGroupRecordArrayOutputWithContext(ctx context.Context) DataGroupRecordArrayOutput {
	return o
}

func (o DataGroupRecordArrayOutput) Index(i pulumi.IntInput) DataGroupRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataGroupRecord {
		return vs[0].([]DataGroupRecord)[vs[1].(int)]
	}).(DataGroupRecordOutput)
}

type NodeFqdn struct {
	// Specifies the node's address family. The default is 'unspecified', or IP-agnostic. This needs to be specified inside the fqdn (fully qualified domain name).
	AddressFamily *string `pulumi:"addressFamily"`
	Autopopulate  *string `pulumi:"autopopulate"`
	Downinterval  *int    `pulumi:"downinterval"`
	// Specifies the amount of time before sending the next DNS query. Default is 3600. This needs to be specified inside the fqdn (fully qualified domain name).
	Interval *string `pulumi:"interval"`
	// Name of the node
	Name *string `pulumi:"name"`
}

// NodeFqdnInput is an input type that accepts NodeFqdnArgs and NodeFqdnOutput values.
// You can construct a concrete instance of `NodeFqdnInput` via:
//
//	NodeFqdnArgs{...}
type NodeFqdnInput interface {
	pulumi.Input

	ToNodeFqdnOutput() NodeFqdnOutput
	ToNodeFqdnOutputWithContext(context.Context) NodeFqdnOutput
}

type NodeFqdnArgs struct {
	// Specifies the node's address family. The default is 'unspecified', or IP-agnostic. This needs to be specified inside the fqdn (fully qualified domain name).
	AddressFamily pulumi.StringPtrInput `pulumi:"addressFamily"`
	Autopopulate  pulumi.StringPtrInput `pulumi:"autopopulate"`
	Downinterval  pulumi.IntPtrInput    `pulumi:"downinterval"`
	// Specifies the amount of time before sending the next DNS query. Default is 3600. This needs to be specified inside the fqdn (fully qualified domain name).
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// Name of the node
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (NodeFqdnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeFqdn)(nil)).Elem()
}

func (i NodeFqdnArgs) ToNodeFqdnOutput() NodeFqdnOutput {
	return i.ToNodeFqdnOutputWithContext(context.Background())
}

func (i NodeFqdnArgs) ToNodeFqdnOutputWithContext(ctx context.Context) NodeFqdnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeFqdnOutput)
}

func (i NodeFqdnArgs) ToNodeFqdnPtrOutput() NodeFqdnPtrOutput {
	return i.ToNodeFqdnPtrOutputWithContext(context.Background())
}

func (i NodeFqdnArgs) ToNodeFqdnPtrOutputWithContext(ctx context.Context) NodeFqdnPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeFqdnOutput).ToNodeFqdnPtrOutputWithContext(ctx)
}

// NodeFqdnPtrInput is an input type that accepts NodeFqdnArgs, NodeFqdnPtr and NodeFqdnPtrOutput values.
// You can construct a concrete instance of `NodeFqdnPtrInput` via:
//
//	        NodeFqdnArgs{...}
//
//	or:
//
//	        nil
type NodeFqdnPtrInput interface {
	pulumi.Input

	ToNodeFqdnPtrOutput() NodeFqdnPtrOutput
	ToNodeFqdnPtrOutputWithContext(context.Context) NodeFqdnPtrOutput
}

type nodeFqdnPtrType NodeFqdnArgs

func NodeFqdnPtr(v *NodeFqdnArgs) NodeFqdnPtrInput {
	return (*nodeFqdnPtrType)(v)
}

func (*nodeFqdnPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeFqdn)(nil)).Elem()
}

func (i *nodeFqdnPtrType) ToNodeFqdnPtrOutput() NodeFqdnPtrOutput {
	return i.ToNodeFqdnPtrOutputWithContext(context.Background())
}

func (i *nodeFqdnPtrType) ToNodeFqdnPtrOutputWithContext(ctx context.Context) NodeFqdnPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeFqdnPtrOutput)
}

type NodeFqdnOutput struct{ *pulumi.OutputState }

func (NodeFqdnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeFqdn)(nil)).Elem()
}

func (o NodeFqdnOutput) ToNodeFqdnOutput() NodeFqdnOutput {
	return o
}

func (o NodeFqdnOutput) ToNodeFqdnOutputWithContext(ctx context.Context) NodeFqdnOutput {
	return o
}

func (o NodeFqdnOutput) ToNodeFqdnPtrOutput() NodeFqdnPtrOutput {
	return o.ToNodeFqdnPtrOutputWithContext(context.Background())
}

func (o NodeFqdnOutput) ToNodeFqdnPtrOutputWithContext(ctx context.Context) NodeFqdnPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeFqdn) *NodeFqdn {
		return &v
	}).(NodeFqdnPtrOutput)
}

// Specifies the node's address family. The default is 'unspecified', or IP-agnostic. This needs to be specified inside the fqdn (fully qualified domain name).
func (o NodeFqdnOutput) AddressFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeFqdn) *string { return v.AddressFamily }).(pulumi.StringPtrOutput)
}

func (o NodeFqdnOutput) Autopopulate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeFqdn) *string { return v.Autopopulate }).(pulumi.StringPtrOutput)
}

func (o NodeFqdnOutput) Downinterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeFqdn) *int { return v.Downinterval }).(pulumi.IntPtrOutput)
}

// Specifies the amount of time before sending the next DNS query. Default is 3600. This needs to be specified inside the fqdn (fully qualified domain name).
func (o NodeFqdnOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeFqdn) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// Name of the node
func (o NodeFqdnOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeFqdn) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type NodeFqdnPtrOutput struct{ *pulumi.OutputState }

func (NodeFqdnPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeFqdn)(nil)).Elem()
}

func (o NodeFqdnPtrOutput) ToNodeFqdnPtrOutput() NodeFqdnPtrOutput {
	return o
}

func (o NodeFqdnPtrOutput) ToNodeFqdnPtrOutputWithContext(ctx context.Context) NodeFqdnPtrOutput {
	return o
}

func (o NodeFqdnPtrOutput) Elem() NodeFqdnOutput {
	return o.ApplyT(func(v *NodeFqdn) NodeFqdn {
		if v != nil {
			return *v
		}
		var ret NodeFqdn
		return ret
	}).(NodeFqdnOutput)
}

// Specifies the node's address family. The default is 'unspecified', or IP-agnostic. This needs to be specified inside the fqdn (fully qualified domain name).
func (o NodeFqdnPtrOutput) AddressFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeFqdn) *string {
		if v == nil {
			return nil
		}
		return v.AddressFamily
	}).(pulumi.StringPtrOutput)
}

func (o NodeFqdnPtrOutput) Autopopulate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeFqdn) *string {
		if v == nil {
			return nil
		}
		return v.Autopopulate
	}).(pulumi.StringPtrOutput)
}

func (o NodeFqdnPtrOutput) Downinterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeFqdn) *int {
		if v == nil {
			return nil
		}
		return v.Downinterval
	}).(pulumi.IntPtrOutput)
}

// Specifies the amount of time before sending the next DNS query. Default is 3600. This needs to be specified inside the fqdn (fully qualified domain name).
func (o NodeFqdnPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeFqdn) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// Name of the node
func (o NodeFqdnPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeFqdn) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type PolicyRule struct {
	Actions    []PolicyRuleAction    `pulumi:"actions"`
	Conditions []PolicyRuleCondition `pulumi:"conditions"`
	// Name of the Policy ( policy name should be in full path which is combination of partition and policy name )
	Name string `pulumi:"name"`
}

// PolicyRuleInput is an input type that accepts PolicyRuleArgs and PolicyRuleOutput values.
// You can construct a concrete instance of `PolicyRuleInput` via:
//
//	PolicyRuleArgs{...}
type PolicyRuleInput interface {
	pulumi.Input

	ToPolicyRuleOutput() PolicyRuleOutput
	ToPolicyRuleOutputWithContext(context.Context) PolicyRuleOutput
}

type PolicyRuleArgs struct {
	Actions    PolicyRuleActionArrayInput    `pulumi:"actions"`
	Conditions PolicyRuleConditionArrayInput `pulumi:"conditions"`
	// Name of the Policy ( policy name should be in full path which is combination of partition and policy name )
	Name pulumi.StringInput `pulumi:"name"`
}

func (PolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRule)(nil)).Elem()
}

func (i PolicyRuleArgs) ToPolicyRuleOutput() PolicyRuleOutput {
	return i.ToPolicyRuleOutputWithContext(context.Background())
}

func (i PolicyRuleArgs) ToPolicyRuleOutputWithContext(ctx context.Context) PolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleOutput)
}

// PolicyRuleArrayInput is an input type that accepts PolicyRuleArray and PolicyRuleArrayOutput values.
// You can construct a concrete instance of `PolicyRuleArrayInput` via:
//
//	PolicyRuleArray{ PolicyRuleArgs{...} }
type PolicyRuleArrayInput interface {
	pulumi.Input

	ToPolicyRuleArrayOutput() PolicyRuleArrayOutput
	ToPolicyRuleArrayOutputWithContext(context.Context) PolicyRuleArrayOutput
}

type PolicyRuleArray []PolicyRuleInput

func (PolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyRule)(nil)).Elem()
}

func (i PolicyRuleArray) ToPolicyRuleArrayOutput() PolicyRuleArrayOutput {
	return i.ToPolicyRuleArrayOutputWithContext(context.Background())
}

func (i PolicyRuleArray) ToPolicyRuleArrayOutputWithContext(ctx context.Context) PolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleArrayOutput)
}

type PolicyRuleOutput struct{ *pulumi.OutputState }

func (PolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRule)(nil)).Elem()
}

func (o PolicyRuleOutput) ToPolicyRuleOutput() PolicyRuleOutput {
	return o
}

func (o PolicyRuleOutput) ToPolicyRuleOutputWithContext(ctx context.Context) PolicyRuleOutput {
	return o
}

func (o PolicyRuleOutput) Actions() PolicyRuleActionArrayOutput {
	return o.ApplyT(func(v PolicyRule) []PolicyRuleAction { return v.Actions }).(PolicyRuleActionArrayOutput)
}

func (o PolicyRuleOutput) Conditions() PolicyRuleConditionArrayOutput {
	return o.ApplyT(func(v PolicyRule) []PolicyRuleCondition { return v.Conditions }).(PolicyRuleConditionArrayOutput)
}

// Name of the Policy ( policy name should be in full path which is combination of partition and policy name )
func (o PolicyRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyRule) string { return v.Name }).(pulumi.StringOutput)
}

type PolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (PolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyRule)(nil)).Elem()
}

func (o PolicyRuleArrayOutput) ToPolicyRuleArrayOutput() PolicyRuleArrayOutput {
	return o
}

func (o PolicyRuleArrayOutput) ToPolicyRuleArrayOutputWithContext(ctx context.Context) PolicyRuleArrayOutput {
	return o
}

func (o PolicyRuleArrayOutput) Index(i pulumi.IntInput) PolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyRule {
		return vs[0].([]PolicyRule)[vs[1].(int)]
	}).(PolicyRuleOutput)
}

type PolicyRuleAction struct {
	AppService  *string `pulumi:"appService"`
	Application *string `pulumi:"application"`
	Asm         *bool   `pulumi:"asm"`
	Avr         *bool   `pulumi:"avr"`
	Cache       *bool   `pulumi:"cache"`
	Carp        *bool   `pulumi:"carp"`
	Category    *string `pulumi:"category"`
	Classify    *bool   `pulumi:"classify"`
	ClonePool   *string `pulumi:"clonePool"`
	Code        *int    `pulumi:"code"`
	Compress    *bool   `pulumi:"compress"`
	// This action is set to `true` by default, it needs to be explicitly set to `false` for actions it conflicts with.
	Connection         *bool   `pulumi:"connection"`
	Content            *string `pulumi:"content"`
	CookieHash         *bool   `pulumi:"cookieHash"`
	CookieInsert       *bool   `pulumi:"cookieInsert"`
	CookiePassive      *bool   `pulumi:"cookiePassive"`
	CookieRewrite      *bool   `pulumi:"cookieRewrite"`
	Decompress         *bool   `pulumi:"decompress"`
	Defer              *bool   `pulumi:"defer"`
	DestinationAddress *bool   `pulumi:"destinationAddress"`
	Disable            *bool   `pulumi:"disable"`
	Domain             *string `pulumi:"domain"`
	Enable             *bool   `pulumi:"enable"`
	Expiry             *string `pulumi:"expiry"`
	ExpirySecs         *int    `pulumi:"expirySecs"`
	Expression         *string `pulumi:"expression"`
	Extension          *string `pulumi:"extension"`
	Facility           *string `pulumi:"facility"`
	// This action will affect forwarding.
	Forward         *bool   `pulumi:"forward"`
	FromProfile     *string `pulumi:"fromProfile"`
	Hash            *bool   `pulumi:"hash"`
	Host            *string `pulumi:"host"`
	Http            *bool   `pulumi:"http"`
	HttpBasicAuth   *bool   `pulumi:"httpBasicAuth"`
	HttpCookie      *bool   `pulumi:"httpCookie"`
	HttpHeader      *bool   `pulumi:"httpHeader"`
	HttpHost        *bool   `pulumi:"httpHost"`
	HttpReferer     *bool   `pulumi:"httpReferer"`
	HttpReply       *bool   `pulumi:"httpReply"`
	HttpSetCookie   *bool   `pulumi:"httpSetCookie"`
	HttpUri         *bool   `pulumi:"httpUri"`
	Ifile           *string `pulumi:"ifile"`
	Insert          *bool   `pulumi:"insert"`
	InternalVirtual *string `pulumi:"internalVirtual"`
	IpAddress       *string `pulumi:"ipAddress"`
	Key             *string `pulumi:"key"`
	L7dos           *bool   `pulumi:"l7dos"`
	Length          *int    `pulumi:"length"`
	Location        *string `pulumi:"location"`
	Log             *bool   `pulumi:"log"`
	LtmPolicy       *bool   `pulumi:"ltmPolicy"`
	Member          *string `pulumi:"member"`
	Message         *string `pulumi:"message"`
	Netmask         *string `pulumi:"netmask"`
	Nexthop         *string `pulumi:"nexthop"`
	Node            *string `pulumi:"node"`
	Offset          *int    `pulumi:"offset"`
	Path            *string `pulumi:"path"`
	Pem             *bool   `pulumi:"pem"`
	Persist         *bool   `pulumi:"persist"`
	Pin             *bool   `pulumi:"pin"`
	Policy          *string `pulumi:"policy"`
	// This action will direct the stream to this pool.
	Pool               *string `pulumi:"pool"`
	Port               *int    `pulumi:"port"`
	Priority           *string `pulumi:"priority"`
	Profile            *string `pulumi:"profile"`
	Protocol           *string `pulumi:"protocol"`
	QueryString        *string `pulumi:"queryString"`
	Rateclass          *string `pulumi:"rateclass"`
	Redirect           *bool   `pulumi:"redirect"`
	Remove             *bool   `pulumi:"remove"`
	Replace            *bool   `pulumi:"replace"`
	Request            *bool   `pulumi:"request"`
	RequestAdapt       *bool   `pulumi:"requestAdapt"`
	Reset              *bool   `pulumi:"reset"`
	Response           *bool   `pulumi:"response"`
	ResponseAdapt      *bool   `pulumi:"responseAdapt"`
	Scheme             *string `pulumi:"scheme"`
	Script             *string `pulumi:"script"`
	Select             *bool   `pulumi:"select"`
	ServerSsl          *bool   `pulumi:"serverSsl"`
	SetVariable        *bool   `pulumi:"setVariable"`
	Shutdown           *bool   `pulumi:"shutdown"`
	Snat               *string `pulumi:"snat"`
	Snatpool           *string `pulumi:"snatpool"`
	SourceAddress      *bool   `pulumi:"sourceAddress"`
	SslClientHello     *bool   `pulumi:"sslClientHello"`
	SslServerHandshake *bool   `pulumi:"sslServerHandshake"`
	SslServerHello     *bool   `pulumi:"sslServerHello"`
	SslSessionId       *bool   `pulumi:"sslSessionId"`
	Status             *int    `pulumi:"status"`
	Tcl                *bool   `pulumi:"tcl"`
	TcpNagle           *bool   `pulumi:"tcpNagle"`
	Text               *string `pulumi:"text"`
	Timeout            *int    `pulumi:"timeout"`
	TmName             *string `pulumi:"tmName"`
	Uie                *bool   `pulumi:"uie"`
	Universal          *bool   `pulumi:"universal"`
	Value              *string `pulumi:"value"`
	Virtual            *string `pulumi:"virtual"`
	Vlan               *string `pulumi:"vlan"`
	VlanId             *int    `pulumi:"vlanId"`
	Wam                *bool   `pulumi:"wam"`
	Write              *bool   `pulumi:"write"`
}

// PolicyRuleActionInput is an input type that accepts PolicyRuleActionArgs and PolicyRuleActionOutput values.
// You can construct a concrete instance of `PolicyRuleActionInput` via:
//
//	PolicyRuleActionArgs{...}
type PolicyRuleActionInput interface {
	pulumi.Input

	ToPolicyRuleActionOutput() PolicyRuleActionOutput
	ToPolicyRuleActionOutputWithContext(context.Context) PolicyRuleActionOutput
}

type PolicyRuleActionArgs struct {
	AppService  pulumi.StringPtrInput `pulumi:"appService"`
	Application pulumi.StringPtrInput `pulumi:"application"`
	Asm         pulumi.BoolPtrInput   `pulumi:"asm"`
	Avr         pulumi.BoolPtrInput   `pulumi:"avr"`
	Cache       pulumi.BoolPtrInput   `pulumi:"cache"`
	Carp        pulumi.BoolPtrInput   `pulumi:"carp"`
	Category    pulumi.StringPtrInput `pulumi:"category"`
	Classify    pulumi.BoolPtrInput   `pulumi:"classify"`
	ClonePool   pulumi.StringPtrInput `pulumi:"clonePool"`
	Code        pulumi.IntPtrInput    `pulumi:"code"`
	Compress    pulumi.BoolPtrInput   `pulumi:"compress"`
	// This action is set to `true` by default, it needs to be explicitly set to `false` for actions it conflicts with.
	Connection         pulumi.BoolPtrInput   `pulumi:"connection"`
	Content            pulumi.StringPtrInput `pulumi:"content"`
	CookieHash         pulumi.BoolPtrInput   `pulumi:"cookieHash"`
	CookieInsert       pulumi.BoolPtrInput   `pulumi:"cookieInsert"`
	CookiePassive      pulumi.BoolPtrInput   `pulumi:"cookiePassive"`
	CookieRewrite      pulumi.BoolPtrInput   `pulumi:"cookieRewrite"`
	Decompress         pulumi.BoolPtrInput   `pulumi:"decompress"`
	Defer              pulumi.BoolPtrInput   `pulumi:"defer"`
	DestinationAddress pulumi.BoolPtrInput   `pulumi:"destinationAddress"`
	Disable            pulumi.BoolPtrInput   `pulumi:"disable"`
	Domain             pulumi.StringPtrInput `pulumi:"domain"`
	Enable             pulumi.BoolPtrInput   `pulumi:"enable"`
	Expiry             pulumi.StringPtrInput `pulumi:"expiry"`
	ExpirySecs         pulumi.IntPtrInput    `pulumi:"expirySecs"`
	Expression         pulumi.StringPtrInput `pulumi:"expression"`
	Extension          pulumi.StringPtrInput `pulumi:"extension"`
	Facility           pulumi.StringPtrInput `pulumi:"facility"`
	// This action will affect forwarding.
	Forward         pulumi.BoolPtrInput   `pulumi:"forward"`
	FromProfile     pulumi.StringPtrInput `pulumi:"fromProfile"`
	Hash            pulumi.BoolPtrInput   `pulumi:"hash"`
	Host            pulumi.StringPtrInput `pulumi:"host"`
	Http            pulumi.BoolPtrInput   `pulumi:"http"`
	HttpBasicAuth   pulumi.BoolPtrInput   `pulumi:"httpBasicAuth"`
	HttpCookie      pulumi.BoolPtrInput   `pulumi:"httpCookie"`
	HttpHeader      pulumi.BoolPtrInput   `pulumi:"httpHeader"`
	HttpHost        pulumi.BoolPtrInput   `pulumi:"httpHost"`
	HttpReferer     pulumi.BoolPtrInput   `pulumi:"httpReferer"`
	HttpReply       pulumi.BoolPtrInput   `pulumi:"httpReply"`
	HttpSetCookie   pulumi.BoolPtrInput   `pulumi:"httpSetCookie"`
	HttpUri         pulumi.BoolPtrInput   `pulumi:"httpUri"`
	Ifile           pulumi.StringPtrInput `pulumi:"ifile"`
	Insert          pulumi.BoolPtrInput   `pulumi:"insert"`
	InternalVirtual pulumi.StringPtrInput `pulumi:"internalVirtual"`
	IpAddress       pulumi.StringPtrInput `pulumi:"ipAddress"`
	Key             pulumi.StringPtrInput `pulumi:"key"`
	L7dos           pulumi.BoolPtrInput   `pulumi:"l7dos"`
	Length          pulumi.IntPtrInput    `pulumi:"length"`
	Location        pulumi.StringPtrInput `pulumi:"location"`
	Log             pulumi.BoolPtrInput   `pulumi:"log"`
	LtmPolicy       pulumi.BoolPtrInput   `pulumi:"ltmPolicy"`
	Member          pulumi.StringPtrInput `pulumi:"member"`
	Message         pulumi.StringPtrInput `pulumi:"message"`
	Netmask         pulumi.StringPtrInput `pulumi:"netmask"`
	Nexthop         pulumi.StringPtrInput `pulumi:"nexthop"`
	Node            pulumi.StringPtrInput `pulumi:"node"`
	Offset          pulumi.IntPtrInput    `pulumi:"offset"`
	Path            pulumi.StringPtrInput `pulumi:"path"`
	Pem             pulumi.BoolPtrInput   `pulumi:"pem"`
	Persist         pulumi.BoolPtrInput   `pulumi:"persist"`
	Pin             pulumi.BoolPtrInput   `pulumi:"pin"`
	Policy          pulumi.StringPtrInput `pulumi:"policy"`
	// This action will direct the stream to this pool.
	Pool               pulumi.StringPtrInput `pulumi:"pool"`
	Port               pulumi.IntPtrInput    `pulumi:"port"`
	Priority           pulumi.StringPtrInput `pulumi:"priority"`
	Profile            pulumi.StringPtrInput `pulumi:"profile"`
	Protocol           pulumi.StringPtrInput `pulumi:"protocol"`
	QueryString        pulumi.StringPtrInput `pulumi:"queryString"`
	Rateclass          pulumi.StringPtrInput `pulumi:"rateclass"`
	Redirect           pulumi.BoolPtrInput   `pulumi:"redirect"`
	Remove             pulumi.BoolPtrInput   `pulumi:"remove"`
	Replace            pulumi.BoolPtrInput   `pulumi:"replace"`
	Request            pulumi.BoolPtrInput   `pulumi:"request"`
	RequestAdapt       pulumi.BoolPtrInput   `pulumi:"requestAdapt"`
	Reset              pulumi.BoolPtrInput   `pulumi:"reset"`
	Response           pulumi.BoolPtrInput   `pulumi:"response"`
	ResponseAdapt      pulumi.BoolPtrInput   `pulumi:"responseAdapt"`
	Scheme             pulumi.StringPtrInput `pulumi:"scheme"`
	Script             pulumi.StringPtrInput `pulumi:"script"`
	Select             pulumi.BoolPtrInput   `pulumi:"select"`
	ServerSsl          pulumi.BoolPtrInput   `pulumi:"serverSsl"`
	SetVariable        pulumi.BoolPtrInput   `pulumi:"setVariable"`
	Shutdown           pulumi.BoolPtrInput   `pulumi:"shutdown"`
	Snat               pulumi.StringPtrInput `pulumi:"snat"`
	Snatpool           pulumi.StringPtrInput `pulumi:"snatpool"`
	SourceAddress      pulumi.BoolPtrInput   `pulumi:"sourceAddress"`
	SslClientHello     pulumi.BoolPtrInput   `pulumi:"sslClientHello"`
	SslServerHandshake pulumi.BoolPtrInput   `pulumi:"sslServerHandshake"`
	SslServerHello     pulumi.BoolPtrInput   `pulumi:"sslServerHello"`
	SslSessionId       pulumi.BoolPtrInput   `pulumi:"sslSessionId"`
	Status             pulumi.IntPtrInput    `pulumi:"status"`
	Tcl                pulumi.BoolPtrInput   `pulumi:"tcl"`
	TcpNagle           pulumi.BoolPtrInput   `pulumi:"tcpNagle"`
	Text               pulumi.StringPtrInput `pulumi:"text"`
	Timeout            pulumi.IntPtrInput    `pulumi:"timeout"`
	TmName             pulumi.StringPtrInput `pulumi:"tmName"`
	Uie                pulumi.BoolPtrInput   `pulumi:"uie"`
	Universal          pulumi.BoolPtrInput   `pulumi:"universal"`
	Value              pulumi.StringPtrInput `pulumi:"value"`
	Virtual            pulumi.StringPtrInput `pulumi:"virtual"`
	Vlan               pulumi.StringPtrInput `pulumi:"vlan"`
	VlanId             pulumi.IntPtrInput    `pulumi:"vlanId"`
	Wam                pulumi.BoolPtrInput   `pulumi:"wam"`
	Write              pulumi.BoolPtrInput   `pulumi:"write"`
}

func (PolicyRuleActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRuleAction)(nil)).Elem()
}

func (i PolicyRuleActionArgs) ToPolicyRuleActionOutput() PolicyRuleActionOutput {
	return i.ToPolicyRuleActionOutputWithContext(context.Background())
}

func (i PolicyRuleActionArgs) ToPolicyRuleActionOutputWithContext(ctx context.Context) PolicyRuleActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleActionOutput)
}

// PolicyRuleActionArrayInput is an input type that accepts PolicyRuleActionArray and PolicyRuleActionArrayOutput values.
// You can construct a concrete instance of `PolicyRuleActionArrayInput` via:
//
//	PolicyRuleActionArray{ PolicyRuleActionArgs{...} }
type PolicyRuleActionArrayInput interface {
	pulumi.Input

	ToPolicyRuleActionArrayOutput() PolicyRuleActionArrayOutput
	ToPolicyRuleActionArrayOutputWithContext(context.Context) PolicyRuleActionArrayOutput
}

type PolicyRuleActionArray []PolicyRuleActionInput

func (PolicyRuleActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyRuleAction)(nil)).Elem()
}

func (i PolicyRuleActionArray) ToPolicyRuleActionArrayOutput() PolicyRuleActionArrayOutput {
	return i.ToPolicyRuleActionArrayOutputWithContext(context.Background())
}

func (i PolicyRuleActionArray) ToPolicyRuleActionArrayOutputWithContext(ctx context.Context) PolicyRuleActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleActionArrayOutput)
}

type PolicyRuleActionOutput struct{ *pulumi.OutputState }

func (PolicyRuleActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRuleAction)(nil)).Elem()
}

func (o PolicyRuleActionOutput) ToPolicyRuleActionOutput() PolicyRuleActionOutput {
	return o
}

func (o PolicyRuleActionOutput) ToPolicyRuleActionOutputWithContext(ctx context.Context) PolicyRuleActionOutput {
	return o
}

func (o PolicyRuleActionOutput) AppService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.AppService }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) Application() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Application }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) Asm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Asm }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) Avr() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Avr }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) Cache() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Cache }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) Carp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Carp }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Category }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) Classify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Classify }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) ClonePool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.ClonePool }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *int { return v.Code }).(pulumi.IntPtrOutput)
}

func (o PolicyRuleActionOutput) Compress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Compress }).(pulumi.BoolPtrOutput)
}

// This action is set to `true` by default, it needs to be explicitly set to `false` for actions it conflicts with.
func (o PolicyRuleActionOutput) Connection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Connection }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Content }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) CookieHash() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.CookieHash }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) CookieInsert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.CookieInsert }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) CookiePassive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.CookiePassive }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) CookieRewrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.CookieRewrite }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) Decompress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Decompress }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) Defer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Defer }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) DestinationAddress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.DestinationAddress }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) Disable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Disable }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) Expiry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Expiry }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) ExpirySecs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *int { return v.ExpirySecs }).(pulumi.IntPtrOutput)
}

func (o PolicyRuleActionOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) Extension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Extension }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) Facility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Facility }).(pulumi.StringPtrOutput)
}

// This action will affect forwarding.
func (o PolicyRuleActionOutput) Forward() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Forward }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) FromProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.FromProfile }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) Hash() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Hash }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Host }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) Http() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Http }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) HttpBasicAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.HttpBasicAuth }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) HttpCookie() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.HttpCookie }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) HttpHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.HttpHeader }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) HttpHost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.HttpHost }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) HttpReferer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.HttpReferer }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) HttpReply() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.HttpReply }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) HttpSetCookie() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.HttpSetCookie }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) HttpUri() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.HttpUri }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) Ifile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Ifile }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) Insert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Insert }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) InternalVirtual() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.InternalVirtual }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) L7dos() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.L7dos }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) Length() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *int { return v.Length }).(pulumi.IntPtrOutput)
}

func (o PolicyRuleActionOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Location }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) Log() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Log }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) LtmPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.LtmPolicy }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) Member() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Member }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Message }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) Netmask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Netmask }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) Nexthop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Nexthop }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) Node() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Node }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) Offset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *int { return v.Offset }).(pulumi.IntPtrOutput)
}

func (o PolicyRuleActionOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) Pem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Pem }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) Persist() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Persist }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) Pin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Pin }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

// This action will direct the stream to this pool.
func (o PolicyRuleActionOutput) Pool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Pool }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *int { return v.Port }).(pulumi.IntPtrOutput)
}

func (o PolicyRuleActionOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) QueryString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.QueryString }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) Rateclass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Rateclass }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) Redirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Redirect }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) Remove() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Remove }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) Replace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Replace }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) Request() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Request }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) RequestAdapt() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.RequestAdapt }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) Reset() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Reset }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) Response() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Response }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) ResponseAdapt() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.ResponseAdapt }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Script }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) Select() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Select }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) ServerSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.ServerSsl }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) SetVariable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.SetVariable }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) Shutdown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Shutdown }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) Snat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Snat }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) Snatpool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Snatpool }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) SourceAddress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.SourceAddress }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) SslClientHello() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.SslClientHello }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) SslServerHandshake() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.SslServerHandshake }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) SslServerHello() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.SslServerHello }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) SslSessionId() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.SslSessionId }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) Status() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *int { return v.Status }).(pulumi.IntPtrOutput)
}

func (o PolicyRuleActionOutput) Tcl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Tcl }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) TcpNagle() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.TcpNagle }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Text }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

func (o PolicyRuleActionOutput) TmName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.TmName }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) Uie() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Uie }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) Universal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Universal }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Value }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) Virtual() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Virtual }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) Vlan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *string { return v.Vlan }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleActionOutput) VlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *int { return v.VlanId }).(pulumi.IntPtrOutput)
}

func (o PolicyRuleActionOutput) Wam() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Wam }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleActionOutput) Write() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleAction) *bool { return v.Write }).(pulumi.BoolPtrOutput)
}

type PolicyRuleActionArrayOutput struct{ *pulumi.OutputState }

func (PolicyRuleActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyRuleAction)(nil)).Elem()
}

func (o PolicyRuleActionArrayOutput) ToPolicyRuleActionArrayOutput() PolicyRuleActionArrayOutput {
	return o
}

func (o PolicyRuleActionArrayOutput) ToPolicyRuleActionArrayOutputWithContext(ctx context.Context) PolicyRuleActionArrayOutput {
	return o
}

func (o PolicyRuleActionArrayOutput) Index(i pulumi.IntInput) PolicyRuleActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyRuleAction {
		return vs[0].([]PolicyRuleAction)[vs[1].(int)]
	}).(PolicyRuleActionOutput)
}

type PolicyRuleCondition struct {
	Address               *bool    `pulumi:"address"`
	All                   *bool    `pulumi:"all"`
	AppService            *string  `pulumi:"appService"`
	BrowserType           *bool    `pulumi:"browserType"`
	BrowserVersion        *bool    `pulumi:"browserVersion"`
	CaseInsensitive       *bool    `pulumi:"caseInsensitive"`
	CaseSensitive         *bool    `pulumi:"caseSensitive"`
	Cipher                *bool    `pulumi:"cipher"`
	CipherBits            *bool    `pulumi:"cipherBits"`
	ClientSsl             *bool    `pulumi:"clientSsl"`
	Code                  *bool    `pulumi:"code"`
	CommonName            *bool    `pulumi:"commonName"`
	Contains              *bool    `pulumi:"contains"`
	Continent             *bool    `pulumi:"continent"`
	CountryCode           *bool    `pulumi:"countryCode"`
	CountryName           *bool    `pulumi:"countryName"`
	CpuUsage              *bool    `pulumi:"cpuUsage"`
	DeviceMake            *bool    `pulumi:"deviceMake"`
	DeviceModel           *bool    `pulumi:"deviceModel"`
	Domain                *bool    `pulumi:"domain"`
	EndsWith              *bool    `pulumi:"endsWith"`
	Equals                *bool    `pulumi:"equals"`
	Exists                *bool    `pulumi:"exists"`
	Expiry                *bool    `pulumi:"expiry"`
	Extension             *bool    `pulumi:"extension"`
	External              *bool    `pulumi:"external"`
	Geoip                 *bool    `pulumi:"geoip"`
	Greater               *bool    `pulumi:"greater"`
	GreaterOrEqual        *bool    `pulumi:"greaterOrEqual"`
	Host                  *bool    `pulumi:"host"`
	HttpBasicAuth         *bool    `pulumi:"httpBasicAuth"`
	HttpCookie            *bool    `pulumi:"httpCookie"`
	HttpHeader            *bool    `pulumi:"httpHeader"`
	HttpHost              *bool    `pulumi:"httpHost"`
	HttpMethod            *bool    `pulumi:"httpMethod"`
	HttpReferer           *bool    `pulumi:"httpReferer"`
	HttpSetCookie         *bool    `pulumi:"httpSetCookie"`
	HttpStatus            *bool    `pulumi:"httpStatus"`
	HttpUri               *bool    `pulumi:"httpUri"`
	HttpUserAgent         *bool    `pulumi:"httpUserAgent"`
	HttpVersion           *bool    `pulumi:"httpVersion"`
	Index                 *int     `pulumi:"index"`
	Internal              *bool    `pulumi:"internal"`
	Isp                   *bool    `pulumi:"isp"`
	Last15secs            *bool    `pulumi:"last15secs"`
	Last1min              *bool    `pulumi:"last1min"`
	Last5mins             *bool    `pulumi:"last5mins"`
	Less                  *bool    `pulumi:"less"`
	LessOrEqual           *bool    `pulumi:"lessOrEqual"`
	Local                 *bool    `pulumi:"local"`
	Major                 *bool    `pulumi:"major"`
	Matches               *bool    `pulumi:"matches"`
	Minor                 *bool    `pulumi:"minor"`
	Missing               *bool    `pulumi:"missing"`
	Mss                   *bool    `pulumi:"mss"`
	Not                   *bool    `pulumi:"not"`
	Org                   *bool    `pulumi:"org"`
	Password              *bool    `pulumi:"password"`
	Path                  *bool    `pulumi:"path"`
	PathSegment           *bool    `pulumi:"pathSegment"`
	Port                  *bool    `pulumi:"port"`
	Present               *bool    `pulumi:"present"`
	Protocol              *bool    `pulumi:"protocol"`
	QueryParameter        *bool    `pulumi:"queryParameter"`
	QueryString           *bool    `pulumi:"queryString"`
	RegionCode            *bool    `pulumi:"regionCode"`
	RegionName            *bool    `pulumi:"regionName"`
	Remote                *bool    `pulumi:"remote"`
	Request               *bool    `pulumi:"request"`
	Response              *bool    `pulumi:"response"`
	RouteDomain           *bool    `pulumi:"routeDomain"`
	Rtt                   *bool    `pulumi:"rtt"`
	Scheme                *bool    `pulumi:"scheme"`
	ServerName            *bool    `pulumi:"serverName"`
	SslCert               *bool    `pulumi:"sslCert"`
	SslClientHello        *bool    `pulumi:"sslClientHello"`
	SslExtension          *bool    `pulumi:"sslExtension"`
	SslServerHandshake    *bool    `pulumi:"sslServerHandshake"`
	SslServerHello        *bool    `pulumi:"sslServerHello"`
	StartsWith            *bool    `pulumi:"startsWith"`
	Tcp                   *bool    `pulumi:"tcp"`
	Text                  *bool    `pulumi:"text"`
	TmName                *string  `pulumi:"tmName"`
	UnnamedQueryParameter *bool    `pulumi:"unnamedQueryParameter"`
	UserAgentToken        *bool    `pulumi:"userAgentToken"`
	Username              *bool    `pulumi:"username"`
	Value                 *bool    `pulumi:"value"`
	Values                []string `pulumi:"values"`
	Version               *bool    `pulumi:"version"`
	Vlan                  *bool    `pulumi:"vlan"`
	VlanId                *bool    `pulumi:"vlanId"`
}

// PolicyRuleConditionInput is an input type that accepts PolicyRuleConditionArgs and PolicyRuleConditionOutput values.
// You can construct a concrete instance of `PolicyRuleConditionInput` via:
//
//	PolicyRuleConditionArgs{...}
type PolicyRuleConditionInput interface {
	pulumi.Input

	ToPolicyRuleConditionOutput() PolicyRuleConditionOutput
	ToPolicyRuleConditionOutputWithContext(context.Context) PolicyRuleConditionOutput
}

type PolicyRuleConditionArgs struct {
	Address               pulumi.BoolPtrInput     `pulumi:"address"`
	All                   pulumi.BoolPtrInput     `pulumi:"all"`
	AppService            pulumi.StringPtrInput   `pulumi:"appService"`
	BrowserType           pulumi.BoolPtrInput     `pulumi:"browserType"`
	BrowserVersion        pulumi.BoolPtrInput     `pulumi:"browserVersion"`
	CaseInsensitive       pulumi.BoolPtrInput     `pulumi:"caseInsensitive"`
	CaseSensitive         pulumi.BoolPtrInput     `pulumi:"caseSensitive"`
	Cipher                pulumi.BoolPtrInput     `pulumi:"cipher"`
	CipherBits            pulumi.BoolPtrInput     `pulumi:"cipherBits"`
	ClientSsl             pulumi.BoolPtrInput     `pulumi:"clientSsl"`
	Code                  pulumi.BoolPtrInput     `pulumi:"code"`
	CommonName            pulumi.BoolPtrInput     `pulumi:"commonName"`
	Contains              pulumi.BoolPtrInput     `pulumi:"contains"`
	Continent             pulumi.BoolPtrInput     `pulumi:"continent"`
	CountryCode           pulumi.BoolPtrInput     `pulumi:"countryCode"`
	CountryName           pulumi.BoolPtrInput     `pulumi:"countryName"`
	CpuUsage              pulumi.BoolPtrInput     `pulumi:"cpuUsage"`
	DeviceMake            pulumi.BoolPtrInput     `pulumi:"deviceMake"`
	DeviceModel           pulumi.BoolPtrInput     `pulumi:"deviceModel"`
	Domain                pulumi.BoolPtrInput     `pulumi:"domain"`
	EndsWith              pulumi.BoolPtrInput     `pulumi:"endsWith"`
	Equals                pulumi.BoolPtrInput     `pulumi:"equals"`
	Exists                pulumi.BoolPtrInput     `pulumi:"exists"`
	Expiry                pulumi.BoolPtrInput     `pulumi:"expiry"`
	Extension             pulumi.BoolPtrInput     `pulumi:"extension"`
	External              pulumi.BoolPtrInput     `pulumi:"external"`
	Geoip                 pulumi.BoolPtrInput     `pulumi:"geoip"`
	Greater               pulumi.BoolPtrInput     `pulumi:"greater"`
	GreaterOrEqual        pulumi.BoolPtrInput     `pulumi:"greaterOrEqual"`
	Host                  pulumi.BoolPtrInput     `pulumi:"host"`
	HttpBasicAuth         pulumi.BoolPtrInput     `pulumi:"httpBasicAuth"`
	HttpCookie            pulumi.BoolPtrInput     `pulumi:"httpCookie"`
	HttpHeader            pulumi.BoolPtrInput     `pulumi:"httpHeader"`
	HttpHost              pulumi.BoolPtrInput     `pulumi:"httpHost"`
	HttpMethod            pulumi.BoolPtrInput     `pulumi:"httpMethod"`
	HttpReferer           pulumi.BoolPtrInput     `pulumi:"httpReferer"`
	HttpSetCookie         pulumi.BoolPtrInput     `pulumi:"httpSetCookie"`
	HttpStatus            pulumi.BoolPtrInput     `pulumi:"httpStatus"`
	HttpUri               pulumi.BoolPtrInput     `pulumi:"httpUri"`
	HttpUserAgent         pulumi.BoolPtrInput     `pulumi:"httpUserAgent"`
	HttpVersion           pulumi.BoolPtrInput     `pulumi:"httpVersion"`
	Index                 pulumi.IntPtrInput      `pulumi:"index"`
	Internal              pulumi.BoolPtrInput     `pulumi:"internal"`
	Isp                   pulumi.BoolPtrInput     `pulumi:"isp"`
	Last15secs            pulumi.BoolPtrInput     `pulumi:"last15secs"`
	Last1min              pulumi.BoolPtrInput     `pulumi:"last1min"`
	Last5mins             pulumi.BoolPtrInput     `pulumi:"last5mins"`
	Less                  pulumi.BoolPtrInput     `pulumi:"less"`
	LessOrEqual           pulumi.BoolPtrInput     `pulumi:"lessOrEqual"`
	Local                 pulumi.BoolPtrInput     `pulumi:"local"`
	Major                 pulumi.BoolPtrInput     `pulumi:"major"`
	Matches               pulumi.BoolPtrInput     `pulumi:"matches"`
	Minor                 pulumi.BoolPtrInput     `pulumi:"minor"`
	Missing               pulumi.BoolPtrInput     `pulumi:"missing"`
	Mss                   pulumi.BoolPtrInput     `pulumi:"mss"`
	Not                   pulumi.BoolPtrInput     `pulumi:"not"`
	Org                   pulumi.BoolPtrInput     `pulumi:"org"`
	Password              pulumi.BoolPtrInput     `pulumi:"password"`
	Path                  pulumi.BoolPtrInput     `pulumi:"path"`
	PathSegment           pulumi.BoolPtrInput     `pulumi:"pathSegment"`
	Port                  pulumi.BoolPtrInput     `pulumi:"port"`
	Present               pulumi.BoolPtrInput     `pulumi:"present"`
	Protocol              pulumi.BoolPtrInput     `pulumi:"protocol"`
	QueryParameter        pulumi.BoolPtrInput     `pulumi:"queryParameter"`
	QueryString           pulumi.BoolPtrInput     `pulumi:"queryString"`
	RegionCode            pulumi.BoolPtrInput     `pulumi:"regionCode"`
	RegionName            pulumi.BoolPtrInput     `pulumi:"regionName"`
	Remote                pulumi.BoolPtrInput     `pulumi:"remote"`
	Request               pulumi.BoolPtrInput     `pulumi:"request"`
	Response              pulumi.BoolPtrInput     `pulumi:"response"`
	RouteDomain           pulumi.BoolPtrInput     `pulumi:"routeDomain"`
	Rtt                   pulumi.BoolPtrInput     `pulumi:"rtt"`
	Scheme                pulumi.BoolPtrInput     `pulumi:"scheme"`
	ServerName            pulumi.BoolPtrInput     `pulumi:"serverName"`
	SslCert               pulumi.BoolPtrInput     `pulumi:"sslCert"`
	SslClientHello        pulumi.BoolPtrInput     `pulumi:"sslClientHello"`
	SslExtension          pulumi.BoolPtrInput     `pulumi:"sslExtension"`
	SslServerHandshake    pulumi.BoolPtrInput     `pulumi:"sslServerHandshake"`
	SslServerHello        pulumi.BoolPtrInput     `pulumi:"sslServerHello"`
	StartsWith            pulumi.BoolPtrInput     `pulumi:"startsWith"`
	Tcp                   pulumi.BoolPtrInput     `pulumi:"tcp"`
	Text                  pulumi.BoolPtrInput     `pulumi:"text"`
	TmName                pulumi.StringPtrInput   `pulumi:"tmName"`
	UnnamedQueryParameter pulumi.BoolPtrInput     `pulumi:"unnamedQueryParameter"`
	UserAgentToken        pulumi.BoolPtrInput     `pulumi:"userAgentToken"`
	Username              pulumi.BoolPtrInput     `pulumi:"username"`
	Value                 pulumi.BoolPtrInput     `pulumi:"value"`
	Values                pulumi.StringArrayInput `pulumi:"values"`
	Version               pulumi.BoolPtrInput     `pulumi:"version"`
	Vlan                  pulumi.BoolPtrInput     `pulumi:"vlan"`
	VlanId                pulumi.BoolPtrInput     `pulumi:"vlanId"`
}

func (PolicyRuleConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRuleCondition)(nil)).Elem()
}

func (i PolicyRuleConditionArgs) ToPolicyRuleConditionOutput() PolicyRuleConditionOutput {
	return i.ToPolicyRuleConditionOutputWithContext(context.Background())
}

func (i PolicyRuleConditionArgs) ToPolicyRuleConditionOutputWithContext(ctx context.Context) PolicyRuleConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleConditionOutput)
}

// PolicyRuleConditionArrayInput is an input type that accepts PolicyRuleConditionArray and PolicyRuleConditionArrayOutput values.
// You can construct a concrete instance of `PolicyRuleConditionArrayInput` via:
//
//	PolicyRuleConditionArray{ PolicyRuleConditionArgs{...} }
type PolicyRuleConditionArrayInput interface {
	pulumi.Input

	ToPolicyRuleConditionArrayOutput() PolicyRuleConditionArrayOutput
	ToPolicyRuleConditionArrayOutputWithContext(context.Context) PolicyRuleConditionArrayOutput
}

type PolicyRuleConditionArray []PolicyRuleConditionInput

func (PolicyRuleConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyRuleCondition)(nil)).Elem()
}

func (i PolicyRuleConditionArray) ToPolicyRuleConditionArrayOutput() PolicyRuleConditionArrayOutput {
	return i.ToPolicyRuleConditionArrayOutputWithContext(context.Background())
}

func (i PolicyRuleConditionArray) ToPolicyRuleConditionArrayOutputWithContext(ctx context.Context) PolicyRuleConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleConditionArrayOutput)
}

type PolicyRuleConditionOutput struct{ *pulumi.OutputState }

func (PolicyRuleConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRuleCondition)(nil)).Elem()
}

func (o PolicyRuleConditionOutput) ToPolicyRuleConditionOutput() PolicyRuleConditionOutput {
	return o
}

func (o PolicyRuleConditionOutput) ToPolicyRuleConditionOutputWithContext(ctx context.Context) PolicyRuleConditionOutput {
	return o
}

func (o PolicyRuleConditionOutput) Address() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Address }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) All() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.All }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) AppService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *string { return v.AppService }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleConditionOutput) BrowserType() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.BrowserType }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) BrowserVersion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.BrowserVersion }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) CaseInsensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.CaseInsensitive }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) CaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.CaseSensitive }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Cipher() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Cipher }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) CipherBits() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.CipherBits }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) ClientSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.ClientSsl }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Code() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Code }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) CommonName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.CommonName }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Contains() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Contains }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Continent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Continent }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) CountryCode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.CountryCode }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) CountryName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.CountryName }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) CpuUsage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.CpuUsage }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) DeviceMake() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.DeviceMake }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) DeviceModel() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.DeviceModel }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Domain() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Domain }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) EndsWith() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.EndsWith }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Equals() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Equals }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Exists() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Exists }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Expiry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Expiry }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Extension() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Extension }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) External() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.External }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Geoip() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Geoip }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Greater() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Greater }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) GreaterOrEqual() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.GreaterOrEqual }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Host() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Host }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) HttpBasicAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.HttpBasicAuth }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) HttpCookie() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.HttpCookie }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) HttpHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.HttpHeader }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) HttpHost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.HttpHost }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) HttpMethod() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.HttpMethod }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) HttpReferer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.HttpReferer }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) HttpSetCookie() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.HttpSetCookie }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) HttpStatus() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.HttpStatus }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) HttpUri() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.HttpUri }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) HttpUserAgent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.HttpUserAgent }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) HttpVersion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.HttpVersion }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Index() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *int { return v.Index }).(pulumi.IntPtrOutput)
}

func (o PolicyRuleConditionOutput) Internal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Internal }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Isp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Isp }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Last15secs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Last15secs }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Last1min() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Last1min }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Last5mins() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Last5mins }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Less() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Less }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) LessOrEqual() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.LessOrEqual }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Local() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Local }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Major() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Major }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Matches() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Matches }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Minor() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Minor }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Missing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Missing }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Mss() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Mss }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Not() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Not }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Org() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Org }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Password() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Password }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Path() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Path }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) PathSegment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.PathSegment }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Port() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Port }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Present() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Present }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Protocol() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Protocol }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) QueryParameter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.QueryParameter }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) QueryString() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.QueryString }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) RegionCode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.RegionCode }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) RegionName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.RegionName }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Remote() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Remote }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Request() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Request }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Response() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Response }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) RouteDomain() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.RouteDomain }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Rtt() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Rtt }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Scheme() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Scheme }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) ServerName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.ServerName }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) SslCert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.SslCert }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) SslClientHello() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.SslClientHello }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) SslExtension() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.SslExtension }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) SslServerHandshake() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.SslServerHandshake }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) SslServerHello() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.SslServerHello }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) StartsWith() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.StartsWith }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Tcp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Tcp }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Text() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Text }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) TmName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *string { return v.TmName }).(pulumi.StringPtrOutput)
}

func (o PolicyRuleConditionOutput) UnnamedQueryParameter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.UnnamedQueryParameter }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) UserAgentToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.UserAgentToken }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Username() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Username }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Value() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Value }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyRuleCondition) []string { return v.Values }).(pulumi.StringArrayOutput)
}

func (o PolicyRuleConditionOutput) Version() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Version }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) Vlan() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.Vlan }).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleConditionOutput) VlanId() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleCondition) *bool { return v.VlanId }).(pulumi.BoolPtrOutput)
}

type PolicyRuleConditionArrayOutput struct{ *pulumi.OutputState }

func (PolicyRuleConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyRuleCondition)(nil)).Elem()
}

func (o PolicyRuleConditionArrayOutput) ToPolicyRuleConditionArrayOutput() PolicyRuleConditionArrayOutput {
	return o
}

func (o PolicyRuleConditionArrayOutput) ToPolicyRuleConditionArrayOutputWithContext(ctx context.Context) PolicyRuleConditionArrayOutput {
	return o
}

func (o PolicyRuleConditionArrayOutput) Index(i pulumi.IntInput) PolicyRuleConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyRuleCondition {
		return vs[0].([]PolicyRuleCondition)[vs[1].(int)]
	}).(PolicyRuleConditionOutput)
}

type ProfileClientSslCertKeyChain struct {
	// Specifies a cert name for use.
	Cert *string `pulumi:"cert"`
	// Contains a certificate chain that is relevant to the certificate and key mentioned earlier.This key is optional
	Chain *string `pulumi:"chain"`
	// Contains a key name
	Key *string `pulumi:"key"`
	// Specifies the name of the profile.Name of Profile should be full path.The full path is the combination of the `partition + profile name`,For example `/Common/test-clientssl-profile`.
	Name       *string `pulumi:"name"`
	Passphrase *string `pulumi:"passphrase"`
}

// ProfileClientSslCertKeyChainInput is an input type that accepts ProfileClientSslCertKeyChainArgs and ProfileClientSslCertKeyChainOutput values.
// You can construct a concrete instance of `ProfileClientSslCertKeyChainInput` via:
//
//	ProfileClientSslCertKeyChainArgs{...}
type ProfileClientSslCertKeyChainInput interface {
	pulumi.Input

	ToProfileClientSslCertKeyChainOutput() ProfileClientSslCertKeyChainOutput
	ToProfileClientSslCertKeyChainOutputWithContext(context.Context) ProfileClientSslCertKeyChainOutput
}

type ProfileClientSslCertKeyChainArgs struct {
	// Specifies a cert name for use.
	Cert pulumi.StringPtrInput `pulumi:"cert"`
	// Contains a certificate chain that is relevant to the certificate and key mentioned earlier.This key is optional
	Chain pulumi.StringPtrInput `pulumi:"chain"`
	// Contains a key name
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Specifies the name of the profile.Name of Profile should be full path.The full path is the combination of the `partition + profile name`,For example `/Common/test-clientssl-profile`.
	Name       pulumi.StringPtrInput `pulumi:"name"`
	Passphrase pulumi.StringPtrInput `pulumi:"passphrase"`
}

func (ProfileClientSslCertKeyChainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileClientSslCertKeyChain)(nil)).Elem()
}

func (i ProfileClientSslCertKeyChainArgs) ToProfileClientSslCertKeyChainOutput() ProfileClientSslCertKeyChainOutput {
	return i.ToProfileClientSslCertKeyChainOutputWithContext(context.Background())
}

func (i ProfileClientSslCertKeyChainArgs) ToProfileClientSslCertKeyChainOutputWithContext(ctx context.Context) ProfileClientSslCertKeyChainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileClientSslCertKeyChainOutput)
}

// ProfileClientSslCertKeyChainArrayInput is an input type that accepts ProfileClientSslCertKeyChainArray and ProfileClientSslCertKeyChainArrayOutput values.
// You can construct a concrete instance of `ProfileClientSslCertKeyChainArrayInput` via:
//
//	ProfileClientSslCertKeyChainArray{ ProfileClientSslCertKeyChainArgs{...} }
type ProfileClientSslCertKeyChainArrayInput interface {
	pulumi.Input

	ToProfileClientSslCertKeyChainArrayOutput() ProfileClientSslCertKeyChainArrayOutput
	ToProfileClientSslCertKeyChainArrayOutputWithContext(context.Context) ProfileClientSslCertKeyChainArrayOutput
}

type ProfileClientSslCertKeyChainArray []ProfileClientSslCertKeyChainInput

func (ProfileClientSslCertKeyChainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileClientSslCertKeyChain)(nil)).Elem()
}

func (i ProfileClientSslCertKeyChainArray) ToProfileClientSslCertKeyChainArrayOutput() ProfileClientSslCertKeyChainArrayOutput {
	return i.ToProfileClientSslCertKeyChainArrayOutputWithContext(context.Background())
}

func (i ProfileClientSslCertKeyChainArray) ToProfileClientSslCertKeyChainArrayOutputWithContext(ctx context.Context) ProfileClientSslCertKeyChainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileClientSslCertKeyChainArrayOutput)
}

type ProfileClientSslCertKeyChainOutput struct{ *pulumi.OutputState }

func (ProfileClientSslCertKeyChainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProfileClientSslCertKeyChain)(nil)).Elem()
}

func (o ProfileClientSslCertKeyChainOutput) ToProfileClientSslCertKeyChainOutput() ProfileClientSslCertKeyChainOutput {
	return o
}

func (o ProfileClientSslCertKeyChainOutput) ToProfileClientSslCertKeyChainOutputWithContext(ctx context.Context) ProfileClientSslCertKeyChainOutput {
	return o
}

// Specifies a cert name for use.
func (o ProfileClientSslCertKeyChainOutput) Cert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileClientSslCertKeyChain) *string { return v.Cert }).(pulumi.StringPtrOutput)
}

// Contains a certificate chain that is relevant to the certificate and key mentioned earlier.This key is optional
func (o ProfileClientSslCertKeyChainOutput) Chain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileClientSslCertKeyChain) *string { return v.Chain }).(pulumi.StringPtrOutput)
}

// Contains a key name
func (o ProfileClientSslCertKeyChainOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileClientSslCertKeyChain) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Specifies the name of the profile.Name of Profile should be full path.The full path is the combination of the `partition + profile name`,For example `/Common/test-clientssl-profile`.
func (o ProfileClientSslCertKeyChainOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileClientSslCertKeyChain) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ProfileClientSslCertKeyChainOutput) Passphrase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProfileClientSslCertKeyChain) *string { return v.Passphrase }).(pulumi.StringPtrOutput)
}

type ProfileClientSslCertKeyChainArrayOutput struct{ *pulumi.OutputState }

func (ProfileClientSslCertKeyChainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProfileClientSslCertKeyChain)(nil)).Elem()
}

func (o ProfileClientSslCertKeyChainArrayOutput) ToProfileClientSslCertKeyChainArrayOutput() ProfileClientSslCertKeyChainArrayOutput {
	return o
}

func (o ProfileClientSslCertKeyChainArrayOutput) ToProfileClientSslCertKeyChainArrayOutputWithContext(ctx context.Context) ProfileClientSslCertKeyChainArrayOutput {
	return o
}

func (o ProfileClientSslCertKeyChainArrayOutput) Index(i pulumi.IntInput) ProfileClientSslCertKeyChainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProfileClientSslCertKeyChain {
		return vs[0].([]ProfileClientSslCertKeyChain)[vs[1].(int)]
	}).(ProfileClientSslCertKeyChainOutput)
}

type SnatOrigin struct {
	AppService *string `pulumi:"appService"`
	// Name of the SNAT, name of SNAT should be full path. Full path is the combination of the `partition + SNAT name`,For example `/Common/test-snat`.
	Name *string `pulumi:"name"`
}

// SnatOriginInput is an input type that accepts SnatOriginArgs and SnatOriginOutput values.
// You can construct a concrete instance of `SnatOriginInput` via:
//
//	SnatOriginArgs{...}
type SnatOriginInput interface {
	pulumi.Input

	ToSnatOriginOutput() SnatOriginOutput
	ToSnatOriginOutputWithContext(context.Context) SnatOriginOutput
}

type SnatOriginArgs struct {
	AppService pulumi.StringPtrInput `pulumi:"appService"`
	// Name of the SNAT, name of SNAT should be full path. Full path is the combination of the `partition + SNAT name`,For example `/Common/test-snat`.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (SnatOriginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnatOrigin)(nil)).Elem()
}

func (i SnatOriginArgs) ToSnatOriginOutput() SnatOriginOutput {
	return i.ToSnatOriginOutputWithContext(context.Background())
}

func (i SnatOriginArgs) ToSnatOriginOutputWithContext(ctx context.Context) SnatOriginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnatOriginOutput)
}

// SnatOriginArrayInput is an input type that accepts SnatOriginArray and SnatOriginArrayOutput values.
// You can construct a concrete instance of `SnatOriginArrayInput` via:
//
//	SnatOriginArray{ SnatOriginArgs{...} }
type SnatOriginArrayInput interface {
	pulumi.Input

	ToSnatOriginArrayOutput() SnatOriginArrayOutput
	ToSnatOriginArrayOutputWithContext(context.Context) SnatOriginArrayOutput
}

type SnatOriginArray []SnatOriginInput

func (SnatOriginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SnatOrigin)(nil)).Elem()
}

func (i SnatOriginArray) ToSnatOriginArrayOutput() SnatOriginArrayOutput {
	return i.ToSnatOriginArrayOutputWithContext(context.Background())
}

func (i SnatOriginArray) ToSnatOriginArrayOutputWithContext(ctx context.Context) SnatOriginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnatOriginArrayOutput)
}

type SnatOriginOutput struct{ *pulumi.OutputState }

func (SnatOriginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnatOrigin)(nil)).Elem()
}

func (o SnatOriginOutput) ToSnatOriginOutput() SnatOriginOutput {
	return o
}

func (o SnatOriginOutput) ToSnatOriginOutputWithContext(ctx context.Context) SnatOriginOutput {
	return o
}

func (o SnatOriginOutput) AppService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnatOrigin) *string { return v.AppService }).(pulumi.StringPtrOutput)
}

// Name of the SNAT, name of SNAT should be full path. Full path is the combination of the `partition + SNAT name`,For example `/Common/test-snat`.
func (o SnatOriginOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnatOrigin) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type SnatOriginArrayOutput struct{ *pulumi.OutputState }

func (SnatOriginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SnatOrigin)(nil)).Elem()
}

func (o SnatOriginArrayOutput) ToSnatOriginArrayOutput() SnatOriginArrayOutput {
	return o
}

func (o SnatOriginArrayOutput) ToSnatOriginArrayOutputWithContext(ctx context.Context) SnatOriginArrayOutput {
	return o
}

func (o SnatOriginArrayOutput) Index(i pulumi.IntInput) SnatOriginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SnatOrigin {
		return vs[0].([]SnatOrigin)[vs[1].(int)]
	}).(SnatOriginOutput)
}

type GetDataGroupRecord struct {
	Data *string `pulumi:"data"`
	// Name of the datagroup
	Name string `pulumi:"name"`
}

// GetDataGroupRecordInput is an input type that accepts GetDataGroupRecordArgs and GetDataGroupRecordOutput values.
// You can construct a concrete instance of `GetDataGroupRecordInput` via:
//
//	GetDataGroupRecordArgs{...}
type GetDataGroupRecordInput interface {
	pulumi.Input

	ToGetDataGroupRecordOutput() GetDataGroupRecordOutput
	ToGetDataGroupRecordOutputWithContext(context.Context) GetDataGroupRecordOutput
}

type GetDataGroupRecordArgs struct {
	Data pulumi.StringPtrInput `pulumi:"data"`
	// Name of the datagroup
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetDataGroupRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataGroupRecord)(nil)).Elem()
}

func (i GetDataGroupRecordArgs) ToGetDataGroupRecordOutput() GetDataGroupRecordOutput {
	return i.ToGetDataGroupRecordOutputWithContext(context.Background())
}

func (i GetDataGroupRecordArgs) ToGetDataGroupRecordOutputWithContext(ctx context.Context) GetDataGroupRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataGroupRecordOutput)
}

// GetDataGroupRecordArrayInput is an input type that accepts GetDataGroupRecordArray and GetDataGroupRecordArrayOutput values.
// You can construct a concrete instance of `GetDataGroupRecordArrayInput` via:
//
//	GetDataGroupRecordArray{ GetDataGroupRecordArgs{...} }
type GetDataGroupRecordArrayInput interface {
	pulumi.Input

	ToGetDataGroupRecordArrayOutput() GetDataGroupRecordArrayOutput
	ToGetDataGroupRecordArrayOutputWithContext(context.Context) GetDataGroupRecordArrayOutput
}

type GetDataGroupRecordArray []GetDataGroupRecordInput

func (GetDataGroupRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataGroupRecord)(nil)).Elem()
}

func (i GetDataGroupRecordArray) ToGetDataGroupRecordArrayOutput() GetDataGroupRecordArrayOutput {
	return i.ToGetDataGroupRecordArrayOutputWithContext(context.Background())
}

func (i GetDataGroupRecordArray) ToGetDataGroupRecordArrayOutputWithContext(ctx context.Context) GetDataGroupRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDataGroupRecordArrayOutput)
}

type GetDataGroupRecordOutput struct{ *pulumi.OutputState }

func (GetDataGroupRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDataGroupRecord)(nil)).Elem()
}

func (o GetDataGroupRecordOutput) ToGetDataGroupRecordOutput() GetDataGroupRecordOutput {
	return o
}

func (o GetDataGroupRecordOutput) ToGetDataGroupRecordOutputWithContext(ctx context.Context) GetDataGroupRecordOutput {
	return o
}

func (o GetDataGroupRecordOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDataGroupRecord) *string { return v.Data }).(pulumi.StringPtrOutput)
}

// Name of the datagroup
func (o GetDataGroupRecordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDataGroupRecord) string { return v.Name }).(pulumi.StringOutput)
}

type GetDataGroupRecordArrayOutput struct{ *pulumi.OutputState }

func (GetDataGroupRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDataGroupRecord)(nil)).Elem()
}

func (o GetDataGroupRecordArrayOutput) ToGetDataGroupRecordArrayOutput() GetDataGroupRecordArrayOutput {
	return o
}

func (o GetDataGroupRecordArrayOutput) ToGetDataGroupRecordArrayOutputWithContext(ctx context.Context) GetDataGroupRecordArrayOutput {
	return o
}

func (o GetDataGroupRecordArrayOutput) Index(i pulumi.IntInput) GetDataGroupRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDataGroupRecord {
		return vs[0].([]GetDataGroupRecord)[vs[1].(int)]
	}).(GetDataGroupRecordOutput)
}

type GetNodeFqdn struct {
	// The FQDN node's address family.
	AddressFamily *string `pulumi:"addressFamily"`
	// Specifies if the node should scale to the IP address set returned by DNS.
	Autopopulate string `pulumi:"autopopulate"`
	// The number of attempts to resolve a domain name.
	Downinterval int `pulumi:"downinterval"`
	// The amount of time before sending the next DNS query.
	Interval string `pulumi:"interval"`
	// Name of the node.
	Name *string `pulumi:"name"`
}

// GetNodeFqdnInput is an input type that accepts GetNodeFqdnArgs and GetNodeFqdnOutput values.
// You can construct a concrete instance of `GetNodeFqdnInput` via:
//
//	GetNodeFqdnArgs{...}
type GetNodeFqdnInput interface {
	pulumi.Input

	ToGetNodeFqdnOutput() GetNodeFqdnOutput
	ToGetNodeFqdnOutputWithContext(context.Context) GetNodeFqdnOutput
}

type GetNodeFqdnArgs struct {
	// The FQDN node's address family.
	AddressFamily pulumi.StringPtrInput `pulumi:"addressFamily"`
	// Specifies if the node should scale to the IP address set returned by DNS.
	Autopopulate pulumi.StringInput `pulumi:"autopopulate"`
	// The number of attempts to resolve a domain name.
	Downinterval pulumi.IntInput `pulumi:"downinterval"`
	// The amount of time before sending the next DNS query.
	Interval pulumi.StringInput `pulumi:"interval"`
	// Name of the node.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GetNodeFqdnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeFqdn)(nil)).Elem()
}

func (i GetNodeFqdnArgs) ToGetNodeFqdnOutput() GetNodeFqdnOutput {
	return i.ToGetNodeFqdnOutputWithContext(context.Background())
}

func (i GetNodeFqdnArgs) ToGetNodeFqdnOutputWithContext(ctx context.Context) GetNodeFqdnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeFqdnOutput)
}

func (i GetNodeFqdnArgs) ToGetNodeFqdnPtrOutput() GetNodeFqdnPtrOutput {
	return i.ToGetNodeFqdnPtrOutputWithContext(context.Background())
}

func (i GetNodeFqdnArgs) ToGetNodeFqdnPtrOutputWithContext(ctx context.Context) GetNodeFqdnPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeFqdnOutput).ToGetNodeFqdnPtrOutputWithContext(ctx)
}

// GetNodeFqdnPtrInput is an input type that accepts GetNodeFqdnArgs, GetNodeFqdnPtr and GetNodeFqdnPtrOutput values.
// You can construct a concrete instance of `GetNodeFqdnPtrInput` via:
//
//	        GetNodeFqdnArgs{...}
//
//	or:
//
//	        nil
type GetNodeFqdnPtrInput interface {
	pulumi.Input

	ToGetNodeFqdnPtrOutput() GetNodeFqdnPtrOutput
	ToGetNodeFqdnPtrOutputWithContext(context.Context) GetNodeFqdnPtrOutput
}

type getNodeFqdnPtrType GetNodeFqdnArgs

func GetNodeFqdnPtr(v *GetNodeFqdnArgs) GetNodeFqdnPtrInput {
	return (*getNodeFqdnPtrType)(v)
}

func (*getNodeFqdnPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetNodeFqdn)(nil)).Elem()
}

func (i *getNodeFqdnPtrType) ToGetNodeFqdnPtrOutput() GetNodeFqdnPtrOutput {
	return i.ToGetNodeFqdnPtrOutputWithContext(context.Background())
}

func (i *getNodeFqdnPtrType) ToGetNodeFqdnPtrOutputWithContext(ctx context.Context) GetNodeFqdnPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeFqdnPtrOutput)
}

type GetNodeFqdnOutput struct{ *pulumi.OutputState }

func (GetNodeFqdnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeFqdn)(nil)).Elem()
}

func (o GetNodeFqdnOutput) ToGetNodeFqdnOutput() GetNodeFqdnOutput {
	return o
}

func (o GetNodeFqdnOutput) ToGetNodeFqdnOutputWithContext(ctx context.Context) GetNodeFqdnOutput {
	return o
}

func (o GetNodeFqdnOutput) ToGetNodeFqdnPtrOutput() GetNodeFqdnPtrOutput {
	return o.ToGetNodeFqdnPtrOutputWithContext(context.Background())
}

func (o GetNodeFqdnOutput) ToGetNodeFqdnPtrOutputWithContext(ctx context.Context) GetNodeFqdnPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetNodeFqdn) *GetNodeFqdn {
		return &v
	}).(GetNodeFqdnPtrOutput)
}

// The FQDN node's address family.
func (o GetNodeFqdnOutput) AddressFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNodeFqdn) *string { return v.AddressFamily }).(pulumi.StringPtrOutput)
}

// Specifies if the node should scale to the IP address set returned by DNS.
func (o GetNodeFqdnOutput) Autopopulate() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodeFqdn) string { return v.Autopopulate }).(pulumi.StringOutput)
}

// The number of attempts to resolve a domain name.
func (o GetNodeFqdnOutput) Downinterval() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodeFqdn) int { return v.Downinterval }).(pulumi.IntOutput)
}

// The amount of time before sending the next DNS query.
func (o GetNodeFqdnOutput) Interval() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodeFqdn) string { return v.Interval }).(pulumi.StringOutput)
}

// Name of the node.
func (o GetNodeFqdnOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNodeFqdn) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type GetNodeFqdnPtrOutput struct{ *pulumi.OutputState }

func (GetNodeFqdnPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetNodeFqdn)(nil)).Elem()
}

func (o GetNodeFqdnPtrOutput) ToGetNodeFqdnPtrOutput() GetNodeFqdnPtrOutput {
	return o
}

func (o GetNodeFqdnPtrOutput) ToGetNodeFqdnPtrOutputWithContext(ctx context.Context) GetNodeFqdnPtrOutput {
	return o
}

func (o GetNodeFqdnPtrOutput) Elem() GetNodeFqdnOutput {
	return o.ApplyT(func(v *GetNodeFqdn) GetNodeFqdn {
		if v != nil {
			return *v
		}
		var ret GetNodeFqdn
		return ret
	}).(GetNodeFqdnOutput)
}

// The FQDN node's address family.
func (o GetNodeFqdnPtrOutput) AddressFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetNodeFqdn) *string {
		if v == nil {
			return nil
		}
		return v.AddressFamily
	}).(pulumi.StringPtrOutput)
}

// Specifies if the node should scale to the IP address set returned by DNS.
func (o GetNodeFqdnPtrOutput) Autopopulate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetNodeFqdn) *string {
		if v == nil {
			return nil
		}
		return &v.Autopopulate
	}).(pulumi.StringPtrOutput)
}

// The number of attempts to resolve a domain name.
func (o GetNodeFqdnPtrOutput) Downinterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetNodeFqdn) *int {
		if v == nil {
			return nil
		}
		return &v.Downinterval
	}).(pulumi.IntPtrOutput)
}

// The amount of time before sending the next DNS query.
func (o GetNodeFqdnPtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetNodeFqdn) *string {
		if v == nil {
			return nil
		}
		return &v.Interval
	}).(pulumi.StringPtrOutput)
}

// Name of the node.
func (o GetNodeFqdnPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetNodeFqdn) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

type GetPolicyRule struct {
	Actions    []GetPolicyRuleAction    `pulumi:"actions"`
	Conditions []GetPolicyRuleCondition `pulumi:"conditions"`
	// Name of the policy which includes partion ( /partition/policy-name )
	Name string `pulumi:"name"`
}

// GetPolicyRuleInput is an input type that accepts GetPolicyRuleArgs and GetPolicyRuleOutput values.
// You can construct a concrete instance of `GetPolicyRuleInput` via:
//
//	GetPolicyRuleArgs{...}
type GetPolicyRuleInput interface {
	pulumi.Input

	ToGetPolicyRuleOutput() GetPolicyRuleOutput
	ToGetPolicyRuleOutputWithContext(context.Context) GetPolicyRuleOutput
}

type GetPolicyRuleArgs struct {
	Actions    GetPolicyRuleActionArrayInput    `pulumi:"actions"`
	Conditions GetPolicyRuleConditionArrayInput `pulumi:"conditions"`
	// Name of the policy which includes partion ( /partition/policy-name )
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetPolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyRule)(nil)).Elem()
}

func (i GetPolicyRuleArgs) ToGetPolicyRuleOutput() GetPolicyRuleOutput {
	return i.ToGetPolicyRuleOutputWithContext(context.Background())
}

func (i GetPolicyRuleArgs) ToGetPolicyRuleOutputWithContext(ctx context.Context) GetPolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyRuleOutput)
}

// GetPolicyRuleArrayInput is an input type that accepts GetPolicyRuleArray and GetPolicyRuleArrayOutput values.
// You can construct a concrete instance of `GetPolicyRuleArrayInput` via:
//
//	GetPolicyRuleArray{ GetPolicyRuleArgs{...} }
type GetPolicyRuleArrayInput interface {
	pulumi.Input

	ToGetPolicyRuleArrayOutput() GetPolicyRuleArrayOutput
	ToGetPolicyRuleArrayOutputWithContext(context.Context) GetPolicyRuleArrayOutput
}

type GetPolicyRuleArray []GetPolicyRuleInput

func (GetPolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyRule)(nil)).Elem()
}

func (i GetPolicyRuleArray) ToGetPolicyRuleArrayOutput() GetPolicyRuleArrayOutput {
	return i.ToGetPolicyRuleArrayOutputWithContext(context.Background())
}

func (i GetPolicyRuleArray) ToGetPolicyRuleArrayOutputWithContext(ctx context.Context) GetPolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyRuleArrayOutput)
}

type GetPolicyRuleOutput struct{ *pulumi.OutputState }

func (GetPolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyRule)(nil)).Elem()
}

func (o GetPolicyRuleOutput) ToGetPolicyRuleOutput() GetPolicyRuleOutput {
	return o
}

func (o GetPolicyRuleOutput) ToGetPolicyRuleOutputWithContext(ctx context.Context) GetPolicyRuleOutput {
	return o
}

func (o GetPolicyRuleOutput) Actions() GetPolicyRuleActionArrayOutput {
	return o.ApplyT(func(v GetPolicyRule) []GetPolicyRuleAction { return v.Actions }).(GetPolicyRuleActionArrayOutput)
}

func (o GetPolicyRuleOutput) Conditions() GetPolicyRuleConditionArrayOutput {
	return o.ApplyT(func(v GetPolicyRule) []GetPolicyRuleCondition { return v.Conditions }).(GetPolicyRuleConditionArrayOutput)
}

// Name of the policy which includes partion ( /partition/policy-name )
func (o GetPolicyRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRule) string { return v.Name }).(pulumi.StringOutput)
}

type GetPolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (GetPolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyRule)(nil)).Elem()
}

func (o GetPolicyRuleArrayOutput) ToGetPolicyRuleArrayOutput() GetPolicyRuleArrayOutput {
	return o
}

func (o GetPolicyRuleArrayOutput) ToGetPolicyRuleArrayOutputWithContext(ctx context.Context) GetPolicyRuleArrayOutput {
	return o
}

func (o GetPolicyRuleArrayOutput) Index(i pulumi.IntInput) GetPolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPolicyRule {
		return vs[0].([]GetPolicyRule)[vs[1].(int)]
	}).(GetPolicyRuleOutput)
}

type GetPolicyRuleAction struct {
	AppService         string `pulumi:"appService"`
	Application        string `pulumi:"application"`
	Asm                bool   `pulumi:"asm"`
	Avr                bool   `pulumi:"avr"`
	Cache              bool   `pulumi:"cache"`
	Carp               bool   `pulumi:"carp"`
	Category           string `pulumi:"category"`
	Classify           bool   `pulumi:"classify"`
	ClonePool          string `pulumi:"clonePool"`
	Code               int    `pulumi:"code"`
	Compress           bool   `pulumi:"compress"`
	Connection         bool   `pulumi:"connection"`
	Content            string `pulumi:"content"`
	CookieHash         bool   `pulumi:"cookieHash"`
	CookieInsert       bool   `pulumi:"cookieInsert"`
	CookiePassive      bool   `pulumi:"cookiePassive"`
	CookieRewrite      bool   `pulumi:"cookieRewrite"`
	Decompress         bool   `pulumi:"decompress"`
	Defer              bool   `pulumi:"defer"`
	DestinationAddress bool   `pulumi:"destinationAddress"`
	Disable            bool   `pulumi:"disable"`
	Domain             string `pulumi:"domain"`
	Enable             bool   `pulumi:"enable"`
	Expiry             string `pulumi:"expiry"`
	ExpirySecs         int    `pulumi:"expirySecs"`
	Expression         string `pulumi:"expression"`
	Extension          string `pulumi:"extension"`
	Facility           string `pulumi:"facility"`
	Forward            *bool  `pulumi:"forward"`
	FromProfile        string `pulumi:"fromProfile"`
	Hash               bool   `pulumi:"hash"`
	Host               string `pulumi:"host"`
	Http               bool   `pulumi:"http"`
	HttpBasicAuth      bool   `pulumi:"httpBasicAuth"`
	HttpCookie         bool   `pulumi:"httpCookie"`
	HttpHeader         bool   `pulumi:"httpHeader"`
	HttpHost           *bool  `pulumi:"httpHost"`
	HttpReferer        bool   `pulumi:"httpReferer"`
	HttpReply          bool   `pulumi:"httpReply"`
	HttpSetCookie      bool   `pulumi:"httpSetCookie"`
	HttpUri            bool   `pulumi:"httpUri"`
	Ifile              string `pulumi:"ifile"`
	Insert             bool   `pulumi:"insert"`
	InternalVirtual    string `pulumi:"internalVirtual"`
	IpAddress          string `pulumi:"ipAddress"`
	Key                string `pulumi:"key"`
	L7dos              bool   `pulumi:"l7dos"`
	Length             int    `pulumi:"length"`
	Location           string `pulumi:"location"`
	Log                bool   `pulumi:"log"`
	LtmPolicy          bool   `pulumi:"ltmPolicy"`
	Member             string `pulumi:"member"`
	Message            string `pulumi:"message"`
	Netmask            string `pulumi:"netmask"`
	Nexthop            string `pulumi:"nexthop"`
	Node               string `pulumi:"node"`
	Offset             int    `pulumi:"offset"`
	Path               string `pulumi:"path"`
	Pem                bool   `pulumi:"pem"`
	Persist            bool   `pulumi:"persist"`
	Pin                bool   `pulumi:"pin"`
	Policy             string `pulumi:"policy"`
	Pool               string `pulumi:"pool"`
	Port               int    `pulumi:"port"`
	Priority           string `pulumi:"priority"`
	Profile            string `pulumi:"profile"`
	Protocol           string `pulumi:"protocol"`
	QueryString        string `pulumi:"queryString"`
	Rateclass          string `pulumi:"rateclass"`
	Redirect           bool   `pulumi:"redirect"`
	Remove             bool   `pulumi:"remove"`
	Replace            bool   `pulumi:"replace"`
	Request            bool   `pulumi:"request"`
	RequestAdapt       bool   `pulumi:"requestAdapt"`
	Reset              bool   `pulumi:"reset"`
	Response           bool   `pulumi:"response"`
	ResponseAdapt      bool   `pulumi:"responseAdapt"`
	Scheme             string `pulumi:"scheme"`
	Script             string `pulumi:"script"`
	Select             bool   `pulumi:"select"`
	ServerSsl          bool   `pulumi:"serverSsl"`
	SetVariable        bool   `pulumi:"setVariable"`
	Shutdown           bool   `pulumi:"shutdown"`
	Snat               string `pulumi:"snat"`
	Snatpool           string `pulumi:"snatpool"`
	SourceAddress      bool   `pulumi:"sourceAddress"`
	SslClientHello     bool   `pulumi:"sslClientHello"`
	SslServerHandshake bool   `pulumi:"sslServerHandshake"`
	SslServerHello     bool   `pulumi:"sslServerHello"`
	SslSessionId       bool   `pulumi:"sslSessionId"`
	Status             int    `pulumi:"status"`
	Tcl                bool   `pulumi:"tcl"`
	TcpNagle           bool   `pulumi:"tcpNagle"`
	Text               string `pulumi:"text"`
	Timeout            int    `pulumi:"timeout"`
	TmName             string `pulumi:"tmName"`
	Uie                bool   `pulumi:"uie"`
	Universal          bool   `pulumi:"universal"`
	Value              string `pulumi:"value"`
	Virtual            string `pulumi:"virtual"`
	Vlan               string `pulumi:"vlan"`
	VlanId             int    `pulumi:"vlanId"`
	Wam                bool   `pulumi:"wam"`
	Write              bool   `pulumi:"write"`
}

// GetPolicyRuleActionInput is an input type that accepts GetPolicyRuleActionArgs and GetPolicyRuleActionOutput values.
// You can construct a concrete instance of `GetPolicyRuleActionInput` via:
//
//	GetPolicyRuleActionArgs{...}
type GetPolicyRuleActionInput interface {
	pulumi.Input

	ToGetPolicyRuleActionOutput() GetPolicyRuleActionOutput
	ToGetPolicyRuleActionOutputWithContext(context.Context) GetPolicyRuleActionOutput
}

type GetPolicyRuleActionArgs struct {
	AppService         pulumi.StringInput  `pulumi:"appService"`
	Application        pulumi.StringInput  `pulumi:"application"`
	Asm                pulumi.BoolInput    `pulumi:"asm"`
	Avr                pulumi.BoolInput    `pulumi:"avr"`
	Cache              pulumi.BoolInput    `pulumi:"cache"`
	Carp               pulumi.BoolInput    `pulumi:"carp"`
	Category           pulumi.StringInput  `pulumi:"category"`
	Classify           pulumi.BoolInput    `pulumi:"classify"`
	ClonePool          pulumi.StringInput  `pulumi:"clonePool"`
	Code               pulumi.IntInput     `pulumi:"code"`
	Compress           pulumi.BoolInput    `pulumi:"compress"`
	Connection         pulumi.BoolInput    `pulumi:"connection"`
	Content            pulumi.StringInput  `pulumi:"content"`
	CookieHash         pulumi.BoolInput    `pulumi:"cookieHash"`
	CookieInsert       pulumi.BoolInput    `pulumi:"cookieInsert"`
	CookiePassive      pulumi.BoolInput    `pulumi:"cookiePassive"`
	CookieRewrite      pulumi.BoolInput    `pulumi:"cookieRewrite"`
	Decompress         pulumi.BoolInput    `pulumi:"decompress"`
	Defer              pulumi.BoolInput    `pulumi:"defer"`
	DestinationAddress pulumi.BoolInput    `pulumi:"destinationAddress"`
	Disable            pulumi.BoolInput    `pulumi:"disable"`
	Domain             pulumi.StringInput  `pulumi:"domain"`
	Enable             pulumi.BoolInput    `pulumi:"enable"`
	Expiry             pulumi.StringInput  `pulumi:"expiry"`
	ExpirySecs         pulumi.IntInput     `pulumi:"expirySecs"`
	Expression         pulumi.StringInput  `pulumi:"expression"`
	Extension          pulumi.StringInput  `pulumi:"extension"`
	Facility           pulumi.StringInput  `pulumi:"facility"`
	Forward            pulumi.BoolPtrInput `pulumi:"forward"`
	FromProfile        pulumi.StringInput  `pulumi:"fromProfile"`
	Hash               pulumi.BoolInput    `pulumi:"hash"`
	Host               pulumi.StringInput  `pulumi:"host"`
	Http               pulumi.BoolInput    `pulumi:"http"`
	HttpBasicAuth      pulumi.BoolInput    `pulumi:"httpBasicAuth"`
	HttpCookie         pulumi.BoolInput    `pulumi:"httpCookie"`
	HttpHeader         pulumi.BoolInput    `pulumi:"httpHeader"`
	HttpHost           pulumi.BoolPtrInput `pulumi:"httpHost"`
	HttpReferer        pulumi.BoolInput    `pulumi:"httpReferer"`
	HttpReply          pulumi.BoolInput    `pulumi:"httpReply"`
	HttpSetCookie      pulumi.BoolInput    `pulumi:"httpSetCookie"`
	HttpUri            pulumi.BoolInput    `pulumi:"httpUri"`
	Ifile              pulumi.StringInput  `pulumi:"ifile"`
	Insert             pulumi.BoolInput    `pulumi:"insert"`
	InternalVirtual    pulumi.StringInput  `pulumi:"internalVirtual"`
	IpAddress          pulumi.StringInput  `pulumi:"ipAddress"`
	Key                pulumi.StringInput  `pulumi:"key"`
	L7dos              pulumi.BoolInput    `pulumi:"l7dos"`
	Length             pulumi.IntInput     `pulumi:"length"`
	Location           pulumi.StringInput  `pulumi:"location"`
	Log                pulumi.BoolInput    `pulumi:"log"`
	LtmPolicy          pulumi.BoolInput    `pulumi:"ltmPolicy"`
	Member             pulumi.StringInput  `pulumi:"member"`
	Message            pulumi.StringInput  `pulumi:"message"`
	Netmask            pulumi.StringInput  `pulumi:"netmask"`
	Nexthop            pulumi.StringInput  `pulumi:"nexthop"`
	Node               pulumi.StringInput  `pulumi:"node"`
	Offset             pulumi.IntInput     `pulumi:"offset"`
	Path               pulumi.StringInput  `pulumi:"path"`
	Pem                pulumi.BoolInput    `pulumi:"pem"`
	Persist            pulumi.BoolInput    `pulumi:"persist"`
	Pin                pulumi.BoolInput    `pulumi:"pin"`
	Policy             pulumi.StringInput  `pulumi:"policy"`
	Pool               pulumi.StringInput  `pulumi:"pool"`
	Port               pulumi.IntInput     `pulumi:"port"`
	Priority           pulumi.StringInput  `pulumi:"priority"`
	Profile            pulumi.StringInput  `pulumi:"profile"`
	Protocol           pulumi.StringInput  `pulumi:"protocol"`
	QueryString        pulumi.StringInput  `pulumi:"queryString"`
	Rateclass          pulumi.StringInput  `pulumi:"rateclass"`
	Redirect           pulumi.BoolInput    `pulumi:"redirect"`
	Remove             pulumi.BoolInput    `pulumi:"remove"`
	Replace            pulumi.BoolInput    `pulumi:"replace"`
	Request            pulumi.BoolInput    `pulumi:"request"`
	RequestAdapt       pulumi.BoolInput    `pulumi:"requestAdapt"`
	Reset              pulumi.BoolInput    `pulumi:"reset"`
	Response           pulumi.BoolInput    `pulumi:"response"`
	ResponseAdapt      pulumi.BoolInput    `pulumi:"responseAdapt"`
	Scheme             pulumi.StringInput  `pulumi:"scheme"`
	Script             pulumi.StringInput  `pulumi:"script"`
	Select             pulumi.BoolInput    `pulumi:"select"`
	ServerSsl          pulumi.BoolInput    `pulumi:"serverSsl"`
	SetVariable        pulumi.BoolInput    `pulumi:"setVariable"`
	Shutdown           pulumi.BoolInput    `pulumi:"shutdown"`
	Snat               pulumi.StringInput  `pulumi:"snat"`
	Snatpool           pulumi.StringInput  `pulumi:"snatpool"`
	SourceAddress      pulumi.BoolInput    `pulumi:"sourceAddress"`
	SslClientHello     pulumi.BoolInput    `pulumi:"sslClientHello"`
	SslServerHandshake pulumi.BoolInput    `pulumi:"sslServerHandshake"`
	SslServerHello     pulumi.BoolInput    `pulumi:"sslServerHello"`
	SslSessionId       pulumi.BoolInput    `pulumi:"sslSessionId"`
	Status             pulumi.IntInput     `pulumi:"status"`
	Tcl                pulumi.BoolInput    `pulumi:"tcl"`
	TcpNagle           pulumi.BoolInput    `pulumi:"tcpNagle"`
	Text               pulumi.StringInput  `pulumi:"text"`
	Timeout            pulumi.IntInput     `pulumi:"timeout"`
	TmName             pulumi.StringInput  `pulumi:"tmName"`
	Uie                pulumi.BoolInput    `pulumi:"uie"`
	Universal          pulumi.BoolInput    `pulumi:"universal"`
	Value              pulumi.StringInput  `pulumi:"value"`
	Virtual            pulumi.StringInput  `pulumi:"virtual"`
	Vlan               pulumi.StringInput  `pulumi:"vlan"`
	VlanId             pulumi.IntInput     `pulumi:"vlanId"`
	Wam                pulumi.BoolInput    `pulumi:"wam"`
	Write              pulumi.BoolInput    `pulumi:"write"`
}

func (GetPolicyRuleActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyRuleAction)(nil)).Elem()
}

func (i GetPolicyRuleActionArgs) ToGetPolicyRuleActionOutput() GetPolicyRuleActionOutput {
	return i.ToGetPolicyRuleActionOutputWithContext(context.Background())
}

func (i GetPolicyRuleActionArgs) ToGetPolicyRuleActionOutputWithContext(ctx context.Context) GetPolicyRuleActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyRuleActionOutput)
}

// GetPolicyRuleActionArrayInput is an input type that accepts GetPolicyRuleActionArray and GetPolicyRuleActionArrayOutput values.
// You can construct a concrete instance of `GetPolicyRuleActionArrayInput` via:
//
//	GetPolicyRuleActionArray{ GetPolicyRuleActionArgs{...} }
type GetPolicyRuleActionArrayInput interface {
	pulumi.Input

	ToGetPolicyRuleActionArrayOutput() GetPolicyRuleActionArrayOutput
	ToGetPolicyRuleActionArrayOutputWithContext(context.Context) GetPolicyRuleActionArrayOutput
}

type GetPolicyRuleActionArray []GetPolicyRuleActionInput

func (GetPolicyRuleActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyRuleAction)(nil)).Elem()
}

func (i GetPolicyRuleActionArray) ToGetPolicyRuleActionArrayOutput() GetPolicyRuleActionArrayOutput {
	return i.ToGetPolicyRuleActionArrayOutputWithContext(context.Background())
}

func (i GetPolicyRuleActionArray) ToGetPolicyRuleActionArrayOutputWithContext(ctx context.Context) GetPolicyRuleActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyRuleActionArrayOutput)
}

type GetPolicyRuleActionOutput struct{ *pulumi.OutputState }

func (GetPolicyRuleActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyRuleAction)(nil)).Elem()
}

func (o GetPolicyRuleActionOutput) ToGetPolicyRuleActionOutput() GetPolicyRuleActionOutput {
	return o
}

func (o GetPolicyRuleActionOutput) ToGetPolicyRuleActionOutputWithContext(ctx context.Context) GetPolicyRuleActionOutput {
	return o
}

func (o GetPolicyRuleActionOutput) AppService() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.AppService }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Application() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Application }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Asm() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Asm }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Avr() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Avr }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Cache() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Cache }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Carp() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Carp }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Category }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Classify() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Classify }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) ClonePool() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.ClonePool }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) int { return v.Code }).(pulumi.IntOutput)
}

func (o GetPolicyRuleActionOutput) Compress() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Compress }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Connection() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Connection }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Content }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) CookieHash() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.CookieHash }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) CookieInsert() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.CookieInsert }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) CookiePassive() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.CookiePassive }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) CookieRewrite() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.CookieRewrite }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Decompress() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Decompress }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Defer() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Defer }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) DestinationAddress() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.DestinationAddress }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Disable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Disable }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Domain }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Enable }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Expiry() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Expiry }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) ExpirySecs() pulumi.IntOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) int { return v.ExpirySecs }).(pulumi.IntOutput)
}

func (o GetPolicyRuleActionOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Expression }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Extension() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Extension }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Facility() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Facility }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Forward() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) *bool { return v.Forward }).(pulumi.BoolPtrOutput)
}

func (o GetPolicyRuleActionOutput) FromProfile() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.FromProfile }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Hash() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Hash }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Host }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Http() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Http }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) HttpBasicAuth() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.HttpBasicAuth }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) HttpCookie() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.HttpCookie }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) HttpHeader() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.HttpHeader }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) HttpHost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) *bool { return v.HttpHost }).(pulumi.BoolPtrOutput)
}

func (o GetPolicyRuleActionOutput) HttpReferer() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.HttpReferer }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) HttpReply() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.HttpReply }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) HttpSetCookie() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.HttpSetCookie }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) HttpUri() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.HttpUri }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Ifile() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Ifile }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Insert() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Insert }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) InternalVirtual() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.InternalVirtual }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.IpAddress }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) L7dos() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.L7dos }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Length() pulumi.IntOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) int { return v.Length }).(pulumi.IntOutput)
}

func (o GetPolicyRuleActionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Location }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Log() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Log }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) LtmPolicy() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.LtmPolicy }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Member }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Message }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Netmask() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Netmask }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Nexthop() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Nexthop }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Node() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Node }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Offset() pulumi.IntOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) int { return v.Offset }).(pulumi.IntOutput)
}

func (o GetPolicyRuleActionOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Path }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Pem() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Pem }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Persist() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Persist }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Pin() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Pin }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Policy }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Pool() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Pool }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) int { return v.Port }).(pulumi.IntOutput)
}

func (o GetPolicyRuleActionOutput) Priority() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Priority }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Profile() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Profile }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Protocol }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) QueryString() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.QueryString }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Rateclass() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Rateclass }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Redirect() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Redirect }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Remove() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Remove }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Replace() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Replace }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Request() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Request }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) RequestAdapt() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.RequestAdapt }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Reset() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Reset }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Response() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Response }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) ResponseAdapt() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.ResponseAdapt }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Scheme() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Scheme }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Script() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Script }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Select() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Select }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) ServerSsl() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.ServerSsl }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) SetVariable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.SetVariable }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Shutdown() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Shutdown }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Snat() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Snat }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Snatpool() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Snatpool }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) SourceAddress() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.SourceAddress }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) SslClientHello() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.SslClientHello }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) SslServerHandshake() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.SslServerHandshake }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) SslServerHello() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.SslServerHello }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) SslSessionId() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.SslSessionId }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) int { return v.Status }).(pulumi.IntOutput)
}

func (o GetPolicyRuleActionOutput) Tcl() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Tcl }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) TcpNagle() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.TcpNagle }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Text() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Text }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) int { return v.Timeout }).(pulumi.IntOutput)
}

func (o GetPolicyRuleActionOutput) TmName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.TmName }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Uie() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Uie }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Universal() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Universal }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Value }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Virtual() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Virtual }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) Vlan() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) string { return v.Vlan }).(pulumi.StringOutput)
}

func (o GetPolicyRuleActionOutput) VlanId() pulumi.IntOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) int { return v.VlanId }).(pulumi.IntOutput)
}

func (o GetPolicyRuleActionOutput) Wam() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Wam }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleActionOutput) Write() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleAction) bool { return v.Write }).(pulumi.BoolOutput)
}

type GetPolicyRuleActionArrayOutput struct{ *pulumi.OutputState }

func (GetPolicyRuleActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyRuleAction)(nil)).Elem()
}

func (o GetPolicyRuleActionArrayOutput) ToGetPolicyRuleActionArrayOutput() GetPolicyRuleActionArrayOutput {
	return o
}

func (o GetPolicyRuleActionArrayOutput) ToGetPolicyRuleActionArrayOutputWithContext(ctx context.Context) GetPolicyRuleActionArrayOutput {
	return o
}

func (o GetPolicyRuleActionArrayOutput) Index(i pulumi.IntInput) GetPolicyRuleActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPolicyRuleAction {
		return vs[0].([]GetPolicyRuleAction)[vs[1].(int)]
	}).(GetPolicyRuleActionOutput)
}

type GetPolicyRuleCondition struct {
	Address               bool     `pulumi:"address"`
	All                   bool     `pulumi:"all"`
	AppService            string   `pulumi:"appService"`
	BrowserType           bool     `pulumi:"browserType"`
	BrowserVersion        bool     `pulumi:"browserVersion"`
	CaseInsensitive       bool     `pulumi:"caseInsensitive"`
	CaseSensitive         bool     `pulumi:"caseSensitive"`
	Cipher                bool     `pulumi:"cipher"`
	CipherBits            bool     `pulumi:"cipherBits"`
	ClientSsl             bool     `pulumi:"clientSsl"`
	Code                  bool     `pulumi:"code"`
	CommonName            bool     `pulumi:"commonName"`
	Contains              bool     `pulumi:"contains"`
	Continent             bool     `pulumi:"continent"`
	CountryCode           bool     `pulumi:"countryCode"`
	CountryName           bool     `pulumi:"countryName"`
	CpuUsage              bool     `pulumi:"cpuUsage"`
	DeviceMake            bool     `pulumi:"deviceMake"`
	DeviceModel           bool     `pulumi:"deviceModel"`
	Domain                bool     `pulumi:"domain"`
	EndsWith              bool     `pulumi:"endsWith"`
	Equals                bool     `pulumi:"equals"`
	Expiry                bool     `pulumi:"expiry"`
	Extension             bool     `pulumi:"extension"`
	External              bool     `pulumi:"external"`
	Geoip                 bool     `pulumi:"geoip"`
	Greater               bool     `pulumi:"greater"`
	GreaterOrEqual        bool     `pulumi:"greaterOrEqual"`
	Host                  bool     `pulumi:"host"`
	HttpBasicAuth         bool     `pulumi:"httpBasicAuth"`
	HttpCookie            bool     `pulumi:"httpCookie"`
	HttpHeader            bool     `pulumi:"httpHeader"`
	HttpHost              bool     `pulumi:"httpHost"`
	HttpMethod            bool     `pulumi:"httpMethod"`
	HttpReferer           bool     `pulumi:"httpReferer"`
	HttpSetCookie         bool     `pulumi:"httpSetCookie"`
	HttpStatus            bool     `pulumi:"httpStatus"`
	HttpUri               bool     `pulumi:"httpUri"`
	HttpUserAgent         bool     `pulumi:"httpUserAgent"`
	HttpVersion           bool     `pulumi:"httpVersion"`
	Index                 int      `pulumi:"index"`
	Internal              bool     `pulumi:"internal"`
	Isp                   bool     `pulumi:"isp"`
	Last15secs            bool     `pulumi:"last15secs"`
	Last1min              bool     `pulumi:"last1min"`
	Last5mins             bool     `pulumi:"last5mins"`
	Less                  bool     `pulumi:"less"`
	LessOrEqual           bool     `pulumi:"lessOrEqual"`
	Local                 bool     `pulumi:"local"`
	Major                 bool     `pulumi:"major"`
	Matches               bool     `pulumi:"matches"`
	Minor                 bool     `pulumi:"minor"`
	Missing               bool     `pulumi:"missing"`
	Mss                   bool     `pulumi:"mss"`
	Not                   bool     `pulumi:"not"`
	Org                   bool     `pulumi:"org"`
	Password              bool     `pulumi:"password"`
	Path                  bool     `pulumi:"path"`
	PathSegment           bool     `pulumi:"pathSegment"`
	Port                  bool     `pulumi:"port"`
	Present               bool     `pulumi:"present"`
	Protocol              bool     `pulumi:"protocol"`
	QueryParameter        bool     `pulumi:"queryParameter"`
	QueryString           bool     `pulumi:"queryString"`
	RegionCode            bool     `pulumi:"regionCode"`
	RegionName            bool     `pulumi:"regionName"`
	Remote                bool     `pulumi:"remote"`
	Request               bool     `pulumi:"request"`
	Response              bool     `pulumi:"response"`
	RouteDomain           bool     `pulumi:"routeDomain"`
	Rtt                   bool     `pulumi:"rtt"`
	Scheme                bool     `pulumi:"scheme"`
	ServerName            bool     `pulumi:"serverName"`
	SslCert               bool     `pulumi:"sslCert"`
	SslClientHello        bool     `pulumi:"sslClientHello"`
	SslExtension          bool     `pulumi:"sslExtension"`
	SslServerHandshake    bool     `pulumi:"sslServerHandshake"`
	SslServerHello        bool     `pulumi:"sslServerHello"`
	StartsWith            bool     `pulumi:"startsWith"`
	Tcp                   bool     `pulumi:"tcp"`
	Text                  bool     `pulumi:"text"`
	TmName                string   `pulumi:"tmName"`
	UnnamedQueryParameter bool     `pulumi:"unnamedQueryParameter"`
	UserAgentToken        bool     `pulumi:"userAgentToken"`
	Username              bool     `pulumi:"username"`
	Value                 bool     `pulumi:"value"`
	Values                []string `pulumi:"values"`
	Version               bool     `pulumi:"version"`
	Vlan                  bool     `pulumi:"vlan"`
	VlanId                bool     `pulumi:"vlanId"`
}

// GetPolicyRuleConditionInput is an input type that accepts GetPolicyRuleConditionArgs and GetPolicyRuleConditionOutput values.
// You can construct a concrete instance of `GetPolicyRuleConditionInput` via:
//
//	GetPolicyRuleConditionArgs{...}
type GetPolicyRuleConditionInput interface {
	pulumi.Input

	ToGetPolicyRuleConditionOutput() GetPolicyRuleConditionOutput
	ToGetPolicyRuleConditionOutputWithContext(context.Context) GetPolicyRuleConditionOutput
}

type GetPolicyRuleConditionArgs struct {
	Address               pulumi.BoolInput        `pulumi:"address"`
	All                   pulumi.BoolInput        `pulumi:"all"`
	AppService            pulumi.StringInput      `pulumi:"appService"`
	BrowserType           pulumi.BoolInput        `pulumi:"browserType"`
	BrowserVersion        pulumi.BoolInput        `pulumi:"browserVersion"`
	CaseInsensitive       pulumi.BoolInput        `pulumi:"caseInsensitive"`
	CaseSensitive         pulumi.BoolInput        `pulumi:"caseSensitive"`
	Cipher                pulumi.BoolInput        `pulumi:"cipher"`
	CipherBits            pulumi.BoolInput        `pulumi:"cipherBits"`
	ClientSsl             pulumi.BoolInput        `pulumi:"clientSsl"`
	Code                  pulumi.BoolInput        `pulumi:"code"`
	CommonName            pulumi.BoolInput        `pulumi:"commonName"`
	Contains              pulumi.BoolInput        `pulumi:"contains"`
	Continent             pulumi.BoolInput        `pulumi:"continent"`
	CountryCode           pulumi.BoolInput        `pulumi:"countryCode"`
	CountryName           pulumi.BoolInput        `pulumi:"countryName"`
	CpuUsage              pulumi.BoolInput        `pulumi:"cpuUsage"`
	DeviceMake            pulumi.BoolInput        `pulumi:"deviceMake"`
	DeviceModel           pulumi.BoolInput        `pulumi:"deviceModel"`
	Domain                pulumi.BoolInput        `pulumi:"domain"`
	EndsWith              pulumi.BoolInput        `pulumi:"endsWith"`
	Equals                pulumi.BoolInput        `pulumi:"equals"`
	Expiry                pulumi.BoolInput        `pulumi:"expiry"`
	Extension             pulumi.BoolInput        `pulumi:"extension"`
	External              pulumi.BoolInput        `pulumi:"external"`
	Geoip                 pulumi.BoolInput        `pulumi:"geoip"`
	Greater               pulumi.BoolInput        `pulumi:"greater"`
	GreaterOrEqual        pulumi.BoolInput        `pulumi:"greaterOrEqual"`
	Host                  pulumi.BoolInput        `pulumi:"host"`
	HttpBasicAuth         pulumi.BoolInput        `pulumi:"httpBasicAuth"`
	HttpCookie            pulumi.BoolInput        `pulumi:"httpCookie"`
	HttpHeader            pulumi.BoolInput        `pulumi:"httpHeader"`
	HttpHost              pulumi.BoolInput        `pulumi:"httpHost"`
	HttpMethod            pulumi.BoolInput        `pulumi:"httpMethod"`
	HttpReferer           pulumi.BoolInput        `pulumi:"httpReferer"`
	HttpSetCookie         pulumi.BoolInput        `pulumi:"httpSetCookie"`
	HttpStatus            pulumi.BoolInput        `pulumi:"httpStatus"`
	HttpUri               pulumi.BoolInput        `pulumi:"httpUri"`
	HttpUserAgent         pulumi.BoolInput        `pulumi:"httpUserAgent"`
	HttpVersion           pulumi.BoolInput        `pulumi:"httpVersion"`
	Index                 pulumi.IntInput         `pulumi:"index"`
	Internal              pulumi.BoolInput        `pulumi:"internal"`
	Isp                   pulumi.BoolInput        `pulumi:"isp"`
	Last15secs            pulumi.BoolInput        `pulumi:"last15secs"`
	Last1min              pulumi.BoolInput        `pulumi:"last1min"`
	Last5mins             pulumi.BoolInput        `pulumi:"last5mins"`
	Less                  pulumi.BoolInput        `pulumi:"less"`
	LessOrEqual           pulumi.BoolInput        `pulumi:"lessOrEqual"`
	Local                 pulumi.BoolInput        `pulumi:"local"`
	Major                 pulumi.BoolInput        `pulumi:"major"`
	Matches               pulumi.BoolInput        `pulumi:"matches"`
	Minor                 pulumi.BoolInput        `pulumi:"minor"`
	Missing               pulumi.BoolInput        `pulumi:"missing"`
	Mss                   pulumi.BoolInput        `pulumi:"mss"`
	Not                   pulumi.BoolInput        `pulumi:"not"`
	Org                   pulumi.BoolInput        `pulumi:"org"`
	Password              pulumi.BoolInput        `pulumi:"password"`
	Path                  pulumi.BoolInput        `pulumi:"path"`
	PathSegment           pulumi.BoolInput        `pulumi:"pathSegment"`
	Port                  pulumi.BoolInput        `pulumi:"port"`
	Present               pulumi.BoolInput        `pulumi:"present"`
	Protocol              pulumi.BoolInput        `pulumi:"protocol"`
	QueryParameter        pulumi.BoolInput        `pulumi:"queryParameter"`
	QueryString           pulumi.BoolInput        `pulumi:"queryString"`
	RegionCode            pulumi.BoolInput        `pulumi:"regionCode"`
	RegionName            pulumi.BoolInput        `pulumi:"regionName"`
	Remote                pulumi.BoolInput        `pulumi:"remote"`
	Request               pulumi.BoolInput        `pulumi:"request"`
	Response              pulumi.BoolInput        `pulumi:"response"`
	RouteDomain           pulumi.BoolInput        `pulumi:"routeDomain"`
	Rtt                   pulumi.BoolInput        `pulumi:"rtt"`
	Scheme                pulumi.BoolInput        `pulumi:"scheme"`
	ServerName            pulumi.BoolInput        `pulumi:"serverName"`
	SslCert               pulumi.BoolInput        `pulumi:"sslCert"`
	SslClientHello        pulumi.BoolInput        `pulumi:"sslClientHello"`
	SslExtension          pulumi.BoolInput        `pulumi:"sslExtension"`
	SslServerHandshake    pulumi.BoolInput        `pulumi:"sslServerHandshake"`
	SslServerHello        pulumi.BoolInput        `pulumi:"sslServerHello"`
	StartsWith            pulumi.BoolInput        `pulumi:"startsWith"`
	Tcp                   pulumi.BoolInput        `pulumi:"tcp"`
	Text                  pulumi.BoolInput        `pulumi:"text"`
	TmName                pulumi.StringInput      `pulumi:"tmName"`
	UnnamedQueryParameter pulumi.BoolInput        `pulumi:"unnamedQueryParameter"`
	UserAgentToken        pulumi.BoolInput        `pulumi:"userAgentToken"`
	Username              pulumi.BoolInput        `pulumi:"username"`
	Value                 pulumi.BoolInput        `pulumi:"value"`
	Values                pulumi.StringArrayInput `pulumi:"values"`
	Version               pulumi.BoolInput        `pulumi:"version"`
	Vlan                  pulumi.BoolInput        `pulumi:"vlan"`
	VlanId                pulumi.BoolInput        `pulumi:"vlanId"`
}

func (GetPolicyRuleConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyRuleCondition)(nil)).Elem()
}

func (i GetPolicyRuleConditionArgs) ToGetPolicyRuleConditionOutput() GetPolicyRuleConditionOutput {
	return i.ToGetPolicyRuleConditionOutputWithContext(context.Background())
}

func (i GetPolicyRuleConditionArgs) ToGetPolicyRuleConditionOutputWithContext(ctx context.Context) GetPolicyRuleConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyRuleConditionOutput)
}

// GetPolicyRuleConditionArrayInput is an input type that accepts GetPolicyRuleConditionArray and GetPolicyRuleConditionArrayOutput values.
// You can construct a concrete instance of `GetPolicyRuleConditionArrayInput` via:
//
//	GetPolicyRuleConditionArray{ GetPolicyRuleConditionArgs{...} }
type GetPolicyRuleConditionArrayInput interface {
	pulumi.Input

	ToGetPolicyRuleConditionArrayOutput() GetPolicyRuleConditionArrayOutput
	ToGetPolicyRuleConditionArrayOutputWithContext(context.Context) GetPolicyRuleConditionArrayOutput
}

type GetPolicyRuleConditionArray []GetPolicyRuleConditionInput

func (GetPolicyRuleConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyRuleCondition)(nil)).Elem()
}

func (i GetPolicyRuleConditionArray) ToGetPolicyRuleConditionArrayOutput() GetPolicyRuleConditionArrayOutput {
	return i.ToGetPolicyRuleConditionArrayOutputWithContext(context.Background())
}

func (i GetPolicyRuleConditionArray) ToGetPolicyRuleConditionArrayOutputWithContext(ctx context.Context) GetPolicyRuleConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyRuleConditionArrayOutput)
}

type GetPolicyRuleConditionOutput struct{ *pulumi.OutputState }

func (GetPolicyRuleConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyRuleCondition)(nil)).Elem()
}

func (o GetPolicyRuleConditionOutput) ToGetPolicyRuleConditionOutput() GetPolicyRuleConditionOutput {
	return o
}

func (o GetPolicyRuleConditionOutput) ToGetPolicyRuleConditionOutputWithContext(ctx context.Context) GetPolicyRuleConditionOutput {
	return o
}

func (o GetPolicyRuleConditionOutput) Address() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Address }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) All() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.All }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) AppService() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) string { return v.AppService }).(pulumi.StringOutput)
}

func (o GetPolicyRuleConditionOutput) BrowserType() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.BrowserType }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) BrowserVersion() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.BrowserVersion }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) CaseInsensitive() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.CaseInsensitive }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) CaseSensitive() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.CaseSensitive }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Cipher() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Cipher }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) CipherBits() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.CipherBits }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) ClientSsl() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.ClientSsl }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Code() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Code }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) CommonName() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.CommonName }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Contains() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Contains }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Continent() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Continent }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) CountryCode() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.CountryCode }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) CountryName() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.CountryName }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) CpuUsage() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.CpuUsage }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) DeviceMake() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.DeviceMake }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) DeviceModel() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.DeviceModel }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Domain() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Domain }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) EndsWith() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.EndsWith }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Equals() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Equals }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Expiry() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Expiry }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Extension() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Extension }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) External() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.External }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Geoip() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Geoip }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Greater() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Greater }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) GreaterOrEqual() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.GreaterOrEqual }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Host() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Host }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) HttpBasicAuth() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.HttpBasicAuth }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) HttpCookie() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.HttpCookie }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) HttpHeader() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.HttpHeader }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) HttpHost() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.HttpHost }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) HttpMethod() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.HttpMethod }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) HttpReferer() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.HttpReferer }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) HttpSetCookie() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.HttpSetCookie }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) HttpStatus() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.HttpStatus }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) HttpUri() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.HttpUri }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) HttpUserAgent() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.HttpUserAgent }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) HttpVersion() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.HttpVersion }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Index() pulumi.IntOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) int { return v.Index }).(pulumi.IntOutput)
}

func (o GetPolicyRuleConditionOutput) Internal() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Internal }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Isp() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Isp }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Last15secs() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Last15secs }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Last1min() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Last1min }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Last5mins() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Last5mins }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Less() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Less }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) LessOrEqual() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.LessOrEqual }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Local() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Local }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Major() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Major }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Matches() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Matches }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Minor() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Minor }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Missing() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Missing }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Mss() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Mss }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Not() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Not }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Org() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Org }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Password() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Password }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Path() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Path }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) PathSegment() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.PathSegment }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Port() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Port }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Present() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Present }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Protocol() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Protocol }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) QueryParameter() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.QueryParameter }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) QueryString() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.QueryString }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) RegionCode() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.RegionCode }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) RegionName() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.RegionName }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Remote() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Remote }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Request() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Request }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Response() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Response }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) RouteDomain() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.RouteDomain }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Rtt() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Rtt }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Scheme() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Scheme }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) ServerName() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.ServerName }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) SslCert() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.SslCert }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) SslClientHello() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.SslClientHello }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) SslExtension() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.SslExtension }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) SslServerHandshake() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.SslServerHandshake }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) SslServerHello() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.SslServerHello }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) StartsWith() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.StartsWith }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Tcp() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Tcp }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Text() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Text }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) TmName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) string { return v.TmName }).(pulumi.StringOutput)
}

func (o GetPolicyRuleConditionOutput) UnnamedQueryParameter() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.UnnamedQueryParameter }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) UserAgentToken() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.UserAgentToken }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Username() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Username }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Value() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Value }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) []string { return v.Values }).(pulumi.StringArrayOutput)
}

func (o GetPolicyRuleConditionOutput) Version() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Version }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) Vlan() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.Vlan }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleConditionOutput) VlanId() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleCondition) bool { return v.VlanId }).(pulumi.BoolOutput)
}

type GetPolicyRuleConditionArrayOutput struct{ *pulumi.OutputState }

func (GetPolicyRuleConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyRuleCondition)(nil)).Elem()
}

func (o GetPolicyRuleConditionArrayOutput) ToGetPolicyRuleConditionArrayOutput() GetPolicyRuleConditionArrayOutput {
	return o
}

func (o GetPolicyRuleConditionArrayOutput) ToGetPolicyRuleConditionArrayOutputWithContext(ctx context.Context) GetPolicyRuleConditionArrayOutput {
	return o
}

func (o GetPolicyRuleConditionArrayOutput) Index(i pulumi.IntInput) GetPolicyRuleConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPolicyRuleCondition {
		return vs[0].([]GetPolicyRuleCondition)[vs[1].(int)]
	}).(GetPolicyRuleConditionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataGroupRecordInput)(nil)).Elem(), DataGroupRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataGroupRecordArrayInput)(nil)).Elem(), DataGroupRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeFqdnInput)(nil)).Elem(), NodeFqdnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeFqdnPtrInput)(nil)).Elem(), NodeFqdnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyRuleInput)(nil)).Elem(), PolicyRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyRuleArrayInput)(nil)).Elem(), PolicyRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyRuleActionInput)(nil)).Elem(), PolicyRuleActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyRuleActionArrayInput)(nil)).Elem(), PolicyRuleActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyRuleConditionInput)(nil)).Elem(), PolicyRuleConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyRuleConditionArrayInput)(nil)).Elem(), PolicyRuleConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileClientSslCertKeyChainInput)(nil)).Elem(), ProfileClientSslCertKeyChainArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileClientSslCertKeyChainArrayInput)(nil)).Elem(), ProfileClientSslCertKeyChainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnatOriginInput)(nil)).Elem(), SnatOriginArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnatOriginArrayInput)(nil)).Elem(), SnatOriginArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataGroupRecordInput)(nil)).Elem(), GetDataGroupRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDataGroupRecordArrayInput)(nil)).Elem(), GetDataGroupRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodeFqdnInput)(nil)).Elem(), GetNodeFqdnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodeFqdnPtrInput)(nil)).Elem(), GetNodeFqdnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyRuleInput)(nil)).Elem(), GetPolicyRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyRuleArrayInput)(nil)).Elem(), GetPolicyRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyRuleActionInput)(nil)).Elem(), GetPolicyRuleActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyRuleActionArrayInput)(nil)).Elem(), GetPolicyRuleActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyRuleConditionInput)(nil)).Elem(), GetPolicyRuleConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyRuleConditionArrayInput)(nil)).Elem(), GetPolicyRuleConditionArray{})
	pulumi.RegisterOutputType(DataGroupRecordOutput{})
	pulumi.RegisterOutputType(DataGroupRecordArrayOutput{})
	pulumi.RegisterOutputType(NodeFqdnOutput{})
	pulumi.RegisterOutputType(NodeFqdnPtrOutput{})
	pulumi.RegisterOutputType(PolicyRuleOutput{})
	pulumi.RegisterOutputType(PolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(PolicyRuleActionOutput{})
	pulumi.RegisterOutputType(PolicyRuleActionArrayOutput{})
	pulumi.RegisterOutputType(PolicyRuleConditionOutput{})
	pulumi.RegisterOutputType(PolicyRuleConditionArrayOutput{})
	pulumi.RegisterOutputType(ProfileClientSslCertKeyChainOutput{})
	pulumi.RegisterOutputType(ProfileClientSslCertKeyChainArrayOutput{})
	pulumi.RegisterOutputType(SnatOriginOutput{})
	pulumi.RegisterOutputType(SnatOriginArrayOutput{})
	pulumi.RegisterOutputType(GetDataGroupRecordOutput{})
	pulumi.RegisterOutputType(GetDataGroupRecordArrayOutput{})
	pulumi.RegisterOutputType(GetNodeFqdnOutput{})
	pulumi.RegisterOutputType(GetNodeFqdnPtrOutput{})
	pulumi.RegisterOutputType(GetPolicyRuleOutput{})
	pulumi.RegisterOutputType(GetPolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(GetPolicyRuleActionOutput{})
	pulumi.RegisterOutputType(GetPolicyRuleActionArrayOutput{})
	pulumi.RegisterOutputType(GetPolicyRuleConditionOutput{})
	pulumi.RegisterOutputType(GetPolicyRuleConditionArrayOutput{})
}
