// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ltm

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Configures a cookie persistence profile
// 
// ## Reference
// 
// `name` - (Required) Name of the virtual address
// 
// `defaultsFrom` - (Required) Parent cookie persistence profile
// 
// `matchAcrossPools` (Optional) (enabled or disabled) match across pools with given persistence record
// 
// `matchAcrossServices` (Optional) (enabled or disabled) match across services with given persistence record
// 
// `matchAcrossVirtuals` (Optional) (enabled or disabled) match across virtual servers with given persistence record
// 
// `mirror` (Optional) (enabled or disabled) mirror persistence record
// 
// `timeout` (Optional) (enabled or disabled) Timeout for persistence of the session in seconds
// 
// `overrideConnLimit` (Optional) (enabled or disabled) Enable or dissable pool member connection limits are overridden for persisted clients. Per-virtual connection limits remain hard limits and are not overridden.
// 
// `alwaysSend` (Optional) (enabled or disabled) always send cookies
// 
// `cookieEncryption` (Optional) (required, preferred, or disabled) To required, preferred, or disabled policy for cookie encryption
// 
// `cookieEncryptionPassphrase` (Optional) (required, preferred, or disabled) Passphrase for encrypted cookies. The field is encrypted on the server and will always return differently then set.
// If this is configured specify `ignoreChanges` under the `lifecycle` block to ignore returned encrypted value.
// 
// `cookieName` (Optional) Name of the cookie to track persistence
// 
// `expiration` (Optional) Expiration TTL for cookie specified in DAY:HOUR:MIN:SECONDS (Examples: 1:0:0:0 one day, 1:0:0 one hour, 30:0 thirty minutes)
// 
// `hashLength` (Optional) (Integer) Length of hash to apply to cookie
// 
// `hashOffset` (Optional) (Integer) Number of characters to skip in the cookie for the hash
// 
// `httponly` (Optional) (enabled or disabled) Sending only over http
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-bigip/blob/master/website/docs/r/ltm_persistence_profile_cookie.html.markdown.
type PersistenceProfileCookie struct {
	s *pulumi.ResourceState
}

// NewPersistenceProfileCookie registers a new resource with the given unique name, arguments, and options.
func NewPersistenceProfileCookie(ctx *pulumi.Context,
	name string, args *PersistenceProfileCookieArgs, opts ...pulumi.ResourceOpt) (*PersistenceProfileCookie, error) {
	if args == nil || args.DefaultsFrom == nil {
		return nil, errors.New("missing required argument 'DefaultsFrom'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["alwaysSend"] = nil
		inputs["appService"] = nil
		inputs["cookieEncryption"] = nil
		inputs["cookieEncryptionPassphrase"] = nil
		inputs["cookieName"] = nil
		inputs["defaultsFrom"] = nil
		inputs["expiration"] = nil
		inputs["hashLength"] = nil
		inputs["hashOffset"] = nil
		inputs["httponly"] = nil
		inputs["matchAcrossPools"] = nil
		inputs["matchAcrossServices"] = nil
		inputs["matchAcrossVirtuals"] = nil
		inputs["mirror"] = nil
		inputs["name"] = nil
		inputs["overrideConnLimit"] = nil
		inputs["timeout"] = nil
	} else {
		inputs["alwaysSend"] = args.AlwaysSend
		inputs["appService"] = args.AppService
		inputs["cookieEncryption"] = args.CookieEncryption
		inputs["cookieEncryptionPassphrase"] = args.CookieEncryptionPassphrase
		inputs["cookieName"] = args.CookieName
		inputs["defaultsFrom"] = args.DefaultsFrom
		inputs["expiration"] = args.Expiration
		inputs["hashLength"] = args.HashLength
		inputs["hashOffset"] = args.HashOffset
		inputs["httponly"] = args.Httponly
		inputs["matchAcrossPools"] = args.MatchAcrossPools
		inputs["matchAcrossServices"] = args.MatchAcrossServices
		inputs["matchAcrossVirtuals"] = args.MatchAcrossVirtuals
		inputs["mirror"] = args.Mirror
		inputs["name"] = args.Name
		inputs["overrideConnLimit"] = args.OverrideConnLimit
		inputs["timeout"] = args.Timeout
	}
	s, err := ctx.RegisterResource("f5bigip:ltm/persistenceProfileCookie:PersistenceProfileCookie", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &PersistenceProfileCookie{s: s}, nil
}

// GetPersistenceProfileCookie gets an existing PersistenceProfileCookie resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPersistenceProfileCookie(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PersistenceProfileCookieState, opts ...pulumi.ResourceOpt) (*PersistenceProfileCookie, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["alwaysSend"] = state.AlwaysSend
		inputs["appService"] = state.AppService
		inputs["cookieEncryption"] = state.CookieEncryption
		inputs["cookieEncryptionPassphrase"] = state.CookieEncryptionPassphrase
		inputs["cookieName"] = state.CookieName
		inputs["defaultsFrom"] = state.DefaultsFrom
		inputs["expiration"] = state.Expiration
		inputs["hashLength"] = state.HashLength
		inputs["hashOffset"] = state.HashOffset
		inputs["httponly"] = state.Httponly
		inputs["matchAcrossPools"] = state.MatchAcrossPools
		inputs["matchAcrossServices"] = state.MatchAcrossServices
		inputs["matchAcrossVirtuals"] = state.MatchAcrossVirtuals
		inputs["mirror"] = state.Mirror
		inputs["name"] = state.Name
		inputs["overrideConnLimit"] = state.OverrideConnLimit
		inputs["timeout"] = state.Timeout
	}
	s, err := ctx.ReadResource("f5bigip:ltm/persistenceProfileCookie:PersistenceProfileCookie", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &PersistenceProfileCookie{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *PersistenceProfileCookie) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *PersistenceProfileCookie) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// To enable _ disable always sending cookies
func (r *PersistenceProfileCookie) AlwaysSend() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["alwaysSend"])
}

func (r *PersistenceProfileCookie) AppService() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["appService"])
}

// To required, preferred, or disabled policy for cookie encryption
func (r *PersistenceProfileCookie) CookieEncryption() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["cookieEncryption"])
}

// Passphrase for encrypted cookies
func (r *PersistenceProfileCookie) CookieEncryptionPassphrase() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["cookieEncryptionPassphrase"])
}

// Name of the cookie to track persistence
func (r *PersistenceProfileCookie) CookieName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["cookieName"])
}

// Inherit defaults from parent profile
func (r *PersistenceProfileCookie) DefaultsFrom() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["defaultsFrom"])
}

// Expiration TTL for cookie specified in D:H:M:S or in seconds
func (r *PersistenceProfileCookie) Expiration() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["expiration"])
}

// Length of hash to apply to cookie
func (r *PersistenceProfileCookie) HashLength() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["hashLength"])
}

// Number of characters to skip in the cookie for the hash
func (r *PersistenceProfileCookie) HashOffset() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["hashOffset"])
}

// To enable _ disable sending only over http
func (r *PersistenceProfileCookie) Httponly() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["httponly"])
}

// To enable _ disable match across pools with given persistence record
func (r *PersistenceProfileCookie) MatchAcrossPools() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["matchAcrossPools"])
}

// To enable _ disable match across services with given persistence record
func (r *PersistenceProfileCookie) MatchAcrossServices() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["matchAcrossServices"])
}

// To enable _ disable match across virtual servers with given persistence record
func (r *PersistenceProfileCookie) MatchAcrossVirtuals() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["matchAcrossVirtuals"])
}

// To enable _ disable
func (r *PersistenceProfileCookie) Mirror() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["mirror"])
}

// Name of the persistence profile
func (r *PersistenceProfileCookie) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// To enable _ disable that pool member connection limits are overridden for persisted clients. Per-virtual connection
// limits remain hard limits and are not overridden.
func (r *PersistenceProfileCookie) OverrideConnLimit() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["overrideConnLimit"])
}

// Timeout for persistence of the session
func (r *PersistenceProfileCookie) Timeout() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["timeout"])
}

// Input properties used for looking up and filtering PersistenceProfileCookie resources.
type PersistenceProfileCookieState struct {
	// To enable _ disable always sending cookies
	AlwaysSend interface{}
	AppService interface{}
	// To required, preferred, or disabled policy for cookie encryption
	CookieEncryption interface{}
	// Passphrase for encrypted cookies
	CookieEncryptionPassphrase interface{}
	// Name of the cookie to track persistence
	CookieName interface{}
	// Inherit defaults from parent profile
	DefaultsFrom interface{}
	// Expiration TTL for cookie specified in D:H:M:S or in seconds
	Expiration interface{}
	// Length of hash to apply to cookie
	HashLength interface{}
	// Number of characters to skip in the cookie for the hash
	HashOffset interface{}
	// To enable _ disable sending only over http
	Httponly interface{}
	// To enable _ disable match across pools with given persistence record
	MatchAcrossPools interface{}
	// To enable _ disable match across services with given persistence record
	MatchAcrossServices interface{}
	// To enable _ disable match across virtual servers with given persistence record
	MatchAcrossVirtuals interface{}
	// To enable _ disable
	Mirror interface{}
	// Name of the persistence profile
	Name interface{}
	// To enable _ disable that pool member connection limits are overridden for persisted clients. Per-virtual connection
	// limits remain hard limits and are not overridden.
	OverrideConnLimit interface{}
	// Timeout for persistence of the session
	Timeout interface{}
}

// The set of arguments for constructing a PersistenceProfileCookie resource.
type PersistenceProfileCookieArgs struct {
	// To enable _ disable always sending cookies
	AlwaysSend interface{}
	AppService interface{}
	// To required, preferred, or disabled policy for cookie encryption
	CookieEncryption interface{}
	// Passphrase for encrypted cookies
	CookieEncryptionPassphrase interface{}
	// Name of the cookie to track persistence
	CookieName interface{}
	// Inherit defaults from parent profile
	DefaultsFrom interface{}
	// Expiration TTL for cookie specified in D:H:M:S or in seconds
	Expiration interface{}
	// Length of hash to apply to cookie
	HashLength interface{}
	// Number of characters to skip in the cookie for the hash
	HashOffset interface{}
	// To enable _ disable sending only over http
	Httponly interface{}
	// To enable _ disable match across pools with given persistence record
	MatchAcrossPools interface{}
	// To enable _ disable match across services with given persistence record
	MatchAcrossServices interface{}
	// To enable _ disable match across virtual servers with given persistence record
	MatchAcrossVirtuals interface{}
	// To enable _ disable
	Mirror interface{}
	// Name of the persistence profile
	Name interface{}
	// To enable _ disable that pool member connection limits are overridden for persisted clients. Per-virtual connection
	// limits remain hard limits and are not overridden.
	OverrideConnLimit interface{}
	// Timeout for persistence of the session
	Timeout interface{}
}
