// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ltm

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// `ltm.SnatPool` Collections of SNAT translation addresses
// 
// Resource should be named with their "full path". The full path is the combination of the partition + name of the resource, for example /Common/my-snatpool. 
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-bigip/blob/master/website/docs/r/ltm_snatpool.html.markdown.
type SnatPool struct {
	s *pulumi.ResourceState
}

// NewSnatPool registers a new resource with the given unique name, arguments, and options.
func NewSnatPool(ctx *pulumi.Context,
	name string, args *SnatPoolArgs, opts ...pulumi.ResourceOpt) (*SnatPool, error) {
	if args == nil || args.Members == nil {
		return nil, errors.New("missing required argument 'Members'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["members"] = nil
		inputs["name"] = nil
	} else {
		inputs["members"] = args.Members
		inputs["name"] = args.Name
	}
	s, err := ctx.RegisterResource("f5bigip:ltm/snatPool:SnatPool", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SnatPool{s: s}, nil
}

// GetSnatPool gets an existing SnatPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnatPool(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SnatPoolState, opts ...pulumi.ResourceOpt) (*SnatPool, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["members"] = state.Members
		inputs["name"] = state.Name
	}
	s, err := ctx.ReadResource("f5bigip:ltm/snatPool:SnatPool", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SnatPool{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SnatPool) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SnatPool) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Specifies a translation address to add to or delete from a SNAT pool (at least one address is required)
func (r *SnatPool) Members() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["members"])
}

// Name of the snatpool
func (r *SnatPool) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Input properties used for looking up and filtering SnatPool resources.
type SnatPoolState struct {
	// Specifies a translation address to add to or delete from a SNAT pool (at least one address is required)
	Members interface{}
	// Name of the snatpool
	Name interface{}
}

// The set of arguments for constructing a SnatPool resource.
type SnatPoolArgs struct {
	// Specifies a translation address to add to or delete from a SNAT pool (at least one address is required)
	Members interface{}
	// Name of the snatpool
	Name interface{}
}
