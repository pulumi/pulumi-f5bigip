// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ltm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-f5bigip/sdk/v3/go/f5bigip/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// `ltm.ProfileHttpCompress`  Virtual server HTTP compression profile configuration
//
// Resources should be named with their `full path`.The full path is the combination of the `partition + name` (example: `/Common/my-httpcompresprofile` ) or  `partition + directory + name` of the resource  (example: `/Common/test/my-httpcompresprofile`)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-f5bigip/sdk/v3/go/f5bigip/ltm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ltm.NewProfileHttpCompress(ctx, "sjhttpcompression", &ltm.ProfileHttpCompressArgs{
//				ContentTypeExcludes: pulumi.StringArray{
//					pulumi.String("nicecontentexclude.com"),
//				},
//				ContentTypeIncludes: pulumi.StringArray{
//					pulumi.String("nicecontent.com"),
//				},
//				DefaultsFrom: pulumi.String("/Common/httpcompression"),
//				Name:         pulumi.String("/Common/sjhttpcompression2"),
//				UriExcludes: pulumi.StringArray{
//					pulumi.String("www.abc.f5.com"),
//					pulumi.String("www.abc2.f5.com"),
//				},
//				UriIncludes: pulumi.StringArray{
//					pulumi.String("www.xyzbc.cisco.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// BIG-IP LTM HTTP Compress profiles can be imported using the `name`, e.g.
//
// ```sh
//
//	$ pulumi import f5bigip:ltm/profileHttpCompress:ProfileHttpCompress test-httpcomprs_import /Common/test-httpcomprs
//
// ```
type ProfileHttpCompress struct {
	pulumi.CustomResourceState

	// Specifies the maximum number of compressed bytes that the system buffers before inserting a Content-Length header (which specifies the compressed size) into the response. The default is `4096` bytes.
	CompressionBuffersize pulumi.IntOutput `pulumi:"compressionBuffersize"`
	// Excludes a specified list of content types from compression of HTTP Content-Type responses. Use a string list to specify a list of content types you want to compress.
	ContentTypeExcludes pulumi.StringArrayOutput `pulumi:"contentTypeExcludes"`
	// Specifies a list of content types for compression of HTTP Content-Type responses. Use a string list to specify a list of content types you want to compress.
	ContentTypeIncludes pulumi.StringArrayOutput `pulumi:"contentTypeIncludes"`
	// Specifies, when checked (enabled), that the system monitors the percent CPU usage and adjusts compression rates automatically when the CPU usage reaches either the CPU Saver High Threshold or the CPU Saver Low Threshold. The default is `enabled`.
	CpuSaver pulumi.StringOutput `pulumi:"cpuSaver"`
	// Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
	DefaultsFrom pulumi.StringOutput `pulumi:"defaultsFrom"`
	// Specifies the degree to which the system compresses the content. Higher compression levels cause the compression process to be slower. The default is 1 - Least Compression (Fastest)
	GzipCompressionLevel pulumi.IntOutput `pulumi:"gzipCompressionLevel"`
	// Specifies the number of bytes of memory that the system uses for internal compression buffers when compressing a server response. The default is `8 kilobytes/8192 bytes`.
	GzipMemoryLevel pulumi.IntOutput `pulumi:"gzipMemoryLevel"`
	// Specifies the number of kilobytes in the window size that the system uses when compressing a server response. The default is `16` kilobytes
	GzipWindowSize pulumi.IntOutput `pulumi:"gzipWindowSize"`
	// Specifies, when checked (enabled), that the system does not remove the Accept-Encoding: header from an HTTP request. The default is `disabled`.
	KeepAcceptEncoding pulumi.StringOutput `pulumi:"keepAcceptEncoding"`
	// Name of the LTM http compress profile,named with their `full path`.The full path is the combination of the `partition + name` (example: `/Common/my-httpcompresprofile` ) or  `partition + directory + name` of the resource  (example: `my-httpcompresprofile`)
	Name pulumi.StringOutput `pulumi:"name"`
	// Disables compression on a specified list of HTTP Request-URI responses. Use a regular expression to specify a list of URIs you do not want to compress.
	UriExcludes pulumi.StringArrayOutput `pulumi:"uriExcludes"`
	// Enables compression on a specified list of HTTP Request-URI responses. Use a regular expression to specify a list of URIs you want to compress.
	UriIncludes pulumi.StringArrayOutput `pulumi:"uriIncludes"`
	// Specifies, when checked (enabled), that the system inserts a Vary header into cacheable server responses. The default is `enabled`.
	VaryHeader pulumi.StringOutput `pulumi:"varyHeader"`
}

// NewProfileHttpCompress registers a new resource with the given unique name, arguments, and options.
func NewProfileHttpCompress(ctx *pulumi.Context,
	name string, args *ProfileHttpCompressArgs, opts ...pulumi.ResourceOption) (*ProfileHttpCompress, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProfileHttpCompress
	err := ctx.RegisterResource("f5bigip:ltm/profileHttpCompress:ProfileHttpCompress", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProfileHttpCompress gets an existing ProfileHttpCompress resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProfileHttpCompress(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProfileHttpCompressState, opts ...pulumi.ResourceOption) (*ProfileHttpCompress, error) {
	var resource ProfileHttpCompress
	err := ctx.ReadResource("f5bigip:ltm/profileHttpCompress:ProfileHttpCompress", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProfileHttpCompress resources.
type profileHttpCompressState struct {
	// Specifies the maximum number of compressed bytes that the system buffers before inserting a Content-Length header (which specifies the compressed size) into the response. The default is `4096` bytes.
	CompressionBuffersize *int `pulumi:"compressionBuffersize"`
	// Excludes a specified list of content types from compression of HTTP Content-Type responses. Use a string list to specify a list of content types you want to compress.
	ContentTypeExcludes []string `pulumi:"contentTypeExcludes"`
	// Specifies a list of content types for compression of HTTP Content-Type responses. Use a string list to specify a list of content types you want to compress.
	ContentTypeIncludes []string `pulumi:"contentTypeIncludes"`
	// Specifies, when checked (enabled), that the system monitors the percent CPU usage and adjusts compression rates automatically when the CPU usage reaches either the CPU Saver High Threshold or the CPU Saver Low Threshold. The default is `enabled`.
	CpuSaver *string `pulumi:"cpuSaver"`
	// Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
	DefaultsFrom *string `pulumi:"defaultsFrom"`
	// Specifies the degree to which the system compresses the content. Higher compression levels cause the compression process to be slower. The default is 1 - Least Compression (Fastest)
	GzipCompressionLevel *int `pulumi:"gzipCompressionLevel"`
	// Specifies the number of bytes of memory that the system uses for internal compression buffers when compressing a server response. The default is `8 kilobytes/8192 bytes`.
	GzipMemoryLevel *int `pulumi:"gzipMemoryLevel"`
	// Specifies the number of kilobytes in the window size that the system uses when compressing a server response. The default is `16` kilobytes
	GzipWindowSize *int `pulumi:"gzipWindowSize"`
	// Specifies, when checked (enabled), that the system does not remove the Accept-Encoding: header from an HTTP request. The default is `disabled`.
	KeepAcceptEncoding *string `pulumi:"keepAcceptEncoding"`
	// Name of the LTM http compress profile,named with their `full path`.The full path is the combination of the `partition + name` (example: `/Common/my-httpcompresprofile` ) or  `partition + directory + name` of the resource  (example: `my-httpcompresprofile`)
	Name *string `pulumi:"name"`
	// Disables compression on a specified list of HTTP Request-URI responses. Use a regular expression to specify a list of URIs you do not want to compress.
	UriExcludes []string `pulumi:"uriExcludes"`
	// Enables compression on a specified list of HTTP Request-URI responses. Use a regular expression to specify a list of URIs you want to compress.
	UriIncludes []string `pulumi:"uriIncludes"`
	// Specifies, when checked (enabled), that the system inserts a Vary header into cacheable server responses. The default is `enabled`.
	VaryHeader *string `pulumi:"varyHeader"`
}

type ProfileHttpCompressState struct {
	// Specifies the maximum number of compressed bytes that the system buffers before inserting a Content-Length header (which specifies the compressed size) into the response. The default is `4096` bytes.
	CompressionBuffersize pulumi.IntPtrInput
	// Excludes a specified list of content types from compression of HTTP Content-Type responses. Use a string list to specify a list of content types you want to compress.
	ContentTypeExcludes pulumi.StringArrayInput
	// Specifies a list of content types for compression of HTTP Content-Type responses. Use a string list to specify a list of content types you want to compress.
	ContentTypeIncludes pulumi.StringArrayInput
	// Specifies, when checked (enabled), that the system monitors the percent CPU usage and adjusts compression rates automatically when the CPU usage reaches either the CPU Saver High Threshold or the CPU Saver Low Threshold. The default is `enabled`.
	CpuSaver pulumi.StringPtrInput
	// Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
	DefaultsFrom pulumi.StringPtrInput
	// Specifies the degree to which the system compresses the content. Higher compression levels cause the compression process to be slower. The default is 1 - Least Compression (Fastest)
	GzipCompressionLevel pulumi.IntPtrInput
	// Specifies the number of bytes of memory that the system uses for internal compression buffers when compressing a server response. The default is `8 kilobytes/8192 bytes`.
	GzipMemoryLevel pulumi.IntPtrInput
	// Specifies the number of kilobytes in the window size that the system uses when compressing a server response. The default is `16` kilobytes
	GzipWindowSize pulumi.IntPtrInput
	// Specifies, when checked (enabled), that the system does not remove the Accept-Encoding: header from an HTTP request. The default is `disabled`.
	KeepAcceptEncoding pulumi.StringPtrInput
	// Name of the LTM http compress profile,named with their `full path`.The full path is the combination of the `partition + name` (example: `/Common/my-httpcompresprofile` ) or  `partition + directory + name` of the resource  (example: `my-httpcompresprofile`)
	Name pulumi.StringPtrInput
	// Disables compression on a specified list of HTTP Request-URI responses. Use a regular expression to specify a list of URIs you do not want to compress.
	UriExcludes pulumi.StringArrayInput
	// Enables compression on a specified list of HTTP Request-URI responses. Use a regular expression to specify a list of URIs you want to compress.
	UriIncludes pulumi.StringArrayInput
	// Specifies, when checked (enabled), that the system inserts a Vary header into cacheable server responses. The default is `enabled`.
	VaryHeader pulumi.StringPtrInput
}

func (ProfileHttpCompressState) ElementType() reflect.Type {
	return reflect.TypeOf((*profileHttpCompressState)(nil)).Elem()
}

type profileHttpCompressArgs struct {
	// Specifies the maximum number of compressed bytes that the system buffers before inserting a Content-Length header (which specifies the compressed size) into the response. The default is `4096` bytes.
	CompressionBuffersize *int `pulumi:"compressionBuffersize"`
	// Excludes a specified list of content types from compression of HTTP Content-Type responses. Use a string list to specify a list of content types you want to compress.
	ContentTypeExcludes []string `pulumi:"contentTypeExcludes"`
	// Specifies a list of content types for compression of HTTP Content-Type responses. Use a string list to specify a list of content types you want to compress.
	ContentTypeIncludes []string `pulumi:"contentTypeIncludes"`
	// Specifies, when checked (enabled), that the system monitors the percent CPU usage and adjusts compression rates automatically when the CPU usage reaches either the CPU Saver High Threshold or the CPU Saver Low Threshold. The default is `enabled`.
	CpuSaver *string `pulumi:"cpuSaver"`
	// Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
	DefaultsFrom *string `pulumi:"defaultsFrom"`
	// Specifies the degree to which the system compresses the content. Higher compression levels cause the compression process to be slower. The default is 1 - Least Compression (Fastest)
	GzipCompressionLevel *int `pulumi:"gzipCompressionLevel"`
	// Specifies the number of bytes of memory that the system uses for internal compression buffers when compressing a server response. The default is `8 kilobytes/8192 bytes`.
	GzipMemoryLevel *int `pulumi:"gzipMemoryLevel"`
	// Specifies the number of kilobytes in the window size that the system uses when compressing a server response. The default is `16` kilobytes
	GzipWindowSize *int `pulumi:"gzipWindowSize"`
	// Specifies, when checked (enabled), that the system does not remove the Accept-Encoding: header from an HTTP request. The default is `disabled`.
	KeepAcceptEncoding *string `pulumi:"keepAcceptEncoding"`
	// Name of the LTM http compress profile,named with their `full path`.The full path is the combination of the `partition + name` (example: `/Common/my-httpcompresprofile` ) or  `partition + directory + name` of the resource  (example: `my-httpcompresprofile`)
	Name string `pulumi:"name"`
	// Disables compression on a specified list of HTTP Request-URI responses. Use a regular expression to specify a list of URIs you do not want to compress.
	UriExcludes []string `pulumi:"uriExcludes"`
	// Enables compression on a specified list of HTTP Request-URI responses. Use a regular expression to specify a list of URIs you want to compress.
	UriIncludes []string `pulumi:"uriIncludes"`
	// Specifies, when checked (enabled), that the system inserts a Vary header into cacheable server responses. The default is `enabled`.
	VaryHeader *string `pulumi:"varyHeader"`
}

// The set of arguments for constructing a ProfileHttpCompress resource.
type ProfileHttpCompressArgs struct {
	// Specifies the maximum number of compressed bytes that the system buffers before inserting a Content-Length header (which specifies the compressed size) into the response. The default is `4096` bytes.
	CompressionBuffersize pulumi.IntPtrInput
	// Excludes a specified list of content types from compression of HTTP Content-Type responses. Use a string list to specify a list of content types you want to compress.
	ContentTypeExcludes pulumi.StringArrayInput
	// Specifies a list of content types for compression of HTTP Content-Type responses. Use a string list to specify a list of content types you want to compress.
	ContentTypeIncludes pulumi.StringArrayInput
	// Specifies, when checked (enabled), that the system monitors the percent CPU usage and adjusts compression rates automatically when the CPU usage reaches either the CPU Saver High Threshold or the CPU Saver Low Threshold. The default is `enabled`.
	CpuSaver pulumi.StringPtrInput
	// Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
	DefaultsFrom pulumi.StringPtrInput
	// Specifies the degree to which the system compresses the content. Higher compression levels cause the compression process to be slower. The default is 1 - Least Compression (Fastest)
	GzipCompressionLevel pulumi.IntPtrInput
	// Specifies the number of bytes of memory that the system uses for internal compression buffers when compressing a server response. The default is `8 kilobytes/8192 bytes`.
	GzipMemoryLevel pulumi.IntPtrInput
	// Specifies the number of kilobytes in the window size that the system uses when compressing a server response. The default is `16` kilobytes
	GzipWindowSize pulumi.IntPtrInput
	// Specifies, when checked (enabled), that the system does not remove the Accept-Encoding: header from an HTTP request. The default is `disabled`.
	KeepAcceptEncoding pulumi.StringPtrInput
	// Name of the LTM http compress profile,named with their `full path`.The full path is the combination of the `partition + name` (example: `/Common/my-httpcompresprofile` ) or  `partition + directory + name` of the resource  (example: `my-httpcompresprofile`)
	Name pulumi.StringInput
	// Disables compression on a specified list of HTTP Request-URI responses. Use a regular expression to specify a list of URIs you do not want to compress.
	UriExcludes pulumi.StringArrayInput
	// Enables compression on a specified list of HTTP Request-URI responses. Use a regular expression to specify a list of URIs you want to compress.
	UriIncludes pulumi.StringArrayInput
	// Specifies, when checked (enabled), that the system inserts a Vary header into cacheable server responses. The default is `enabled`.
	VaryHeader pulumi.StringPtrInput
}

func (ProfileHttpCompressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*profileHttpCompressArgs)(nil)).Elem()
}

type ProfileHttpCompressInput interface {
	pulumi.Input

	ToProfileHttpCompressOutput() ProfileHttpCompressOutput
	ToProfileHttpCompressOutputWithContext(ctx context.Context) ProfileHttpCompressOutput
}

func (*ProfileHttpCompress) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileHttpCompress)(nil)).Elem()
}

func (i *ProfileHttpCompress) ToProfileHttpCompressOutput() ProfileHttpCompressOutput {
	return i.ToProfileHttpCompressOutputWithContext(context.Background())
}

func (i *ProfileHttpCompress) ToProfileHttpCompressOutputWithContext(ctx context.Context) ProfileHttpCompressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileHttpCompressOutput)
}

func (i *ProfileHttpCompress) ToOutput(ctx context.Context) pulumix.Output[*ProfileHttpCompress] {
	return pulumix.Output[*ProfileHttpCompress]{
		OutputState: i.ToProfileHttpCompressOutputWithContext(ctx).OutputState,
	}
}

// ProfileHttpCompressArrayInput is an input type that accepts ProfileHttpCompressArray and ProfileHttpCompressArrayOutput values.
// You can construct a concrete instance of `ProfileHttpCompressArrayInput` via:
//
//	ProfileHttpCompressArray{ ProfileHttpCompressArgs{...} }
type ProfileHttpCompressArrayInput interface {
	pulumi.Input

	ToProfileHttpCompressArrayOutput() ProfileHttpCompressArrayOutput
	ToProfileHttpCompressArrayOutputWithContext(context.Context) ProfileHttpCompressArrayOutput
}

type ProfileHttpCompressArray []ProfileHttpCompressInput

func (ProfileHttpCompressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProfileHttpCompress)(nil)).Elem()
}

func (i ProfileHttpCompressArray) ToProfileHttpCompressArrayOutput() ProfileHttpCompressArrayOutput {
	return i.ToProfileHttpCompressArrayOutputWithContext(context.Background())
}

func (i ProfileHttpCompressArray) ToProfileHttpCompressArrayOutputWithContext(ctx context.Context) ProfileHttpCompressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileHttpCompressArrayOutput)
}

func (i ProfileHttpCompressArray) ToOutput(ctx context.Context) pulumix.Output[[]*ProfileHttpCompress] {
	return pulumix.Output[[]*ProfileHttpCompress]{
		OutputState: i.ToProfileHttpCompressArrayOutputWithContext(ctx).OutputState,
	}
}

// ProfileHttpCompressMapInput is an input type that accepts ProfileHttpCompressMap and ProfileHttpCompressMapOutput values.
// You can construct a concrete instance of `ProfileHttpCompressMapInput` via:
//
//	ProfileHttpCompressMap{ "key": ProfileHttpCompressArgs{...} }
type ProfileHttpCompressMapInput interface {
	pulumi.Input

	ToProfileHttpCompressMapOutput() ProfileHttpCompressMapOutput
	ToProfileHttpCompressMapOutputWithContext(context.Context) ProfileHttpCompressMapOutput
}

type ProfileHttpCompressMap map[string]ProfileHttpCompressInput

func (ProfileHttpCompressMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProfileHttpCompress)(nil)).Elem()
}

func (i ProfileHttpCompressMap) ToProfileHttpCompressMapOutput() ProfileHttpCompressMapOutput {
	return i.ToProfileHttpCompressMapOutputWithContext(context.Background())
}

func (i ProfileHttpCompressMap) ToProfileHttpCompressMapOutputWithContext(ctx context.Context) ProfileHttpCompressMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProfileHttpCompressMapOutput)
}

func (i ProfileHttpCompressMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ProfileHttpCompress] {
	return pulumix.Output[map[string]*ProfileHttpCompress]{
		OutputState: i.ToProfileHttpCompressMapOutputWithContext(ctx).OutputState,
	}
}

type ProfileHttpCompressOutput struct{ *pulumi.OutputState }

func (ProfileHttpCompressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProfileHttpCompress)(nil)).Elem()
}

func (o ProfileHttpCompressOutput) ToProfileHttpCompressOutput() ProfileHttpCompressOutput {
	return o
}

func (o ProfileHttpCompressOutput) ToProfileHttpCompressOutputWithContext(ctx context.Context) ProfileHttpCompressOutput {
	return o
}

func (o ProfileHttpCompressOutput) ToOutput(ctx context.Context) pulumix.Output[*ProfileHttpCompress] {
	return pulumix.Output[*ProfileHttpCompress]{
		OutputState: o.OutputState,
	}
}

// Specifies the maximum number of compressed bytes that the system buffers before inserting a Content-Length header (which specifies the compressed size) into the response. The default is `4096` bytes.
func (o ProfileHttpCompressOutput) CompressionBuffersize() pulumi.IntOutput {
	return o.ApplyT(func(v *ProfileHttpCompress) pulumi.IntOutput { return v.CompressionBuffersize }).(pulumi.IntOutput)
}

// Excludes a specified list of content types from compression of HTTP Content-Type responses. Use a string list to specify a list of content types you want to compress.
func (o ProfileHttpCompressOutput) ContentTypeExcludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProfileHttpCompress) pulumi.StringArrayOutput { return v.ContentTypeExcludes }).(pulumi.StringArrayOutput)
}

// Specifies a list of content types for compression of HTTP Content-Type responses. Use a string list to specify a list of content types you want to compress.
func (o ProfileHttpCompressOutput) ContentTypeIncludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProfileHttpCompress) pulumi.StringArrayOutput { return v.ContentTypeIncludes }).(pulumi.StringArrayOutput)
}

// Specifies, when checked (enabled), that the system monitors the percent CPU usage and adjusts compression rates automatically when the CPU usage reaches either the CPU Saver High Threshold or the CPU Saver Low Threshold. The default is `enabled`.
func (o ProfileHttpCompressOutput) CpuSaver() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileHttpCompress) pulumi.StringOutput { return v.CpuSaver }).(pulumi.StringOutput)
}

// Specifies the profile that you want to use as the parent profile. Your new profile inherits all settings and values from the parent profile specified.
func (o ProfileHttpCompressOutput) DefaultsFrom() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileHttpCompress) pulumi.StringOutput { return v.DefaultsFrom }).(pulumi.StringOutput)
}

// Specifies the degree to which the system compresses the content. Higher compression levels cause the compression process to be slower. The default is 1 - Least Compression (Fastest)
func (o ProfileHttpCompressOutput) GzipCompressionLevel() pulumi.IntOutput {
	return o.ApplyT(func(v *ProfileHttpCompress) pulumi.IntOutput { return v.GzipCompressionLevel }).(pulumi.IntOutput)
}

// Specifies the number of bytes of memory that the system uses for internal compression buffers when compressing a server response. The default is `8 kilobytes/8192 bytes`.
func (o ProfileHttpCompressOutput) GzipMemoryLevel() pulumi.IntOutput {
	return o.ApplyT(func(v *ProfileHttpCompress) pulumi.IntOutput { return v.GzipMemoryLevel }).(pulumi.IntOutput)
}

// Specifies the number of kilobytes in the window size that the system uses when compressing a server response. The default is `16` kilobytes
func (o ProfileHttpCompressOutput) GzipWindowSize() pulumi.IntOutput {
	return o.ApplyT(func(v *ProfileHttpCompress) pulumi.IntOutput { return v.GzipWindowSize }).(pulumi.IntOutput)
}

// Specifies, when checked (enabled), that the system does not remove the Accept-Encoding: header from an HTTP request. The default is `disabled`.
func (o ProfileHttpCompressOutput) KeepAcceptEncoding() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileHttpCompress) pulumi.StringOutput { return v.KeepAcceptEncoding }).(pulumi.StringOutput)
}

// Name of the LTM http compress profile,named with their `full path`.The full path is the combination of the `partition + name` (example: `/Common/my-httpcompresprofile` ) or  `partition + directory + name` of the resource  (example: `my-httpcompresprofile`)
func (o ProfileHttpCompressOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileHttpCompress) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Disables compression on a specified list of HTTP Request-URI responses. Use a regular expression to specify a list of URIs you do not want to compress.
func (o ProfileHttpCompressOutput) UriExcludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProfileHttpCompress) pulumi.StringArrayOutput { return v.UriExcludes }).(pulumi.StringArrayOutput)
}

// Enables compression on a specified list of HTTP Request-URI responses. Use a regular expression to specify a list of URIs you want to compress.
func (o ProfileHttpCompressOutput) UriIncludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProfileHttpCompress) pulumi.StringArrayOutput { return v.UriIncludes }).(pulumi.StringArrayOutput)
}

// Specifies, when checked (enabled), that the system inserts a Vary header into cacheable server responses. The default is `enabled`.
func (o ProfileHttpCompressOutput) VaryHeader() pulumi.StringOutput {
	return o.ApplyT(func(v *ProfileHttpCompress) pulumi.StringOutput { return v.VaryHeader }).(pulumi.StringOutput)
}

type ProfileHttpCompressArrayOutput struct{ *pulumi.OutputState }

func (ProfileHttpCompressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProfileHttpCompress)(nil)).Elem()
}

func (o ProfileHttpCompressArrayOutput) ToProfileHttpCompressArrayOutput() ProfileHttpCompressArrayOutput {
	return o
}

func (o ProfileHttpCompressArrayOutput) ToProfileHttpCompressArrayOutputWithContext(ctx context.Context) ProfileHttpCompressArrayOutput {
	return o
}

func (o ProfileHttpCompressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ProfileHttpCompress] {
	return pulumix.Output[[]*ProfileHttpCompress]{
		OutputState: o.OutputState,
	}
}

func (o ProfileHttpCompressArrayOutput) Index(i pulumi.IntInput) ProfileHttpCompressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProfileHttpCompress {
		return vs[0].([]*ProfileHttpCompress)[vs[1].(int)]
	}).(ProfileHttpCompressOutput)
}

type ProfileHttpCompressMapOutput struct{ *pulumi.OutputState }

func (ProfileHttpCompressMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProfileHttpCompress)(nil)).Elem()
}

func (o ProfileHttpCompressMapOutput) ToProfileHttpCompressMapOutput() ProfileHttpCompressMapOutput {
	return o
}

func (o ProfileHttpCompressMapOutput) ToProfileHttpCompressMapOutputWithContext(ctx context.Context) ProfileHttpCompressMapOutput {
	return o
}

func (o ProfileHttpCompressMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ProfileHttpCompress] {
	return pulumix.Output[map[string]*ProfileHttpCompress]{
		OutputState: o.OutputState,
	}
}

func (o ProfileHttpCompressMapOutput) MapIndex(k pulumi.StringInput) ProfileHttpCompressOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProfileHttpCompress {
		return vs[0].(map[string]*ProfileHttpCompress)[vs[1].(string)]
	}).(ProfileHttpCompressOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileHttpCompressInput)(nil)).Elem(), &ProfileHttpCompress{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileHttpCompressArrayInput)(nil)).Elem(), ProfileHttpCompressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProfileHttpCompressMapInput)(nil)).Elem(), ProfileHttpCompressMap{})
	pulumi.RegisterOutputType(ProfileHttpCompressOutput{})
	pulumi.RegisterOutputType(ProfileHttpCompressArrayOutput{})
	pulumi.RegisterOutputType(ProfileHttpCompressMapOutput{})
}
