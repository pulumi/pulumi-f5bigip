// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ltm

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ProfileHttpCompress struct {
	s *pulumi.ResourceState
}

// NewProfileHttpCompress registers a new resource with the given unique name, arguments, and options.
func NewProfileHttpCompress(ctx *pulumi.Context,
	name string, args *ProfileHttpCompressArgs, opts ...pulumi.ResourceOpt) (*ProfileHttpCompress, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["defaultsFrom"] = nil
		inputs["name"] = nil
		inputs["uriExcludes"] = nil
		inputs["uriIncludes"] = nil
	} else {
		inputs["defaultsFrom"] = args.DefaultsFrom
		inputs["name"] = args.Name
		inputs["uriExcludes"] = args.UriExcludes
		inputs["uriIncludes"] = args.UriIncludes
	}
	s, err := ctx.RegisterResource("f5bigip:ltm/profileHttpCompress:ProfileHttpCompress", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProfileHttpCompress{s: s}, nil
}

// GetProfileHttpCompress gets an existing ProfileHttpCompress resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProfileHttpCompress(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ProfileHttpCompressState, opts ...pulumi.ResourceOpt) (*ProfileHttpCompress, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["defaultsFrom"] = state.DefaultsFrom
		inputs["name"] = state.Name
		inputs["uriExcludes"] = state.UriExcludes
		inputs["uriIncludes"] = state.UriIncludes
	}
	s, err := ctx.ReadResource("f5bigip:ltm/profileHttpCompress:ProfileHttpCompress", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ProfileHttpCompress{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ProfileHttpCompress) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ProfileHttpCompress) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Use the parent Httpcompress profile
func (r *ProfileHttpCompress) DefaultsFrom() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["defaultsFrom"])
}

// Name of the Httpcompress Profile
func (r *ProfileHttpCompress) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Servers Address
func (r *ProfileHttpCompress) UriExcludes() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["uriExcludes"])
}

// Servers Address
func (r *ProfileHttpCompress) UriIncludes() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["uriIncludes"])
}

// Input properties used for looking up and filtering ProfileHttpCompress resources.
type ProfileHttpCompressState struct {
	// Use the parent Httpcompress profile
	DefaultsFrom interface{}
	// Name of the Httpcompress Profile
	Name interface{}
	// Servers Address
	UriExcludes interface{}
	// Servers Address
	UriIncludes interface{}
}

// The set of arguments for constructing a ProfileHttpCompress resource.
type ProfileHttpCompressArgs struct {
	// Use the parent Httpcompress profile
	DefaultsFrom interface{}
	// Name of the Httpcompress Profile
	Name interface{}
	// Servers Address
	UriExcludes interface{}
	// Servers Address
	UriIncludes interface{}
}
