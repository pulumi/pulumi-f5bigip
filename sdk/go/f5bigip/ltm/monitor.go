// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ltm

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Monitor struct {
	s *pulumi.ResourceState
}

// NewMonitor registers a new resource with the given unique name, arguments, and options.
func NewMonitor(ctx *pulumi.Context,
	name string, args *MonitorArgs, opts ...pulumi.ResourceOpt) (*Monitor, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.Parent == nil {
		return nil, errors.New("missing required argument 'Parent'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["defaultsFrom"] = nil
		inputs["destination"] = nil
		inputs["interval"] = nil
		inputs["ipDscp"] = nil
		inputs["manualResume"] = nil
		inputs["name"] = nil
		inputs["parent"] = nil
		inputs["receive"] = nil
		inputs["receiveDisable"] = nil
		inputs["reverse"] = nil
		inputs["send"] = nil
		inputs["timeUntilUp"] = nil
		inputs["timeout"] = nil
		inputs["transparent"] = nil
	} else {
		inputs["defaultsFrom"] = args.DefaultsFrom
		inputs["destination"] = args.Destination
		inputs["interval"] = args.Interval
		inputs["ipDscp"] = args.IpDscp
		inputs["manualResume"] = args.ManualResume
		inputs["name"] = args.Name
		inputs["parent"] = args.Parent
		inputs["receive"] = args.Receive
		inputs["receiveDisable"] = args.ReceiveDisable
		inputs["reverse"] = args.Reverse
		inputs["send"] = args.Send
		inputs["timeUntilUp"] = args.TimeUntilUp
		inputs["timeout"] = args.Timeout
		inputs["transparent"] = args.Transparent
	}
	s, err := ctx.RegisterResource("f5bigip:ltm/monitor:Monitor", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Monitor{s: s}, nil
}

// GetMonitor gets an existing Monitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitor(ctx *pulumi.Context,
	name string, id pulumi.ID, state *MonitorState, opts ...pulumi.ResourceOpt) (*Monitor, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["defaultsFrom"] = state.DefaultsFrom
		inputs["destination"] = state.Destination
		inputs["interval"] = state.Interval
		inputs["ipDscp"] = state.IpDscp
		inputs["manualResume"] = state.ManualResume
		inputs["name"] = state.Name
		inputs["parent"] = state.Parent
		inputs["receive"] = state.Receive
		inputs["receiveDisable"] = state.ReceiveDisable
		inputs["reverse"] = state.Reverse
		inputs["send"] = state.Send
		inputs["timeUntilUp"] = state.TimeUntilUp
		inputs["timeout"] = state.Timeout
		inputs["transparent"] = state.Transparent
	}
	s, err := ctx.ReadResource("f5bigip:ltm/monitor:Monitor", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Monitor{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Monitor) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Monitor) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Existing monitor to inherit from. Must be one of /Common/http, /Common/https, /Common/icmp or /Common/gateway-icmp.
func (r *Monitor) DefaultsFrom() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["defaultsFrom"])
}

// Alias for the destination
func (r *Monitor) Destination() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["destination"])
}

// Check interval in seconds
func (r *Monitor) Interval() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["interval"])
}

func (r *Monitor) IpDscp() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["ipDscp"])
}

func (r *Monitor) ManualResume() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["manualResume"])
}

// Name of the monitor
func (r *Monitor) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Existing monitor to inherit from. Must be one of /Common/http, /Common/https, /Common/icmp or /Common/gateway-icmp.
func (r *Monitor) Parent() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["parent"])
}

// Expected response string.
func (r *Monitor) Receive() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["receive"])
}

// Expected response string.
func (r *Monitor) ReceiveDisable() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["receiveDisable"])
}

func (r *Monitor) Reverse() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["reverse"])
}

// Request string to send.
func (r *Monitor) Send() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["send"])
}

// Time in seconds
func (r *Monitor) TimeUntilUp() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["timeUntilUp"])
}

// Timeout in seconds
func (r *Monitor) Timeout() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["timeout"])
}

func (r *Monitor) Transparent() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["transparent"])
}

// Input properties used for looking up and filtering Monitor resources.
type MonitorState struct {
	// Existing monitor to inherit from. Must be one of /Common/http, /Common/https, /Common/icmp or /Common/gateway-icmp.
	DefaultsFrom interface{}
	// Alias for the destination
	Destination interface{}
	// Check interval in seconds
	Interval interface{}
	IpDscp interface{}
	ManualResume interface{}
	// Name of the monitor
	Name interface{}
	// Existing monitor to inherit from. Must be one of /Common/http, /Common/https, /Common/icmp or /Common/gateway-icmp.
	Parent interface{}
	// Expected response string.
	Receive interface{}
	// Expected response string.
	ReceiveDisable interface{}
	Reverse interface{}
	// Request string to send.
	Send interface{}
	// Time in seconds
	TimeUntilUp interface{}
	// Timeout in seconds
	Timeout interface{}
	Transparent interface{}
}

// The set of arguments for constructing a Monitor resource.
type MonitorArgs struct {
	// Existing monitor to inherit from. Must be one of /Common/http, /Common/https, /Common/icmp or /Common/gateway-icmp.
	DefaultsFrom interface{}
	// Alias for the destination
	Destination interface{}
	// Check interval in seconds
	Interval interface{}
	IpDscp interface{}
	ManualResume interface{}
	// Name of the monitor
	Name interface{}
	// Existing monitor to inherit from. Must be one of /Common/http, /Common/https, /Common/icmp or /Common/gateway-icmp.
	Parent interface{}
	// Expected response string.
	Receive interface{}
	// Expected response string.
	ReceiveDisable interface{}
	Reverse interface{}
	// Request string to send.
	Send interface{}
	// Time in seconds
	TimeUntilUp interface{}
	// Timeout in seconds
	Timeout interface{}
	Transparent interface{}
}
