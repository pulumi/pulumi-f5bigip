// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ltm

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// `ltm.Node` Manages a node configuration
// 
// For resources should be named with their "full path". The full path is the combination of the partition + name of the resource. For example /Common/my-pool.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-bigip/blob/master/website/docs/r/ltm_node.html.markdown.
type Node struct {
	s *pulumi.ResourceState
}

// NewNode registers a new resource with the given unique name, arguments, and options.
func NewNode(ctx *pulumi.Context,
	name string, args *NodeArgs, opts ...pulumi.ResourceOpt) (*Node, error) {
	if args == nil || args.Address == nil {
		return nil, errors.New("missing required argument 'Address'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["address"] = nil
		inputs["connectionLimit"] = nil
		inputs["dynamicRatio"] = nil
		inputs["fqdn"] = nil
		inputs["monitor"] = nil
		inputs["name"] = nil
		inputs["rateLimit"] = nil
		inputs["state"] = nil
	} else {
		inputs["address"] = args.Address
		inputs["connectionLimit"] = args.ConnectionLimit
		inputs["dynamicRatio"] = args.DynamicRatio
		inputs["fqdn"] = args.Fqdn
		inputs["monitor"] = args.Monitor
		inputs["name"] = args.Name
		inputs["rateLimit"] = args.RateLimit
		inputs["state"] = args.State
	}
	s, err := ctx.RegisterResource("f5bigip:ltm/node:Node", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Node{s: s}, nil
}

// GetNode gets an existing Node resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNode(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NodeState, opts ...pulumi.ResourceOpt) (*Node, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["address"] = state.Address
		inputs["connectionLimit"] = state.ConnectionLimit
		inputs["dynamicRatio"] = state.DynamicRatio
		inputs["fqdn"] = state.Fqdn
		inputs["monitor"] = state.Monitor
		inputs["name"] = state.Name
		inputs["rateLimit"] = state.RateLimit
		inputs["state"] = state.State
	}
	s, err := ctx.ReadResource("f5bigip:ltm/node:Node", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Node{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Node) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Node) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// IP or hostname of the node
func (r *Node) Address() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["address"])
}

// Specifies the maximum number of connections allowed for the node or node address.
func (r *Node) ConnectionLimit() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["connectionLimit"])
}

// Specifies the fixed ratio value used for a node during ratio load balancing.
func (r *Node) DynamicRatio() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["dynamicRatio"])
}

func (r *Node) Fqdn() *pulumi.Output {
	return r.s.State["fqdn"]
}

// specifies the name of the monitor or monitor rule that you want to associate with the node.
func (r *Node) Monitor() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["monitor"])
}

// Name of the node
func (r *Node) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Specifies the maximum number of connections per second allowed for a node or node address. The default value is
// 'disabled'.
func (r *Node) RateLimit() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["rateLimit"])
}

// Default is "user-up" you can set to "user-down" if you want to disable
func (r *Node) State() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["state"])
}

// Input properties used for looking up and filtering Node resources.
type NodeState struct {
	// IP or hostname of the node
	Address interface{}
	// Specifies the maximum number of connections allowed for the node or node address.
	ConnectionLimit interface{}
	// Specifies the fixed ratio value used for a node during ratio load balancing.
	DynamicRatio interface{}
	Fqdn interface{}
	// specifies the name of the monitor or monitor rule that you want to associate with the node.
	Monitor interface{}
	// Name of the node
	Name interface{}
	// Specifies the maximum number of connections per second allowed for a node or node address. The default value is
	// 'disabled'.
	RateLimit interface{}
	// Default is "user-up" you can set to "user-down" if you want to disable
	State interface{}
}

// The set of arguments for constructing a Node resource.
type NodeArgs struct {
	// IP or hostname of the node
	Address interface{}
	// Specifies the maximum number of connections allowed for the node or node address.
	ConnectionLimit interface{}
	// Specifies the fixed ratio value used for a node during ratio load balancing.
	DynamicRatio interface{}
	Fqdn interface{}
	// specifies the name of the monitor or monitor rule that you want to associate with the node.
	Monitor interface{}
	// Name of the node
	Name interface{}
	// Specifies the maximum number of connections per second allowed for a node or node address. The default value is
	// 'disabled'.
	RateLimit interface{}
	// Default is "user-up" you can set to "user-down" if you want to disable
	State interface{}
}
