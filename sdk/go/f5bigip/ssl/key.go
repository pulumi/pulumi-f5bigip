// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ssl

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// `ssl.Key` This resource will import SSL certificate key on BIG-IP LTM.
// Certificate key can be imported from certificate key files on the local disk, in PEM format
type Key struct {
	pulumi.CustomResourceState

	// Content of SSL certificate key present on local Disk
	Content pulumi.StringOutput `pulumi:"content"`
	// Name of the SSL Certificate key to be Imported on to BIGIP
	Name pulumi.StringOutput `pulumi:"name"`
	// Partition on to SSL Certificate key to be imported
	Partition pulumi.StringPtrOutput `pulumi:"partition"`
}

// NewKey registers a new resource with the given unique name, arguments, and options.
func NewKey(ctx *pulumi.Context,
	name string, args *KeyArgs, opts ...pulumi.ResourceOption) (*Key, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	var resource Key
	err := ctx.RegisterResource("f5bigip:ssl/key:Key", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKey gets an existing Key resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyState, opts ...pulumi.ResourceOption) (*Key, error) {
	var resource Key
	err := ctx.ReadResource("f5bigip:ssl/key:Key", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Key resources.
type keyState struct {
	// Content of SSL certificate key present on local Disk
	Content *string `pulumi:"content"`
	// Name of the SSL Certificate key to be Imported on to BIGIP
	Name *string `pulumi:"name"`
	// Partition on to SSL Certificate key to be imported
	Partition *string `pulumi:"partition"`
}

type KeyState struct {
	// Content of SSL certificate key present on local Disk
	Content pulumi.StringPtrInput
	// Name of the SSL Certificate key to be Imported on to BIGIP
	Name pulumi.StringPtrInput
	// Partition on to SSL Certificate key to be imported
	Partition pulumi.StringPtrInput
}

func (KeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyState)(nil)).Elem()
}

type keyArgs struct {
	// Content of SSL certificate key present on local Disk
	Content string `pulumi:"content"`
	// Name of the SSL Certificate key to be Imported on to BIGIP
	Name string `pulumi:"name"`
	// Partition on to SSL Certificate key to be imported
	Partition *string `pulumi:"partition"`
}

// The set of arguments for constructing a Key resource.
type KeyArgs struct {
	// Content of SSL certificate key present on local Disk
	Content pulumi.StringInput
	// Name of the SSL Certificate key to be Imported on to BIGIP
	Name pulumi.StringInput
	// Partition on to SSL Certificate key to be imported
	Partition pulumi.StringPtrInput
}

func (KeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyArgs)(nil)).Elem()
}

type KeyInput interface {
	pulumi.Input

	ToKeyOutput() KeyOutput
	ToKeyOutputWithContext(ctx context.Context) KeyOutput
}

func (*Key) ElementType() reflect.Type {
	return reflect.TypeOf((*Key)(nil))
}

func (i *Key) ToKeyOutput() KeyOutput {
	return i.ToKeyOutputWithContext(context.Background())
}

func (i *Key) ToKeyOutputWithContext(ctx context.Context) KeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyOutput)
}

type KeyOutput struct {
	*pulumi.OutputState
}

func (KeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Key)(nil))
}

func (o KeyOutput) ToKeyOutput() KeyOutput {
	return o
}

func (o KeyOutput) ToKeyOutputWithContext(ctx context.Context) KeyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(KeyOutput{})
}
