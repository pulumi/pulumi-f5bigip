// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ssl

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// `ssl.Certificate` This resource will import SSL certificates on BIG-IP LTM.
// Certificates can be imported from certificate files on the local disk, in PEM format
type Certificate struct {
	pulumi.CustomResourceState

	// Content of certificate on Disk
	Content pulumi.StringOutput `pulumi:"content"`
	// Name of SSL Certificate with .crt extension
	Name pulumi.StringOutput `pulumi:"name"`
	// Partition on to SSL Certificate to be imported
	Partition pulumi.StringPtrOutput `pulumi:"partition"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil || args.Content == nil {
		return nil, errors.New("missing required argument 'Content'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil {
		args = &CertificateArgs{}
	}
	var resource Certificate
	err := ctx.RegisterResource("f5bigip:ssl/certificate:Certificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	var resource Certificate
	err := ctx.ReadResource("f5bigip:ssl/certificate:Certificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type certificateState struct {
	// Content of certificate on Disk
	Content *string `pulumi:"content"`
	// Name of SSL Certificate with .crt extension
	Name *string `pulumi:"name"`
	// Partition on to SSL Certificate to be imported
	Partition *string `pulumi:"partition"`
}

type CertificateState struct {
	// Content of certificate on Disk
	Content pulumi.StringPtrInput
	// Name of SSL Certificate with .crt extension
	Name pulumi.StringPtrInput
	// Partition on to SSL Certificate to be imported
	Partition pulumi.StringPtrInput
}

func (CertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateState)(nil)).Elem()
}

type certificateArgs struct {
	// Content of certificate on Disk
	Content string `pulumi:"content"`
	// Name of SSL Certificate with .crt extension
	Name string `pulumi:"name"`
	// Partition on to SSL Certificate to be imported
	Partition *string `pulumi:"partition"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// Content of certificate on Disk
	Content pulumi.StringInput
	// Name of SSL Certificate with .crt extension
	Name pulumi.StringInput
	// Partition on to SSL Certificate to be imported
	Partition pulumi.StringPtrInput
}

func (CertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateArgs)(nil)).Elem()
}
