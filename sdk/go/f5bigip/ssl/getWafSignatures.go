// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssl

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source (`ssl.getWafSignatures`) to get the details of attack signatures available on BIG-IP WAF
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-f5bigip/sdk/v3/go/f5bigip/ssl"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ssl.GetWafSignatures(ctx, &ssl.GetWafSignaturesArgs{
//				SignatureId: 200104004,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetWafSignatures(ctx *pulumi.Context, args *GetWafSignaturesArgs, opts ...pulumi.InvokeOption) (*GetWafSignaturesResult, error) {
	var rv GetWafSignaturesResult
	err := ctx.Invoke("f5bigip:ssl/getWafSignatures:getWafSignatures", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getWafSignatures.
type GetWafSignaturesArgs struct {
	// The relative detection accuracy of the signature.
	Accuracy *string `pulumi:"accuracy"`
	// Description of the signature.
	Description *string `pulumi:"description"`
	Enabled     *bool   `pulumi:"enabled"`
	// Name of the signature as configured on the system.
	Name           *string `pulumi:"name"`
	PerformStaging *bool   `pulumi:"performStaging"`
	// The relative risk level of the attack that matches this signature.
	Risk *string `pulumi:"risk"`
	// ID of the signature in the BIG-IP WAF database.
	SignatureId int `pulumi:"signatureId"`
	// System generated ID of the signature.
	SystemSignatureId *string `pulumi:"systemSignatureId"`
	Tag               *string `pulumi:"tag"`
	// Type of the signature.
	Type *string `pulumi:"type"`
}

// A collection of values returned by getWafSignatures.
type GetWafSignaturesResult struct {
	// The relative detection accuracy of the signature.
	Accuracy string `pulumi:"accuracy"`
	// Description of the signature.
	Description *string `pulumi:"description"`
	Enabled     *bool   `pulumi:"enabled"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Json string `pulumi:"json"`
	// Name of the signature as configured on the system.
	Name           string `pulumi:"name"`
	PerformStaging *bool  `pulumi:"performStaging"`
	// The relative risk level of the attack that matches this signature.
	Risk string `pulumi:"risk"`
	// ID of the signature in the database.
	SignatureId int `pulumi:"signatureId"`
	// System generated ID of the signature.
	SystemSignatureId string `pulumi:"systemSignatureId"`
	Tag               string `pulumi:"tag"`
	// Type of the signature.
	Type string `pulumi:"type"`
}

func GetWafSignaturesOutput(ctx *pulumi.Context, args GetWafSignaturesOutputArgs, opts ...pulumi.InvokeOption) GetWafSignaturesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetWafSignaturesResult, error) {
			args := v.(GetWafSignaturesArgs)
			r, err := GetWafSignatures(ctx, &args, opts...)
			var s GetWafSignaturesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetWafSignaturesResultOutput)
}

// A collection of arguments for invoking getWafSignatures.
type GetWafSignaturesOutputArgs struct {
	// The relative detection accuracy of the signature.
	Accuracy pulumi.StringPtrInput `pulumi:"accuracy"`
	// Description of the signature.
	Description pulumi.StringPtrInput `pulumi:"description"`
	Enabled     pulumi.BoolPtrInput   `pulumi:"enabled"`
	// Name of the signature as configured on the system.
	Name           pulumi.StringPtrInput `pulumi:"name"`
	PerformStaging pulumi.BoolPtrInput   `pulumi:"performStaging"`
	// The relative risk level of the attack that matches this signature.
	Risk pulumi.StringPtrInput `pulumi:"risk"`
	// ID of the signature in the BIG-IP WAF database.
	SignatureId pulumi.IntInput `pulumi:"signatureId"`
	// System generated ID of the signature.
	SystemSignatureId pulumi.StringPtrInput `pulumi:"systemSignatureId"`
	Tag               pulumi.StringPtrInput `pulumi:"tag"`
	// Type of the signature.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GetWafSignaturesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWafSignaturesArgs)(nil)).Elem()
}

// A collection of values returned by getWafSignatures.
type GetWafSignaturesResultOutput struct{ *pulumi.OutputState }

func (GetWafSignaturesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWafSignaturesResult)(nil)).Elem()
}

func (o GetWafSignaturesResultOutput) ToGetWafSignaturesResultOutput() GetWafSignaturesResultOutput {
	return o
}

func (o GetWafSignaturesResultOutput) ToGetWafSignaturesResultOutputWithContext(ctx context.Context) GetWafSignaturesResultOutput {
	return o
}

// The relative detection accuracy of the signature.
func (o GetWafSignaturesResultOutput) Accuracy() pulumi.StringOutput {
	return o.ApplyT(func(v GetWafSignaturesResult) string { return v.Accuracy }).(pulumi.StringOutput)
}

// Description of the signature.
func (o GetWafSignaturesResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetWafSignaturesResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o GetWafSignaturesResultOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetWafSignaturesResult) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetWafSignaturesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetWafSignaturesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetWafSignaturesResultOutput) Json() pulumi.StringOutput {
	return o.ApplyT(func(v GetWafSignaturesResult) string { return v.Json }).(pulumi.StringOutput)
}

// Name of the signature as configured on the system.
func (o GetWafSignaturesResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetWafSignaturesResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetWafSignaturesResultOutput) PerformStaging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetWafSignaturesResult) *bool { return v.PerformStaging }).(pulumi.BoolPtrOutput)
}

// The relative risk level of the attack that matches this signature.
func (o GetWafSignaturesResultOutput) Risk() pulumi.StringOutput {
	return o.ApplyT(func(v GetWafSignaturesResult) string { return v.Risk }).(pulumi.StringOutput)
}

// ID of the signature in the database.
func (o GetWafSignaturesResultOutput) SignatureId() pulumi.IntOutput {
	return o.ApplyT(func(v GetWafSignaturesResult) int { return v.SignatureId }).(pulumi.IntOutput)
}

// System generated ID of the signature.
func (o GetWafSignaturesResultOutput) SystemSignatureId() pulumi.StringOutput {
	return o.ApplyT(func(v GetWafSignaturesResult) string { return v.SystemSignatureId }).(pulumi.StringOutput)
}

func (o GetWafSignaturesResultOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v GetWafSignaturesResult) string { return v.Tag }).(pulumi.StringOutput)
}

// Type of the signature.
func (o GetWafSignaturesResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetWafSignaturesResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetWafSignaturesResultOutput{})
}
