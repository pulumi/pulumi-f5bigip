// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package f5bigip

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-f5bigip/sdk/v3/go/f5bigip/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "f5bigip:index/as3:As3":
		r = &As3{}
	case "f5bigip:index/bigIqAs3:BigIqAs3":
		r = &BigIqAs3{}
	case "f5bigip:index/command:Command":
		r = &Command{}
	case "f5bigip:index/commonLicenseManageBigIq:CommonLicenseManageBigIq":
		r = &CommonLicenseManageBigIq{}
	case "f5bigip:index/do:Do":
		r = &Do{}
	case "f5bigip:index/eventServiceDiscovery:EventServiceDiscovery":
		r = &EventServiceDiscovery{}
	case "f5bigip:index/fastApplication:FastApplication":
		r = &FastApplication{}
	case "f5bigip:index/fastHttpApp:FastHttpApp":
		r = &FastHttpApp{}
	case "f5bigip:index/fastHttpsApp:FastHttpsApp":
		r = &FastHttpsApp{}
	case "f5bigip:index/fastTcpApp:FastTcpApp":
		r = &FastTcpApp{}
	case "f5bigip:index/fastTemplate:FastTemplate":
		r = &FastTemplate{}
	case "f5bigip:index/fastUdpApp:FastUdpApp":
		r = &FastUdpApp{}
	case "f5bigip:index/ipsecPolicy:IpsecPolicy":
		r = &IpsecPolicy{}
	case "f5bigip:index/ipsecProfile:IpsecProfile":
		r = &IpsecProfile{}
	case "f5bigip:index/netIkePeer:NetIkePeer":
		r = &NetIkePeer{}
	case "f5bigip:index/netTunnel:NetTunnel":
		r = &NetTunnel{}
	case "f5bigip:index/partition:Partition":
		r = &Partition{}
	case "f5bigip:index/sslKeyCert:SslKeyCert":
		r = &SslKeyCert{}
	case "f5bigip:index/trafficSelector:TrafficSelector":
		r = &TrafficSelector{}
	case "f5bigip:index/wafPolicy:WafPolicy":
		r = &WafPolicy{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:f5bigip" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"f5bigip",
		"index/as3",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"index/bigIqAs3",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"index/command",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"index/commonLicenseManageBigIq",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"index/do",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"index/eventServiceDiscovery",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"index/fastApplication",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"index/fastHttpApp",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"index/fastHttpsApp",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"index/fastTcpApp",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"index/fastTemplate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"index/fastUdpApp",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"index/ipsecPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"index/ipsecProfile",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"index/netIkePeer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"index/netTunnel",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"index/partition",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"index/sslKeyCert",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"index/trafficSelector",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"f5bigip",
		"index/wafPolicy",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"f5bigip",
		&pkg{version},
	)
}
