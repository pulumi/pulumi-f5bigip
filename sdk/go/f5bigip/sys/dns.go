// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sys

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-f5bigip/sdk/v3/go/f5bigip/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `sys.Dns` Configures DNS Name server on F5 BIG-IP
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-f5bigip/sdk/v3/go/f5bigip/sys"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sys.NewDns(ctx, "dns1", &sys.DnsArgs{
//				Description: pulumi.String("/Common/DNS1"),
//				NameServers: pulumi.StringArray{
//					pulumi.String("1.1.1.1"),
//				},
//				Searches: pulumi.StringArray{
//					pulumi.String("f5.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
type Dns struct {
	pulumi.CustomResourceState

	// Provide description for your DNS server
	Description pulumi.StringOutput `pulumi:"description"`
	// Specifies the name servers that the system uses to validate DNS lookups, and resolve host names.
	NameServers pulumi.StringArrayOutput `pulumi:"nameServers"`
	// Configures the number of dots needed in a name before an initial absolute query will be made.
	NumberOfDots pulumi.IntOutput `pulumi:"numberOfDots"`
	// Specifies the domains that the system searches for local domain lookups, to resolve local host names.
	Searches pulumi.StringArrayOutput `pulumi:"searches"`
}

// NewDns registers a new resource with the given unique name, arguments, and options.
func NewDns(ctx *pulumi.Context,
	name string, args *DnsArgs, opts ...pulumi.ResourceOption) (*Dns, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.NameServers == nil {
		return nil, errors.New("invalid value for required argument 'NameServers'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Dns
	err := ctx.RegisterResource("f5bigip:sys/dns:Dns", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDns gets an existing Dns resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDns(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsState, opts ...pulumi.ResourceOption) (*Dns, error) {
	var resource Dns
	err := ctx.ReadResource("f5bigip:sys/dns:Dns", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dns resources.
type dnsState struct {
	// Provide description for your DNS server
	Description *string `pulumi:"description"`
	// Specifies the name servers that the system uses to validate DNS lookups, and resolve host names.
	NameServers []string `pulumi:"nameServers"`
	// Configures the number of dots needed in a name before an initial absolute query will be made.
	NumberOfDots *int `pulumi:"numberOfDots"`
	// Specifies the domains that the system searches for local domain lookups, to resolve local host names.
	Searches []string `pulumi:"searches"`
}

type DnsState struct {
	// Provide description for your DNS server
	Description pulumi.StringPtrInput
	// Specifies the name servers that the system uses to validate DNS lookups, and resolve host names.
	NameServers pulumi.StringArrayInput
	// Configures the number of dots needed in a name before an initial absolute query will be made.
	NumberOfDots pulumi.IntPtrInput
	// Specifies the domains that the system searches for local domain lookups, to resolve local host names.
	Searches pulumi.StringArrayInput
}

func (DnsState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsState)(nil)).Elem()
}

type dnsArgs struct {
	// Provide description for your DNS server
	Description string `pulumi:"description"`
	// Specifies the name servers that the system uses to validate DNS lookups, and resolve host names.
	NameServers []string `pulumi:"nameServers"`
	// Configures the number of dots needed in a name before an initial absolute query will be made.
	NumberOfDots *int `pulumi:"numberOfDots"`
	// Specifies the domains that the system searches for local domain lookups, to resolve local host names.
	Searches []string `pulumi:"searches"`
}

// The set of arguments for constructing a Dns resource.
type DnsArgs struct {
	// Provide description for your DNS server
	Description pulumi.StringInput
	// Specifies the name servers that the system uses to validate DNS lookups, and resolve host names.
	NameServers pulumi.StringArrayInput
	// Configures the number of dots needed in a name before an initial absolute query will be made.
	NumberOfDots pulumi.IntPtrInput
	// Specifies the domains that the system searches for local domain lookups, to resolve local host names.
	Searches pulumi.StringArrayInput
}

func (DnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsArgs)(nil)).Elem()
}

type DnsInput interface {
	pulumi.Input

	ToDnsOutput() DnsOutput
	ToDnsOutputWithContext(ctx context.Context) DnsOutput
}

func (*Dns) ElementType() reflect.Type {
	return reflect.TypeOf((**Dns)(nil)).Elem()
}

func (i *Dns) ToDnsOutput() DnsOutput {
	return i.ToDnsOutputWithContext(context.Background())
}

func (i *Dns) ToDnsOutputWithContext(ctx context.Context) DnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsOutput)
}

// DnsArrayInput is an input type that accepts DnsArray and DnsArrayOutput values.
// You can construct a concrete instance of `DnsArrayInput` via:
//
//	DnsArray{ DnsArgs{...} }
type DnsArrayInput interface {
	pulumi.Input

	ToDnsArrayOutput() DnsArrayOutput
	ToDnsArrayOutputWithContext(context.Context) DnsArrayOutput
}

type DnsArray []DnsInput

func (DnsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dns)(nil)).Elem()
}

func (i DnsArray) ToDnsArrayOutput() DnsArrayOutput {
	return i.ToDnsArrayOutputWithContext(context.Background())
}

func (i DnsArray) ToDnsArrayOutputWithContext(ctx context.Context) DnsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsArrayOutput)
}

// DnsMapInput is an input type that accepts DnsMap and DnsMapOutput values.
// You can construct a concrete instance of `DnsMapInput` via:
//
//	DnsMap{ "key": DnsArgs{...} }
type DnsMapInput interface {
	pulumi.Input

	ToDnsMapOutput() DnsMapOutput
	ToDnsMapOutputWithContext(context.Context) DnsMapOutput
}

type DnsMap map[string]DnsInput

func (DnsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dns)(nil)).Elem()
}

func (i DnsMap) ToDnsMapOutput() DnsMapOutput {
	return i.ToDnsMapOutputWithContext(context.Background())
}

func (i DnsMap) ToDnsMapOutputWithContext(ctx context.Context) DnsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsMapOutput)
}

type DnsOutput struct{ *pulumi.OutputState }

func (DnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dns)(nil)).Elem()
}

func (o DnsOutput) ToDnsOutput() DnsOutput {
	return o
}

func (o DnsOutput) ToDnsOutputWithContext(ctx context.Context) DnsOutput {
	return o
}

// Provide description for your DNS server
func (o DnsOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Dns) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Specifies the name servers that the system uses to validate DNS lookups, and resolve host names.
func (o DnsOutput) NameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Dns) pulumi.StringArrayOutput { return v.NameServers }).(pulumi.StringArrayOutput)
}

// Configures the number of dots needed in a name before an initial absolute query will be made.
func (o DnsOutput) NumberOfDots() pulumi.IntOutput {
	return o.ApplyT(func(v *Dns) pulumi.IntOutput { return v.NumberOfDots }).(pulumi.IntOutput)
}

// Specifies the domains that the system searches for local domain lookups, to resolve local host names.
func (o DnsOutput) Searches() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Dns) pulumi.StringArrayOutput { return v.Searches }).(pulumi.StringArrayOutput)
}

type DnsArrayOutput struct{ *pulumi.OutputState }

func (DnsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dns)(nil)).Elem()
}

func (o DnsArrayOutput) ToDnsArrayOutput() DnsArrayOutput {
	return o
}

func (o DnsArrayOutput) ToDnsArrayOutputWithContext(ctx context.Context) DnsArrayOutput {
	return o
}

func (o DnsArrayOutput) Index(i pulumi.IntInput) DnsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Dns {
		return vs[0].([]*Dns)[vs[1].(int)]
	}).(DnsOutput)
}

type DnsMapOutput struct{ *pulumi.OutputState }

func (DnsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dns)(nil)).Elem()
}

func (o DnsMapOutput) ToDnsMapOutput() DnsMapOutput {
	return o
}

func (o DnsMapOutput) ToDnsMapOutputWithContext(ctx context.Context) DnsMapOutput {
	return o
}

func (o DnsMapOutput) MapIndex(k pulumi.StringInput) DnsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Dns {
		return vs[0].(map[string]*Dns)[vs[1].(string)]
	}).(DnsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsInput)(nil)).Elem(), &Dns{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsArrayInput)(nil)).Elem(), DnsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsMapInput)(nil)).Elem(), DnsMap{})
	pulumi.RegisterOutputType(DnsOutput{})
	pulumi.RegisterOutputType(DnsArrayOutput{})
	pulumi.RegisterOutputType(DnsMapOutput{})
}
