// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sys

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// `bigip_sys_ntp` provides details about a specific bigip
// 
// This resource is helpful when configuring NTP server on the BIG-IP.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-bigip/blob/master/website/docs/r/sys_ntp.html.markdown.
type Ntp struct {
	s *pulumi.ResourceState
}

// NewNtp registers a new resource with the given unique name, arguments, and options.
func NewNtp(ctx *pulumi.Context,
	name string, args *NtpArgs, opts ...pulumi.ResourceOpt) (*Ntp, error) {
	if args == nil || args.Description == nil {
		return nil, errors.New("missing required argument 'Description'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["servers"] = nil
		inputs["timezone"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["servers"] = args.Servers
		inputs["timezone"] = args.Timezone
	}
	s, err := ctx.RegisterResource("f5bigip:sys/ntp:Ntp", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Ntp{s: s}, nil
}

// GetNtp gets an existing Ntp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNtp(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NtpState, opts ...pulumi.ResourceOpt) (*Ntp, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["servers"] = state.Servers
		inputs["timezone"] = state.Timezone
	}
	s, err := ctx.ReadResource("f5bigip:sys/ntp:Ntp", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Ntp{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Ntp) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Ntp) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Name of the ntp Servers
func (r *Ntp) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// Adds NTP servers to or deletes NTP servers from the BIG-IP system.
func (r *Ntp) Servers() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["servers"])
}

// Specifies the time zone that you want to use for the system time.
func (r *Ntp) Timezone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["timezone"])
}

// Input properties used for looking up and filtering Ntp resources.
type NtpState struct {
	// Name of the ntp Servers
	Description interface{}
	// Adds NTP servers to or deletes NTP servers from the BIG-IP system.
	Servers interface{}
	// Specifies the time zone that you want to use for the system time.
	Timezone interface{}
}

// The set of arguments for constructing a Ntp resource.
type NtpArgs struct {
	// Name of the ntp Servers
	Description interface{}
	// Adds NTP servers to or deletes NTP servers from the BIG-IP system.
	Servers interface{}
	// Specifies the time zone that you want to use for the system time.
	Timezone interface{}
}
