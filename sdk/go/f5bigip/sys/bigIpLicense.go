// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sys

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type BigIpLicense struct {
	s *pulumi.ResourceState
}

// NewBigIpLicense registers a new resource with the given unique name, arguments, and options.
func NewBigIpLicense(ctx *pulumi.Context,
	name string, args *BigIpLicenseArgs, opts ...pulumi.ResourceOpt) (*BigIpLicense, error) {
	if args == nil || args.Command == nil {
		return nil, errors.New("missing required argument 'Command'")
	}
	if args == nil || args.RegistrationKey == nil {
		return nil, errors.New("missing required argument 'RegistrationKey'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["command"] = nil
		inputs["registrationKey"] = nil
	} else {
		inputs["command"] = args.Command
		inputs["registrationKey"] = args.RegistrationKey
	}
	s, err := ctx.RegisterResource("f5bigip:sys/bigIpLicense:BigIpLicense", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &BigIpLicense{s: s}, nil
}

// GetBigIpLicense gets an existing BigIpLicense resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBigIpLicense(ctx *pulumi.Context,
	name string, id pulumi.ID, state *BigIpLicenseState, opts ...pulumi.ResourceOpt) (*BigIpLicense, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["command"] = state.Command
		inputs["registrationKey"] = state.RegistrationKey
	}
	s, err := ctx.ReadResource("f5bigip:sys/bigIpLicense:BigIpLicense", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &BigIpLicense{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *BigIpLicense) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *BigIpLicense) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Tmsh command to execute tmsh commands like install
func (r *BigIpLicense) Command() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["command"])
}

// A unique Key F5 provides for Licensing BIG-IP
func (r *BigIpLicense) RegistrationKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["registrationKey"])
}

// Input properties used for looking up and filtering BigIpLicense resources.
type BigIpLicenseState struct {
	// Tmsh command to execute tmsh commands like install
	Command interface{}
	// A unique Key F5 provides for Licensing BIG-IP
	RegistrationKey interface{}
}

// The set of arguments for constructing a BigIpLicense resource.
type BigIpLicenseArgs struct {
	// Tmsh command to execute tmsh commands like install
	Command interface{}
	// A unique Key F5 provides for Licensing BIG-IP
	RegistrationKey interface{}
}
