// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sys

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// `sys.SnmpTraps` provides details bout how to enable snmpTraps resource on BIG-IP
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-bigip/blob/master/website/docs/r/sys_snmp_traps.html.markdown.
type SnmpTraps struct {
	s *pulumi.ResourceState
}

// NewSnmpTraps registers a new resource with the given unique name, arguments, and options.
func NewSnmpTraps(ctx *pulumi.Context,
	name string, args *SnmpTrapsArgs, opts ...pulumi.ResourceOpt) (*SnmpTraps, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["authPasswordencrypted"] = nil
		inputs["authProtocol"] = nil
		inputs["community"] = nil
		inputs["description"] = nil
		inputs["engineId"] = nil
		inputs["host"] = nil
		inputs["name"] = nil
		inputs["port"] = nil
		inputs["privacyPassword"] = nil
		inputs["privacyPasswordEncrypted"] = nil
		inputs["privacyProtocol"] = nil
		inputs["securityLevel"] = nil
		inputs["securityName"] = nil
		inputs["version"] = nil
	} else {
		inputs["authPasswordencrypted"] = args.AuthPasswordencrypted
		inputs["authProtocol"] = args.AuthProtocol
		inputs["community"] = args.Community
		inputs["description"] = args.Description
		inputs["engineId"] = args.EngineId
		inputs["host"] = args.Host
		inputs["name"] = args.Name
		inputs["port"] = args.Port
		inputs["privacyPassword"] = args.PrivacyPassword
		inputs["privacyPasswordEncrypted"] = args.PrivacyPasswordEncrypted
		inputs["privacyProtocol"] = args.PrivacyProtocol
		inputs["securityLevel"] = args.SecurityLevel
		inputs["securityName"] = args.SecurityName
		inputs["version"] = args.Version
	}
	s, err := ctx.RegisterResource("f5bigip:sys/snmpTraps:SnmpTraps", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SnmpTraps{s: s}, nil
}

// GetSnmpTraps gets an existing SnmpTraps resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnmpTraps(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SnmpTrapsState, opts ...pulumi.ResourceOpt) (*SnmpTraps, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["authPasswordencrypted"] = state.AuthPasswordencrypted
		inputs["authProtocol"] = state.AuthProtocol
		inputs["community"] = state.Community
		inputs["description"] = state.Description
		inputs["engineId"] = state.EngineId
		inputs["host"] = state.Host
		inputs["name"] = state.Name
		inputs["port"] = state.Port
		inputs["privacyPassword"] = state.PrivacyPassword
		inputs["privacyPasswordEncrypted"] = state.PrivacyPasswordEncrypted
		inputs["privacyProtocol"] = state.PrivacyProtocol
		inputs["securityLevel"] = state.SecurityLevel
		inputs["securityName"] = state.SecurityName
		inputs["version"] = state.Version
	}
	s, err := ctx.ReadResource("f5bigip:sys/snmpTraps:SnmpTraps", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SnmpTraps{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SnmpTraps) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SnmpTraps) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Encrypted password
func (r *SnmpTraps) AuthPasswordencrypted() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["authPasswordencrypted"])
}

// Specifies the protocol used to authenticate the user.
func (r *SnmpTraps) AuthProtocol() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["authProtocol"])
}

// Specifies the community string used for this trap.
func (r *SnmpTraps) Community() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["community"])
}

// The port that the trap will be sent to.
func (r *SnmpTraps) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// Specifies the authoritative security engine for SNMPv3.
func (r *SnmpTraps) EngineId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["engineId"])
}

// The host the trap will be sent to.
func (r *SnmpTraps) Host() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["host"])
}

// Name of the snmp trap.
func (r *SnmpTraps) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// User defined description.
func (r *SnmpTraps) Port() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["port"])
}

// Specifies the clear text password used to encrypt traffic. This field will not be displayed.
func (r *SnmpTraps) PrivacyPassword() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["privacyPassword"])
}

// Specifies the encrypted password used to encrypt traffic.
func (r *SnmpTraps) PrivacyPasswordEncrypted() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["privacyPasswordEncrypted"])
}

// Specifies the protocol used to encrypt traffic.
func (r *SnmpTraps) PrivacyProtocol() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["privacyProtocol"])
}

// Specifies whether or not traffic is encrypted and whether or not authentication is required.
func (r *SnmpTraps) SecurityLevel() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["securityLevel"])
}

// Security name used in conjunction with SNMPv3.
func (r *SnmpTraps) SecurityName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["securityName"])
}

// SNMP version used for sending the trap.
func (r *SnmpTraps) Version() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["version"])
}

// Input properties used for looking up and filtering SnmpTraps resources.
type SnmpTrapsState struct {
	// Encrypted password
	AuthPasswordencrypted interface{}
	// Specifies the protocol used to authenticate the user.
	AuthProtocol interface{}
	// Specifies the community string used for this trap.
	Community interface{}
	// The port that the trap will be sent to.
	Description interface{}
	// Specifies the authoritative security engine for SNMPv3.
	EngineId interface{}
	// The host the trap will be sent to.
	Host interface{}
	// Name of the snmp trap.
	Name interface{}
	// User defined description.
	Port interface{}
	// Specifies the clear text password used to encrypt traffic. This field will not be displayed.
	PrivacyPassword interface{}
	// Specifies the encrypted password used to encrypt traffic.
	PrivacyPasswordEncrypted interface{}
	// Specifies the protocol used to encrypt traffic.
	PrivacyProtocol interface{}
	// Specifies whether or not traffic is encrypted and whether or not authentication is required.
	SecurityLevel interface{}
	// Security name used in conjunction with SNMPv3.
	SecurityName interface{}
	// SNMP version used for sending the trap.
	Version interface{}
}

// The set of arguments for constructing a SnmpTraps resource.
type SnmpTrapsArgs struct {
	// Encrypted password
	AuthPasswordencrypted interface{}
	// Specifies the protocol used to authenticate the user.
	AuthProtocol interface{}
	// Specifies the community string used for this trap.
	Community interface{}
	// The port that the trap will be sent to.
	Description interface{}
	// Specifies the authoritative security engine for SNMPv3.
	EngineId interface{}
	// The host the trap will be sent to.
	Host interface{}
	// Name of the snmp trap.
	Name interface{}
	// User defined description.
	Port interface{}
	// Specifies the clear text password used to encrypt traffic. This field will not be displayed.
	PrivacyPassword interface{}
	// Specifies the encrypted password used to encrypt traffic.
	PrivacyPasswordEncrypted interface{}
	// Specifies the protocol used to encrypt traffic.
	PrivacyProtocol interface{}
	// Specifies whether or not traffic is encrypted and whether or not authentication is required.
	SecurityLevel interface{}
	// Security name used in conjunction with SNMPv3.
	SecurityName interface{}
	// SNMP version used for sending the trap.
	Version interface{}
}
