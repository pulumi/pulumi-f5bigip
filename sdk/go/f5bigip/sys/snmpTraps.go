// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package sys

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// `sys.SnmpTraps` provides details bout how to enable snmpTraps resource on BIG-IP
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-bigip/blob/master/website/docs/r/bigip_sys_snmp_traps.html.markdown.
type SnmpTraps struct {
	pulumi.CustomResourceState

	// Encrypted password
	AuthPasswordencrypted pulumi.StringPtrOutput `pulumi:"authPasswordencrypted"`
	// Specifies the protocol used to authenticate the user.
	AuthProtocol pulumi.StringPtrOutput `pulumi:"authProtocol"`
	// Specifies the community string used for this trap.
	Community pulumi.StringPtrOutput `pulumi:"community"`
	// The port that the trap will be sent to.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the authoritative security engine for SNMPv3.
	EngineId pulumi.StringPtrOutput `pulumi:"engineId"`
	// The host the trap will be sent to.
	Host pulumi.StringPtrOutput `pulumi:"host"`
	// Name of the snmp trap.
	Name pulumi.StringPtrOutput `pulumi:"name"`
	// User defined description.
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// Specifies the clear text password used to encrypt traffic. This field will not be displayed.
	PrivacyPassword pulumi.StringPtrOutput `pulumi:"privacyPassword"`
	// Specifies the encrypted password used to encrypt traffic.
	PrivacyPasswordEncrypted pulumi.StringPtrOutput `pulumi:"privacyPasswordEncrypted"`
	// Specifies the protocol used to encrypt traffic.
	PrivacyProtocol pulumi.StringPtrOutput `pulumi:"privacyProtocol"`
	// Specifies whether or not traffic is encrypted and whether or not authentication is required.
	SecurityLevel pulumi.StringPtrOutput `pulumi:"securityLevel"`
	// Security name used in conjunction with SNMPv3.
	SecurityName pulumi.StringPtrOutput `pulumi:"securityName"`
	// SNMP version used for sending the trap.
	Version pulumi.StringPtrOutput `pulumi:"version"`
}

// NewSnmpTraps registers a new resource with the given unique name, arguments, and options.
func NewSnmpTraps(ctx *pulumi.Context,
	name string, args *SnmpTrapsArgs, opts ...pulumi.ResourceOption) (*SnmpTraps, error) {
	if args == nil {
		args = &SnmpTrapsArgs{}
	}
	var resource SnmpTraps
	err := ctx.RegisterResource("f5bigip:sys/snmpTraps:SnmpTraps", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnmpTraps gets an existing SnmpTraps resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnmpTraps(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnmpTrapsState, opts ...pulumi.ResourceOption) (*SnmpTraps, error) {
	var resource SnmpTraps
	err := ctx.ReadResource("f5bigip:sys/snmpTraps:SnmpTraps", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnmpTraps resources.
type snmpTrapsState struct {
	// Encrypted password
	AuthPasswordencrypted *string `pulumi:"authPasswordencrypted"`
	// Specifies the protocol used to authenticate the user.
	AuthProtocol *string `pulumi:"authProtocol"`
	// Specifies the community string used for this trap.
	Community *string `pulumi:"community"`
	// The port that the trap will be sent to.
	Description *string `pulumi:"description"`
	// Specifies the authoritative security engine for SNMPv3.
	EngineId *string `pulumi:"engineId"`
	// The host the trap will be sent to.
	Host *string `pulumi:"host"`
	// Name of the snmp trap.
	Name *string `pulumi:"name"`
	// User defined description.
	Port *int `pulumi:"port"`
	// Specifies the clear text password used to encrypt traffic. This field will not be displayed.
	PrivacyPassword *string `pulumi:"privacyPassword"`
	// Specifies the encrypted password used to encrypt traffic.
	PrivacyPasswordEncrypted *string `pulumi:"privacyPasswordEncrypted"`
	// Specifies the protocol used to encrypt traffic.
	PrivacyProtocol *string `pulumi:"privacyProtocol"`
	// Specifies whether or not traffic is encrypted and whether or not authentication is required.
	SecurityLevel *string `pulumi:"securityLevel"`
	// Security name used in conjunction with SNMPv3.
	SecurityName *string `pulumi:"securityName"`
	// SNMP version used for sending the trap.
	Version *string `pulumi:"version"`
}

type SnmpTrapsState struct {
	// Encrypted password
	AuthPasswordencrypted pulumi.StringPtrInput
	// Specifies the protocol used to authenticate the user.
	AuthProtocol pulumi.StringPtrInput
	// Specifies the community string used for this trap.
	Community pulumi.StringPtrInput
	// The port that the trap will be sent to.
	Description pulumi.StringPtrInput
	// Specifies the authoritative security engine for SNMPv3.
	EngineId pulumi.StringPtrInput
	// The host the trap will be sent to.
	Host pulumi.StringPtrInput
	// Name of the snmp trap.
	Name pulumi.StringPtrInput
	// User defined description.
	Port pulumi.IntPtrInput
	// Specifies the clear text password used to encrypt traffic. This field will not be displayed.
	PrivacyPassword pulumi.StringPtrInput
	// Specifies the encrypted password used to encrypt traffic.
	PrivacyPasswordEncrypted pulumi.StringPtrInput
	// Specifies the protocol used to encrypt traffic.
	PrivacyProtocol pulumi.StringPtrInput
	// Specifies whether or not traffic is encrypted and whether or not authentication is required.
	SecurityLevel pulumi.StringPtrInput
	// Security name used in conjunction with SNMPv3.
	SecurityName pulumi.StringPtrInput
	// SNMP version used for sending the trap.
	Version pulumi.StringPtrInput
}

func (SnmpTrapsState) ElementType() reflect.Type {
	return reflect.TypeOf((*snmpTrapsState)(nil)).Elem()
}

type snmpTrapsArgs struct {
	// Encrypted password
	AuthPasswordencrypted *string `pulumi:"authPasswordencrypted"`
	// Specifies the protocol used to authenticate the user.
	AuthProtocol *string `pulumi:"authProtocol"`
	// Specifies the community string used for this trap.
	Community *string `pulumi:"community"`
	// The port that the trap will be sent to.
	Description *string `pulumi:"description"`
	// Specifies the authoritative security engine for SNMPv3.
	EngineId *string `pulumi:"engineId"`
	// The host the trap will be sent to.
	Host *string `pulumi:"host"`
	// Name of the snmp trap.
	Name *string `pulumi:"name"`
	// User defined description.
	Port *int `pulumi:"port"`
	// Specifies the clear text password used to encrypt traffic. This field will not be displayed.
	PrivacyPassword *string `pulumi:"privacyPassword"`
	// Specifies the encrypted password used to encrypt traffic.
	PrivacyPasswordEncrypted *string `pulumi:"privacyPasswordEncrypted"`
	// Specifies the protocol used to encrypt traffic.
	PrivacyProtocol *string `pulumi:"privacyProtocol"`
	// Specifies whether or not traffic is encrypted and whether or not authentication is required.
	SecurityLevel *string `pulumi:"securityLevel"`
	// Security name used in conjunction with SNMPv3.
	SecurityName *string `pulumi:"securityName"`
	// SNMP version used for sending the trap.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a SnmpTraps resource.
type SnmpTrapsArgs struct {
	// Encrypted password
	AuthPasswordencrypted pulumi.StringPtrInput
	// Specifies the protocol used to authenticate the user.
	AuthProtocol pulumi.StringPtrInput
	// Specifies the community string used for this trap.
	Community pulumi.StringPtrInput
	// The port that the trap will be sent to.
	Description pulumi.StringPtrInput
	// Specifies the authoritative security engine for SNMPv3.
	EngineId pulumi.StringPtrInput
	// The host the trap will be sent to.
	Host pulumi.StringPtrInput
	// Name of the snmp trap.
	Name pulumi.StringPtrInput
	// User defined description.
	Port pulumi.IntPtrInput
	// Specifies the clear text password used to encrypt traffic. This field will not be displayed.
	PrivacyPassword pulumi.StringPtrInput
	// Specifies the encrypted password used to encrypt traffic.
	PrivacyPasswordEncrypted pulumi.StringPtrInput
	// Specifies the protocol used to encrypt traffic.
	PrivacyProtocol pulumi.StringPtrInput
	// Specifies whether or not traffic is encrypted and whether or not authentication is required.
	SecurityLevel pulumi.StringPtrInput
	// Security name used in conjunction with SNMPv3.
	SecurityName pulumi.StringPtrInput
	// SNMP version used for sending the trap.
	Version pulumi.StringPtrInput
}

func (SnmpTrapsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snmpTrapsArgs)(nil)).Elem()
}
