// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sys

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// `bigip_sys_iapp` resource helps you to deploy Application Services template that can be used to automate and orchestrate Layer 4-7 applications service deployments using F5 Network. More information on iApp 2.0 is at https://devcentral.f5.com/wiki/iApp.AppSvcsiApp_userguide_userguide.ashx This resource requires a iApp template already imported on BIG-IP, the template can be found at https://github.com/F5Networks/f5-application-services-integration-iApp/releases/download/v2.0.003/appsvcs_integration_v2.0.003.tmpl
// 
// ## Example Usage of Json file
// 
// {
//  "name":"policywaf",
//   "partition": "Common",
//   "inheritedDevicegroup": "true",
//   "inheritedTrafficGroup": "true",
//   "strictUpdates": "enabled",
//   "template": "/Common/appsvcs_integration_v2.0.003",
//   "execute-action": "definition",
//         "tables": [{
//                         "name": "feature__easyL4FirewallBlacklist",
//                         "columnNames": [
//                                 "CIDRRange"
//                         ],
//                         "rows": [
// 
//                         ]
//                 },
//                 {
//                         "name": "feature__easyL4FirewallSourceList",
//                         "columnNames": [
//                                 "CIDRRange"
//                         ],
//                         "rows": [{
//                                 "row": [
//                                         "0.0.0.0/0"
//                                 ]
//                         }]
//                 },
//                 {
//                         "name": "l7policy__rulesAction",
//                         "columnNames": [
//                                 "Group",
//                                 "Target",
//                                 "Parameter"
//                         ],
//                         "rows": [
//                                 {"row": ["0", "asm/request/enable/policy", "/Common/Demo"]},
//                                 {"row": ["0", "forward/request/select/pool", "pool:0"]},
//                                 {"row": ["default", "forward/request/select/pool", "pool:0"]}
//                         ]
//                 },
//                 {
//                         "name": "l7policy__rulesMatch",
//                         "columnNames": [
//                                 "Group",
//                                 "Operand",
//                                 "Negate",
//                                 "Condition",
//                                 "Value",
//                                 "CaseSensitive",
//                                 "Missing"
//                         ],
//                         "rows": [
//                                 {"row": ["0","http-uri/request/path","no","equals","/","no","no"]},
//                                 {"row": ["default","","no","equals","","no","no"]}
//                         ]
//                 },
//                 {
//                         "name": "monitor__Monitors",
//                         "columnNames": [
//                                 "Index",
//                                 "Name",
//                                 "Type",
//                                 "Options"
//                         ],
//                         "rows": [{
//                                 "row": [
//                                         "0",
//                                         "/Common/http",
//                                         "none",
//                                         "none"
//                                 ]
//                         }]
//                 },
//                 {
//                         "name": "pool__Members",
//                         "columnNames": [
//                                 "Index",
//                                 "IPAddress",
//                                 "Port",
//                                 "ConnectionLimit",
//                                 "Ratio",
//                                 "PriorityGroup",
//                                 "State",
//                                 "AdvOptions"
//                         ],
//                         "rows": [
//                                 {"row": ["0","192.168.69.140","80","0","1","0","enabled","none"]},
//                                 {"row": ["0","192.168.69.141","80","0","1","0","enabled","none"]},
//                                 {"row": ["0","192.168.68.142","80","0","1","0","enabled","none"]},
//                                 {"row": ["0","192.168.68.143","80","0","1","0","enabled","none"]},
//                                 {"row": ["0","192.168.68.144","80","0","1","0","enabled","none"]}
//                         ]
//                 },
//                 {
//                         "name": "pool__Pools",
//                         "columnNames": [
//                                 "Index",
//                                 "Name",
//                                 "Description",
//                                 "LbMethod",
//                                 "Monitor",
//                                 "AdvOptions"
//                         ],
//                         "rows": [{
//                                 "row": [
//                                         "0",
//                                         "",
//                                         "",
//                                         "round-robin",
//                                         "0",
//                                         "none"
//                                 ]
//                         }]
//                 },
//                 {
//                         "name": "vs__BundledItems",
//                         "columnNames": [
//                                 "Resource"
//                         ],
//                         "rows": [
// 
//                         ]
//                 },
//                 {
//                         "name": "vs__Listeners",
//                         "columnNames": [
//                                 "Listener",
//                                 "Destination"
//                         ],
//                         "rows": [
// 
//                         ]
//                 }
//         ],
//         "variables": [{
//                         "name": "extensions__Field1",
//                         "value": "",
//                         "encrypted": "no"
//                 },
//                 {
//                         "name": "extensions__Field2",
//                         "value": "",
//                         "encrypted": "no"
//                 },
//                 {
//                         "name": "extensions__Field3",
//                         "value": "",
//                         "encrypted": "no"
//                 },
//                 {
//                         "name": "feature__easyL4Firewall",
//                         "encrypted": "no",
//                         "value": "auto"
//                 },
//                 {
//                         "name": "feature__insertXForwardedFor",
//                         "encrypted": "no",
//                         "value": "auto"
//                 },
//                 {
//                         "name": "feature__redirectToHTTPS",
//                         "encrypted": "no",
//                         "value": "auto"
//                 },
//                 {
//                         "name": "feature__securityEnableHSTS",
//                         "encrypted": "no",
//                         "value": "disabled"
//                 },
//                 {
//                         "name": "feature__sslEasyCipher",
//                         "encrypted": "no",
//                         "value": "disabled"
//                 },
//                 {
//                         "name": "feature__statsHTTP",
//                         "encrypted": "no",
//                         "value": "auto"
//                 },
//                 {
//                         "name": "feature__statsTLS",
//                         "encrypted": "no",
//                         "value": "auto"
//                 },
//                 {
//                         "name": "iapp__apmDeployMode",
//                         "encrypted": "no",
//                         "value": "preserve-bypass"
//                 },
//                 {
//                         "name": "iapp__appStats",
//                         "encrypted": "no",
//                         "value": "enabled"
//                 },
//                 {
//                         "name": "iapp__asmDeployMode",
//                         "encrypted": "no",
//                         "value": "preserve-bypass"
//                 },
//                 {
//                         "name": "iapp__logLevel",
//                         "encrypted": "no",
//                         "value": "7"
//                 },
//                 {
//                         "name": "iapp__mode",
//                         "encrypted": "no",
//                         "value": "auto"
//                 },
//                 {
//                         "name": "iapp__routeDomain",
//                         "encrypted": "no",
//                         "value": "auto"
//                 },
//                 {
//                         "name": "iapp__strictUpdates",
//                         "encrypted": "no",
//                         "value": "enabled"
//                 },
//                 {
//                         "name": "l7policy__defaultASM",
//                         "encrypted": "no",
//                         "value": "bypass"
//                 },
//                 {
//                         "name": "l7policy__defaultL7DOS",
//                         "encrypted": "no",
//                         "value": "bypass"
//                 },
//                 {
//                         "name": "l7policy__strategy",
//                         "encrypted": "no",
//                         "value": "/Common/first-match"
//                 },
//                 {
//                         "name": "pool__DefaultPoolIndex",
//                         "encrypted": "no",
//                         "value": "0"
//                 },
//                 {
//                         "name": "pool__MemberDefaultPort",
//                         "value": "",
//                         "encrypted": "no"
//                 },
//                 {
//                         "name": "pool__addr",
//                         "encrypted": "no",
//                         "value": "10.168.68.100"
//                 },
//                 {
//                         "name": "pool__mask",
//                         "encrypted": "no",
//                         "value": "255.255.255.255"
//                 },
//                 {
//                         "name": "pool__port",
//                         "encrypted": "no",
//                         "value": "80"
//                 },
//                 {
//                         "name": "vs__AdvOptions",
//                         "value": "",
//                         "encrypted": "no"
//                 },
//                 {
//                         "name": "vs__AdvPolicies",
//                         "value": "",
//                         "encrypted": "no"
//                 },
//                 {
//                         "name": "vs__AdvProfiles",
//                         "value": "/Common/websecurity",
//                         "encrypted": "no"
//                 },
//                 {
//                         "name": "vs__ConnectionLimit",
//                         "encrypted": "no",
//                         "value": "0"
//                 },
//                 {
//                         "name": "vs__Description",
//                         "value": "",
//                         "encrypted": "no"
//                 },
//                 {
//                         "name": "vs__IpProtocol",
//                         "encrypted": "no",
//                         "value": "tcp"
//                 },
//                 {
//                         "name": "vs__Irules",
//                         "value": "",
//                         "encrypted": "no"
//                 },
//                 {
//                         "name": "vs__Name",
//                         "encrypted": "no",
//                         "value": "VS_80"
//                 },
//                 {
//                         "name": "vs__OptionConnectionMirroring",
//                         "encrypted": "no",
//                         "value": "disabled"
//                 },
//                 {
//                         "name": "vs__OptionSourcePort",
//                         "encrypted": "no",
//                         "value": "preserve"
//                 },
//                 {
//                         "name": "vs__ProfileAccess",
//                         "value": "",
//                         "encrypted": "no"
//                 },
//                 {
//                         "name": "vs__ProfileAnalytics",
//                         "value": "",
//                         "encrypted": "no"
//                 },
//                 {
//                         "name": "vs__ProfileClientProtocol",
//                         "encrypted": "no",
//                         "value": "/Common/tcp"
//                 },
//                 {
//                         "name": "vs__ProfileClientSSL",
//                         "value": "",
//                         "encrypted": "no"
//                 },
//                 {
//                         "name": "vs__ProfileClientSSLAdvOptions",
//                         "value": "",
//                         "encrypted": "no"
//                 },
//                 {
//                         "name": "vs__ProfileClientSSLCert",
//                         "value": "",
//                         "encrypted": "no"
//                 },
//                 {
//                         "name": "vs__ProfileClientSSLChain",
//                         "value": "",
//                         "encrypted": "no"
//                 },
//                 {
//                         "name": "vs__ProfileClientSSLCipherString",
//                         "encrypted": "no",
//                         "value": "DEFAULT"
//                 },
//                 {
//                         "name": "vs__ProfileClientSSLKey",
//                         "value": "",
//                         "encrypted": "no"
//                 },
//                 {
//                         "name": "vs__ProfileCompression",
//                         "value": "",
//                         "encrypted": "no"
//                 },
//                 {
//                         "name": "vs__ProfileConnectivity",
//                         "value": "",
//                         "encrypted": "no"
//                 },
//                 {
//                         "name": "vs__ProfileDefaultPersist",
//                         "value": "",
//                         "encrypted": "no"
//                 },
//                 {
//                         "name": "vs__ProfileFallbackPersist",
//                         "value": "",
//                         "encrypted": "no"
//                 },
//                 {
//                         "name": "vs__ProfileHTTP",
//                         "value": "/Common/http",
//                         "encrypted": "no"
//                 },
//                 {
//                         "name": "vs__ProfileOneConnect",
//                         "value": "",
//                         "encrypted": "no"
//                 },
//                 {
//                         "name": "vs__ProfilePerRequest",
//                         "value": "",
//                         "encrypted": "no"
//                 },
//                 {
//                         "name": "vs__ProfileRequestLogging",
//                         "value": "",
//                         "encrypted": "no"
//                 },
//                 {
//                         "name": "vs__ProfileSecurityDoS",
//                         "value": "",
//                         "encrypted": "no"
//                 },
//                 {
//                         "name": "vs__ProfileSecurityIPBlacklist",
//                         "encrypted": "no",
//                         "value": "none"
//                 },
//                 {
//                         "name": "vs__ProfileSecurityLogProfiles",
//                         "value": "",
//                         "encrypted": "no"
//                 },
//                 {
//                         "name": "vs__ProfileServerProtocol",
//                         "value": "",
//                         "encrypted": "no"
//                 },
//                 {
//                         "name": "vs__ProfileServerSSL",
//                         "value": "",
//                         "encrypted": "no"
//                 },
//                 {
//                         "name": "vs__RouteAdv",
//                         "encrypted": "no",
//                         "value": "disabled"
//                 },
//                 {
//                         "name": "vs__SNATConfig",
//                         "encrypted": "no",
//                         "value": "automap"
//                 },
//                 {
//                         "name": "vs__SourceAddress",
//                         "encrypted": "no",
//                         "value": "0.0.0.0/0"
//                 },
//                 {
//                         "name": "vs__VirtualAddrAdvOptions",
//                         "value": "",
//                         "encrypted": "no"
//                 }
//         ]
// }
// 
// 
//  * `description` - User defined description.
//  * `deviceGroup` - The name of the device group that the application service is assigned to.
//  * `executeAction` - Run the specified template action associated with the application.
//  * `inheritedDevicegroup`- Read-only. Shows whether the application folder will automatically remain with the same device-group as its parent folder. Use 'device-group default' or 'device-group non-default' to set this.
//  * `inheritedTrafficGroup` - Read-only. Shows whether the application folder will automatically remain with the same traffic-group as its parent folder. Use 'traffic-group default' or 'traffic-group non-default' to set this.
//  * `partition` - Displays the administrative partition within which the application resides.
//  * `strictUpdates` - Specifies whether configuration objects contained in the application may be directly modified, outside the context of the system's application management interfaces.
//  * `template` - The template defines the configuration for the application. This may be changed after the application has been created to move the application to a new template.
//  * `templateModified` - Indicates that the application template used to deploy the application has been modified. The application should be updated to make use of the latest changes.
//  * `templatePrerequisiteErrors` - Indicates any missing prerequisites associated with the template that defines this application.
//  * `trafficGroup` - The name of the traffic group that the application service is assigned to.
//  * `lists` - string values
//  * `metadata` - User defined generic data for the application service. It is a name and value pair.
//  * `tables` - Values provided like pool name, nodes etc.
//  * `variables` - Name, values, encrypted or not
type IApp struct {
	s *pulumi.ResourceState
}

// NewIApp registers a new resource with the given unique name, arguments, and options.
func NewIApp(ctx *pulumi.Context,
	name string, args *IAppArgs, opts ...pulumi.ResourceOpt) (*IApp, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["devicegroup"] = nil
		inputs["executeAction"] = nil
		inputs["inheritedDevicegroup"] = nil
		inputs["inheritedTrafficGroup"] = nil
		inputs["jsonfile"] = nil
		inputs["lists"] = nil
		inputs["metadatas"] = nil
		inputs["name"] = nil
		inputs["partition"] = nil
		inputs["strictUpdates"] = nil
		inputs["tables"] = nil
		inputs["template"] = nil
		inputs["templateModified"] = nil
		inputs["templatePrerequisiteErrors"] = nil
		inputs["trafficGroup"] = nil
		inputs["variables"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["devicegroup"] = args.Devicegroup
		inputs["executeAction"] = args.ExecuteAction
		inputs["inheritedDevicegroup"] = args.InheritedDevicegroup
		inputs["inheritedTrafficGroup"] = args.InheritedTrafficGroup
		inputs["jsonfile"] = args.Jsonfile
		inputs["lists"] = args.Lists
		inputs["metadatas"] = args.Metadatas
		inputs["name"] = args.Name
		inputs["partition"] = args.Partition
		inputs["strictUpdates"] = args.StrictUpdates
		inputs["tables"] = args.Tables
		inputs["template"] = args.Template
		inputs["templateModified"] = args.TemplateModified
		inputs["templatePrerequisiteErrors"] = args.TemplatePrerequisiteErrors
		inputs["trafficGroup"] = args.TrafficGroup
		inputs["variables"] = args.Variables
	}
	s, err := ctx.RegisterResource("f5bigip:sys/iApp:IApp", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &IApp{s: s}, nil
}

// GetIApp gets an existing IApp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIApp(ctx *pulumi.Context,
	name string, id pulumi.ID, state *IAppState, opts ...pulumi.ResourceOpt) (*IApp, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["devicegroup"] = state.Devicegroup
		inputs["executeAction"] = state.ExecuteAction
		inputs["inheritedDevicegroup"] = state.InheritedDevicegroup
		inputs["inheritedTrafficGroup"] = state.InheritedTrafficGroup
		inputs["jsonfile"] = state.Jsonfile
		inputs["lists"] = state.Lists
		inputs["metadatas"] = state.Metadatas
		inputs["name"] = state.Name
		inputs["partition"] = state.Partition
		inputs["strictUpdates"] = state.StrictUpdates
		inputs["tables"] = state.Tables
		inputs["template"] = state.Template
		inputs["templateModified"] = state.TemplateModified
		inputs["templatePrerequisiteErrors"] = state.TemplatePrerequisiteErrors
		inputs["trafficGroup"] = state.TrafficGroup
		inputs["variables"] = state.Variables
	}
	s, err := ctx.ReadResource("f5bigip:sys/iApp:IApp", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &IApp{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *IApp) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *IApp) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Address of the Iapp which needs to be Iappensed
func (r *IApp) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// BIG-IP password
func (r *IApp) Devicegroup() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["devicegroup"])
}

// BIG-IP password
func (r *IApp) ExecuteAction() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["executeAction"])
}

// BIG-IP password
func (r *IApp) InheritedDevicegroup() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["inheritedDevicegroup"])
}

// BIG-IP password
func (r *IApp) InheritedTrafficGroup() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["inheritedTrafficGroup"])
}

// Refer to the Json file which will be deployed on F5 BIG-IP.
func (r *IApp) Jsonfile() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["jsonfile"])
}

func (r *IApp) Lists() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["lists"])
}

func (r *IApp) Metadatas() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["metadatas"])
}

// Name of the iApp.
func (r *IApp) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Address of the Iapp which needs to be Iappensed
func (r *IApp) Partition() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["partition"])
}

// BIG-IP password
func (r *IApp) StrictUpdates() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["strictUpdates"])
}

func (r *IApp) Tables() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["tables"])
}

// BIG-IP password
func (r *IApp) Template() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["template"])
}

// BIG-IP password
func (r *IApp) TemplateModified() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["templateModified"])
}

// BIG-IP password
func (r *IApp) TemplatePrerequisiteErrors() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["templatePrerequisiteErrors"])
}

// BIG-IP password
func (r *IApp) TrafficGroup() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["trafficGroup"])
}

func (r *IApp) Variables() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["variables"])
}

// Input properties used for looking up and filtering IApp resources.
type IAppState struct {
	// Address of the Iapp which needs to be Iappensed
	Description interface{}
	// BIG-IP password
	Devicegroup interface{}
	// BIG-IP password
	ExecuteAction interface{}
	// BIG-IP password
	InheritedDevicegroup interface{}
	// BIG-IP password
	InheritedTrafficGroup interface{}
	// Refer to the Json file which will be deployed on F5 BIG-IP.
	Jsonfile interface{}
	Lists interface{}
	Metadatas interface{}
	// Name of the iApp.
	Name interface{}
	// Address of the Iapp which needs to be Iappensed
	Partition interface{}
	// BIG-IP password
	StrictUpdates interface{}
	Tables interface{}
	// BIG-IP password
	Template interface{}
	// BIG-IP password
	TemplateModified interface{}
	// BIG-IP password
	TemplatePrerequisiteErrors interface{}
	// BIG-IP password
	TrafficGroup interface{}
	Variables interface{}
}

// The set of arguments for constructing a IApp resource.
type IAppArgs struct {
	// Address of the Iapp which needs to be Iappensed
	Description interface{}
	// BIG-IP password
	Devicegroup interface{}
	// BIG-IP password
	ExecuteAction interface{}
	// BIG-IP password
	InheritedDevicegroup interface{}
	// BIG-IP password
	InheritedTrafficGroup interface{}
	// Refer to the Json file which will be deployed on F5 BIG-IP.
	Jsonfile interface{}
	Lists interface{}
	Metadatas interface{}
	// Name of the iApp.
	Name interface{}
	// Address of the Iapp which needs to be Iappensed
	Partition interface{}
	// BIG-IP password
	StrictUpdates interface{}
	Tables interface{}
	// BIG-IP password
	Template interface{}
	// BIG-IP password
	TemplateModified interface{}
	// BIG-IP password
	TemplatePrerequisiteErrors interface{}
	// BIG-IP password
	TrafficGroup interface{}
	Variables interface{}
}
