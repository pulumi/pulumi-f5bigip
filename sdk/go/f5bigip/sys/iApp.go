// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sys

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// `sys.IApp` resource helps you to deploy Application Services template that can be used to automate and orchestrate Layer 4-7 applications service deployments using F5 Network.  
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-bigip/blob/master/website/docs/r/sys_iapp.html.markdown.
type IApp struct {
	s *pulumi.ResourceState
}

// NewIApp registers a new resource with the given unique name, arguments, and options.
func NewIApp(ctx *pulumi.Context,
	name string, args *IAppArgs, opts ...pulumi.ResourceOpt) (*IApp, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["devicegroup"] = nil
		inputs["executeAction"] = nil
		inputs["inheritedDevicegroup"] = nil
		inputs["inheritedTrafficGroup"] = nil
		inputs["jsonfile"] = nil
		inputs["lists"] = nil
		inputs["metadatas"] = nil
		inputs["name"] = nil
		inputs["partition"] = nil
		inputs["strictUpdates"] = nil
		inputs["tables"] = nil
		inputs["template"] = nil
		inputs["templateModified"] = nil
		inputs["templatePrerequisiteErrors"] = nil
		inputs["trafficGroup"] = nil
		inputs["variables"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["devicegroup"] = args.Devicegroup
		inputs["executeAction"] = args.ExecuteAction
		inputs["inheritedDevicegroup"] = args.InheritedDevicegroup
		inputs["inheritedTrafficGroup"] = args.InheritedTrafficGroup
		inputs["jsonfile"] = args.Jsonfile
		inputs["lists"] = args.Lists
		inputs["metadatas"] = args.Metadatas
		inputs["name"] = args.Name
		inputs["partition"] = args.Partition
		inputs["strictUpdates"] = args.StrictUpdates
		inputs["tables"] = args.Tables
		inputs["template"] = args.Template
		inputs["templateModified"] = args.TemplateModified
		inputs["templatePrerequisiteErrors"] = args.TemplatePrerequisiteErrors
		inputs["trafficGroup"] = args.TrafficGroup
		inputs["variables"] = args.Variables
	}
	s, err := ctx.RegisterResource("f5bigip:sys/iApp:IApp", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &IApp{s: s}, nil
}

// GetIApp gets an existing IApp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIApp(ctx *pulumi.Context,
	name string, id pulumi.ID, state *IAppState, opts ...pulumi.ResourceOpt) (*IApp, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["devicegroup"] = state.Devicegroup
		inputs["executeAction"] = state.ExecuteAction
		inputs["inheritedDevicegroup"] = state.InheritedDevicegroup
		inputs["inheritedTrafficGroup"] = state.InheritedTrafficGroup
		inputs["jsonfile"] = state.Jsonfile
		inputs["lists"] = state.Lists
		inputs["metadatas"] = state.Metadatas
		inputs["name"] = state.Name
		inputs["partition"] = state.Partition
		inputs["strictUpdates"] = state.StrictUpdates
		inputs["tables"] = state.Tables
		inputs["template"] = state.Template
		inputs["templateModified"] = state.TemplateModified
		inputs["templatePrerequisiteErrors"] = state.TemplatePrerequisiteErrors
		inputs["trafficGroup"] = state.TrafficGroup
		inputs["variables"] = state.Variables
	}
	s, err := ctx.ReadResource("f5bigip:sys/iApp:IApp", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &IApp{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *IApp) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *IApp) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Address of the Iapp which needs to be Iappensed
func (r *IApp) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// BIG-IP password
func (r *IApp) Devicegroup() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["devicegroup"])
}

// BIG-IP password
func (r *IApp) ExecuteAction() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["executeAction"])
}

// BIG-IP password
func (r *IApp) InheritedDevicegroup() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["inheritedDevicegroup"])
}

// BIG-IP password
func (r *IApp) InheritedTrafficGroup() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["inheritedTrafficGroup"])
}

// Refer to the Json file which will be deployed on F5 BIG-IP.
func (r *IApp) Jsonfile() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["jsonfile"])
}

func (r *IApp) Lists() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["lists"])
}

func (r *IApp) Metadatas() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["metadatas"])
}

// Name of the iApp.
func (r *IApp) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Address of the Iapp which needs to be Iappensed
func (r *IApp) Partition() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["partition"])
}

// BIG-IP password
func (r *IApp) StrictUpdates() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["strictUpdates"])
}

func (r *IApp) Tables() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["tables"])
}

// BIG-IP password
func (r *IApp) Template() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["template"])
}

// BIG-IP password
func (r *IApp) TemplateModified() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["templateModified"])
}

// BIG-IP password
func (r *IApp) TemplatePrerequisiteErrors() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["templatePrerequisiteErrors"])
}

// BIG-IP password
func (r *IApp) TrafficGroup() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["trafficGroup"])
}

func (r *IApp) Variables() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["variables"])
}

// Input properties used for looking up and filtering IApp resources.
type IAppState struct {
	// Address of the Iapp which needs to be Iappensed
	Description interface{}
	// BIG-IP password
	Devicegroup interface{}
	// BIG-IP password
	ExecuteAction interface{}
	// BIG-IP password
	InheritedDevicegroup interface{}
	// BIG-IP password
	InheritedTrafficGroup interface{}
	// Refer to the Json file which will be deployed on F5 BIG-IP.
	Jsonfile interface{}
	Lists interface{}
	Metadatas interface{}
	// Name of the iApp.
	Name interface{}
	// Address of the Iapp which needs to be Iappensed
	Partition interface{}
	// BIG-IP password
	StrictUpdates interface{}
	Tables interface{}
	// BIG-IP password
	Template interface{}
	// BIG-IP password
	TemplateModified interface{}
	// BIG-IP password
	TemplatePrerequisiteErrors interface{}
	// BIG-IP password
	TrafficGroup interface{}
	Variables interface{}
}

// The set of arguments for constructing a IApp resource.
type IAppArgs struct {
	// Address of the Iapp which needs to be Iappensed
	Description interface{}
	// BIG-IP password
	Devicegroup interface{}
	// BIG-IP password
	ExecuteAction interface{}
	// BIG-IP password
	InheritedDevicegroup interface{}
	// BIG-IP password
	InheritedTrafficGroup interface{}
	// Refer to the Json file which will be deployed on F5 BIG-IP.
	Jsonfile interface{}
	Lists interface{}
	Metadatas interface{}
	// Name of the iApp.
	Name interface{}
	// Address of the Iapp which needs to be Iappensed
	Partition interface{}
	// BIG-IP password
	StrictUpdates interface{}
	Tables interface{}
	// BIG-IP password
	Template interface{}
	// BIG-IP password
	TemplateModified interface{}
	// BIG-IP password
	TemplatePrerequisiteErrors interface{}
	// BIG-IP password
	TrafficGroup interface{}
	Variables interface{}
}
