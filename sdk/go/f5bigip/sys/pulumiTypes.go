// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sys

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type IAppList struct {
	Encrypted *string `pulumi:"encrypted"`
	Value     *string `pulumi:"value"`
}

// IAppListInput is an input type that accepts IAppListArgs and IAppListOutput values.
// You can construct a concrete instance of `IAppListInput` via:
//
//          IAppListArgs{...}
type IAppListInput interface {
	pulumi.Input

	ToIAppListOutput() IAppListOutput
	ToIAppListOutputWithContext(context.Context) IAppListOutput
}

type IAppListArgs struct {
	Encrypted pulumi.StringPtrInput `pulumi:"encrypted"`
	Value     pulumi.StringPtrInput `pulumi:"value"`
}

func (IAppListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IAppList)(nil)).Elem()
}

func (i IAppListArgs) ToIAppListOutput() IAppListOutput {
	return i.ToIAppListOutputWithContext(context.Background())
}

func (i IAppListArgs) ToIAppListOutputWithContext(ctx context.Context) IAppListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAppListOutput)
}

// IAppListArrayInput is an input type that accepts IAppListArray and IAppListArrayOutput values.
// You can construct a concrete instance of `IAppListArrayInput` via:
//
//          IAppListArray{ IAppListArgs{...} }
type IAppListArrayInput interface {
	pulumi.Input

	ToIAppListArrayOutput() IAppListArrayOutput
	ToIAppListArrayOutputWithContext(context.Context) IAppListArrayOutput
}

type IAppListArray []IAppListInput

func (IAppListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IAppList)(nil)).Elem()
}

func (i IAppListArray) ToIAppListArrayOutput() IAppListArrayOutput {
	return i.ToIAppListArrayOutputWithContext(context.Background())
}

func (i IAppListArray) ToIAppListArrayOutputWithContext(ctx context.Context) IAppListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAppListArrayOutput)
}

type IAppListOutput struct{ *pulumi.OutputState }

func (IAppListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IAppList)(nil)).Elem()
}

func (o IAppListOutput) ToIAppListOutput() IAppListOutput {
	return o
}

func (o IAppListOutput) ToIAppListOutputWithContext(ctx context.Context) IAppListOutput {
	return o
}

func (o IAppListOutput) Encrypted() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IAppList) *string { return v.Encrypted }).(pulumi.StringPtrOutput)
}

func (o IAppListOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IAppList) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type IAppListArrayOutput struct{ *pulumi.OutputState }

func (IAppListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IAppList)(nil)).Elem()
}

func (o IAppListArrayOutput) ToIAppListArrayOutput() IAppListArrayOutput {
	return o
}

func (o IAppListArrayOutput) ToIAppListArrayOutputWithContext(ctx context.Context) IAppListArrayOutput {
	return o
}

func (o IAppListArrayOutput) Index(i pulumi.IntInput) IAppListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IAppList {
		return vs[0].([]IAppList)[vs[1].(int)]
	}).(IAppListOutput)
}

type IAppMetadata struct {
	Persists *string `pulumi:"persists"`
	Value    *string `pulumi:"value"`
}

// IAppMetadataInput is an input type that accepts IAppMetadataArgs and IAppMetadataOutput values.
// You can construct a concrete instance of `IAppMetadataInput` via:
//
//          IAppMetadataArgs{...}
type IAppMetadataInput interface {
	pulumi.Input

	ToIAppMetadataOutput() IAppMetadataOutput
	ToIAppMetadataOutputWithContext(context.Context) IAppMetadataOutput
}

type IAppMetadataArgs struct {
	Persists pulumi.StringPtrInput `pulumi:"persists"`
	Value    pulumi.StringPtrInput `pulumi:"value"`
}

func (IAppMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IAppMetadata)(nil)).Elem()
}

func (i IAppMetadataArgs) ToIAppMetadataOutput() IAppMetadataOutput {
	return i.ToIAppMetadataOutputWithContext(context.Background())
}

func (i IAppMetadataArgs) ToIAppMetadataOutputWithContext(ctx context.Context) IAppMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAppMetadataOutput)
}

// IAppMetadataArrayInput is an input type that accepts IAppMetadataArray and IAppMetadataArrayOutput values.
// You can construct a concrete instance of `IAppMetadataArrayInput` via:
//
//          IAppMetadataArray{ IAppMetadataArgs{...} }
type IAppMetadataArrayInput interface {
	pulumi.Input

	ToIAppMetadataArrayOutput() IAppMetadataArrayOutput
	ToIAppMetadataArrayOutputWithContext(context.Context) IAppMetadataArrayOutput
}

type IAppMetadataArray []IAppMetadataInput

func (IAppMetadataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IAppMetadata)(nil)).Elem()
}

func (i IAppMetadataArray) ToIAppMetadataArrayOutput() IAppMetadataArrayOutput {
	return i.ToIAppMetadataArrayOutputWithContext(context.Background())
}

func (i IAppMetadataArray) ToIAppMetadataArrayOutputWithContext(ctx context.Context) IAppMetadataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAppMetadataArrayOutput)
}

type IAppMetadataOutput struct{ *pulumi.OutputState }

func (IAppMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IAppMetadata)(nil)).Elem()
}

func (o IAppMetadataOutput) ToIAppMetadataOutput() IAppMetadataOutput {
	return o
}

func (o IAppMetadataOutput) ToIAppMetadataOutputWithContext(ctx context.Context) IAppMetadataOutput {
	return o
}

func (o IAppMetadataOutput) Persists() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IAppMetadata) *string { return v.Persists }).(pulumi.StringPtrOutput)
}

func (o IAppMetadataOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IAppMetadata) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type IAppMetadataArrayOutput struct{ *pulumi.OutputState }

func (IAppMetadataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IAppMetadata)(nil)).Elem()
}

func (o IAppMetadataArrayOutput) ToIAppMetadataArrayOutput() IAppMetadataArrayOutput {
	return o
}

func (o IAppMetadataArrayOutput) ToIAppMetadataArrayOutputWithContext(ctx context.Context) IAppMetadataArrayOutput {
	return o
}

func (o IAppMetadataArrayOutput) Index(i pulumi.IntInput) IAppMetadataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IAppMetadata {
		return vs[0].([]IAppMetadata)[vs[1].(int)]
	}).(IAppMetadataOutput)
}

type IAppTable struct {
	ColumnNames      []string `pulumi:"columnNames"`
	EncryptedColumns *string  `pulumi:"encryptedColumns"`
	// Name of the iApp.
	Name *string        `pulumi:"name"`
	Rows []IAppTableRow `pulumi:"rows"`
}

// IAppTableInput is an input type that accepts IAppTableArgs and IAppTableOutput values.
// You can construct a concrete instance of `IAppTableInput` via:
//
//          IAppTableArgs{...}
type IAppTableInput interface {
	pulumi.Input

	ToIAppTableOutput() IAppTableOutput
	ToIAppTableOutputWithContext(context.Context) IAppTableOutput
}

type IAppTableArgs struct {
	ColumnNames      pulumi.StringArrayInput `pulumi:"columnNames"`
	EncryptedColumns pulumi.StringPtrInput   `pulumi:"encryptedColumns"`
	// Name of the iApp.
	Name pulumi.StringPtrInput  `pulumi:"name"`
	Rows IAppTableRowArrayInput `pulumi:"rows"`
}

func (IAppTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IAppTable)(nil)).Elem()
}

func (i IAppTableArgs) ToIAppTableOutput() IAppTableOutput {
	return i.ToIAppTableOutputWithContext(context.Background())
}

func (i IAppTableArgs) ToIAppTableOutputWithContext(ctx context.Context) IAppTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAppTableOutput)
}

// IAppTableArrayInput is an input type that accepts IAppTableArray and IAppTableArrayOutput values.
// You can construct a concrete instance of `IAppTableArrayInput` via:
//
//          IAppTableArray{ IAppTableArgs{...} }
type IAppTableArrayInput interface {
	pulumi.Input

	ToIAppTableArrayOutput() IAppTableArrayOutput
	ToIAppTableArrayOutputWithContext(context.Context) IAppTableArrayOutput
}

type IAppTableArray []IAppTableInput

func (IAppTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IAppTable)(nil)).Elem()
}

func (i IAppTableArray) ToIAppTableArrayOutput() IAppTableArrayOutput {
	return i.ToIAppTableArrayOutputWithContext(context.Background())
}

func (i IAppTableArray) ToIAppTableArrayOutputWithContext(ctx context.Context) IAppTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAppTableArrayOutput)
}

type IAppTableOutput struct{ *pulumi.OutputState }

func (IAppTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IAppTable)(nil)).Elem()
}

func (o IAppTableOutput) ToIAppTableOutput() IAppTableOutput {
	return o
}

func (o IAppTableOutput) ToIAppTableOutputWithContext(ctx context.Context) IAppTableOutput {
	return o
}

func (o IAppTableOutput) ColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IAppTable) []string { return v.ColumnNames }).(pulumi.StringArrayOutput)
}

func (o IAppTableOutput) EncryptedColumns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IAppTable) *string { return v.EncryptedColumns }).(pulumi.StringPtrOutput)
}

// Name of the iApp.
func (o IAppTableOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IAppTable) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o IAppTableOutput) Rows() IAppTableRowArrayOutput {
	return o.ApplyT(func(v IAppTable) []IAppTableRow { return v.Rows }).(IAppTableRowArrayOutput)
}

type IAppTableArrayOutput struct{ *pulumi.OutputState }

func (IAppTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IAppTable)(nil)).Elem()
}

func (o IAppTableArrayOutput) ToIAppTableArrayOutput() IAppTableArrayOutput {
	return o
}

func (o IAppTableArrayOutput) ToIAppTableArrayOutputWithContext(ctx context.Context) IAppTableArrayOutput {
	return o
}

func (o IAppTableArrayOutput) Index(i pulumi.IntInput) IAppTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IAppTable {
		return vs[0].([]IAppTable)[vs[1].(int)]
	}).(IAppTableOutput)
}

type IAppTableRow struct {
	Rows []string `pulumi:"rows"`
}

// IAppTableRowInput is an input type that accepts IAppTableRowArgs and IAppTableRowOutput values.
// You can construct a concrete instance of `IAppTableRowInput` via:
//
//          IAppTableRowArgs{...}
type IAppTableRowInput interface {
	pulumi.Input

	ToIAppTableRowOutput() IAppTableRowOutput
	ToIAppTableRowOutputWithContext(context.Context) IAppTableRowOutput
}

type IAppTableRowArgs struct {
	Rows pulumi.StringArrayInput `pulumi:"rows"`
}

func (IAppTableRowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IAppTableRow)(nil)).Elem()
}

func (i IAppTableRowArgs) ToIAppTableRowOutput() IAppTableRowOutput {
	return i.ToIAppTableRowOutputWithContext(context.Background())
}

func (i IAppTableRowArgs) ToIAppTableRowOutputWithContext(ctx context.Context) IAppTableRowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAppTableRowOutput)
}

// IAppTableRowArrayInput is an input type that accepts IAppTableRowArray and IAppTableRowArrayOutput values.
// You can construct a concrete instance of `IAppTableRowArrayInput` via:
//
//          IAppTableRowArray{ IAppTableRowArgs{...} }
type IAppTableRowArrayInput interface {
	pulumi.Input

	ToIAppTableRowArrayOutput() IAppTableRowArrayOutput
	ToIAppTableRowArrayOutputWithContext(context.Context) IAppTableRowArrayOutput
}

type IAppTableRowArray []IAppTableRowInput

func (IAppTableRowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IAppTableRow)(nil)).Elem()
}

func (i IAppTableRowArray) ToIAppTableRowArrayOutput() IAppTableRowArrayOutput {
	return i.ToIAppTableRowArrayOutputWithContext(context.Background())
}

func (i IAppTableRowArray) ToIAppTableRowArrayOutputWithContext(ctx context.Context) IAppTableRowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAppTableRowArrayOutput)
}

type IAppTableRowOutput struct{ *pulumi.OutputState }

func (IAppTableRowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IAppTableRow)(nil)).Elem()
}

func (o IAppTableRowOutput) ToIAppTableRowOutput() IAppTableRowOutput {
	return o
}

func (o IAppTableRowOutput) ToIAppTableRowOutputWithContext(ctx context.Context) IAppTableRowOutput {
	return o
}

func (o IAppTableRowOutput) Rows() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IAppTableRow) []string { return v.Rows }).(pulumi.StringArrayOutput)
}

type IAppTableRowArrayOutput struct{ *pulumi.OutputState }

func (IAppTableRowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IAppTableRow)(nil)).Elem()
}

func (o IAppTableRowArrayOutput) ToIAppTableRowArrayOutput() IAppTableRowArrayOutput {
	return o
}

func (o IAppTableRowArrayOutput) ToIAppTableRowArrayOutputWithContext(ctx context.Context) IAppTableRowArrayOutput {
	return o
}

func (o IAppTableRowArrayOutput) Index(i pulumi.IntInput) IAppTableRowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IAppTableRow {
		return vs[0].([]IAppTableRow)[vs[1].(int)]
	}).(IAppTableRowOutput)
}

type IAppVariable struct {
	Encrypted *string `pulumi:"encrypted"`
	// Name of the iApp.
	Name  *string `pulumi:"name"`
	Value *string `pulumi:"value"`
}

// IAppVariableInput is an input type that accepts IAppVariableArgs and IAppVariableOutput values.
// You can construct a concrete instance of `IAppVariableInput` via:
//
//          IAppVariableArgs{...}
type IAppVariableInput interface {
	pulumi.Input

	ToIAppVariableOutput() IAppVariableOutput
	ToIAppVariableOutputWithContext(context.Context) IAppVariableOutput
}

type IAppVariableArgs struct {
	Encrypted pulumi.StringPtrInput `pulumi:"encrypted"`
	// Name of the iApp.
	Name  pulumi.StringPtrInput `pulumi:"name"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (IAppVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IAppVariable)(nil)).Elem()
}

func (i IAppVariableArgs) ToIAppVariableOutput() IAppVariableOutput {
	return i.ToIAppVariableOutputWithContext(context.Background())
}

func (i IAppVariableArgs) ToIAppVariableOutputWithContext(ctx context.Context) IAppVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAppVariableOutput)
}

// IAppVariableArrayInput is an input type that accepts IAppVariableArray and IAppVariableArrayOutput values.
// You can construct a concrete instance of `IAppVariableArrayInput` via:
//
//          IAppVariableArray{ IAppVariableArgs{...} }
type IAppVariableArrayInput interface {
	pulumi.Input

	ToIAppVariableArrayOutput() IAppVariableArrayOutput
	ToIAppVariableArrayOutputWithContext(context.Context) IAppVariableArrayOutput
}

type IAppVariableArray []IAppVariableInput

func (IAppVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IAppVariable)(nil)).Elem()
}

func (i IAppVariableArray) ToIAppVariableArrayOutput() IAppVariableArrayOutput {
	return i.ToIAppVariableArrayOutputWithContext(context.Background())
}

func (i IAppVariableArray) ToIAppVariableArrayOutputWithContext(ctx context.Context) IAppVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IAppVariableArrayOutput)
}

type IAppVariableOutput struct{ *pulumi.OutputState }

func (IAppVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IAppVariable)(nil)).Elem()
}

func (o IAppVariableOutput) ToIAppVariableOutput() IAppVariableOutput {
	return o
}

func (o IAppVariableOutput) ToIAppVariableOutputWithContext(ctx context.Context) IAppVariableOutput {
	return o
}

func (o IAppVariableOutput) Encrypted() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IAppVariable) *string { return v.Encrypted }).(pulumi.StringPtrOutput)
}

// Name of the iApp.
func (o IAppVariableOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IAppVariable) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o IAppVariableOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IAppVariable) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type IAppVariableArrayOutput struct{ *pulumi.OutputState }

func (IAppVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IAppVariable)(nil)).Elem()
}

func (o IAppVariableArrayOutput) ToIAppVariableArrayOutput() IAppVariableArrayOutput {
	return o
}

func (o IAppVariableArrayOutput) ToIAppVariableArrayOutputWithContext(ctx context.Context) IAppVariableArrayOutput {
	return o
}

func (o IAppVariableArrayOutput) Index(i pulumi.IntInput) IAppVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IAppVariable {
		return vs[0].([]IAppVariable)[vs[1].(int)]
	}).(IAppVariableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IAppListInput)(nil)).Elem(), IAppListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IAppListArrayInput)(nil)).Elem(), IAppListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IAppMetadataInput)(nil)).Elem(), IAppMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IAppMetadataArrayInput)(nil)).Elem(), IAppMetadataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IAppTableInput)(nil)).Elem(), IAppTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IAppTableArrayInput)(nil)).Elem(), IAppTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IAppTableRowInput)(nil)).Elem(), IAppTableRowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IAppTableRowArrayInput)(nil)).Elem(), IAppTableRowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IAppVariableInput)(nil)).Elem(), IAppVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IAppVariableArrayInput)(nil)).Elem(), IAppVariableArray{})
	pulumi.RegisterOutputType(IAppListOutput{})
	pulumi.RegisterOutputType(IAppListArrayOutput{})
	pulumi.RegisterOutputType(IAppMetadataOutput{})
	pulumi.RegisterOutputType(IAppMetadataArrayOutput{})
	pulumi.RegisterOutputType(IAppTableOutput{})
	pulumi.RegisterOutputType(IAppTableArrayOutput{})
	pulumi.RegisterOutputType(IAppTableRowOutput{})
	pulumi.RegisterOutputType(IAppTableRowArrayOutput{})
	pulumi.RegisterOutputType(IAppVariableOutput{})
	pulumi.RegisterOutputType(IAppVariableArrayOutput{})
}
