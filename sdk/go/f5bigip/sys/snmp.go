// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sys

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// `sys.Snmp` provides details bout how to enable "ilx", "asm" "apm" resource on BIG-IP
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-bigip/blob/master/website/docs/r/sys_snmp.html.markdown.
type Snmp struct {
	s *pulumi.ResourceState
}

// NewSnmp registers a new resource with the given unique name, arguments, and options.
func NewSnmp(ctx *pulumi.Context,
	name string, args *SnmpArgs, opts ...pulumi.ResourceOpt) (*Snmp, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["allowedaddresses"] = nil
		inputs["sysContact"] = nil
		inputs["sysLocation"] = nil
	} else {
		inputs["allowedaddresses"] = args.Allowedaddresses
		inputs["sysContact"] = args.SysContact
		inputs["sysLocation"] = args.SysLocation
	}
	s, err := ctx.RegisterResource("f5bigip:sys/snmp:Snmp", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Snmp{s: s}, nil
}

// GetSnmp gets an existing Snmp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnmp(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SnmpState, opts ...pulumi.ResourceOpt) (*Snmp, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["allowedaddresses"] = state.Allowedaddresses
		inputs["sysContact"] = state.SysContact
		inputs["sysLocation"] = state.SysLocation
	}
	s, err := ctx.ReadResource("f5bigip:sys/snmp:Snmp", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Snmp{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Snmp) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Snmp) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Configures hosts or networks from which snmpd can accept traffic. Entries go directly into hosts.allow.
func (r *Snmp) Allowedaddresses() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["allowedaddresses"])
}

// Specifies the contact information for the system administrator.
func (r *Snmp) SysContact() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sysContact"])
}

// Describes the system's physical location.
func (r *Snmp) SysLocation() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sysLocation"])
}

// Input properties used for looking up and filtering Snmp resources.
type SnmpState struct {
	// Configures hosts or networks from which snmpd can accept traffic. Entries go directly into hosts.allow.
	Allowedaddresses interface{}
	// Specifies the contact information for the system administrator.
	SysContact interface{}
	// Describes the system's physical location.
	SysLocation interface{}
}

// The set of arguments for constructing a Snmp resource.
type SnmpArgs struct {
	// Configures hosts or networks from which snmpd can accept traffic. Entries go directly into hosts.allow.
	Allowedaddresses interface{}
	// Specifies the contact information for the system administrator.
	SysContact interface{}
	// Describes the system's physical location.
	SysLocation interface{}
}
