// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package f5bigip

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-f5bigip/sdk/v3/go/f5bigip/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// `FastTcpApp` This resource will create and manage FAST TCP applications on BIG-IP from provided JSON declaration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-f5bigip/sdk/v3/go/f5bigip"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := f5bigip.NewFastTcpApp(ctx, "fast-tcp-app", &f5bigip.FastTcpAppArgs{
//				Application: pulumi.String("tcp_app_2"),
//				PoolMembers: f5bigip.FastTcpAppPoolMemberArray{
//					&f5bigip.FastTcpAppPoolMemberArgs{
//						Addresses: pulumi.StringArray{
//							pulumi.String("10.11.34.65"),
//							pulumi.String("56.43.23.76"),
//						},
//						ConnectionLimit: pulumi.Int(4),
//						Port:            pulumi.Int(443),
//						PriorityGroup:   pulumi.Int(1),
//						ShareNodes:      pulumi.Bool(true),
//					},
//				},
//				Tenant: pulumi.String("tcp_app_tenant"),
//				VirtualServer: &f5bigip.FastTcpAppVirtualServerArgs{
//					Ip:   pulumi.String("11.12.16.30"),
//					Port: pulumi.Int(443),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FastTcpApp struct {
	pulumi.CustomResourceState

	// Name of the FAST TCP application.
	Application pulumi.StringOutput `pulumi:"application"`
	// Name of an existing BIG-IP HTTPS pool monitor. Monitors are used to determine the health of the application on each server.
	ExistingMonitor pulumi.StringPtrOutput `pulumi:"existingMonitor"`
	// Name of an existing BIG-IP pool.
	ExistingPool pulumi.StringPtrOutput `pulumi:"existingPool"`
	// Name of an existing BIG-IP SNAT pool.
	ExistingSnatPool pulumi.StringPtrOutput `pulumi:"existingSnatPool"`
	// Json payload for FAST TCP application.
	FastTcpJson pulumi.StringOutput `pulumi:"fastTcpJson"`
	// A `load balancing method` is an algorithm that the BIG-IP system uses to select a pool member for processing a request. F5 recommends the Least Connections load balancing method
	LoadBalancingMode pulumi.StringPtrOutput `pulumi:"loadBalancingMode"`
	// `monitor` block takes input for FAST-Generated Pool Monitor.
	// See Pool Monitor below for more details.
	Monitor FastTcpAppMonitorPtrOutput `pulumi:"monitor"`
	// `poolMembers` block takes input for FAST-Generated Pool.
	// See Pool Members below for more details.
	PoolMembers FastTcpAppPoolMemberArrayOutput `pulumi:"poolMembers"`
	// Slow ramp temporarily throttles the number of connections to a new pool member. The recommended value is 300 seconds
	SlowRampTime pulumi.IntPtrOutput `pulumi:"slowRampTime"`
	// List of address to be used for FAST-Generated SNAT Pool.
	SnatPoolAddresses pulumi.StringArrayOutput `pulumi:"snatPoolAddresses"`
	// Name of the FAST TCP application tenant.
	Tenant pulumi.StringOutput `pulumi:"tenant"`
	// `virtualServer` block will provide `ip` and `port` options to be used for virtual server.
	// See virtual server below for more details.
	VirtualServer FastTcpAppVirtualServerPtrOutput `pulumi:"virtualServer"`
}

// NewFastTcpApp registers a new resource with the given unique name, arguments, and options.
func NewFastTcpApp(ctx *pulumi.Context,
	name string, args *FastTcpAppArgs, opts ...pulumi.ResourceOption) (*FastTcpApp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Application == nil {
		return nil, errors.New("invalid value for required argument 'Application'")
	}
	if args.Tenant == nil {
		return nil, errors.New("invalid value for required argument 'Tenant'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FastTcpApp
	err := ctx.RegisterResource("f5bigip:index/fastTcpApp:FastTcpApp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFastTcpApp gets an existing FastTcpApp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFastTcpApp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FastTcpAppState, opts ...pulumi.ResourceOption) (*FastTcpApp, error) {
	var resource FastTcpApp
	err := ctx.ReadResource("f5bigip:index/fastTcpApp:FastTcpApp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FastTcpApp resources.
type fastTcpAppState struct {
	// Name of the FAST TCP application.
	Application *string `pulumi:"application"`
	// Name of an existing BIG-IP HTTPS pool monitor. Monitors are used to determine the health of the application on each server.
	ExistingMonitor *string `pulumi:"existingMonitor"`
	// Name of an existing BIG-IP pool.
	ExistingPool *string `pulumi:"existingPool"`
	// Name of an existing BIG-IP SNAT pool.
	ExistingSnatPool *string `pulumi:"existingSnatPool"`
	// Json payload for FAST TCP application.
	FastTcpJson *string `pulumi:"fastTcpJson"`
	// A `load balancing method` is an algorithm that the BIG-IP system uses to select a pool member for processing a request. F5 recommends the Least Connections load balancing method
	LoadBalancingMode *string `pulumi:"loadBalancingMode"`
	// `monitor` block takes input for FAST-Generated Pool Monitor.
	// See Pool Monitor below for more details.
	Monitor *FastTcpAppMonitor `pulumi:"monitor"`
	// `poolMembers` block takes input for FAST-Generated Pool.
	// See Pool Members below for more details.
	PoolMembers []FastTcpAppPoolMember `pulumi:"poolMembers"`
	// Slow ramp temporarily throttles the number of connections to a new pool member. The recommended value is 300 seconds
	SlowRampTime *int `pulumi:"slowRampTime"`
	// List of address to be used for FAST-Generated SNAT Pool.
	SnatPoolAddresses []string `pulumi:"snatPoolAddresses"`
	// Name of the FAST TCP application tenant.
	Tenant *string `pulumi:"tenant"`
	// `virtualServer` block will provide `ip` and `port` options to be used for virtual server.
	// See virtual server below for more details.
	VirtualServer *FastTcpAppVirtualServer `pulumi:"virtualServer"`
}

type FastTcpAppState struct {
	// Name of the FAST TCP application.
	Application pulumi.StringPtrInput
	// Name of an existing BIG-IP HTTPS pool monitor. Monitors are used to determine the health of the application on each server.
	ExistingMonitor pulumi.StringPtrInput
	// Name of an existing BIG-IP pool.
	ExistingPool pulumi.StringPtrInput
	// Name of an existing BIG-IP SNAT pool.
	ExistingSnatPool pulumi.StringPtrInput
	// Json payload for FAST TCP application.
	FastTcpJson pulumi.StringPtrInput
	// A `load balancing method` is an algorithm that the BIG-IP system uses to select a pool member for processing a request. F5 recommends the Least Connections load balancing method
	LoadBalancingMode pulumi.StringPtrInput
	// `monitor` block takes input for FAST-Generated Pool Monitor.
	// See Pool Monitor below for more details.
	Monitor FastTcpAppMonitorPtrInput
	// `poolMembers` block takes input for FAST-Generated Pool.
	// See Pool Members below for more details.
	PoolMembers FastTcpAppPoolMemberArrayInput
	// Slow ramp temporarily throttles the number of connections to a new pool member. The recommended value is 300 seconds
	SlowRampTime pulumi.IntPtrInput
	// List of address to be used for FAST-Generated SNAT Pool.
	SnatPoolAddresses pulumi.StringArrayInput
	// Name of the FAST TCP application tenant.
	Tenant pulumi.StringPtrInput
	// `virtualServer` block will provide `ip` and `port` options to be used for virtual server.
	// See virtual server below for more details.
	VirtualServer FastTcpAppVirtualServerPtrInput
}

func (FastTcpAppState) ElementType() reflect.Type {
	return reflect.TypeOf((*fastTcpAppState)(nil)).Elem()
}

type fastTcpAppArgs struct {
	// Name of the FAST TCP application.
	Application string `pulumi:"application"`
	// Name of an existing BIG-IP HTTPS pool monitor. Monitors are used to determine the health of the application on each server.
	ExistingMonitor *string `pulumi:"existingMonitor"`
	// Name of an existing BIG-IP pool.
	ExistingPool *string `pulumi:"existingPool"`
	// Name of an existing BIG-IP SNAT pool.
	ExistingSnatPool *string `pulumi:"existingSnatPool"`
	// A `load balancing method` is an algorithm that the BIG-IP system uses to select a pool member for processing a request. F5 recommends the Least Connections load balancing method
	LoadBalancingMode *string `pulumi:"loadBalancingMode"`
	// `monitor` block takes input for FAST-Generated Pool Monitor.
	// See Pool Monitor below for more details.
	Monitor *FastTcpAppMonitor `pulumi:"monitor"`
	// `poolMembers` block takes input for FAST-Generated Pool.
	// See Pool Members below for more details.
	PoolMembers []FastTcpAppPoolMember `pulumi:"poolMembers"`
	// Slow ramp temporarily throttles the number of connections to a new pool member. The recommended value is 300 seconds
	SlowRampTime *int `pulumi:"slowRampTime"`
	// List of address to be used for FAST-Generated SNAT Pool.
	SnatPoolAddresses []string `pulumi:"snatPoolAddresses"`
	// Name of the FAST TCP application tenant.
	Tenant string `pulumi:"tenant"`
	// `virtualServer` block will provide `ip` and `port` options to be used for virtual server.
	// See virtual server below for more details.
	VirtualServer *FastTcpAppVirtualServer `pulumi:"virtualServer"`
}

// The set of arguments for constructing a FastTcpApp resource.
type FastTcpAppArgs struct {
	// Name of the FAST TCP application.
	Application pulumi.StringInput
	// Name of an existing BIG-IP HTTPS pool monitor. Monitors are used to determine the health of the application on each server.
	ExistingMonitor pulumi.StringPtrInput
	// Name of an existing BIG-IP pool.
	ExistingPool pulumi.StringPtrInput
	// Name of an existing BIG-IP SNAT pool.
	ExistingSnatPool pulumi.StringPtrInput
	// A `load balancing method` is an algorithm that the BIG-IP system uses to select a pool member for processing a request. F5 recommends the Least Connections load balancing method
	LoadBalancingMode pulumi.StringPtrInput
	// `monitor` block takes input for FAST-Generated Pool Monitor.
	// See Pool Monitor below for more details.
	Monitor FastTcpAppMonitorPtrInput
	// `poolMembers` block takes input for FAST-Generated Pool.
	// See Pool Members below for more details.
	PoolMembers FastTcpAppPoolMemberArrayInput
	// Slow ramp temporarily throttles the number of connections to a new pool member. The recommended value is 300 seconds
	SlowRampTime pulumi.IntPtrInput
	// List of address to be used for FAST-Generated SNAT Pool.
	SnatPoolAddresses pulumi.StringArrayInput
	// Name of the FAST TCP application tenant.
	Tenant pulumi.StringInput
	// `virtualServer` block will provide `ip` and `port` options to be used for virtual server.
	// See virtual server below for more details.
	VirtualServer FastTcpAppVirtualServerPtrInput
}

func (FastTcpAppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fastTcpAppArgs)(nil)).Elem()
}

type FastTcpAppInput interface {
	pulumi.Input

	ToFastTcpAppOutput() FastTcpAppOutput
	ToFastTcpAppOutputWithContext(ctx context.Context) FastTcpAppOutput
}

func (*FastTcpApp) ElementType() reflect.Type {
	return reflect.TypeOf((**FastTcpApp)(nil)).Elem()
}

func (i *FastTcpApp) ToFastTcpAppOutput() FastTcpAppOutput {
	return i.ToFastTcpAppOutputWithContext(context.Background())
}

func (i *FastTcpApp) ToFastTcpAppOutputWithContext(ctx context.Context) FastTcpAppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FastTcpAppOutput)
}

func (i *FastTcpApp) ToOutput(ctx context.Context) pulumix.Output[*FastTcpApp] {
	return pulumix.Output[*FastTcpApp]{
		OutputState: i.ToFastTcpAppOutputWithContext(ctx).OutputState,
	}
}

// FastTcpAppArrayInput is an input type that accepts FastTcpAppArray and FastTcpAppArrayOutput values.
// You can construct a concrete instance of `FastTcpAppArrayInput` via:
//
//	FastTcpAppArray{ FastTcpAppArgs{...} }
type FastTcpAppArrayInput interface {
	pulumi.Input

	ToFastTcpAppArrayOutput() FastTcpAppArrayOutput
	ToFastTcpAppArrayOutputWithContext(context.Context) FastTcpAppArrayOutput
}

type FastTcpAppArray []FastTcpAppInput

func (FastTcpAppArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FastTcpApp)(nil)).Elem()
}

func (i FastTcpAppArray) ToFastTcpAppArrayOutput() FastTcpAppArrayOutput {
	return i.ToFastTcpAppArrayOutputWithContext(context.Background())
}

func (i FastTcpAppArray) ToFastTcpAppArrayOutputWithContext(ctx context.Context) FastTcpAppArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FastTcpAppArrayOutput)
}

func (i FastTcpAppArray) ToOutput(ctx context.Context) pulumix.Output[[]*FastTcpApp] {
	return pulumix.Output[[]*FastTcpApp]{
		OutputState: i.ToFastTcpAppArrayOutputWithContext(ctx).OutputState,
	}
}

// FastTcpAppMapInput is an input type that accepts FastTcpAppMap and FastTcpAppMapOutput values.
// You can construct a concrete instance of `FastTcpAppMapInput` via:
//
//	FastTcpAppMap{ "key": FastTcpAppArgs{...} }
type FastTcpAppMapInput interface {
	pulumi.Input

	ToFastTcpAppMapOutput() FastTcpAppMapOutput
	ToFastTcpAppMapOutputWithContext(context.Context) FastTcpAppMapOutput
}

type FastTcpAppMap map[string]FastTcpAppInput

func (FastTcpAppMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FastTcpApp)(nil)).Elem()
}

func (i FastTcpAppMap) ToFastTcpAppMapOutput() FastTcpAppMapOutput {
	return i.ToFastTcpAppMapOutputWithContext(context.Background())
}

func (i FastTcpAppMap) ToFastTcpAppMapOutputWithContext(ctx context.Context) FastTcpAppMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FastTcpAppMapOutput)
}

func (i FastTcpAppMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*FastTcpApp] {
	return pulumix.Output[map[string]*FastTcpApp]{
		OutputState: i.ToFastTcpAppMapOutputWithContext(ctx).OutputState,
	}
}

type FastTcpAppOutput struct{ *pulumi.OutputState }

func (FastTcpAppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FastTcpApp)(nil)).Elem()
}

func (o FastTcpAppOutput) ToFastTcpAppOutput() FastTcpAppOutput {
	return o
}

func (o FastTcpAppOutput) ToFastTcpAppOutputWithContext(ctx context.Context) FastTcpAppOutput {
	return o
}

func (o FastTcpAppOutput) ToOutput(ctx context.Context) pulumix.Output[*FastTcpApp] {
	return pulumix.Output[*FastTcpApp]{
		OutputState: o.OutputState,
	}
}

// Name of the FAST TCP application.
func (o FastTcpAppOutput) Application() pulumi.StringOutput {
	return o.ApplyT(func(v *FastTcpApp) pulumi.StringOutput { return v.Application }).(pulumi.StringOutput)
}

// Name of an existing BIG-IP HTTPS pool monitor. Monitors are used to determine the health of the application on each server.
func (o FastTcpAppOutput) ExistingMonitor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FastTcpApp) pulumi.StringPtrOutput { return v.ExistingMonitor }).(pulumi.StringPtrOutput)
}

// Name of an existing BIG-IP pool.
func (o FastTcpAppOutput) ExistingPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FastTcpApp) pulumi.StringPtrOutput { return v.ExistingPool }).(pulumi.StringPtrOutput)
}

// Name of an existing BIG-IP SNAT pool.
func (o FastTcpAppOutput) ExistingSnatPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FastTcpApp) pulumi.StringPtrOutput { return v.ExistingSnatPool }).(pulumi.StringPtrOutput)
}

// Json payload for FAST TCP application.
func (o FastTcpAppOutput) FastTcpJson() pulumi.StringOutput {
	return o.ApplyT(func(v *FastTcpApp) pulumi.StringOutput { return v.FastTcpJson }).(pulumi.StringOutput)
}

// A `load balancing method` is an algorithm that the BIG-IP system uses to select a pool member for processing a request. F5 recommends the Least Connections load balancing method
func (o FastTcpAppOutput) LoadBalancingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FastTcpApp) pulumi.StringPtrOutput { return v.LoadBalancingMode }).(pulumi.StringPtrOutput)
}

// `monitor` block takes input for FAST-Generated Pool Monitor.
// See Pool Monitor below for more details.
func (o FastTcpAppOutput) Monitor() FastTcpAppMonitorPtrOutput {
	return o.ApplyT(func(v *FastTcpApp) FastTcpAppMonitorPtrOutput { return v.Monitor }).(FastTcpAppMonitorPtrOutput)
}

// `poolMembers` block takes input for FAST-Generated Pool.
// See Pool Members below for more details.
func (o FastTcpAppOutput) PoolMembers() FastTcpAppPoolMemberArrayOutput {
	return o.ApplyT(func(v *FastTcpApp) FastTcpAppPoolMemberArrayOutput { return v.PoolMembers }).(FastTcpAppPoolMemberArrayOutput)
}

// Slow ramp temporarily throttles the number of connections to a new pool member. The recommended value is 300 seconds
func (o FastTcpAppOutput) SlowRampTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FastTcpApp) pulumi.IntPtrOutput { return v.SlowRampTime }).(pulumi.IntPtrOutput)
}

// List of address to be used for FAST-Generated SNAT Pool.
func (o FastTcpAppOutput) SnatPoolAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FastTcpApp) pulumi.StringArrayOutput { return v.SnatPoolAddresses }).(pulumi.StringArrayOutput)
}

// Name of the FAST TCP application tenant.
func (o FastTcpAppOutput) Tenant() pulumi.StringOutput {
	return o.ApplyT(func(v *FastTcpApp) pulumi.StringOutput { return v.Tenant }).(pulumi.StringOutput)
}

// `virtualServer` block will provide `ip` and `port` options to be used for virtual server.
// See virtual server below for more details.
func (o FastTcpAppOutput) VirtualServer() FastTcpAppVirtualServerPtrOutput {
	return o.ApplyT(func(v *FastTcpApp) FastTcpAppVirtualServerPtrOutput { return v.VirtualServer }).(FastTcpAppVirtualServerPtrOutput)
}

type FastTcpAppArrayOutput struct{ *pulumi.OutputState }

func (FastTcpAppArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FastTcpApp)(nil)).Elem()
}

func (o FastTcpAppArrayOutput) ToFastTcpAppArrayOutput() FastTcpAppArrayOutput {
	return o
}

func (o FastTcpAppArrayOutput) ToFastTcpAppArrayOutputWithContext(ctx context.Context) FastTcpAppArrayOutput {
	return o
}

func (o FastTcpAppArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*FastTcpApp] {
	return pulumix.Output[[]*FastTcpApp]{
		OutputState: o.OutputState,
	}
}

func (o FastTcpAppArrayOutput) Index(i pulumi.IntInput) FastTcpAppOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FastTcpApp {
		return vs[0].([]*FastTcpApp)[vs[1].(int)]
	}).(FastTcpAppOutput)
}

type FastTcpAppMapOutput struct{ *pulumi.OutputState }

func (FastTcpAppMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FastTcpApp)(nil)).Elem()
}

func (o FastTcpAppMapOutput) ToFastTcpAppMapOutput() FastTcpAppMapOutput {
	return o
}

func (o FastTcpAppMapOutput) ToFastTcpAppMapOutputWithContext(ctx context.Context) FastTcpAppMapOutput {
	return o
}

func (o FastTcpAppMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*FastTcpApp] {
	return pulumix.Output[map[string]*FastTcpApp]{
		OutputState: o.OutputState,
	}
}

func (o FastTcpAppMapOutput) MapIndex(k pulumi.StringInput) FastTcpAppOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FastTcpApp {
		return vs[0].(map[string]*FastTcpApp)[vs[1].(string)]
	}).(FastTcpAppOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FastTcpAppInput)(nil)).Elem(), &FastTcpApp{})
	pulumi.RegisterInputType(reflect.TypeOf((*FastTcpAppArrayInput)(nil)).Elem(), FastTcpAppArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FastTcpAppMapInput)(nil)).Elem(), FastTcpAppMap{})
	pulumi.RegisterOutputType(FastTcpAppOutput{})
	pulumi.RegisterOutputType(FastTcpAppArrayOutput{})
	pulumi.RegisterOutputType(FastTcpAppMapOutput{})
}
